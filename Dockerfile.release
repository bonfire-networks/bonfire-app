ARG ALPINE_VERSION
ARG ELIXIR_DOCKER_IMAGE

#### STEP 1 - Build our app
FROM hexpm/elixir:${ELIXIR_DOCKER_IMAGE} as builder 

ARG FLAVOUR_PATH
ARG FORKS_TO_COPY_PATH

# necessary utils + dependencies for comeonin
RUN apk --update add tar curl git rust cargo npm yarn bash make gcc libc-dev openssl-dev 

ENV HOME=/opt/app/ TERM=xterm MIX_ENV=prod FLAVOUR_PATH=./
WORKDIR $HOME

# Cache elixir deps
COPY mix.exs mix.lock ./
COPY lib/mix ./lib/mix
# sometimes mix tries to read the config
RUN mkdir -p ./config 
COPY data/current_flavour/config/config_basics.exs ./config/config.exs

# get deps from hex.pm
COPY data/current_flavour/config/deps*hex ./config/ 
RUN mix do local.hex --force, local.rebar --force
RUN mix do deps.get --only prod
# RUN HEX_HTTP_CONCURRENCY=1 HEX_HTTP_TIMEOUT=120 mix do deps.get --only prod
# ^ useful in case of spotting connectivity

# Compile initial hex deps, only if we're not using forks (warning: this makes the assumption that no Bonfire extensions are coming from Hex. otherwise this should be done only after copying config)
RUN if [ "$FORKS_TO_COPY_PATH" = "data/null" ] ; then MIX_ENV=prod mix do deps.compile ; else echo "Skip" ; fi 

# add git deps (typically Bonfire extensions)
COPY data/current_flavour/config/deps*git ./config/

# fetch them because we need them for the non-configurable paths in config/deps_hooks.js
RUN mix do deps.get --only prod
# RUN HEX_HTTP_CONCURRENCY=1 HEX_HTTP_TIMEOUT=120 mix do deps.get --only prod

# we need config before compiling Bonfire extensions
COPY data/current_flavour/config/ ./config/

# Optionally include local forks
RUN if [ "$FORKS_TO_COPY_PATH" = "data/null" ] ; then rm ./config/deps*path ; else echo "Include locally forked extensions." ; fi 
COPY ${FORKS_TO_COPY_PATH} ./${FORKS_TO_COPY_PATH}

# Update Bonfire extensions to latest git version (mostly useful in CI, and temporary: eventually we want to rely on version numbers and lockfile)
# RUN mix do bonfire.deps.update

# Fetch git deps (should be after forks are copied and updates are fetched, in case a forked/updated extension specified any different deps)
RUN mix do deps.get --only prod

# Include translations
COPY priv/localisation/ priv/localisation/
# RUN ls -la priv/localisation/

COPY docs/*.md ./docs/

# Compile remaining deps
RUN MIX_ENV=prod mix do deps.compile

# JS package manager
# RUN npm install -g pnpm
# install JS deps
COPY js-deps-get.sh ./
# COPY assets/package.json ./assets/
# COPY assets/pnpm-lock.yaml ./assets/
# COPY assets/yarn.lock ./assets/
RUN chmod +x config/*.sh
RUN chmod +x ./*.sh
RUN sh config/deps.js.sh
# FIXME: should we be installing dev deps here?

# Update mime types
RUN MIX_ENV=prod mix do deps.clean --build mime

# Include migrations
COPY data/current_flavour/repo priv/repo

# bonfire-app code & assets 
COPY lib lib
# COPY assets assets
# RUN ls -la assets/static

# include an archive of the source code
COPY LICENSE ./
RUN mkdir -p apps/
RUN mkdir -p extensions/
RUN mkdir -p forks/
RUN mkdir -p priv/static/
# COPY priv/extras/ priv/extras/

# prepare static assets
COPY data/current_flavour/config/flavour_assets data/current_flavour/config/flavour_assets
RUN ls -la data/current_flavour/config/flavour_assets
COPY data/current_flavour/config/deps_hooks.js data/current_flavour/config/deps_hooks.js
RUN cd ./deps/bonfire_ui_common/assets && yarn && yarn build 
RUN MIX_ENV=prod CI=1 mix phx.digest
RUN ls -la priv/static
RUN ls -la priv/static/assets

RUN tar --exclude=*.env --exclude=.git --exclude=node_modules --exclude=priv/static/data --exclude=*/*/assets/static/data -czvf priv/static/source.tar.gz lib deps apps extensions forks config docs priv/repo priv/static mix.exs mix.lock LICENSE || echo "Could not prepare code archive"

# build final OTP release
RUN MIX_ENV=prod CI=1 mix release

##### STEP 2 - Prepare the server image ####
# From this line onwards, we're in a new image, which will be the image used in production
FROM alpine:${ALPINE_VERSION}

ENV APP_REVISION=${APP_VSN}-${APP_BUILD} 

# Essentials
RUN apk add --update --no-cache \
  mailcap \
  ca-certificates \
  openssh-client \
  openssl-dev \
  # ^ for HTTPS, etc
  git \ 
  build-base \ 
  # ^ required by tree_magic 
  tzdata \
  gettext \
  # ^ localisation
  imagemagick \
  vips-tools \
  poppler-utils \
  # ^ image resizing
  bash \
  curl 
  #^ misc

WORKDIR /opt/app

# copy app build
COPY --from=builder /opt/app/_build/prod/rel/bonfire /opt/app

# start
CMD ["./bin/bonfire", "start"]
