searchData={"items":[{"type":"module","doc":"Conceptually, a complete list of all permissions for everybody.\nIn practice, it's a partial specification, and anything not\nexplicitly granted is assumed to be denied.\n\nCan be reused to secure multiple objects, thus exists independently\nof any object.","title":"Bonfire.Data.AccessControl.Acl","ref":"Bonfire.Data.AccessControl.Acl.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Acl.changeset/2","ref":"Bonfire.Data.AccessControl.Acl.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Acl.delete/2","ref":"Bonfire.Data.AccessControl.Acl.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Acl.get/3","ref":"Bonfire.Data.AccessControl.Acl.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Acl.put/3","ref":"Bonfire.Data.AccessControl.Acl.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Acl.t/0","ref":"Bonfire.Data.AccessControl.Acl.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.AccessControl.Circle","ref":"Bonfire.Data.AccessControl.Circle.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Circle.changeset/2","ref":"Bonfire.Data.AccessControl.Circle.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Circle.delete/2","ref":"Bonfire.Data.AccessControl.Circle.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Circle.get/3","ref":"Bonfire.Data.AccessControl.Circle.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Circle.put/3","ref":"Bonfire.Data.AccessControl.Circle.html#put/3"},{"type":"module","doc":"An object is linked to one or more `Acl`s by the `Controlled` multimixin, which pairs an object ID with an ACL ID. Because it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined with `false` being prioritised.","title":"Bonfire.Data.AccessControl.Controlled","ref":"Bonfire.Data.AccessControl.Controlled.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Controlled.changeset/2","ref":"Bonfire.Data.AccessControl.Controlled.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Controlled.delete/2","ref":"Bonfire.Data.AccessControl.Controlled.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Controlled.get/3","ref":"Bonfire.Data.AccessControl.Controlled.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Controlled.put/3","ref":"Bonfire.Data.AccessControl.Controlled.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Controlled.t/0","ref":"Bonfire.Data.AccessControl.Controlled.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.AccessControl.Encircle","ref":"Bonfire.Data.AccessControl.Encircle.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Encircle.changeset/2","ref":"Bonfire.Data.AccessControl.Encircle.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Encircle.delete/2","ref":"Bonfire.Data.AccessControl.Encircle.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Encircle.get/3","ref":"Bonfire.Data.AccessControl.Encircle.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Encircle.put/3","ref":"Bonfire.Data.AccessControl.Encircle.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Encircle.t/0","ref":"Bonfire.Data.AccessControl.Encircle.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.AccessControl.Grant","ref":"Bonfire.Data.AccessControl.Grant.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Grant.changeset/2","ref":"Bonfire.Data.AccessControl.Grant.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Grant.delete/2","ref":"Bonfire.Data.AccessControl.Grant.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Grant.get/3","ref":"Bonfire.Data.AccessControl.Grant.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Grant.put/3","ref":"Bonfire.Data.AccessControl.Grant.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Grant.t/0","ref":"Bonfire.Data.AccessControl.Grant.html#t:t/0"},{"type":"module","doc":"A mixin for superpowers","title":"Bonfire.Data.AccessControl.InstanceAdmin","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.InstanceAdmin.changeset/3","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.InstanceAdmin.delete/2","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.InstanceAdmin.get/3","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.InstanceAdmin.put/3","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.InstanceAdmin.t/0","ref":"Bonfire.Data.AccessControl.InstanceAdmin.html#t:t/0"},{"type":"module","doc":"A marker that identifies special context-dependent semantics to the system.","title":"Bonfire.Data.AccessControl.Stereotyped","ref":"Bonfire.Data.AccessControl.Stereotyped.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Stereotyped.changeset/2","ref":"Bonfire.Data.AccessControl.Stereotyped.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Stereotyped.delete/2","ref":"Bonfire.Data.AccessControl.Stereotyped.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Stereotyped.get/3","ref":"Bonfire.Data.AccessControl.Stereotyped.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Stereotyped.put/3","ref":"Bonfire.Data.AccessControl.Stereotyped.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Stereotyped.t/0","ref":"Bonfire.Data.AccessControl.Stereotyped.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.AccessControl.Verb","ref":"Bonfire.Data.AccessControl.Verb.html"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Verb.changeset/2","ref":"Bonfire.Data.AccessControl.Verb.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Verb.delete/2","ref":"Bonfire.Data.AccessControl.Verb.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Verb.get/3","ref":"Bonfire.Data.AccessControl.Verb.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.AccessControl.Verb.put/3","ref":"Bonfire.Data.AccessControl.Verb.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.AccessControl.Verb.t/0","ref":"Bonfire.Data.AccessControl.Verb.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.ActivityPub.Actor","ref":"Bonfire.Data.ActivityPub.Actor.html"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Actor.changeset/2","ref":"Bonfire.Data.ActivityPub.Actor.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Actor.delete/2","ref":"Bonfire.Data.ActivityPub.Actor.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Actor.get/3","ref":"Bonfire.Data.ActivityPub.Actor.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Actor.put/3","ref":"Bonfire.Data.ActivityPub.Actor.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.ActivityPub.Actor.t/0","ref":"Bonfire.Data.ActivityPub.Actor.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html"},{"type":"macro","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration.create_actor_table/0","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#create_actor_table/0"},{"type":"macro","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration.create_actor_table/1","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#create_actor_table/1"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration.drop_actor_table/0","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#drop_actor_table/0"},{"type":"macro","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration.migrate_actor/0","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#migrate_actor/0"},{"type":"macro","doc":"","title":"Bonfire.Data.ActivityPub.Actor.Migration.migrate_actor/1","ref":"Bonfire.Data.ActivityPub.Actor.Migration.html#migrate_actor/1"},{"type":"module","doc":"Federated instances","title":"Bonfire.Data.ActivityPub.Peer","ref":"Bonfire.Data.ActivityPub.Peer.html"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peer.changeset/3","ref":"Bonfire.Data.ActivityPub.Peer.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peer.delete/2","ref":"Bonfire.Data.ActivityPub.Peer.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peer.get/3","ref":"Bonfire.Data.ActivityPub.Peer.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peer.put/3","ref":"Bonfire.Data.ActivityPub.Peer.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.ActivityPub.Peer.t/0","ref":"Bonfire.Data.ActivityPub.Peer.html#t:t/0"},{"type":"module","doc":"Federated actors or objects","title":"Bonfire.Data.ActivityPub.Peered","ref":"Bonfire.Data.ActivityPub.Peered.html"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peered.changeset/3","ref":"Bonfire.Data.ActivityPub.Peered.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peered.delete/2","ref":"Bonfire.Data.ActivityPub.Peered.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peered.get/3","ref":"Bonfire.Data.ActivityPub.Peered.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.ActivityPub.Peered.put/3","ref":"Bonfire.Data.ActivityPub.Peered.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.ActivityPub.Peered.t/0","ref":"Bonfire.Data.ActivityPub.Peered.html#t:t/0"},{"type":"module","doc":"A reusable table to link child or related items and also rank sibling items.\n\nUsage (for global ranking, otherwise you should specify scope):\n```\n{:ok, first} = Bonfire.Data.Assort.Ranked.changeset(%{item_id: \"01FGTH48ZZD08ADBHQ260KYJHW\"}) |> repo().insert\nsecond = Bonfire.Data.Assort.Ranked.changeset(%{item_id: \"01FGTH0N3YPBS5MNNAEAEVV54J\"}) |> repo().insert\n\nimport Ecto.Query\nBonfire.Data.Assort.Ranked |> order_by(:rank) |> repo().all\n\nfirst |> Bonfire.Data.Assort.Ranked.changeset(%{rank_set: :last}) |> repo().update\n\nBonfire.Data.Assort.Ranked |> order_by(:rank) |> repo().all\n```","title":"Bonfire.Data.Assort.Ranked","ref":"Bonfire.Data.Assort.Ranked.html"},{"type":"function","doc":"","title":"Bonfire.Data.Assort.Ranked.changeset/2","ref":"Bonfire.Data.Assort.Ranked.html#changeset/2"},{"type":"module","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration","ref":"Bonfire.Data.Assort.Ranked.Migration.html"},{"type":"macro","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.create_ranked_table/0","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_ranked_table/0"},{"type":"macro","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.create_ranked_table/1","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_ranked_table/1"},{"type":"macro","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.create_unique_index/1","ref":"Bonfire.Data.Assort.Ranked.Migration.html#create_unique_index/1"},{"type":"function","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.drop_ranked_table/0","ref":"Bonfire.Data.Assort.Ranked.Migration.html#drop_ranked_table/0"},{"type":"function","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.drop_unique_index/1","ref":"Bonfire.Data.Assort.Ranked.Migration.html#drop_unique_index/1"},{"type":"macro","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.migrate_ranked/0","ref":"Bonfire.Data.Assort.Ranked.Migration.html#migrate_ranked/0"},{"type":"macro","doc":"","title":"Bonfire.Data.Assort.Ranked.Migration.migrate_ranked/1","ref":"Bonfire.Data.Assort.Ranked.Migration.html#migrate_ranked/1"},{"type":"module","doc":"","title":"Bonfire.Data.Edges.Edge","ref":"Bonfire.Data.Edges.Edge.html"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.Edge.changeset/2","ref":"Bonfire.Data.Edges.Edge.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.Edge.delete/2","ref":"Bonfire.Data.Edges.Edge.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.Edge.get/3","ref":"Bonfire.Data.Edges.Edge.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.Edge.put/3","ref":"Bonfire.Data.Edges.Edge.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Edges.Edge.t/0","ref":"Bonfire.Data.Edges.Edge.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Edges.EdgeTotal","ref":"Bonfire.Data.Edges.EdgeTotal.html"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.EdgeTotal.changeset/2","ref":"Bonfire.Data.Edges.EdgeTotal.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.EdgeTotal.delete/2","ref":"Bonfire.Data.Edges.EdgeTotal.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.EdgeTotal.get/3","ref":"Bonfire.Data.Edges.EdgeTotal.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Edges.EdgeTotal.put/3","ref":"Bonfire.Data.Edges.EdgeTotal.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Edges.EdgeTotal.t/0","ref":"Bonfire.Data.Edges.EdgeTotal.html#t:t/0"},{"type":"module","doc":"An account is an identity for authentication purposes. An account\nhas one or more credentials with which it may identify.","title":"Bonfire.Data.Identity.Account","ref":"Bonfire.Data.Identity.Account.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Account.changeset/2","ref":"Bonfire.Data.Identity.Account.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Account.delete/2","ref":"Bonfire.Data.Identity.Account.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Account.get/3","ref":"Bonfire.Data.Identity.Account.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Account.put/3","ref":"Bonfire.Data.Identity.Account.html#put/3"},{"type":"module","doc":"A mixin for an account ID, indicating ownership\n\nPrimarily used for Users.","title":"Bonfire.Data.Identity.Accounted","ref":"Bonfire.Data.Identity.Accounted.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Accounted.changeset/2","ref":"Bonfire.Data.Identity.Accounted.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Accounted.delete/2","ref":"Bonfire.Data.Identity.Accounted.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Accounted.get/3","ref":"Bonfire.Data.Identity.Accounted.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Accounted.put/3","ref":"Bonfire.Data.Identity.Accounted.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Accounted.t/0","ref":"Bonfire.Data.Identity.Accounted.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.Alias","ref":"Bonfire.Data.Identity.Alias.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Alias.changeset/2","ref":"Bonfire.Data.Identity.Alias.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Alias.delete/2","ref":"Bonfire.Data.Identity.Alias.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Alias.get/3","ref":"Bonfire.Data.Identity.Alias.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Alias.put/3","ref":"Bonfire.Data.Identity.Alias.html#put/3"},{"type":"module","doc":"A mixin that stores a second factor secret to authenticate an account.","title":"Bonfire.Data.Identity.AuthSecondFactor","ref":"Bonfire.Data.Identity.AuthSecondFactor.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.changeset/2","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.delete/2","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.get/3","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.put/3","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.valid_totp?/2","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#valid_totp?/2"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.AuthSecondFactor.t/0","ref":"Bonfire.Data.Identity.AuthSecondFactor.html#t:t/0"},{"type":"module","doc":"A recursive view of all entities taken care of by their root entities.\n\nReally, really do not query this without providing a branch_id.","title":"Bonfire.Data.Identity.CareClosure","ref":"Bonfire.Data.Identity.CareClosure.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.CareClosure.by_branch/1","ref":"Bonfire.Data.Identity.CareClosure.html#by_branch/1"},{"type":"module","doc":"The entity responsible for something. In practice, it means that\nsomething is deleted when its caretaker is deleted.\n\nYou can think of it as being like the creator, except:\na) You can give it away.\nb) Objects can take care of arbitrary objects, such as e.g. custom\n   ACLs created to permit people mentioned special permissions","title":"Bonfire.Data.Identity.Caretaker","ref":"Bonfire.Data.Identity.Caretaker.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Caretaker.changeset/3","ref":"Bonfire.Data.Identity.Caretaker.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Caretaker.delete/2","ref":"Bonfire.Data.Identity.Caretaker.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Caretaker.get/3","ref":"Bonfire.Data.Identity.Caretaker.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Caretaker.put/3","ref":"Bonfire.Data.Identity.Caretaker.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Caretaker.t/0","ref":"Bonfire.Data.Identity.Caretaker.html#t:t/0"},{"type":"module","doc":"A username mixin that denies reuse of the same or similar usernames\neven when the username has been deleted.","title":"Bonfire.Data.Identity.Character","ref":"Bonfire.Data.Identity.Character.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.changeset/3","ref":"Bonfire.Data.Identity.Character.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.changeset_basic/2","ref":"Bonfire.Data.Identity.Character.html#changeset_basic/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.delete/2","ref":"Bonfire.Data.Identity.Character.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.get/3","ref":"Bonfire.Data.Identity.Character.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.hash/1","ref":"Bonfire.Data.Identity.Character.html#hash/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.put/3","ref":"Bonfire.Data.Identity.Character.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Character.uniform/1","ref":"Bonfire.Data.Identity.Character.html#uniform/1"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Character.t/0","ref":"Bonfire.Data.Identity.Character.html#t:t/0"},{"type":"module","doc":"A Mixin that provides a password for local login.","title":"Bonfire.Data.Identity.Credential","ref":"Bonfire.Data.Identity.Credential.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.changeset/2","ref":"Bonfire.Data.Identity.Credential.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.check_password/2","ref":"Bonfire.Data.Identity.Credential.html#check_password/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.confirmation_changeset/2","ref":"Bonfire.Data.Identity.Credential.html#confirmation_changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.delete/2","ref":"Bonfire.Data.Identity.Credential.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.dummy_check/0","ref":"Bonfire.Data.Identity.Credential.html#dummy_check/0"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.get/3","ref":"Bonfire.Data.Identity.Credential.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.hash_password/1","ref":"Bonfire.Data.Identity.Credential.html#hash_password/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.hasher_module/0","ref":"Bonfire.Data.Identity.Credential.html#hasher_module/0"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.put/3","ref":"Bonfire.Data.Identity.Credential.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Credential.t/0","ref":"Bonfire.Data.Identity.Credential.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.Credential.Migration","ref":"Bonfire.Data.Identity.Credential.Migration.html"},{"type":"macro","doc":"","title":"Bonfire.Data.Identity.Credential.Migration.create_credential_table/0","ref":"Bonfire.Data.Identity.Credential.Migration.html#create_credential_table/0"},{"type":"macro","doc":"","title":"Bonfire.Data.Identity.Credential.Migration.create_credential_table/1","ref":"Bonfire.Data.Identity.Credential.Migration.html#create_credential_table/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Credential.Migration.drop_credential_table/0","ref":"Bonfire.Data.Identity.Credential.Migration.html#drop_credential_table/0"},{"type":"macro","doc":"","title":"Bonfire.Data.Identity.Credential.Migration.migrate_credential/0","ref":"Bonfire.Data.Identity.Credential.Migration.html#migrate_credential/0"},{"type":"macro","doc":"","title":"Bonfire.Data.Identity.Credential.Migration.migrate_credential/1","ref":"Bonfire.Data.Identity.Credential.Migration.html#migrate_credential/1"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.Email","ref":"Bonfire.Data.Identity.Email.html"},{"type":"function","doc":"Options:\n  email_regex: Regexp.t (default very minimal validation)\n  must_confirm?: bool (default true)","title":"Bonfire.Data.Identity.Email.changeset/3","ref":"Bonfire.Data.Identity.Email.html#changeset/3"},{"type":"function","doc":"Changeset function. Marks the user's email as confirmed and removes\ntheir confirmation token.","title":"Bonfire.Data.Identity.Email.confirm/1","ref":"Bonfire.Data.Identity.Email.html#confirm/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Email.delete/2","ref":"Bonfire.Data.Identity.Email.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Email.get/3","ref":"Bonfire.Data.Identity.Email.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Email.may_confirm?/2","ref":"Bonfire.Data.Identity.Email.html#may_confirm?/2"},{"type":"function","doc":"Checks whether the user should be able to request a confirm email","title":"Bonfire.Data.Identity.Email.may_request_confirm_email?/2","ref":"Bonfire.Data.Identity.Email.html#may_request_confirm_email?/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Email.put/3","ref":"Bonfire.Data.Identity.Email.html#put/3"},{"type":"function","doc":"Changeset function. Unconditionally sets the user as unconfirmed,\ngenerates a confirmation token and puts an expiry on it determined\nby the `:confirm_duration` config key (default one day).","title":"Bonfire.Data.Identity.Email.put_token/1","ref":"Bonfire.Data.Identity.Email.html#put_token/1"},{"type":"function","doc":"Checks whether the user should request a new confirmation token or refresh it","title":"Bonfire.Data.Identity.Email.should_request_or_refresh?/2","ref":"Bonfire.Data.Identity.Email.html#should_request_or_refresh?/2"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Email.t/0","ref":"Bonfire.Data.Identity.Email.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.ExtraInfo","ref":"Bonfire.Data.Identity.ExtraInfo.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.ExtraInfo.changeset/3","ref":"Bonfire.Data.Identity.ExtraInfo.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.ExtraInfo.delete/2","ref":"Bonfire.Data.Identity.ExtraInfo.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.ExtraInfo.get/3","ref":"Bonfire.Data.Identity.ExtraInfo.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.ExtraInfo.put/3","ref":"Bonfire.Data.Identity.ExtraInfo.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.ExtraInfo.t/0","ref":"Bonfire.Data.Identity.ExtraInfo.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.Named","ref":"Bonfire.Data.Identity.Named.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Named.changeset/3","ref":"Bonfire.Data.Identity.Named.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Named.delete/2","ref":"Bonfire.Data.Identity.Named.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Named.get/3","ref":"Bonfire.Data.Identity.Named.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Named.normalize_name/1","ref":"Bonfire.Data.Identity.Named.html#normalize_name/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Named.put/3","ref":"Bonfire.Data.Identity.Named.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Named.t/0","ref":"Bonfire.Data.Identity.Named.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Identity.Self","ref":"Bonfire.Data.Identity.Self.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Self.changeset/2","ref":"Bonfire.Data.Identity.Self.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Self.delete/2","ref":"Bonfire.Data.Identity.Self.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Self.get/3","ref":"Bonfire.Data.Identity.Self.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Self.put/3","ref":"Bonfire.Data.Identity.Self.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Self.t/0","ref":"Bonfire.Data.Identity.Self.html#t:t/0"},{"type":"module","doc":"A mixin that stores settings (of the instance, account, user, etc) as an Erlang Term (typically a map or keyword list) encoded to binary.","title":"Bonfire.Data.Identity.Settings","ref":"Bonfire.Data.Identity.Settings.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Settings.changeset/3","ref":"Bonfire.Data.Identity.Settings.html#changeset/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Settings.delete/2","ref":"Bonfire.Data.Identity.Settings.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Settings.get/3","ref":"Bonfire.Data.Identity.Settings.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.Settings.put/3","ref":"Bonfire.Data.Identity.Settings.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Identity.Settings.t/0","ref":"Bonfire.Data.Identity.Settings.html#t:t/0"},{"type":"module","doc":"A custom Ecto type (based on `EctoSparkles.JSONSerdeData`) for handling the serialization of arbitrary data types stored as JSON data in the database. Requires the underlying DB field to be a map / JSONB field.","title":"Bonfire.Data.Identity.SettingsJSONSerdeData","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.cast/1","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#cast/1"},{"type":"function","doc":"Provides custom casting rules for params. Nothing changes here.\nWe only need to handle deserialization.","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.cast/2","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#cast/2"},{"type":"function","doc":"Converting the data structure to a JSON binary for storage.","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.dump/1","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#dump/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.embed_as/1","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#embed_as/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.equal?/2","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#equal?/2"},{"type":"function","doc":"Convert the JSON binary value from the database back to the desired term.","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.load/1","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#load/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.SettingsJSONSerdeData.type/0","ref":"Bonfire.Data.Identity.SettingsJSONSerdeData.html#type/0"},{"type":"module","doc":"A persona. A person (account) may have more than one user, but this\nis not exposed publicly (except to local instance administrators),\nso it is as if they are different people.","title":"Bonfire.Data.Identity.User","ref":"Bonfire.Data.Identity.User.html"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.User.changeset/2","ref":"Bonfire.Data.Identity.User.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.User.delete/2","ref":"Bonfire.Data.Identity.User.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.User.get/3","ref":"Bonfire.Data.Identity.User.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.User.maybe_redact/1","ref":"Bonfire.Data.Identity.User.html#maybe_redact/1"},{"type":"function","doc":"","title":"Bonfire.Data.Identity.User.put/3","ref":"Bonfire.Data.Identity.User.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.APActivity","ref":"Bonfire.Data.Social.APActivity.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.APActivity.changeset/2","ref":"Bonfire.Data.Social.APActivity.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.APActivity.delete/2","ref":"Bonfire.Data.Social.APActivity.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.APActivity.get/3","ref":"Bonfire.Data.Social.APActivity.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.APActivity.put/3","ref":"Bonfire.Data.Social.APActivity.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.APActivity.t/0","ref":"Bonfire.Data.Social.APActivity.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Activity","ref":"Bonfire.Data.Social.Activity.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Activity.changeset/2","ref":"Bonfire.Data.Social.Activity.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Activity.delete/2","ref":"Bonfire.Data.Social.Activity.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Activity.get/3","ref":"Bonfire.Data.Social.Activity.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Activity.put/3","ref":"Bonfire.Data.Social.Activity.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Activity.t/0","ref":"Bonfire.Data.Social.Activity.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Bookmark","ref":"Bonfire.Data.Social.Bookmark.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Bookmark.changeset/2","ref":"Bonfire.Data.Social.Bookmark.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Bookmark.delete/2","ref":"Bonfire.Data.Social.Bookmark.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Bookmark.get/3","ref":"Bonfire.Data.Social.Bookmark.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Bookmark.put/3","ref":"Bonfire.Data.Social.Bookmark.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Boost","ref":"Bonfire.Data.Social.Boost.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Boost.changeset/2","ref":"Bonfire.Data.Social.Boost.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Boost.delete/2","ref":"Bonfire.Data.Social.Boost.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Boost.get/3","ref":"Bonfire.Data.Social.Boost.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Boost.put/3","ref":"Bonfire.Data.Social.Boost.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Created","ref":"Bonfire.Data.Social.Created.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Created.changeset/2","ref":"Bonfire.Data.Social.Created.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Created.delete/2","ref":"Bonfire.Data.Social.Created.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Created.get/3","ref":"Bonfire.Data.Social.Created.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Created.put/3","ref":"Bonfire.Data.Social.Created.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Created.t/0","ref":"Bonfire.Data.Social.Created.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Emoji","ref":"Bonfire.Data.Social.Emoji.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Emoji.changeset/2","ref":"Bonfire.Data.Social.Emoji.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Emoji.delete/2","ref":"Bonfire.Data.Social.Emoji.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Emoji.get/3","ref":"Bonfire.Data.Social.Emoji.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Emoji.put/3","ref":"Bonfire.Data.Social.Emoji.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Feed","ref":"Bonfire.Data.Social.Feed.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Feed.changeset/2","ref":"Bonfire.Data.Social.Feed.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Feed.delete/2","ref":"Bonfire.Data.Social.Feed.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Feed.get/3","ref":"Bonfire.Data.Social.Feed.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Feed.put/3","ref":"Bonfire.Data.Social.Feed.html#put/3"},{"type":"module","doc":"A multimixin for an activity/object appearing in a feed.\n\nA quite interesting thing about this model is that `feed`\nreferences `Pointer`, so it isn't only things of type `Feed` that it can\nappear in, they are just an obvious choice.","title":"Bonfire.Data.Social.FeedPublish","ref":"Bonfire.Data.Social.FeedPublish.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.FeedPublish.changeset/2","ref":"Bonfire.Data.Social.FeedPublish.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.FeedPublish.delete/2","ref":"Bonfire.Data.Social.FeedPublish.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.FeedPublish.get/3","ref":"Bonfire.Data.Social.FeedPublish.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.FeedPublish.put/3","ref":"Bonfire.Data.Social.FeedPublish.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.FeedPublish.t/0","ref":"Bonfire.Data.Social.FeedPublish.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Flag","ref":"Bonfire.Data.Social.Flag.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Flag.changeset/2","ref":"Bonfire.Data.Social.Flag.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Flag.delete/2","ref":"Bonfire.Data.Social.Flag.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Flag.get/3","ref":"Bonfire.Data.Social.Flag.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Flag.put/3","ref":"Bonfire.Data.Social.Flag.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Follow","ref":"Bonfire.Data.Social.Follow.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Follow.changeset/2","ref":"Bonfire.Data.Social.Follow.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Follow.delete/2","ref":"Bonfire.Data.Social.Follow.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Follow.get/3","ref":"Bonfire.Data.Social.Follow.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Follow.put/3","ref":"Bonfire.Data.Social.Follow.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Like","ref":"Bonfire.Data.Social.Like.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Like.changeset/2","ref":"Bonfire.Data.Social.Like.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Like.delete/2","ref":"Bonfire.Data.Social.Like.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Like.get/3","ref":"Bonfire.Data.Social.Like.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Like.put/3","ref":"Bonfire.Data.Social.Like.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Message","ref":"Bonfire.Data.Social.Message.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Message.changeset/2","ref":"Bonfire.Data.Social.Message.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Message.delete/2","ref":"Bonfire.Data.Social.Message.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Message.get/3","ref":"Bonfire.Data.Social.Message.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Message.put/3","ref":"Bonfire.Data.Social.Message.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Pin","ref":"Bonfire.Data.Social.Pin.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Pin.changeset/2","ref":"Bonfire.Data.Social.Pin.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Pin.delete/2","ref":"Bonfire.Data.Social.Pin.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Pin.get/3","ref":"Bonfire.Data.Social.Pin.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Pin.put/3","ref":"Bonfire.Data.Social.Pin.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Post","ref":"Bonfire.Data.Social.Post.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Post.changeset/2","ref":"Bonfire.Data.Social.Post.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Post.delete/2","ref":"Bonfire.Data.Social.Post.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Post.get/3","ref":"Bonfire.Data.Social.Post.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Post.put/3","ref":"Bonfire.Data.Social.Post.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.PostContent","ref":"Bonfire.Data.Social.PostContent.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.PostContent.changeset/2","ref":"Bonfire.Data.Social.PostContent.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.PostContent.delete/2","ref":"Bonfire.Data.Social.PostContent.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.PostContent.get/3","ref":"Bonfire.Data.Social.PostContent.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.PostContent.put/3","ref":"Bonfire.Data.Social.PostContent.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.PostContent.t/0","ref":"Bonfire.Data.Social.PostContent.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Profile","ref":"Bonfire.Data.Social.Profile.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Profile.changeset/2","ref":"Bonfire.Data.Social.Profile.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Profile.delete/2","ref":"Bonfire.Data.Social.Profile.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Profile.get/3","ref":"Bonfire.Data.Social.Profile.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Profile.put/3","ref":"Bonfire.Data.Social.Profile.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Profile.t/0","ref":"Bonfire.Data.Social.Profile.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Replied","ref":"Bonfire.Data.Social.Replied.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.ancestor_ids/1","ref":"Bonfire.Data.Social.Replied.html#ancestor_ids/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.ancestors/1","ref":"Bonfire.Data.Social.Replied.html#ancestors/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.arrange/2","ref":"Bonfire.Data.Social.Replied.html#arrange/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.build_child/1","ref":"Bonfire.Data.Social.Replied.html#build_child/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.changeset/2","ref":"Bonfire.Data.Social.Replied.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.children/1","ref":"Bonfire.Data.Social.Replied.html#children/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.delete/2","ref":"Bonfire.Data.Social.Replied.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.depth/1","ref":"Bonfire.Data.Social.Replied.html#depth/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.descendants/1","ref":"Bonfire.Data.Social.Replied.html#descendants/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.get/3","ref":"Bonfire.Data.Social.Replied.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.make_child_of/2","ref":"Bonfire.Data.Social.Replied.html#make_child_of/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.parent/1","ref":"Bonfire.Data.Social.Replied.html#parent/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.parent_id/1","ref":"Bonfire.Data.Social.Replied.html#parent_id/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.path/1","ref":"Bonfire.Data.Social.Replied.html#path/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.path_ids/1","ref":"Bonfire.Data.Social.Replied.html#path_ids/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.put/3","ref":"Bonfire.Data.Social.Replied.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.root/1","ref":"Bonfire.Data.Social.Replied.html#root/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.root?/1","ref":"Bonfire.Data.Social.Replied.html#root?/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.root_id/1","ref":"Bonfire.Data.Social.Replied.html#root_id/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.siblings/1","ref":"Bonfire.Data.Social.Replied.html#siblings/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.subtree/1","ref":"Bonfire.Data.Social.Replied.html#subtree/1"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Replied.where_depth/2","ref":"Bonfire.Data.Social.Replied.html#where_depth/2"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Replied.t/0","ref":"Bonfire.Data.Social.Replied.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Request","ref":"Bonfire.Data.Social.Request.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Request.changeset/2","ref":"Bonfire.Data.Social.Request.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Request.delete/2","ref":"Bonfire.Data.Social.Request.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Request.get/3","ref":"Bonfire.Data.Social.Request.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Request.put/3","ref":"Bonfire.Data.Social.Request.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Request.t/0","ref":"Bonfire.Data.Social.Request.html#t:t/0"},{"type":"module","doc":"Track seen/unseen (similar to read/unread, but only indicates that it was displayed in a feed or other listing for the user, not that they actually read it) status of things (usually an `Activity`)","title":"Bonfire.Data.Social.Seen","ref":"Bonfire.Data.Social.Seen.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Seen.changeset/2","ref":"Bonfire.Data.Social.Seen.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Seen.delete/2","ref":"Bonfire.Data.Social.Seen.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Seen.get/3","ref":"Bonfire.Data.Social.Seen.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Seen.put/3","ref":"Bonfire.Data.Social.Seen.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Data.Social.Sensitive","ref":"Bonfire.Data.Social.Sensitive.html"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Sensitive.changeset/2","ref":"Bonfire.Data.Social.Sensitive.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Sensitive.delete/2","ref":"Bonfire.Data.Social.Sensitive.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Sensitive.get/3","ref":"Bonfire.Data.Social.Sensitive.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Data.Social.Sensitive.put/3","ref":"Bonfire.Data.Social.Sensitive.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Data.Social.Sensitive.t/0","ref":"Bonfire.Data.Social.Sensitive.html#t:t/0"},{"type":"module","doc":"A template for creating custom extensions for [Bonfire](https://bonfire.cafe/)","title":"Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html"},{"type":"module","doc":"- Clone the repository on your `/extensions` folder\n```\ncd extensions\ngit clone https://github.com/bonfire-networks/bonfire_ui_boundaries.git {your-extension-name-here}\ncd {your-extension-name-here} \n```\n- Rename all the modules names to match your extension name:\n    - Find & replace Bonfire.UI.Boundaries -> Bonfire.YourExtensionName \n    - Find & replace bonfire_ui_boundaries -> bonfire_your_extension_name\n- Rename the `bonfire_ui_boundaries.exs` config file to match your extension name `bonfire_your_extension_name.exs`\n- Add paths to the router if you need it. If you add paths you will need to include the route module on [bonfire-app router module](https://github.com/bonfire-networks/bonfire-app/blob/main/lib/web/router.ex#L51) \n- Add extension specific Fake functions\n- Add extension specific migrations\n- Add extension deps to deps.git and/or deps.hex \n- Delete the bonfire extension template git history and initiate a new .git \n    ```\n    rm -rf .git\n    git init    \n    ```\n- Create your empty extension repository on your preferred platform\n- Push your local changes\n    ```\n      git add .\n      git commit -m \"first commit\"\n      git branch -M main\n      git remote add origin {your-remote-repository}\n      git push -u origin main\n    ```\n- Add the extension on your bonfire deps.path to include it in your local development\n- Add `use_if_enabled(Bonfire.UI.Boundaries.Routes)` in your app's `Router` module\n- Add the extension on deps.git also (specifying the branch name) to allow others that do not have it in their fork to use it\n- Write a meaningful readme\n- TADA 🔥!","title":"How to use it - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#module-how-to-use-it"},{"type":"module","doc":"> **Warning**\n> The following pattern is likely to change in the coming period.\n\nEach extension can specify it's own navbar in a quite flexible way, leveraging on 2 macro: `declare_extension` and `declare_nav_link`.\n\n\n- On your extension homepage call the `declare_extension` macro, specifying the extension name, its icon (that will be mostly used to list the extension with the other active ones) and the default_nav.\n\n```\ndeclare_extension(\n      \"ExtensionTemplate\",\n      icon: \"bi:app\",\n      default_nav: [\n        Bonfire.UI.Boundaries.HomeLive,\n        Bonfire.UI.Boundaries.AboutLive\n      ])\n```\n\n- The views you will include in the `default_nav` section, will be the ones that will be shown on the navigation sidebar. \n\n- The last step is to call `declare_nav_link` on each of those view/components already specified in declare_extension. \n\n```\ndeclare_nav_link(l(\"About\"),\n    page: \"About\",\n    href: \"/bonfire_ui_boundaries/about\",\n    icon: \"typcn:info-large\"\n  )\n```","title":"Add your navigation - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#module-add-your-navigation"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.UI.Boundaries.repo/0","ref":"Bonfire.UI.Boundaries.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.UI.Boundaries.ExcludeBoundaries","ref":"Bonfire.UI.Boundaries.ExcludeBoundaries.html"},{"type":"function","doc":"","title":"Bonfire.UI.Boundaries.ExcludeBoundaries.handle_event/3","ref":"Bonfire.UI.Boundaries.ExcludeBoundaries.html#handle_event/3"},{"type":"module","doc":"","title":"Bonfire.UI.Boundaries.Fake","ref":"Bonfire.UI.Boundaries.Fake.html"},{"type":"module","doc":"","title":"Bonfire.UI.Boundaries.Routes","ref":"Bonfire.UI.Boundaries.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Boundaries.RuntimeConfig","ref":"Bonfire.UI.Boundaries.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Boundaries.RuntimeConfig.config/0","ref":"Bonfire.UI.Boundaries.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Boundaries.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Boundaries.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"A library of common utils and helpers used across Bonfire extensions\n\n- Many common functions for web UIs \n- Common and generic re-usable components\n- Etc","title":"Bonfire.UI.Common","ref":"Bonfire.UI.Common.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.UI.Common","ref":"Bonfire.UI.Common.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Common","ref":"Bonfire.UI.Common.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_error/3","ref":"Bonfire.UI.Common.html#assign_error/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_flash/5","ref":"Bonfire.UI.Common.html#assign_flash/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_generic/2","ref":"Bonfire.UI.Common.html#assign_generic/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_generic/3","ref":"Bonfire.UI.Common.html#assign_generic/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_generic_global/2","ref":"Bonfire.UI.Common.html#assign_generic_global/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_global/2","ref":"Bonfire.UI.Common.html#assign_global/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assign_global/3","ref":"Bonfire.UI.Common.html#assign_global/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns/1","ref":"Bonfire.UI.Common.html#assigns/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns_clean/1","ref":"Bonfire.UI.Common.html#assigns_clean/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns_merge/2","ref":"Bonfire.UI.Common.html#assigns_merge/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns_merge/3","ref":"Bonfire.UI.Common.html#assigns_merge/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns_minimal/1","ref":"Bonfire.UI.Common.html#assigns_minimal/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.assigns_subscribe/2","ref":"Bonfire.UI.Common.html#assigns_subscribe/2"},{"type":"function","doc":"Like `update_many_async/3`, but to run several update/preload functions in parallel","title":"Bonfire.UI.Common.batch_update_many_async/3","ref":"Bonfire.UI.Common.html#batch_update_many_async/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.batch_update_many_async/4","ref":"Bonfire.UI.Common.html#batch_update_many_async/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.can?/4","ref":"Bonfire.UI.Common.html#can?/4"},{"type":"function","doc":"Warning: this will set assigns for any/all users who subscribe to them. You want to `cast_self/2` instead if dealing with user-specific actions or private data.","title":"Bonfire.UI.Common.cast_public/2","ref":"Bonfire.UI.Common.html#cast_public/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.cast_self/2","ref":"Bonfire.UI.Common.html#cast_self/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.component_data/1","ref":"Bonfire.UI.Common.html#component_data/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.component_props/1","ref":"Bonfire.UI.Common.html#component_props/1"},{"type":"function","doc":"copies the `go` param into a query string, if any","title":"Bonfire.UI.Common.copy_go/1","ref":"Bonfire.UI.Common.html#copy_go/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.current_url/3","ref":"Bonfire.UI.Common.html#current_url/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.current_user_or_remote_interaction/3","ref":"Bonfire.UI.Common.html#current_user_or_remote_interaction/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.declared_extension/0","ref":"Bonfire.UI.Common.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.filename_for_module_template/1","ref":"Bonfire.UI.Common.html#filename_for_module_template/1"},{"type":"function","doc":"Generate a query string adding a `go` redirection path to the URI (for redirecting somewhere after auth flows).\nIt is recommended to use `set_go_after/2` where possible instead.","title":"Bonfire.UI.Common.go_query/1","ref":"Bonfire.UI.Common.html#go_query/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.hero_icons_list/0","ref":"Bonfire.UI.Common.html#hero_icons_list/0"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.live_aliases/5","ref":"Bonfire.UI.Common.html#live_aliases/5"},{"type":"function","doc":"Special LiveView helper function which allows loading LiveComponents in regular Phoenix views: `live_render_component(@conn, MyLiveComponent)`\n\nTODO: deduplicate if same as `render_inline`","title":"Bonfire.UI.Common.live_render_component/2","ref":"Bonfire.UI.Common.html#live_render_component/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.live_render_with_conn/2","ref":"Bonfire.UI.Common.html#live_render_with_conn/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.live_upload_files/5","ref":"Bonfire.UI.Common.html#live_upload_files/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.markdown/1","ref":"Bonfire.UI.Common.html#markdown/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_apply_or_ret/3","ref":"Bonfire.UI.Common.html#maybe_apply_or_ret/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_assign/3","ref":"Bonfire.UI.Common.html#maybe_assign/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_assign_context/2","ref":"Bonfire.UI.Common.html#maybe_assign_context/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_component/2","ref":"Bonfire.UI.Common.html#maybe_component/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_consume_uploaded_entries/3","ref":"Bonfire.UI.Common.html#maybe_consume_uploaded_entries/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_consume_uploaded_entry/3","ref":"Bonfire.UI.Common.html#maybe_consume_uploaded_entry/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_cute_gif/0","ref":"Bonfire.UI.Common.html#maybe_cute_gif/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_last_sentry_event_id/0","ref":"Bonfire.UI.Common.html#maybe_last_sentry_event_id/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_push_event/3","ref":"Bonfire.UI.Common.html#maybe_push_event/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.maybe_send_update/4","ref":"Bonfire.UI.Common.html#maybe_send_update/4"},{"type":"function","doc":"Inserts one or many items in an existing stream.\nSee `Phoenix.LiveView.stream_insert/4` for opts.","title":"Bonfire.UI.Common.maybe_stream_insert/4","ref":"Bonfire.UI.Common.html#maybe_stream_insert/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.module_default_assigns/1","ref":"Bonfire.UI.Common.html#module_default_assigns/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.opts_for_update_many_async/2","ref":"Bonfire.UI.Common.html#opts_for_update_many_async/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.patch_to/3","ref":"Bonfire.UI.Common.html#patch_to/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.path_fallback/2","ref":"Bonfire.UI.Common.html#path_fallback/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.random_dom_id/0","ref":"Bonfire.UI.Common.html#random_dom_id/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.redirect_self/1","ref":"Bonfire.UI.Common.html#redirect_self/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.redirect_to/3","ref":"Bonfire.UI.Common.html#redirect_to/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.redirect_to_previous_go/4","ref":"Bonfire.UI.Common.html#redirect_to_previous_go/4"},{"type":"macro","doc":"Renders a HEEx template inline in a controller.","title":"Bonfire.UI.Common.render_inline/2","ref":"Bonfire.UI.Common.html#render_inline/2"},{"type":"macro","doc":"use Bonfire.UI.Common.Web, :controller\n    use Phoenix.Component\n\n    def index(conn, _) do\n      render_inline conn, ~H\" <%= @current_user.name %> \"\n    end","title":"Example - Bonfire.UI.Common.render_inline/2","ref":"Bonfire.UI.Common.html#render_inline/2-example"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.render_sface_or_native/1","ref":"Bonfire.UI.Common.html#render_sface_or_native/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.rich/2","ref":"Bonfire.UI.Common.html#rich/2"},{"type":"function","doc":"Subscribe to assigns targeted at the current account/user","title":"Bonfire.UI.Common.self_subscribe/2","ref":"Bonfire.UI.Common.html#self_subscribe/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.send_self/2","ref":"Bonfire.UI.Common.html#send_self/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.send_self_global/2","ref":"Bonfire.UI.Common.html#send_self_global/2"},{"type":"function","doc":"Save a `go` redirection path in the session (for redirecting somewhere after auth flows)","title":"Bonfire.UI.Common.set_go_after/2","ref":"Bonfire.UI.Common.html#set_go_after/2"},{"type":"function","doc":"Checks if the socket is connected.","title":"Bonfire.UI.Common.socket_connected?/1","ref":"Bonfire.UI.Common.html#socket_connected?/1"},{"type":"function","doc":"iex> socket_connected?(%{socket_connected?: true})\n    true\n\n    iex> socket_connected?(%{socket_connected?: false})\n    false\n\n    iex> socket_connected?(%{__context__: %{socket_connected?: true}})\n    true\n\n    iex> socket_connected?(%Phoenix.LiveView.Socket{transport_pid: 1})\n    true\n\n    iex> socket_connected?(%Phoenix.LiveView.Socket{transport_pid: nil})\n    false","title":"Examples - Bonfire.UI.Common.socket_connected?/1","ref":"Bonfire.UI.Common.html#socket_connected?/1-examples"},{"type":"function","doc":"","title":"Bonfire.UI.Common.templated/2","ref":"Bonfire.UI.Common.html#templated/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.templated_or_remote_markdown/2","ref":"Bonfire.UI.Common.html#templated_or_remote_markdown/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.the_object/1","ref":"Bonfire.UI.Common.html#the_object/1"},{"type":"function","doc":"Run a function and expects tuple.\nIf anything else is returned, like an error, a flash message is shown to the user.","title":"Bonfire.UI.Common.undead_mount/2","ref":"Bonfire.UI.Common.html#undead_mount/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.undead_on_mount/2","ref":"Bonfire.UI.Common.html#undead_on_mount/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.undead_render/2","ref":"Bonfire.UI.Common.html#undead_render/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.undead_update/2","ref":"Bonfire.UI.Common.html#undead_update/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.uniq_assign/2","ref":"Bonfire.UI.Common.html#uniq_assign/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.update_many_async/2","ref":"Bonfire.UI.Common.html#update_many_async/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.update_many_async/3","ref":"Bonfire.UI.Common.html#update_many_async/3"},{"type":"module","doc":"","title":"Bonfire.UI.Common.ComponentID","ref":"Bonfire.UI.Common.ComponentID.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ComponentID.new/3","ref":"Bonfire.UI.Common.ComponentID.html#new/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ComponentID.send_assigns/5","ref":"Bonfire.UI.Common.ComponentID.html#send_assigns/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ComponentID.send_updates/4","ref":"Bonfire.UI.Common.ComponentID.html#send_updates/4"},{"type":"module","doc":"Provides core UI components.\n\nAt first glance, this module may seem daunting, but its goal is to provide\ncore building blocks for your application, such as modals, tables, and\nforms. The components consist mostly of markup and are well-documented\nwith doc strings and declarative assigns. You may customize and style\nthem in any way you want, based on your application growth and needs.\n\nThe default components use Tailwind CSS, a utility-first CSS framework.\nSee the [Tailwind CSS documentation](https://tailwindcss.com) to learn\nhow to customize them or feel free to swap in another framework altogether.\n\nIcons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.","title":"Bonfire.UI.Common.CoreComponents","ref":"Bonfire.UI.Common.CoreComponents.html"},{"type":"function","doc":"Renders a back navigation link.","title":"Bonfire.UI.Common.CoreComponents.back/1","ref":"Bonfire.UI.Common.CoreComponents.html#back/1"},{"type":"function","doc":"<.back navigate={~p\"/posts\"}>Back to posts</.back>","title":"Examples - Bonfire.UI.Common.CoreComponents.back/1","ref":"Bonfire.UI.Common.CoreComponents.html#back/1-examples"},{"type":"function","doc":"* `navigate` (`:any`) (required)","title":"Attributes - Bonfire.UI.Common.CoreComponents.back/1","ref":"Bonfire.UI.Common.CoreComponents.html#back/1-attributes"},{"type":"function","doc":"* `inner_block` (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.back/1","ref":"Bonfire.UI.Common.CoreComponents.html#back/1-slots"},{"type":"function","doc":"Renders a button.","title":"Bonfire.UI.Common.CoreComponents.button/1","ref":"Bonfire.UI.Common.CoreComponents.html#button/1"},{"type":"function","doc":"<.button>Send!</.button>\n    <.button phx-click=\"go\" class=\"ml-2\">Send!</.button>","title":"Examples - Bonfire.UI.Common.CoreComponents.button/1","ref":"Bonfire.UI.Common.CoreComponents.html#button/1-examples"},{"type":"function","doc":"* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\", \"form\", \"name\", \"value\"]`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.button/1","ref":"Bonfire.UI.Common.CoreComponents.html#button/1-attributes"},{"type":"function","doc":"* `inner_block` (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.button/1","ref":"Bonfire.UI.Common.CoreComponents.html#button/1-slots"},{"type":"function","doc":"Generates a generic error message.","title":"Bonfire.UI.Common.CoreComponents.error_msg/1","ref":"Bonfire.UI.Common.CoreComponents.html#error_msg/1"},{"type":"function","doc":"* `inner_block` (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.error_msg/1","ref":"Bonfire.UI.Common.CoreComponents.html#error_msg/1-slots"},{"type":"function","doc":"Renders flash notices.","title":"Bonfire.UI.Common.CoreComponents.flash/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash/1"},{"type":"function","doc":"<.flash kind={:info} flash={@flash} />\n    <.flash kind={:info} phx-mounted={show(\"#flash\")}>Welcome Back!</.flash>","title":"Examples - Bonfire.UI.Common.CoreComponents.flash/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash/1-examples"},{"type":"function","doc":"* `id` (`:string`) - the optional id of flash container.\n* `flash` (`:map`) - the map of flash messages to display. Defaults to `%{}`.\n* `title` (`:string`) - Defaults to `nil`.\n* `kind` (`:atom`) - used for styling and flash lookup.Must be one of `:info`, or `:error`.\n* Global attributes are accepted. the arbitrary HTML attributes to add to the flash container.","title":"Attributes - Bonfire.UI.Common.CoreComponents.flash/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash/1-attributes"},{"type":"function","doc":"* `inner_block` - the optional inner block that renders the flash message.","title":"Slots - Bonfire.UI.Common.CoreComponents.flash/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash/1-slots"},{"type":"function","doc":"Shows the flash group with standard titles and content.","title":"Bonfire.UI.Common.CoreComponents.flash_group/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash_group/1"},{"type":"function","doc":"<.flash_group flash={@flash} />","title":"Examples - Bonfire.UI.Common.CoreComponents.flash_group/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash_group/1-examples"},{"type":"function","doc":"* `flash` (`:map`) (required) - the map of flash messages.\n* `id` (`:string`) - the optional id of flash container. Defaults to `\"flash-group\"`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.flash_group/1","ref":"Bonfire.UI.Common.CoreComponents.html#flash_group/1-attributes"},{"type":"function","doc":"Renders a header with title.","title":"Bonfire.UI.Common.CoreComponents.header/1","ref":"Bonfire.UI.Common.CoreComponents.html#header/1"},{"type":"function","doc":"* `class` (`:string`) - Defaults to `nil`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.header/1","ref":"Bonfire.UI.Common.CoreComponents.html#header/1-attributes"},{"type":"function","doc":"* `inner_block` (required)\n* `subtitle`\n* `actions`","title":"Slots - Bonfire.UI.Common.CoreComponents.header/1","ref":"Bonfire.UI.Common.CoreComponents.html#header/1-slots"},{"type":"function","doc":"","title":"Bonfire.UI.Common.CoreComponents.hide/2","ref":"Bonfire.UI.Common.CoreComponents.html#hide/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.CoreComponents.hide_modal/2","ref":"Bonfire.UI.Common.CoreComponents.html#hide_modal/2"},{"type":"function","doc":"Renders an input with label and error messages.\n\nA `Phoenix.HTML.FormField` may be passed as argument,\nwhich is used to retrieve the input name, id, and values.\nOtherwise all attributes may be passed explicitly.","title":"Bonfire.UI.Common.CoreComponents.input/1","ref":"Bonfire.UI.Common.CoreComponents.html#input/1"},{"type":"function","doc":"This function accepts all HTML input types, considering that:\n\n  * You may also set `type=\"select\"` to render a ` ` tag\n\n  * `type=\"checkbox\"` is used exclusively to render boolean values\n\n  * For live file uploads, see `Phoenix.Component.live_file_input/1`\n\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\nfor more information. Unsupported types, such as hidden and radio,\nare best written directly in your templates.","title":"Types - Bonfire.UI.Common.CoreComponents.input/1","ref":"Bonfire.UI.Common.CoreComponents.html#input/1-types"},{"type":"function","doc":"<.input field={@form[:email]} type=\"email\" />\n    <.input name=\"my-input\" errors={[\"oh no!\"]} />","title":"Examples - Bonfire.UI.Common.CoreComponents.input/1","ref":"Bonfire.UI.Common.CoreComponents.html#input/1-examples"},{"type":"function","doc":"* `id` (`:any`) - Defaults to `nil`.\n* `name` (`:any`)\n* `label` (`:string`) - Defaults to `nil`.\n* `value` (`:any`)\n* `class` (`:string`) - Defaults to `nil`.\n* `label_class` (`:string`) - Defaults to `nil`.\n* `type` (`:string`) - Defaults to `\"text\"`.\n* `field` (`Phoenix.HTML.FormField`) - a form field struct retrieved from the form, for example: `@form[:email]`.\n* `errors` (`:list`) - Defaults to `nil`.\n* `checked` (`:boolean`) - the checked flag for checkbox inputs.\n* `prompt` (`:string`) - the prompt for select inputs. Defaults to `nil`.\n* `options` (`:list`) - the options to pass to `Phoenix.HTML.Form.options_for_select/2`.\n* `multiple` (`:boolean`) - the multiple flag for select inputs. Defaults to `false`.\n* Global attributes are accepted. Supports all globals plus: `[\"accept\", \"autocomplete\", \"capture\", \"cols\", \"disabled\", \"form\", \"list\", \"max\", \"maxlength\", \"min\", \"minlength\", \"multiple\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"size\", \"step\"]`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.input/1","ref":"Bonfire.UI.Common.CoreComponents.html#input/1-attributes"},{"type":"function","doc":"Renders a label.","title":"Bonfire.UI.Common.CoreComponents.label/1","ref":"Bonfire.UI.Common.CoreComponents.html#label/1"},{"type":"function","doc":"* `for` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.label/1","ref":"Bonfire.UI.Common.CoreComponents.html#label/1-attributes"},{"type":"function","doc":"* `inner_block` (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.label/1","ref":"Bonfire.UI.Common.CoreComponents.html#label/1-slots"},{"type":"function","doc":"Renders a data list.","title":"Bonfire.UI.Common.CoreComponents.list/1","ref":"Bonfire.UI.Common.CoreComponents.html#list/1"},{"type":"function","doc":"<.list>\n      <:item title=\"Title\">{@post.title}</:item>\n      <:item title=\"Views\">{@post.views}</:item>\n    </.list>","title":"Examples - Bonfire.UI.Common.CoreComponents.list/1","ref":"Bonfire.UI.Common.CoreComponents.html#list/1-examples"},{"type":"function","doc":"* `item` (required) - Accepts attributes:\n\n  * `title` (`:string`) (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.list/1","ref":"Bonfire.UI.Common.CoreComponents.html#list/1-slots"},{"type":"function","doc":"Renders a modal.","title":"Bonfire.UI.Common.CoreComponents.modal/1","ref":"Bonfire.UI.Common.CoreComponents.html#modal/1"},{"type":"function","doc":"<.modal id=\"confirm-modal\">\n      This is a modal.\n    </.modal>\n\nJS commands may be passed to the `:on_cancel` to configure\nthe closing/cancel event, for example:\n\n    <.modal id=\"confirm\" on_cancel={JS.navigate(~p\"/posts\")}>\n      This is another modal.\n    </.modal>","title":"Examples - Bonfire.UI.Common.CoreComponents.modal/1","ref":"Bonfire.UI.Common.CoreComponents.html#modal/1-examples"},{"type":"function","doc":"* `id` (`:string`) (required)\n* `show` (`:boolean`) - Defaults to `false`.\n* `on_cancel` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.modal/1","ref":"Bonfire.UI.Common.CoreComponents.html#modal/1-attributes"},{"type":"function","doc":"* `inner_block` (required)","title":"Slots - Bonfire.UI.Common.CoreComponents.modal/1","ref":"Bonfire.UI.Common.CoreComponents.html#modal/1-slots"},{"type":"function","doc":"","title":"Bonfire.UI.Common.CoreComponents.show/2","ref":"Bonfire.UI.Common.CoreComponents.html#show/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.CoreComponents.show_modal/2","ref":"Bonfire.UI.Common.CoreComponents.html#show_modal/2"},{"type":"function","doc":"Renders a simple form.","title":"Bonfire.UI.Common.CoreComponents.simple_form/1","ref":"Bonfire.UI.Common.CoreComponents.html#simple_form/1"},{"type":"function","doc":"<.simple_form for={@form} phx-change=\"validate\" phx-submit=\"save\">\n      <.input field={@form[:email]} label=\"Email\"/>\n      <.input field={@form[:username]} label=\"Username\" />\n      <:actions>\n        <.button>Save</.button>\n      </:actions>\n    </.simple_form>","title":"Examples - Bonfire.UI.Common.CoreComponents.simple_form/1","ref":"Bonfire.UI.Common.CoreComponents.html#simple_form/1-examples"},{"type":"function","doc":"* `for` (`:any`) (required) - the data structure for the form.\n* `as` (`:any`) - the server side parameter to collect all input under. Defaults to `nil`.\n* `action_class` (`:string`) - Defaults to `nil`.\n* `opts` (`:list`) - Extra attributes.\n* Global attributes are accepted. the arbitrary HTML attributes to apply to the form tag. Supports all globals plus: `[\"autocomplete\", \"name\", \"rel\", \"action\", \"enctype\", \"method\", \"novalidate\", \"target\", \"multipart\"]`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.simple_form/1","ref":"Bonfire.UI.Common.CoreComponents.html#simple_form/1-attributes"},{"type":"function","doc":"* `inner_block` (required)\n* `actions` - the slot for form actions, such as a submit button.","title":"Slots - Bonfire.UI.Common.CoreComponents.simple_form/1","ref":"Bonfire.UI.Common.CoreComponents.html#simple_form/1-slots"},{"type":"function","doc":"Renders a table with generic styling.","title":"Bonfire.UI.Common.CoreComponents.table/1","ref":"Bonfire.UI.Common.CoreComponents.html#table/1"},{"type":"function","doc":"<.table id=\"users\" rows={@users}>\n      <:col :let={user} label=\"id\">{user.id}</:col>\n      <:col :let={user} label=\"username\">{user.username}</:col>\n    </.table>","title":"Examples - Bonfire.UI.Common.CoreComponents.table/1","ref":"Bonfire.UI.Common.CoreComponents.html#table/1-examples"},{"type":"function","doc":"* `id` (`:string`) (required)\n* `rows` (`:list`) (required)\n* `row_id` (`:any`) - the function for generating the row id. Defaults to `nil`.\n* `row_click` (`:any`) - the function for handling phx-click on each row. Defaults to `nil`.\n* `row_item` (`:any`) - the function for mapping each row before calling the :col and :action slots. Defaults to `&Function.identity/1`.","title":"Attributes - Bonfire.UI.Common.CoreComponents.table/1","ref":"Bonfire.UI.Common.CoreComponents.html#table/1-attributes"},{"type":"function","doc":"* `col` (required) - Accepts attributes:\n\n  * `label` (`:string`)\n* `action` - the slot for showing user actions in the last table column.","title":"Slots - Bonfire.UI.Common.CoreComponents.table/1","ref":"Bonfire.UI.Common.CoreComponents.html#table/1-slots"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Endpoint.LiveReload","ref":"Bonfire.UI.Common.Endpoint.LiveReload.html"},{"type":"module","doc":"","title":"Bonfire.UI.Common.EndpointTemplate","ref":"Bonfire.UI.Common.EndpointTemplate.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.EndpointTemplate.session_options/0","ref":"Bonfire.UI.Common.EndpointTemplate.html#session_options/0"},{"type":"module","doc":"","title":"Bonfire.UI.Common.ErrorHandling","ref":"Bonfire.UI.Common.ErrorHandling.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ErrorHandling.undead/3","ref":"Bonfire.UI.Common.ErrorHandling.html#undead/3"},{"type":"module","doc":"Conveniences for translating and building error messages.","title":"Bonfire.UI.Common.ErrorHelpers","ref":"Bonfire.UI.Common.ErrorHelpers.html"},{"type":"function","doc":"Generates tag for inlined form input errors.\n# TODO: use `Surface.Components.Form.ErrorTag` instead?","title":"Bonfire.UI.Common.ErrorHelpers.error_tag/2","ref":"Bonfire.UI.Common.ErrorHelpers.html#error_tag/2"},{"type":"function","doc":"Translates an error message using gettext.","title":"Bonfire.UI.Common.ErrorHelpers.translate_error/1","ref":"Bonfire.UI.Common.ErrorHelpers.html#translate_error/1"},{"type":"function","doc":"Translates the errors for a field from a keyword list of errors.","title":"Bonfire.UI.Common.ErrorHelpers.translate_errors/2","ref":"Bonfire.UI.Common.ErrorHelpers.html#translate_errors/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.ErrorReportingPlug","ref":"Bonfire.UI.Common.ErrorReportingPlug.html"},{"type":"module","doc":"usage examples:\n\n`phx-submit=\"Bonfire.Posts:post\"` will be routed to `Bonfire.Posts.LiveHandler.handle_event(\"post\", ...`\n\n`PubSub.broadcast(feed_id, {{Bonfire.Social.Feeds, :new_activity}, activity})` will be routed to `Bonfire.Social.Feeds.LiveHandler.handle_info({:new_activity, activity}, ...`\n\n`href=\"?Bonfire.Social.Feeds[after]=<%= e(@page_info, :end_cursor, nil) %>\"` will be routed to `Bonfire.Social.Feeds.LiveHandler.handle_params(%{\"after\" => cursor_after} ...`","title":"Bonfire.UI.Common.LiveHandlers","ref":"Bonfire.UI.Common.LiveHandlers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.assign_attrs/2","ref":"Bonfire.UI.Common.LiveHandlers.html#assign_attrs/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.handle_event/5","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_event/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.handle_info/4","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_info/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.handle_params/5","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_params/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.handle_progress/5","ref":"Bonfire.UI.Common.LiveHandlers.html#handle_progress/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.maybe_from_json/1","ref":"Bonfire.UI.Common.LiveHandlers.html#maybe_from_json/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LiveHandlers.mod_delegate/5","ref":"Bonfire.UI.Common.LiveHandlers.html#mod_delegate/5"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.LiveHandlers.sigil_p/2","ref":"Bonfire.UI.Common.LiveHandlers.html#sigil_p/2"},{"type":"behaviour","doc":"Add modules to the app's web routes.\n\nusage: include this in your module: `@behaviour Bonfire.UI.Common.RoutesModule` and define a `__using__/1` macro with your routes in a `quote` block.","title":"Bonfire.UI.Common.LivePlugModule","ref":"Bonfire.UI.Common.LivePlugModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugModule.app_modules/0","ref":"Bonfire.UI.Common.LivePlugModule.html#app_modules/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugModule.modules/0","ref":"Bonfire.UI.Common.LivePlugModule.html#modules/0"},{"type":"callback","doc":"","title":"Bonfire.UI.Common.LivePlugModule.mount/3","ref":"Bonfire.UI.Common.LivePlugModule.html#c:mount/3"},{"type":"callback","doc":"","title":"Bonfire.UI.Common.LivePlugModule.on_mount/4","ref":"Bonfire.UI.Common.LivePlugModule.html#c:on_mount/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugModule.pipeline_function_error/2","ref":"Bonfire.UI.Common.LivePlugModule.html#pipeline_function_error/2"},{"type":"callback","doc":"","title":"Bonfire.UI.Common.LivePlugModule.pipeline_name/0","ref":"Bonfire.UI.Common.LivePlugModule.html#c:pipeline_name/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugModule.pipeline_names/1","ref":"Bonfire.UI.Common.LivePlugModule.html#pipeline_names/1"},{"type":"module","doc":"Like a plug, but for a liveview","title":"Bonfire.UI.Common.LivePlugs","ref":"Bonfire.UI.Common.LivePlugs.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.maybe_send_persistent_assigns/2","ref":"Bonfire.UI.Common.LivePlugs.html#maybe_send_persistent_assigns/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.mount/3","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.AllowTestSandbox.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Common.LivePlugs.Csrf","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Csrf.mount/3","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Csrf.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.Csrf.html#on_mount/4"},{"type":"module","doc":"Like a plug, but for a liveview","title":"Bonfire.UI.Common.LivePlugs.Helpers","ref":"Bonfire.UI.Common.LivePlugs.Helpers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Helpers.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.Helpers.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale","ref":"Bonfire.UI.Common.LivePlugs.Locale.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale.assign_put_locale/2","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#assign_put_locale/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale.assign_put_locale/3","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#assign_put_locale/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale.default/2","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#default/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale.mount/3","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.Locale.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.Locale.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Common.LivePlugs.StaticChanged","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.StaticChanged.mount/3","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.LivePlugs.StaticChanged.on_mount/4","ref":"Bonfire.UI.Common.LivePlugs.StaticChanged.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.call/2","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.init/1","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#init/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.maybe_make_request_path_static/2","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#maybe_make_request_path_static/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.maybe_serve_static/2","ref":"Bonfire.UI.Common.MaybeStaticGeneratorPlug.html#maybe_serve_static/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.component_props/1","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#component_props/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.component_type/1","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#component_type/1"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_module_optional/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_module_optional/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_nav_component/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_nav_component/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_nav_link/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_nav_link/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_settings/3","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_settings/3"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_settings_component/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_settings_component/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_settings_nav_component/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_settings_nav_component/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_settings_nav_link/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_settings_nav_link/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Modularity.DeclareHelpers.declare_widget/2","ref":"Bonfire.UI.Common.Modularity.DeclareHelpers.html#declare_widget/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.MultiTenancyPlug","ref":"Bonfire.UI.Common.MultiTenancyPlug.html"},{"type":"module","doc":"","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler.handle_event/3","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.MultiselectLive.LiveHandler.sigil_p/2","ref":"Bonfire.UI.Common.MultiselectLive.LiveHandler.html#sigil_p/2"},{"type":"behaviour","doc":"Add items to extensions' navigation sidebar.","title":"Bonfire.UI.Common.NavModule","ref":"Bonfire.UI.Common.NavModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.NavModule.app_modules/0","ref":"Bonfire.UI.Common.NavModule.html#app_modules/0"},{"type":"callback","doc":"Declares a nav module, with links or nav components","title":"Bonfire.UI.Common.NavModule.declared_nav/0","ref":"Bonfire.UI.Common.NavModule.html#c:declared_nav/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.NavModule.modules/0","ref":"Bonfire.UI.Common.NavModule.html#modules/0"},{"type":"function","doc":"Load all navs","title":"Bonfire.UI.Common.NavModule.nav/0","ref":"Bonfire.UI.Common.NavModule.html#nav/0"},{"type":"function","doc":"Get navs for an extension","title":"Bonfire.UI.Common.NavModule.nav/1","ref":"Bonfire.UI.Common.NavModule.html#nav/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.NavModule.nav_function_error/2","ref":"Bonfire.UI.Common.NavModule.html#nav_function_error/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Notifications","ref":"Bonfire.UI.Common.Notifications.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.assign_notification/2","ref":"Bonfire.UI.Common.Notifications.html#assign_notification/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.handle_event/3","ref":"Bonfire.UI.Common.Notifications.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.handle_info/2","ref":"Bonfire.UI.Common.Notifications.html#handle_info/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.notify_broadcast/2","ref":"Bonfire.UI.Common.Notifications.html#notify_broadcast/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.notify_broadcast/5","ref":"Bonfire.UI.Common.Notifications.html#notify_broadcast/5"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.notify_me/4","ref":"Bonfire.UI.Common.Notifications.html#notify_me/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.receive_flash/3","ref":"Bonfire.UI.Common.Notifications.html#receive_flash/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Notifications.receive_notification/2","ref":"Bonfire.UI.Common.Notifications.html#receive_notification/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.Notifications.sigil_p/2","ref":"Bonfire.UI.Common.Notifications.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.PlugProtect","ref":"Bonfire.UI.Common.PlugProtect.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PlugProtect.allow_action/3","ref":"Bonfire.UI.Common.PlugProtect.html#allow_action/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PlugProtect.block_action/3","ref":"Bonfire.UI.Common.PlugProtect.html#block_action/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PlugProtect.call/2","ref":"Bonfire.UI.Common.PlugProtect.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PlugProtect.init/1","ref":"Bonfire.UI.Common.PlugProtect.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Plugs.ActivityPub","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Plugs.ActivityPub.call/2","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Plugs.ActivityPub.init/1","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#init/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Plugs.ActivityPub.maybe_redirect/1","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#maybe_redirect/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Plugs.ActivityPub.with_headers/3","ref":"Bonfire.UI.Common.Plugs.ActivityPub.html#with_headers/3"},{"type":"module","doc":"WIP for tracking online users. Used by `PersistentLive`","title":"Bonfire.UI.Common.Presence","ref":"Bonfire.UI.Common.Presence.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.child_spec/1","ref":"Bonfire.UI.Common.Presence.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.fetch/2","ref":"Bonfire.UI.Common.Presence.html#fetch/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.fetchers_pids/0","ref":"Bonfire.UI.Common.Presence.html#fetchers_pids/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.get_by_key/2","ref":"Bonfire.UI.Common.Presence.html#get_by_key/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.handle_info/2","ref":"Bonfire.UI.Common.Presence.html#handle_info/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.list/0","ref":"Bonfire.UI.Common.Presence.html#list/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.list/1","ref":"Bonfire.UI.Common.Presence.html#list/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.list_and_maybe_subscribe_to_presence/1","ref":"Bonfire.UI.Common.Presence.html#list_and_maybe_subscribe_to_presence/1"},{"type":"function","doc":"Join a user to the list of those who are present","title":"Bonfire.UI.Common.Presence.present!/2","ref":"Bonfire.UI.Common.Presence.html#present!/2"},{"type":"function","doc":"Check if a given user (or the current user) is in the list of those who are present","title":"Bonfire.UI.Common.Presence.present?/2","ref":"Bonfire.UI.Common.Presence.html#present?/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.present_meta/2","ref":"Bonfire.UI.Common.Presence.html#present_meta/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.track/3","ref":"Bonfire.UI.Common.Presence.html#track/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.track/4","ref":"Bonfire.UI.Common.Presence.html#track/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.untrack/2","ref":"Bonfire.UI.Common.Presence.html#untrack/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.untrack/3","ref":"Bonfire.UI.Common.Presence.html#untrack/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.update/3","ref":"Bonfire.UI.Common.Presence.html#update/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Presence.update/4","ref":"Bonfire.UI.Common.Presence.html#update/4"},{"type":"module","doc":"A special 'modal' for previewing objects from a feed without redirecting to a new view (so we can go back to where we were in the feed)","title":"Bonfire.UI.Common.PreviewContentLive","ref":"Bonfire.UI.Common.PreviewContentLive.html"},{"type":"module","doc":"* **id** *:string, required: true* - The id of the live component (required by LiveView for stateful components).\n\n* **source_inspector_attrs** *:map, default: %{}*\n* **title_text** *:string, default: nil* - The title of the modal. Only used if no title slot is passed.\n* **title_class** *:css_class, default: nil* - The classes of the title of the modal\n* **show** *:boolean, default: false* - Force modal to be open\n* **no_header** *:boolean, default: false* - Optional prop to hide the header at the top of the modal\n* **modal_class** *:string, default: nil* - The classes of the modal.\n* **modal_assigns** *:any, default: []* - Additional assigns for the modal\n\n* **opts** *:keyword, default: []* - Additional attributes to add onto the modal wrapper","title":"Properties - Bonfire.UI.Common.PreviewContentLive","ref":"Bonfire.UI.Common.PreviewContentLive.html#module-properties"},{"type":"module","doc":"* **default, arg: [:autocomplete]** - Slots for the contents of the modal, title, buttons...\n\n* **open_btn**\n* **action_btns**\n* **cancel_btn**\n* **title**\n* **extra_contents**","title":"Slots - Bonfire.UI.Common.PreviewContentLive","ref":"Bonfire.UI.Common.PreviewContentLive.html#module-slots"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PreviewContentLive.handle_event/3","ref":"Bonfire.UI.Common.PreviewContentLive.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PreviewContentLive.mount/1","ref":"Bonfire.UI.Common.PreviewContentLive.html#mount/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PreviewContentLive.render/1","ref":"Bonfire.UI.Common.PreviewContentLive.html#render/1"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.PreviewContentLive.sigil_p/2","ref":"Bonfire.UI.Common.PreviewContentLive.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.PreviewContentLive.update/2","ref":"Bonfire.UI.Common.PreviewContentLive.html#update/2"},{"type":"module","doc":"The classic **modal**","title":"Bonfire.UI.Common.ReusableModalLive","ref":"Bonfire.UI.Common.ReusableModalLive.html"},{"type":"module","doc":"* **id** *:string, required: true* - The id of the live component (required by LiveView for stateful components).\n\n* **source_inspector_attrs** *:map, default: %{}*\n* **title_text** *:string, default: nil* - The title of the modal. Only used if no title slot is passed.\n* **image_preview** *:boolean, default: false* - If the modal is a preview of an image, set this to true.\n* **title_class** *:css_class, default: nil* - The classes of the title of the modal\n* **modal_class** *:css_class, default: \"\"* - The classes of the modal.\n* **wrapper_class** *:css_class, default: nil* - The classes of the modal wrapper.\n* **action_btns_wrapper_class** *:css_class, default: nil* - The classes around the action/submit button(s) on the modal\n* **cancel_btn_class** *:css_class, default: nil* - The classes of the close/cancel button on the modal. Only used if no close_btn slot is passed.\n* **cancel_label** *:string, default: nil*\n* **show** *:boolean, default: false* - Force modal to be open\n* **form_opts** *:map, default: %{}*\n* **no_actions** *:boolean, default: false* - Optional prop to hide the actions at the bottom of the modal\n* **no_header** *:boolean, default: false* - Optional prop to hide the header at the top of the modal\n* **no_backdrop** *:boolean, default: false*\n* **overflow** *:boolean, default: false*\n* **modal_assigns** *:any, default: []* - Additional assigns to pass on to the optional modal sub-component\n\n* **opts** *:keyword, default: []* - Additional attributes to add onto the modal wrapper\n\n* **autocomplete** *:list, default: []*\n* **xl** *:boolean, default: false* - Optional prop to make the modal wider","title":"Properties - Bonfire.UI.Common.ReusableModalLive","ref":"Bonfire.UI.Common.ReusableModalLive.html#module-properties"},{"type":"module","doc":"* **open_btn, arg: [autocomplete: :list, value: :any]** - Slots for the contents of the modal, title, buttons...\n\n* **action_btns**\n* **cancel_btn**\n* **title**\n* **default, arg: [autocomplete: :list, value: :any]**","title":"Slots - Bonfire.UI.Common.ReusableModalLive","ref":"Bonfire.UI.Common.ReusableModalLive.html#module-slots"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.default_assigns/0","ref":"Bonfire.UI.Common.ReusableModalLive.html#default_assigns/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.handle_event/3","ref":"Bonfire.UI.Common.ReusableModalLive.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.modal_id/1","ref":"Bonfire.UI.Common.ReusableModalLive.html#modal_id/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.mount/1","ref":"Bonfire.UI.Common.ReusableModalLive.html#mount/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.render/1","ref":"Bonfire.UI.Common.ReusableModalLive.html#render/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.set/3","ref":"Bonfire.UI.Common.ReusableModalLive.html#set/3"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.sigil_p/2","ref":"Bonfire.UI.Common.ReusableModalLive.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ReusableModalLive.update/2","ref":"Bonfire.UI.Common.ReusableModalLive.html#update/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Routes","ref":"Bonfire.UI.Common.Routes.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Routes.early_hints_authed/0","ref":"Bonfire.UI.Common.Routes.html#early_hints_authed/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Routes.early_hints_guest/0","ref":"Bonfire.UI.Common.Routes.html#early_hints_guest/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Routes.early_hints_shared/0","ref":"Bonfire.UI.Common.Routes.html#early_hints_shared/0"},{"type":"function","doc":"Config keys to make available in JS (via Phoenix Gon lib)","title":"Bonfire.UI.Common.Routes.gon_js_config/0","ref":"Bonfire.UI.Common.Routes.html#gon_js_config/0"},{"type":"behaviour","doc":"Add modules to the app's web routes.\n\nusage: include this in your module: `@behaviour Bonfire.UI.Common.RoutesModule` and define a `__using__/1` macro with your routes in a `quote` block.","title":"Bonfire.UI.Common.RoutesModule","ref":"Bonfire.UI.Common.RoutesModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.RoutesModule.app_modules/0","ref":"Bonfire.UI.Common.RoutesModule.html#app_modules/0"},{"type":"callback","doc":"","title":"Bonfire.UI.Common.RoutesModule.declare_routes/0","ref":"Bonfire.UI.Common.RoutesModule.html#c:declare_routes/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.RoutesModule.modules/0","ref":"Bonfire.UI.Common.RoutesModule.html#modules/0"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.RoutesModule.use_modules/0","ref":"Bonfire.UI.Common.RoutesModule.html#use_modules/0"},{"type":"module","doc":"","title":"Bonfire.UI.Common.SEO","ref":"Bonfire.UI.Common.SEO.html"},{"type":"function","doc":"Get configuration for SEO.\n\nconfig/0 will return all SEO config\nconfig/1 with SEO domain atom will return that domain's config","title":"Bonfire.UI.Common.SEO.config/0","ref":"Bonfire.UI.Common.SEO.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SEO.open_graph_config/1","ref":"Bonfire.UI.Common.SEO.html#open_graph_config/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SEO.site_config/1","ref":"Bonfire.UI.Common.SEO.html#site_config/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SEO.twitter_config/1","ref":"Bonfire.UI.Common.SEO.html#twitter_config/1"},{"type":"module","doc":"","title":"Bonfire.UI.Common.SEOImage","ref":"Bonfire.UI.Common.SEOImage.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SEOImage.generate_path/6","ref":"Bonfire.UI.Common.SEOImage.html#generate_path/6"},{"type":"behaviour","doc":"Settings nav & components","title":"Bonfire.UI.Common.SettingsModule","ref":"Bonfire.UI.Common.SettingsModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SettingsModule.app_modules/0","ref":"Bonfire.UI.Common.SettingsModule.html#app_modules/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SettingsModule.component_function_error/2","ref":"Bonfire.UI.Common.SettingsModule.html#component_function_error/2"},{"type":"function","doc":"Load all components at once","title":"Bonfire.UI.Common.SettingsModule.components/0","ref":"Bonfire.UI.Common.SettingsModule.html#components/0"},{"type":"function","doc":"Load components for an extension","title":"Bonfire.UI.Common.SettingsModule.components/1","ref":"Bonfire.UI.Common.SettingsModule.html#components/1"},{"type":"callback","doc":"Declares a component component","title":"Bonfire.UI.Common.SettingsModule.declared_component/0","ref":"Bonfire.UI.Common.SettingsModule.html#c:declared_component/0"},{"type":"callback","doc":"Declares a nav module, with links or nav components","title":"Bonfire.UI.Common.SettingsModule.declared_nav/0","ref":"Bonfire.UI.Common.SettingsModule.html#c:declared_nav/0"},{"type":"function","doc":"List extensions that have settings component(s)","title":"Bonfire.UI.Common.SettingsModule.extension_has_components?/2","ref":"Bonfire.UI.Common.SettingsModule.html#extension_has_components?/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SettingsModule.modules/0","ref":"Bonfire.UI.Common.SettingsModule.html#modules/0"},{"type":"function","doc":"Get components identified by their module","title":"Bonfire.UI.Common.SettingsModule.modules_component/1","ref":"Bonfire.UI.Common.SettingsModule.html#modules_component/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SettingsModule.modules_nav/1","ref":"Bonfire.UI.Common.SettingsModule.html#modules_nav/1"},{"type":"function","doc":"Load all navs","title":"Bonfire.UI.Common.SettingsModule.nav/0","ref":"Bonfire.UI.Common.SettingsModule.html#nav/0"},{"type":"function","doc":"Get navs for an extension","title":"Bonfire.UI.Common.SettingsModule.nav/1","ref":"Bonfire.UI.Common.SettingsModule.html#nav/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SettingsModule.nav_function_error/2","ref":"Bonfire.UI.Common.SettingsModule.html#nav_function_error/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.active_smart_input_component/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#active_smart_input_component/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.active_smart_input_components/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#active_smart_input_components/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.activity_type_or_reply/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#activity_type_or_reply/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.all_smart_input_components/0","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#all_smart_input_components/0"},{"type":"function","doc":"Open the composer by setting assigns","title":"Bonfire.UI.Common.SmartInput.LiveHandler.assign_open/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#assign_open/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.close_smart_input/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#close_smart_input/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.confirm_close_smart_input/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#confirm_close_smart_input/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.handle_event/3","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.max_length/0","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#max_length/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maximize/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maximize/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maybe_from_json/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maybe_from_json/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.maybe_from_json_string/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#maybe_from_json_string/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.minimize/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#minimize/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open_type/4","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open_type/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.open_with_text_suggestion/3","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#open_with_text_suggestion/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.replace_input_next_time/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#replace_input_next_time/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.reply_to_param/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#reply_to_param/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.reset_input/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#reset_input/1"},{"type":"function","doc":"Set assigns in the smart input from anywhere in the app (whether using a live component or sticky live view)","title":"Bonfire.UI.Common.SmartInput.LiveHandler.set/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#set/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.set_smart_input_text/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#set_smart_input_text/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.show_main/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#show_main/2"},{"type":"macro","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.sigil_p/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.smart_input_name/1","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#smart_input_name/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.switch_smart_input_type/2","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#switch_smart_input_type/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded/4","ref":"Bonfire.UI.Common.SmartInput.LiveHandler.html#toggle_expanded/4"},{"type":"behaviour","doc":"Find a smart input module via the object type(s) it can create, or vice versa. Backed by a global cache of known smart input modules.\n\nTo add a module to this list, you should declare `@behaviour Bonfire.UI.Common.SmartInputModule` in it and define a `smart_input_module/0` function which returns a list of object types that it can create.\n\nExample:\n```\n@behaviour Bonfire.UI.Common.SmartInputModule\ndef smart_input_module, do: [:page, Bonfire.Pages.Page]\n```\n\nYou can then open the smart input composer / object creator using that declared type, for example:\n```\n \n```","title":"Bonfire.UI.Common.SmartInputModule","ref":"Bonfire.UI.Common.SmartInputModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInputModule.app_modules/0","ref":"Bonfire.UI.Common.SmartInputModule.html#app_modules/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.SmartInputModule.modules/0","ref":"Bonfire.UI.Common.SmartInputModule.html#modules/0"},{"type":"callback","doc":"Declares a smart input module","title":"Bonfire.UI.Common.SmartInputModule.smart_input_module/0","ref":"Bonfire.UI.Common.SmartInputModule.html#c:smart_input_module/0"},{"type":"function","doc":"Returns a list of smart input modules and the object type(s) it can create, and vice versa.","title":"Bonfire.UI.Common.SmartInputModule.smart_input_modules_types/0","ref":"Bonfire.UI.Common.SmartInputModule.html#smart_input_modules_types/0"},{"type":"module","doc":"Static-site generator which can take a list of URLs served by the current Phoenix server and output static HTML for them","title":"Bonfire.UI.Common.StaticGenerator","ref":"Bonfire.UI.Common.StaticGenerator.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.base_path/0","ref":"Bonfire.UI.Common.StaticGenerator.html#base_path/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.batch/0","ref":"Bonfire.UI.Common.StaticGenerator.html#batch/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.file_exists_age/1","ref":"Bonfire.UI.Common.StaticGenerator.html#file_exists_age/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.file_exists_not_expired/1","ref":"Bonfire.UI.Common.StaticGenerator.html#file_exists_not_expired/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.generate/2","ref":"Bonfire.UI.Common.StaticGenerator.html#generate/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.get/3","ref":"Bonfire.UI.Common.StaticGenerator.html#get/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGenerator.maybe_generate/2","ref":"Bonfire.UI.Common.StaticGenerator.html#maybe_generate/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.StaticGeneratorPlug","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGeneratorPlug.call/2","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGeneratorPlug.init/1","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#init/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.StaticGeneratorPlug.make_request_path_static/2","ref":"Bonfire.UI.Common.StaticGeneratorPlug.html#make_request_path_static/2"},{"type":"module","doc":"","title":"Bonfire.UI.Common.Testing.Helpers","ref":"Bonfire.UI.Common.Testing.Helpers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_field_error/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_field_error/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_field_good/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_field_good/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash_kind/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash_kind/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_flash_message/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_flash_message/2"},{"type":"function","doc":"Helper function to test errors in form fields. Compatible with most recent versions of phoenix, unlike deprecated\nassert_field_error.","title":"Bonfire.UI.Common.Testing.Helpers.assert_form_field_error/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_form_field_error/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.assert_form_field_good/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#assert_form_field_good/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.conn/0","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.conn/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.conn/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#conn/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fake_account!/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_account!/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fake_admin!/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_admin!/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fake_user!/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_user!/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fake_user_and_conn!/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#fake_user_and_conn!/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fancy_fake_user!/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#fancy_fake_user!/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.fancy_fake_user_on_test_instance/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#fancy_fake_user_on_test_instance/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.find_flash/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#find_flash/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.find_form_error/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#find_form_error/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.find_form_field_error/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#find_form_field_error/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_attr/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_attr/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_click/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_click/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_live/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_live/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_redirect/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_redirect/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_response/2","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_response/2"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.floki_submit/4","ref":"Bonfire.UI.Common.Testing.Helpers.html#floki_submit/4"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.live_async_wait/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#live_async_wait/1"},{"type":"function","doc":"Wait for the LiveView to receive any queued PubSub broadcasts","title":"Bonfire.UI.Common.Testing.Helpers.live_pubsub_wait/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#live_pubsub_wait/1"},{"type":"function","doc":"Disconnect all LiveViews associated with current user or account","title":"Bonfire.UI.Common.Testing.Helpers.live_sockets_disconnect/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#live_sockets_disconnect/1"},{"type":"function","doc":"Stop a specific LiveView","title":"Bonfire.UI.Common.Testing.Helpers.live_view_stop/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#live_view_stop/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.qualifiers_to_input_name/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#qualifiers_to_input_name/1"},{"type":"function","doc":"Render stateful Surface or LiveView components","title":"Bonfire.UI.Common.Testing.Helpers.render_stateful/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#render_stateful/3"},{"type":"function","doc":"Render stateless Surface or LiveView components","title":"Bonfire.UI.Common.Testing.Helpers.render_stateless/3","ref":"Bonfire.UI.Common.Testing.Helpers.html#render_stateless/3"},{"type":"function","doc":"","title":"Bonfire.UI.Common.Testing.Helpers.session_conn/1","ref":"Bonfire.UI.Common.Testing.Helpers.html#session_conn/1"},{"type":"module","doc":"","title":"Bonfire.UI.Common.ThemeHelper","ref":"Bonfire.UI.Common.ThemeHelper.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.ThemeHelper.current_theme/1","ref":"Bonfire.UI.Common.ThemeHelper.html#current_theme/1"},{"type":"behaviour","doc":"Widgets: components that can be added to the dashboard or sidebards","title":"Bonfire.UI.Common.WidgetModule","ref":"Bonfire.UI.Common.WidgetModule.html"},{"type":"function","doc":"","title":"Bonfire.UI.Common.WidgetModule.app_modules/0","ref":"Bonfire.UI.Common.WidgetModule.html#app_modules/0"},{"type":"callback","doc":"Declares a widget component","title":"Bonfire.UI.Common.WidgetModule.declared_widget/0","ref":"Bonfire.UI.Common.WidgetModule.html#c:declared_widget/0"},{"type":"function","doc":"","title":"Bonfire.UI.Common.WidgetModule.modules/0","ref":"Bonfire.UI.Common.WidgetModule.html#modules/0"},{"type":"function","doc":"Get a widget identified by module","title":"Bonfire.UI.Common.WidgetModule.widget/1","ref":"Bonfire.UI.Common.WidgetModule.html#widget/1"},{"type":"function","doc":"","title":"Bonfire.UI.Common.WidgetModule.widget_function_error/2","ref":"Bonfire.UI.Common.WidgetModule.html#widget_function_error/2"},{"type":"function","doc":"Load all widgets at once","title":"Bonfire.UI.Common.WidgetModule.widgets/0","ref":"Bonfire.UI.Common.WidgetModule.html#widgets/0"},{"type":"function","doc":"Load widgets for an extension","title":"Bonfire.UI.Common.WidgetModule.widgets/1","ref":"Bonfire.UI.Common.WidgetModule.html#widgets/1"},{"type":"module","doc":"![](https://i.imgur.com/XoQvDCW.png)\n\n[Bonfire.UI.Me](http://bonfirenetworks.org/extensions/ui_social.html) is an extension that includes the main User Interfaces (routes, pages and components) for functionality around accounts, users, profiles, authentication, etc.\n\nThis extension is meant to be used by other extensions like [Bonfire.Me](https://github.com/bonfire-networks/bonfire_me), which provide logic for the UI to work with.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Me.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Me","ref":"Bonfire.UI.Me.html"},{"type":"module","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#module-stack"},{"type":"module","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#module-scaffolding"},{"type":"module","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#module-other-resources"},{"type":"module","doc":"Copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.UI.Me.mailer/0","ref":"Bonfire.UI.Me.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.UI.Me.repo/0","ref":"Bonfire.UI.Me.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.AccountRequired","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.AccountRequired.mount/3","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.AccountRequired.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.AccountRequired.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.AdminRequired","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.AdminRequired.mount/3","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.AdminRequired.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.AdminRequired.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.mount/3","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccount.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.mount/3","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentAccountUsers.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.get_current/2","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html#get_current/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.mount/3","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUser.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.mount/3","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.LoadCurrentUserCircles.html#on_mount/4"},{"type":"module","doc":"","title":"Bonfire.UI.Me.LivePlugs.UserRequired","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.UserRequired.mount/3","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html#mount/3"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.UserRequired.on_mount/4","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html#on_mount/4"},{"type":"function","doc":"","title":"Bonfire.UI.Me.LivePlugs.UserRequired.pipeline_name/0","ref":"Bonfire.UI.Me.LivePlugs.UserRequired.html#pipeline_name/0"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.AccountRequired","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.AccountRequired.call/2","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.AccountRequired.init/1","ref":"Bonfire.UI.Me.Plugs.AccountRequired.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.AdminRequired","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.AdminRequired.call/2","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.AdminRequired.init/1","ref":"Bonfire.UI.Me.Plugs.AdminRequired.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.GuestOnly","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.GuestOnly.call/2","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.GuestOnly.init/1","ref":"Bonfire.UI.Me.Plugs.GuestOnly.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.call/2","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.init/1","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccount.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.call/2","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.init/1","ref":"Bonfire.UI.Me.Plugs.LoadCurrentAccountUsers.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser.call/2","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.LoadCurrentUser.init/1","ref":"Bonfire.UI.Me.Plugs.LoadCurrentUser.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Plugs.UserRequired","ref":"Bonfire.UI.Me.Plugs.UserRequired.html"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.UserRequired.call/2","ref":"Bonfire.UI.Me.Plugs.UserRequired.html#call/2"},{"type":"function","doc":"","title":"Bonfire.UI.Me.Plugs.UserRequired.init/1","ref":"Bonfire.UI.Me.Plugs.UserRequired.html#init/1"},{"type":"module","doc":"","title":"Bonfire.UI.Me.Routes","ref":"Bonfire.UI.Me.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Me.RuntimeConfig","ref":"Bonfire.UI.Me.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Me.RuntimeConfig.config/0","ref":"Bonfire.UI.Me.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Me.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Me.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.UI.Messages.Routes","ref":"Bonfire.UI.Messages.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Messages.RuntimeConfig","ref":"Bonfire.UI.Messages.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Messages.RuntimeConfig.config/0","ref":"Bonfire.UI.Messages.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Messages.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Messages.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.UI.Moderation.RuntimeConfig","ref":"Bonfire.UI.Moderation.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Moderation.RuntimeConfig.config/0","ref":"Bonfire.UI.Moderation.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Moderation.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Moderation.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.UI.Posts.Routes","ref":"Bonfire.UI.Posts.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Posts.RuntimeConfig","ref":"Bonfire.UI.Posts.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Posts.RuntimeConfig.config/0","ref":"Bonfire.UI.Posts.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Posts.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Posts.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.UI.Reactions.Routes","ref":"Bonfire.UI.Reactions.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Reactions.RuntimeConfig","ref":"Bonfire.UI.Reactions.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Reactions.RuntimeConfig.config/0","ref":"Bonfire.UI.Reactions.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Reactions.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Reactions.RuntimeConfig.html#config_module/0"},{"type":"function","doc":"","title":"Bonfire.UI.Reactions.RuntimeConfig.declared_extension/0","ref":"Bonfire.UI.Reactions.RuntimeConfig.html#declared_extension/0"},{"type":"module","doc":"","title":"Bonfire.UI.Social.Benchmark","ref":"Bonfire.UI.Social.Benchmark.html"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_backend/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_backend/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_component/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_component/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_full_backend/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_full_backend/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_full_get/1","ref":"Bonfire.UI.Social.Benchmark.html#feed_full_get/1"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_page/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_page/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_queries_without_benchee/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_queries_without_benchee/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_query_methods/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_query_methods/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.feed_render_page/0","ref":"Bonfire.UI.Social.Benchmark.html#feed_render_page/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.live_feed/1","ref":"Bonfire.UI.Social.Benchmark.html#live_feed/1"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.misc/0","ref":"Bonfire.UI.Social.Benchmark.html#misc/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Benchmark.render_feed/2","ref":"Bonfire.UI.Social.Benchmark.html#render_feed/2"},{"type":"module","doc":"","title":"Bonfire.UI.Social.Graph.RuntimeConfig","ref":"Bonfire.UI.Social.Graph.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Social.Graph.RuntimeConfig.config/0","ref":"Bonfire.UI.Social.Graph.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Graph.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Social.Graph.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.UI.Social.Integration","ref":"Bonfire.UI.Social.Integration.html"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Integration.mailer/0","ref":"Bonfire.UI.Social.Integration.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.Integration.repo/0","ref":"Bonfire.UI.Social.Integration.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.UI.Social.Routes","ref":"Bonfire.UI.Social.Routes.html"},{"type":"module","doc":"","title":"Bonfire.UI.Social.RuntimeConfig","ref":"Bonfire.UI.Social.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.UI.Social.RuntimeConfig.config/0","ref":"Bonfire.UI.Social.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.UI.Social.RuntimeConfig.config_module/0","ref":"Bonfire.UI.Social.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"Generate SVG avatars from a string seed. It should always return the same avatar for the corresponding seed.\n\nBased on https://www.npmjs.com/package/animal-avatar-generator (translated to Elixir, mostly by ChatGPT)","title":"AnimalAvatarGenerator","ref":"AnimalAvatarGenerator.html"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.avatar/2","ref":"AnimalAvatarGenerator.html#avatar/2"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.avatar_face/2","ref":"AnimalAvatarGenerator.html#avatar_face/2"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.brows/0","ref":"AnimalAvatarGenerator.html#brows/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.clamp/3","ref":"AnimalAvatarGenerator.html#clamp/3"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.create_background/3","ref":"AnimalAvatarGenerator.html#create_background/3"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.create_blackout/1","ref":"AnimalAvatarGenerator.html#create_blackout/1"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.create_svg/2","ref":"AnimalAvatarGenerator.html#create_svg/2"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.darken/2","ref":"AnimalAvatarGenerator.html#darken/2"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.ears/0","ref":"AnimalAvatarGenerator.html#ears/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.empty_shape/0","ref":"AnimalAvatarGenerator.html#empty_shape/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.eyes/0","ref":"AnimalAvatarGenerator.html#eyes/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.faces/0","ref":"AnimalAvatarGenerator.html#faces/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.hairs/0","ref":"AnimalAvatarGenerator.html#hairs/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.muzzles/0","ref":"AnimalAvatarGenerator.html#muzzles/0"},{"type":"function","doc":"","title":"AnimalAvatarGenerator.patterns/0","ref":"AnimalAvatarGenerator.html#patterns/0"},{"type":"module","doc":"A handful of (mostly) arrow macros with superpowers.","title":"Arrows","ref":"Arrows.html"},{"type":"module","doc":"The package can be installed by adding `arrows` to your list of dependencies in `mix.exs`: \n\n```elixir\ndef deps do\n  [\n    {:arrows, \"~> 0.2.0\"}\n  ]\nend\n```\n\nOr via git:\n```elixir\ndef deps do\n  [\n    {:arrows, git: \"https://github.com/bonfire-networks/arrows\", branch: \"main\"}\n  ]\nend\n```","title":"Installation - Arrows","ref":"Arrows.html#module-installation"},{"type":"module","doc":"The Elixir [|> (\"pipe\") operator](https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2) is one of the things that seems to get people excited about elixir. Probably in part because you then don't have to keep coming up with function names. Unfortunately it's kind of limiting. \nThe moment you need to pipe a parameter into a position that isn't the first one, it breaks down and you have to drop out of the pipeline format or write a secondary function to handle it.\n\nNot any more! By simply inserting `...` where you would like the value to be inserted, `Arrows` will override where it is placed. This allows you to keep on piping while accommodating that function with the annoying argument order. `Arrows` was inspired by [an existing library](https://hexdocs.pm/magritte/Magritte.html). \n\nHere is part of the test suite in lieu of examples:\n\n```elixir\ndefmodule ArrowsTest do\n  use ExUnit.Case\n  use Arrows\n\n  def double(x), do: x * 2\n  def double_fst(x, _), do: x * 2\n  def double_snd(_, x), do: x * 2\n  def add_snd_thd(_, x, y), do: x + y\n\n  test \"|>\" do\n    assert 4 == (2 |> double)\n    assert 4 == (2 |> double())\n    assert 4 == (2 |> double(...))\n    assert 8 == (2 |> double(double(...)))\n    assert 4 == (2 |> double_fst(1))\n    assert 4 == (2 |> double_fst(..., 1))\n    assert 8 == (2 |> double_fst(double(...), 1))\n    assert 4 == (2 |> double_snd(1, ...))\n    assert 8 == (2 |> double_snd(1, double(...)))\n    assert 3 == (2 |> add_snd_thd(1, ..., 1))\n    assert 4 == (2 |> add_snd_thd(1, ..., ...))\n    assert 6 == (2 |> add_snd_thd(1, ..., double(...)))\n    for x <- [:yes, 2, nil, false] do\n      assert {:ok, x} == (x |> {:ok, ...})\n    end\n  end\nend\n```\n\nA few little extra features you might notice here:\n* You can move the parameter into a subexpression, as in `2 |> double_fst(double(...), 1)` where\n  double will be called before the parameter is passed to `double_fst`.\n* You can use `...` multiple times, substituting it in multiple places.\n* The right hand side need not even be a function call, you can use any expression with `...`.","title":"Documentation - Arrows","ref":"Arrows.html#module-documentation"},{"type":"module","doc":"`Arrows` also provides an `ok-pipe` operator, `~>`, which only pipes into the next function if the result from the last one was considered a success. It's inspired by [OK](https://hexdocs.pm/ok/readme.html), but we have chosen to do things slightly differently so it better fits with our regular pipe.\n\ninput                    | result          |\n:----------------------- | :-------------- |\n`{:ok, x}`               | `fun.(x)`       |\n`{:error, e}`            | `{:error, e}`   |\n`nil`                    | `nil`           |\n`x when not is_nil(x)`   | `fun.(x)`       |\n\nIn the case of a function returning an ok/error tuple being on the left hand side, this is straightforward to determine. In the event of `{:ok, x}`, x will be passed into the right hand side to call. In the event of `{:error, x}`, the result will be `{:error, x}`.\n\nWe also deal with a lot of functions that indicate failure by returning nil. `~>` tries to 'do what I mean' for both of these so you can have one pipe operator to rule them all. If `nil` is a valid result, you must thus be sure to wrap it in an `ok` tuple when it occurs on the left hand side of `~>`.\n\n`|>` and `~>` compose in the way you'd expect; i.e. a `~>` receiving an error tuple or nil will stop executing the rest of the chain of (mixed) pipes.\n\n\nDocumentation can be found at [https://hexdocs.pm/arrows](https://hexdocs.pm/arrows).","title":"Ok-pipe - Arrows","ref":"Arrows.html#module-ok-pipe"},{"type":"macro","doc":"Like `||`, except with the logic applied by `~>`","title":"Arrows.<~>/2","ref":"Arrows.html#%3C~%3E/2"},{"type":"function","doc":"","title":"Arrows.from_ok/1","ref":"Arrows.html#from_ok/1"},{"type":"function","doc":"","title":"Arrows.ok/1","ref":"Arrows.html#ok/1"},{"type":"function","doc":"","title":"Arrows.ok_or/2","ref":"Arrows.html#ok_or/2"},{"type":"function","doc":"","title":"Arrows.to_ok/1","ref":"Arrows.html#to_ok/1"},{"type":"macro","doc":"A more flexible drop-in replacement for the standard elixir pipe operator.\n\nSpecial features are unlocked when using the `...` (ellipsis) on the right hand side:\n\n* The right hand side need not be a function, it can be any expression containing the ellipsis.\n* The ellipsis will be replaced with the result of evaluating the hand side expression.\n* You may use the ellipsis multiple times and the left hand side will be calculated exactly once.\n\nYou can do crazy stuff with the ellipsis, but remember that people have to read it!","title":"Arrows.|>/2","ref":"Arrows.html#%7C%3E/2"},{"type":"macro","doc":"","title":"Arrows.|||/2","ref":"Arrows.html#%7C%7C%7C/2"},{"type":"macro","doc":"Like `OK.~>`","title":"Arrows.~>/2","ref":"Arrows.html#~%3E/2"},{"type":"module","doc":"Some helpers to sparkle on top of [Ecto](https://hexdocs.pm/ecto/Ecto.html) \n\n- [`EctoSparkles.proload/3`](#proload-documentation) and `EctoSparkles.join_preload/2` to join and preload associations with less verbosity\n- [`EctoSparkles.reusable_join/5`](#reusable_join-documentation) to avoid duplicating joins \n- `EctoSparkles.Migrator` to run migrations, rollbacks, etc in a release and `EctoSparkles.AutoMigrator` to automatically run them at startup.\n- `EctoSparkles.DataMigration`: a behaviour implemented for data migrations (generally backfills).\n- `EctoSparkles.Log` to log slow or possible N+1 queries with telemetry (showing stacktraces)\n- `EctoSparkles.Changesets.Errors` to generate readable errors for changesets\n\nNOTE: you need to put something like `config :ecto_sparkles, :otp_app, :your_otp_app_name` in your app's config.\n\n\n## `proload` documentation\n\nA macro which tells Ecto to perform a join and preload of associations.\n\nBy default, Ecto preloads associations using a separate query for each association, which can degrade performance.\n\nYou can make it run faster by using a combination of join/preload, but that requires a bit of boilerplate (see examples below).","title":"EctoSparkles","ref":"EctoSparkles.html"},{"type":"module","doc":"```\n  query\n  |> join(:left, [o, activity: activity], assoc(:object), as: :object)\n  |> preload([l, activity: activity, object: object], activity: {activity, [object: object]})\n```\n\nEcto requires calling three different functions for this operation: `Query.join/4`, `Query.assoc/3` and `Query.preload/2`. \n\nHere's another example:\n\n```\n  Invoice\n  |> join(:left, [i], assoc(i, :customer), as: :customer)\n  |> join(:left, [i], assoc(i, :lines), as: :lines)\n  |> preload([lines: v, customers: c], lines: v, customer: c)\n```","title":"Examples using standard Ecto - EctoSparkles","ref":"EctoSparkles.html#module-examples-using-standard-ecto"},{"type":"module","doc":"With `proload`, you can accomplish this with just one line of code:\n\n```\nproload(query, activity: [:object])\n```\n\nAnd for the other example:\n```\nproload(Invoice, [:customer, :lines])\n```\n\nAs a bonus, it automatically makes use of `reusable_join` so calling it multiple times with the same association has no ill effects.","title":"Example using proload - EctoSparkles","ref":"EctoSparkles.html#module-example-using-proload"},{"type":"module","doc":"`join_preload` is `proload`'s sister macro with a slightly different syntax:\n\n```\n  join_preload(query, [:activity, :object])\n```\n\nand:\n```\n  Invoice\n  |> join_preload(:customer)\n  |> join_preload(:lines)\n```\n\n\n## `reusable_join` documentation\n\nA macro similar to `Ecto.Query.join/{4,5}`, but can be called multiple times \nwith the same alias.\n\nNote that only the first join operation is performed, the subsequent ones that use the same alias\nare just ignored. Also note that because of this behaviour, its mandatory to specify an alias when\nusing this function.\n\nThis is helpful when you need to perform a join while building queries one filter at a time,\nbecause the same filter could be used multiple times or you could have multiple filters that\nrequire the same join, which poses a problem with how the `filter/3` callback work, as you\nneed to return a dynamic with the filtering, which means that the join must have an alias,\nand by default Ecto raises an error when you add multiple joins with the same alias.\n\nTo solve this, it is recommended to use this macro instead of the default `Ecto.Query.join/{4,5}`,\nin which case there will be only one join in the query that can be reused by multiple filters.","title":"Example using join_preload - EctoSparkles","ref":"EctoSparkles.html#module-example-using-join_preload"},{"type":"module","doc":"```elixir\nquery\n|> reusable_join(:left, [t1], t2 in \"other_table\", on: t1.id == t2.id, as: :other_a)\n|> reusable_join(:left, [t1], t2 in \"other_table\", on: t1.id == t2.id, as: :other_b)\n```","title":"Creating reusable joins - EctoSparkles","ref":"EctoSparkles.html#module-creating-reusable-joins"},{"type":"module","doc":"- Copyright (c) 2021 Bonfire developers\n- Copyright (c) 2020 Up Learn\n- Copyright (c) 2019 Joshua Nussbaum \n\n- `join_preload` was originally forked from [Ecto.Preloader](https://github.com/joshnuss/ecto_preloader), licensed under WTFPL)\n- `reusable_join` was originally forked from [QueryElf](https://gitlab.com/up-learn-uk/query-elf), licensed under Apache License Version 2.0\n- original code licensed under Apache License Version 2.0","title":"Copyright - EctoSparkles","ref":"EctoSparkles.html#module-copyright"},{"type":"macro","doc":"`join_preload` is a helper for preloading associations using joins.\n\nBy default, Ecto preloads associations using a separate query for each association, which can degrade performance.\nYou could make it run faster by using a combination of join/preload, but that requires a bit of boilerplate (see example below).\n\nWith `EctoSparkles`, you can accomplish this with just one line of code.","title":"EctoSparkles.join_preload/2","ref":"EctoSparkles.html#join_preload/2"},{"type":"macro","doc":"```\nimport Ecto.Query\nInvoice\n|> join(:left, [i], assoc(i, :customer), as: :customer)\n|> join(:left, [i, c], assoc(c, :account), as: :account)\n|> join(:left, [i], assoc(i, :lines), as: :lines)\n|> preload([lines: v, customers: c, account: a], lines: v, customer: {c, [a: account]})\n|> Repo.all()\n```","title":"Example using just Ecto - EctoSparkles.join_preload/2","ref":"EctoSparkles.html#join_preload/2-example-using-just-ecto"},{"type":"macro","doc":"```\nimport EctoSparkles\nInvoice\n|> join_preload([:customer, :account])\n|> join_preload([:lines])\n|> Repo.all()\n```","title":"Example using `join_preload` - EctoSparkles.join_preload/2","ref":"EctoSparkles.html#join_preload/2-example-using-join_preload"},{"type":"macro","doc":"AKA `join_preload++`. It's more powerful, but it does it with more (and different!) syntax.\n\ne.g.\n```\nproload(query, activity: [\n  :verb, :boost_count, :like_count, :replied,\n  # relations under object will have their aliases prefixed with object_, i.e.\n  # :object_message, :object_post, :object_post_content\n  # the original names will still be used for the associations.\n  object: {\"object_\", [:message, :post, :post_content]}\n])\n```","title":"EctoSparkles.proload/3","ref":"EctoSparkles.html#proload/3"},{"type":"macro","doc":"`reusable_join` is similar to `Ecto.Query.join/{4,5}`, but can be called multiple times with the same alias.\n\nNote that only the first join operation is performed, the subsequent ones that use the same alias\nare just ignored. Also note that because of this behaviour, it is mandatory to specify an alias when\nusing this function.\n\nThis is helpful when you need to perform a join while building queries one filter at a time,\nbecause the same filter could be used multiple times or you could have multiple filters that\nrequire the same join, which poses a problem with how the `filter/3` callback work, as you\nneed to return a dynamic with the filtering, which means that the join must have an alias,\nand by default Ecto raises an error when you add multiple joins with the same alias.\n\nTo solve this, it is recommended to use this macro instead of the default `Ecto.Query.join/{4,5}`,\nin which case there will be only one join in the query that can be reused by multiple filters.","title":"EctoSparkles.reusable_join/5","ref":"EctoSparkles.html#reusable_join/5"},{"type":"module","doc":"Runs ecto migrations automatically on startup (add this to your app's supervision tree)","title":"EctoSparkles.AutoMigrator","ref":"EctoSparkles.AutoMigrator.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"EctoSparkles.AutoMigrator.child_spec/1","ref":"EctoSparkles.AutoMigrator.html#child_spec/1"},{"type":"function","doc":"","title":"EctoSparkles.AutoMigrator.init/1","ref":"EctoSparkles.AutoMigrator.html#init/1"},{"type":"function","doc":"","title":"EctoSparkles.AutoMigrator.start_link/1","ref":"EctoSparkles.AutoMigrator.html#start_link/1"},{"type":"function","doc":"","title":"EctoSparkles.AutoMigrator.startup_migrations/0","ref":"EctoSparkles.AutoMigrator.html#startup_migrations/0"},{"type":"module","doc":"","title":"EctoSparkles.Changesets.Errors","ref":"EctoSparkles.Changesets.Errors.html"},{"type":"function","doc":"","title":"EctoSparkles.Changesets.Errors.changeset_errors_string/2","ref":"EctoSparkles.Changesets.Errors.html#changeset_errors_string/2"},{"type":"function","doc":"","title":"EctoSparkles.Changesets.Errors.error/2","ref":"EctoSparkles.Changesets.Errors.html#error/2"},{"type":"behaviour","doc":"A behaviour implemented by our data migrations (generally backfills).\n\nBased on [A microframework for backfill migrations in Elixir's Ecto](https://tylerayoung.com/2023/08/13/migrations/), in turn based on David Bernheisel's [template for deterministic backfills](https://fly.io/phoenix-files/backfilling-data/#batching-deterministic-data).\n\nA data migration using this behaviour may look like this (which you can put simply put in Ecto migrations, eg. `priv/repo/migrations/priv/repo/migrations/20231019004944_data_onboarding_step.exs`):\n\n```elixir\ndefmodule MyApp.Repo.Migrations.BackfillOnboardingStep do\n  alias EctoSparkles.DataMigration\n  use DataMigration\n  \n  @impl DataMigration\n  def base_query do\n    # NOTE: This works in cases where:\n    # 1. The data can be queried with a condition that not longer applies after the migration ran, so you can repeatedly query the data and update the data until the query result is empty. For example, if a column is currently null and will be updated to not be null, then you can query for the null records and pick up where you left off.\n    # 2. The migration is written in such a way that it can be ran several times on the same data without causing data loss or duplication (or crashing).\n\n    from(u in \"users\", # Notice how we do not use Ecto schemas here.\n      where: is_nil(u.onboarding_step),\n      select: %{id: u.id}\n    )\n  end\n\n  @impl DataMigration\n  def config do\n    %DataMigration.Config{batch_size: 100, throttle_ms: 1_000, repo: MyApp.Repo}\n  end\n\n  @impl DataMigration\n  def migrate(results) do\n    Enum.each(results, fn %{id: user_id} ->\n      # hooks into a context module, which is more likely to be kept up to date as the app evolves, to avoid having to update old migrations\n      user_id\n      |> MyApp.Users.set_onboarding_step!()\n    end)\n  end\nend\n```","title":"EctoSparkles.DataMigration","ref":"EctoSparkles.DataMigration.html"},{"type":"callback","doc":"The core of the query you want to use to SELECT a map of your data.\nThe `DataMigration.Runner` will take care of limiting this to a batch size, ordering\nit by row ID, and restricting it to rows you haven't yet handled.\nThe query *must* select a map, and that map must have an `:id` key for the\nmigration runner to reference as the last-modified row in your table.","title":"EctoSparkles.DataMigration.base_query/0","ref":"EctoSparkles.DataMigration.html#c:base_query/0"},{"type":"callback","doc":"","title":"EctoSparkles.DataMigration.config/0","ref":"EctoSparkles.DataMigration.html#c:config/0"},{"type":"callback","doc":"The callback to operate on a result set from your query.\nImplementers should `raise` an error if you're unable to process the batch.","title":"EctoSparkles.DataMigration.migrate/1","ref":"EctoSparkles.DataMigration.html#c:migrate/1"},{"type":"module","doc":"Configuration for a `DataMigration` behaviour module, used by the `DataMigration.Runner`.\n\nbatch size: how many elements from your table to migrate at a time. \n\nthrottle time: the amount of downtime the runner should sleep between batches.\n\nasync: Whether to run the migration in an async process, meaning the execution of the rest of the migrations (and the app startup if you're auto-migrating on start) won't be delayed. WARNING: this means the migration will be marked as done as soon as it starts, so if the process is interrupted it won't be re-run automatically.\n\nfirst_id: The very first ID when sorting UUIDs in ascending order. If you use integer IDs instead, this would be 0.","title":"EctoSparkles.DataMigration.Config","ref":"EctoSparkles.DataMigration.Config.html"},{"type":"module","doc":"Runs a `DataMigration`","title":"EctoSparkles.DataMigration.Runner","ref":"EctoSparkles.DataMigration.Runner.html"},{"type":"function","doc":"","title":"EctoSparkles.DataMigration.Runner.run/1","ref":"EctoSparkles.DataMigration.Runner.html#run/1"},{"type":"module","doc":"A custom Ecto type for handling the serialization of arbitrary\ndata types stored as binary data in the database. Requires the\nunderlying DB field to be a binary.","title":"EctoSparkles.ErlangTermBinary","ref":"EctoSparkles.ErlangTermBinary.html"},{"type":"function","doc":"","title":"EctoSparkles.ErlangTermBinary.cast/1","ref":"EctoSparkles.ErlangTermBinary.html#cast/1"},{"type":"function","doc":"Provides custom casting rules for params. Nothing changes here.\nWe only need to handle deserialization.","title":"EctoSparkles.ErlangTermBinary.cast/2","ref":"EctoSparkles.ErlangTermBinary.html#cast/2"},{"type":"function","doc":"Converting the data structure to binary for storage.","title":"EctoSparkles.ErlangTermBinary.dump/1","ref":"EctoSparkles.ErlangTermBinary.html#dump/1"},{"type":"function","doc":"","title":"EctoSparkles.ErlangTermBinary.embed_as/1","ref":"EctoSparkles.ErlangTermBinary.html#embed_as/1"},{"type":"function","doc":"","title":"EctoSparkles.ErlangTermBinary.equal?/2","ref":"EctoSparkles.ErlangTermBinary.html#equal?/2"},{"type":"function","doc":"Convert the raw binary value from the database back to\nthe desired term.\n\nUses `Plug.Crypto.non_executable_binary_to_term/2` - a restricted version of `:erlang.binary_to_term/2` that forbids executable terms, such as anonymous functions.\n\nThis function restricts atoms, with the [:safe] option set, so only existing (and loaded) atoms will be deserialized.","title":"EctoSparkles.ErlangTermBinary.load/1","ref":"EctoSparkles.ErlangTermBinary.html#load/1"},{"type":"function","doc":"","title":"EctoSparkles.ErlangTermBinary.type/0","ref":"EctoSparkles.ErlangTermBinary.html#type/0"},{"type":"module","doc":"A custom Ecto type for handling the serialization of arbitrary data types stored as JSON data in the database. Requires the underlying DB field to be a map / JSONB field.","title":"EctoSparkles.JSONSerdeData","ref":"EctoSparkles.JSONSerdeData.html"},{"type":"function","doc":"","title":"EctoSparkles.JSONSerdeData.cast/1","ref":"EctoSparkles.JSONSerdeData.html#cast/1"},{"type":"function","doc":"Provides custom casting rules for params. Nothing changes here.\nWe only need to handle deserialization.","title":"EctoSparkles.JSONSerdeData.cast/2","ref":"EctoSparkles.JSONSerdeData.html#cast/2"},{"type":"function","doc":"Converting the data structure to a JSON binary for storage.","title":"EctoSparkles.JSONSerdeData.dump/1","ref":"EctoSparkles.JSONSerdeData.html#dump/1"},{"type":"function","doc":"","title":"EctoSparkles.JSONSerdeData.embed_as/1","ref":"EctoSparkles.JSONSerdeData.html#embed_as/1"},{"type":"function","doc":"","title":"EctoSparkles.JSONSerdeData.equal?/2","ref":"EctoSparkles.JSONSerdeData.html#equal?/2"},{"type":"function","doc":"Convert the JSON binary value from the database back to the desired term.","title":"EctoSparkles.JSONSerdeData.load/1","ref":"EctoSparkles.JSONSerdeData.html#load/1"},{"type":"function","doc":"","title":"EctoSparkles.JSONSerdeData.type/0","ref":"EctoSparkles.JSONSerdeData.html#type/0"},{"type":"module","doc":"Log Ecto queries, and output warnings for slow or possible n+1 queries\n\nTo set up, simply add `EctoSparkles.Log.setup(YourApp.Repo)` in your app's main `Application.start/2` module.","title":"EctoSparkles.Log","ref":"EctoSparkles.Log.html"},{"type":"function","doc":"","title":"EctoSparkles.Log.check_if_n_plus_1/1","ref":"EctoSparkles.Log.html#check_if_n_plus_1/1"},{"type":"function","doc":"","title":"EctoSparkles.Log.format_log/3","ref":"EctoSparkles.Log.html#format_log/3"},{"type":"function","doc":"","title":"EctoSparkles.Log.handle_event/4","ref":"EctoSparkles.Log.html#handle_event/4"},{"type":"function","doc":"","title":"EctoSparkles.Log.inline_params/3","ref":"EctoSparkles.Log.html#inline_params/3"},{"type":"function","doc":"","title":"EctoSparkles.Log.log_query/3","ref":"EctoSparkles.Log.html#log_query/3"},{"type":"function","doc":"","title":"EctoSparkles.Log.setup/1","ref":"EctoSparkles.Log.html#setup/1"},{"type":"module","doc":"","title":"EctoSparkles.Migrator","ref":"EctoSparkles.Migrator.html"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.create/0","ref":"EctoSparkles.Migrator.html#create/0"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.create/2","ref":"EctoSparkles.Migrator.html#create/2"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.migrate/0","ref":"EctoSparkles.Migrator.html#migrate/0"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.migrate/1","ref":"EctoSparkles.Migrator.html#migrate/1"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.rollback/2","ref":"EctoSparkles.Migrator.html#rollback/2"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.rollback_all/0","ref":"EctoSparkles.Migrator.html#rollback_all/0"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.rollback_all/1","ref":"EctoSparkles.Migrator.html#rollback_all/1"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.rollback_to/1","ref":"EctoSparkles.Migrator.html#rollback_to/1"},{"type":"function","doc":"","title":"EctoSparkles.Migrator.rollback_to/2","ref":"EctoSparkles.Migrator.html#rollback_to/2"},{"type":"function","doc":"Print the migration status for configured Repos' migrations.","title":"EctoSparkles.Migrator.status/0","ref":"EctoSparkles.Migrator.html#status/0"},{"type":"module","doc":"Checks a query against the previous one and increments counter of collisions or swaps previous query with the last one.","title":"EctoSparkles.NPlus1Detector","ref":"EctoSparkles.NPlus1Detector.html"},{"type":"function","doc":"","title":"EctoSparkles.NPlus1Detector.check/1","ref":"EctoSparkles.NPlus1Detector.html#check/1"},{"type":"function","doc":"","title":"EctoSparkles.NPlus1Detector.do_check/2","ref":"EctoSparkles.NPlus1Detector.html#do_check/2"},{"type":"module","doc":"Provides functions for sanitising input on `Ecto.Changeset` string fields.","title":"EctoSparkles.SanitiseStrings","ref":"EctoSparkles.SanitiseStrings.html"},{"type":"function","doc":"","title":"EctoSparkles.SanitiseStrings.clean_html/2","ref":"EctoSparkles.SanitiseStrings.html#clean_html/2"},{"type":"function","doc":"","title":"EctoSparkles.SanitiseStrings.sanitise_strings/2","ref":"EctoSparkles.SanitiseStrings.html#sanitise_strings/2"},{"type":"function","doc":"Sanitises all changes in the given changeset that apply to field which are of the `:string` `Ecto` type.\n\nBy default it uses the `HtmlSanitizeEx.strip_tags/1` function on any change that satisfies all of the following conditions:\n1. The field associated with the change is of the type `:string`.\n2. The field associated with the change is not in the blacklisted_fields list of `opts` as defined using the `:except` key in `opts`.\nNote that this function will change the value in the `:changes` map of an\n`%Ecto.Changeset{}` struct if the given changes are sanitized.","title":"EctoSparkles.SanitiseStrings.strip_all_tags/2","ref":"EctoSparkles.SanitiseStrings.html#strip_all_tags/2"},{"type":"function","doc":"iex> attrs = %{string_field: \" Bad \"}\n    iex> result_changeset =\n    ...>   attrs\n    ...>   |> FakeEctoSchema.changeset()\n    ...>   |> EctoSparkles.SanitiseStrings.strip_all_tags()\n    iex> result_changeset.changes\n    %{string_field: \"Bad\"}\nFields can be exempted from sanitization via the `:except` option.\n    iex> attrs = %{string_field: \" Bad \"}\n    iex> result_changeset =\n    ...>   attrs\n    ...>   |> FakeEctoSchema.changeset()\n    ...>   |> EctoSparkles.SanitiseStrings.strip_all_tags(except: [:string_field])\n    iex> result_changeset.changes\n    %{string_field: \" Bad \"}","title":"Examples - EctoSparkles.SanitiseStrings.strip_all_tags/2","ref":"EctoSparkles.SanitiseStrings.html#strip_all_tags/2-examples"},{"type":"function","doc":"ies> attrs\n    ...>   |> FakeEctoSchema.changeset()\n    ...>   |> EctoSparkles.SanitiseStrings.sanitise_strings(scrubber: HtmlSanitizeEx.Scrubber.html5/1)","title":"You can also specify a specific scrubber (by passing a function as reference): - EctoSparkles.SanitiseStrings.strip_all_tags/2","ref":"EctoSparkles.SanitiseStrings.html#strip_all_tags/2-you-can-also-specify-a-specific-scrubber-by-passing-a-function-as-reference"},{"type":"module","doc":"[![hex.pm](https://img.shields.io/hexpm/v/exto)](https://hex.pm/packages/exto)\n[hexdocs](https://hexdocs.pm/exto)\n\n`Exto` provides configuration-driven Ecto schema extensibility","title":"Exto","ref":"Exto.html"},{"type":"module","doc":"","title":"Usage - Exto","ref":"Exto.html#module-usage"},{"type":"module","doc":"```elixir\ndefmodule My.Schema do\n  use Ecto.Schema\n  import Exto, only: [flex_schema: 1]\n\n  schema \"my_table\" do\n    field :name, :string # just normal schema things\n    flex_schema(:my_app) # boom! give me the stuff\n  end\nend\n```\n\nOr if you want the `Access` protocol to be auto-implemented on the struct (because [the reasoning](https://hexdocs.pm/elixir/Access.html#module-maps-and-structs) for not having it on structs doesn't apply as much when using Exto), you can pull in the `Accessible` library by simply using `use Exto` instead of `import Exto`.","title":"Example Schema - Exto","ref":"Exto.html#module-example-schema"},{"type":"module","doc":"```elixir\nconfig :my_app, My.Schema,\n  belongs_to: [\n    foo: Foo,                   # belongs_to :foo, Foo\n    bar: {Bar, type: :integer}, # belongs_to :bar, Bar, type: :integer\n  ],\n  field: [\n    foo: :string,                # field :foo, :string\n    bar: {:integer, default: 4}, # field :foo, :integer, default: 4\n  ],\n  has_one: [\n    foo: Foo,                             # has_one :foo, Foo\n    bar: {Bar, foreign_key: :the_bar_id}, # has_one :bar, Bar, foreign_key: :the_bar_id\n  ]\n  has_many: [\n    foo: Foo,                             # has_many :foo, Foo\n    bar: {Bar, foreign_key: :the_bar_id}, # has_many :bar, Bar, foreign_key: :the_bar_id\n  ]\n  many_to_many: [\n    foo: Foo,                         # many_to_many :foo, Foo\n    bar: {Bar, join_through: FooBar}, # many_to_many :bar, Bar, :join_through: FooBar\n  ]\n```\n\nThis example won't work very well because it is redefining `foo` and `bar` 5 times, but you get the point.\n\nReading of configuration is done during compile time. The relations will be baked in during compilation, thus:\n\n* Do not expect this to work in runtime config.\n* You will need to rebuild all dependencies which use this macro when you change their configuration.","title":"Example configuration - Exto","ref":"Exto.html#module-example-configuration"},{"type":"module","doc":"Copyright (c) 2020 Exto Contributors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Exto","ref":"Exto.html#module-copyright-and-license"},{"type":"macro","doc":"Adds additional associations dynamically based on the config found under the name of the current module for the given OTP application. \n\nEach key maps to an Ecto.Schema function:\n\n* `belongs_to`\n* `field`\n* `has_many`\n* `has_one`\n* `many_to_many`\n\nEach of these keys should map to a keyword list where the key is the name of the field or association and the value is one of:\n\n* A type\n* A tuple of type and options (keyword list)","title":"Exto.flex_schema/1","ref":"Exto.html#flex_schema/1"},{"type":"module","doc":"> One foreign key to rule them all and in the darkness, bind them. - Gandalf, paraphrased.\n\n[![hex.pm](https://img.shields.io/hexpm/v/needle)](https://hex.pm/packages/needle)\n[hexdocs](https://hexdocs.pm/needle)","title":"Needle","ref":"Needle.html"},{"type":"module","doc":"Bonfire uses the excellent PostgreSQL database for most data storage. PostgreSQL allows us to make a wide range of queries and to make them relatively fast while upholding data integrity guarantees.\n\nPostgres is a relational schema-led database - it expects you to pre-define tables and the fields in each table (represented in tabular form, i.e. as a collection of tables with each table consisting of a set of rows and columns). Fields can contain data or a reference to a row in another table. \n\nThis usually means that a field containing a reference has to be pre-defined with a foreign key pointing to a specific field (typically a primary key, like an ID column) *in a specific table*. \n\nA simple example would be a blogging app, which might have a `post` table with `author` field that references the `user` table.\n\nA social network, by contrast, is actually a graph of objects. Objects need to be able to refer to other objects by their ID without knowing their type. \n\nA simple example would be likes, you might have a `likes` table with `liked_post_id` field that references the `post` table. But you don't just have posts that can be liked, but also videos, images, polls, etc, each with their own table, but probably do not want to have to add `liked_video_id`, `liked_image_id`, etc?\n\nWe needed the flexibility to have a foreign key that can reference any referenceable object. We call our system `Needle`.\n\nThis guide is a brief introduction to Needle. It assumes some foundational knowledge:\n\n* Basic understanding of how relational databases like Postgresql work, in particular:\n  * Tables being made up of fields.\n  * What a primary key is and why it's useful.\n  * Foreign keys and relationships between tables (1 to 1, 1 to Many, Many to 1, Many to Many).\n  * Views as virtual tables backed by a SQL query.\n\n* Basic understanding of Elixir (enough to follow the examples).\n* Basic working knowledge of the [Ecto](https://hexdocs.pm/ecto/Ecto.html) database library (schema and migration definitions)","title":"Intro - Needle","ref":"Needle.html#module-intro"},{"type":"module","doc":"A means of foreign keying many tables in one field. Designed for highly interlinked data in highly dynamic schemata where tracking all the foreign keys is neither desired nor practical.\n\n> A universal foreign key is actually a hard problem. Many approaches are on offer with a variety of tradeoffs. If plugging into Bonfire's Needle-based core extensions isn't a requirement for you (i.e. you don't need to put things into feeds or use boundaries for access-control) should carefully consider a variety of approaches rather than just blindly adopting the one that fitted our project's needs the best!","title":"What is Needle? - Needle","ref":"Needle.html#module-what-is-needle"},{"type":"module","doc":"All referenceable objects in the system have a unique ID (primary key) whose type is the `Needle.UID`. `UUIDv7` and [ULIDs](https://github.com/ulid/spec) are a lot like standard `UUID` in that you can generate unique ones independently of the database. It's also a little different, being made up of two parts:\n\n* The current timestamp, to millisecond precision.\n* Strong random padding for uniqueness.\n\nThis means that it naturally sorts by time to the millisecond (close enough for us), giving us a performance advantage compared to queries ordered by a separate creation datetime field (by contrast, UUIDv4 is randomly distributed).\n\nIf you've only worked with integer primary keys before, you are probably used to letting the database dispense an ID for you. With `ULID` (or `UUID`), IDs can be known *before* they are stored, greatly easing the process of storing a graph of data and allowing us to do more of the preparation work outside of a transaction for increased performance.\n\nIn PostgreSQL, we actually store `UUIDv7` and `ULID`s as `UUID` columns, thanks to both being the same size (and the lack of specific column types shipping with postgresql). You mostly will not notice this because it's handled for you, but there are a few places it can come up:\n\n* Ecto debug and error output may show either binary values or UUID-formatted values.\n* Hand-written SQL may need to convert table IDs to the `UUID` format before use.","title":"Identifying objects - the UID type - Needle","ref":"Needle.html#module-identifying-objects-the-uid-type"},{"type":"module","doc":"The `Needle` system is mostly based around a single table represented by the `Needle.Pointer` schema with the following fields:\n\n* `id` (UID) - the database-wide unique id for the object, primary key.\n* `table_id` (UID) - identifies the type of the object, references `Needle.Table`.\n* `deleted_at` (timestamp, default: `null`) - when the object was deleted.\n\nEvery object that is stored in the system will have a record in this table. It may also have records in other tables (handy for storing more than 3 fields about the object!).\n\nA `Table` is a record of a table that may be linked to by a pointer. A `Pointer` is a pointer ID and a table ID.\nWith these two ingredients, we can construct a means of pointing to any table that has a `Table` entry.\n\nBut don't worry about `Needle.Table` for now, just know that every object type will have a record there so `Needle.Pointer.table_id` can reference it.","title":"It's just a table - Needle","ref":"Needle.html#module-it-s-just-a-table"},{"type":"module","doc":"Aside from adding the dependency, you will also need to write add a migration to set up the database before you can start writing your regular migrations:\n\n```elixir\ndefmodule MyApp.Repo.Migrations.InitPointers do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def up(), do: inits(:up)\n  def down(), do: inits(:down)\n\n  defp inits(dir) do\n    init_pointers_ulid_extra(dir) # this one is optional but recommended\n    init_pointers(dir) # this one is not optional\n  end\nend\n```\n\n> Note: Pointers is already a default dependency of most Bonfire extensions, so you shouldn't need to add the migration if building a new extension.","title":"Installation - Needle","ref":"Needle.html#module-installation"},{"type":"module","doc":"","title":"Declaring Object Types - Needle","ref":"Needle.html#module-declaring-object-types"},{"type":"module","doc":"The first step to declaring a new type is picking a unique table ID in UID format. \n\nYou could just generate a random UID, but since these IDs are special, we tend to assign a synthetic UID that are readable as words so they stand out in debug output.\n\nFor example, the ID for the `Feed` table is: `1TFEEDS0NTHES0V1S0FM0RTA1S`, which can be read as \"It feeds on the souls of mortals\". Feel free to have a little fun coming up with them, it makes debug output a little more cheery! The rules are:\n\n* The alphabet is [Crockford's Base32](https://en.wikipedia.org/wiki/Base32#Crockford's_Base32).\n* They must be 26 characters in length.\n* The first character must be a digit in the range 0-7.\n\nTo help you with this, the `Needle.UID.synthesise!/1` method takes an alphanumeric binary and tries to return you it transliterated into a valid UID. Example usage:\n\n```\niex(1)> Needle.UID.synthesise!(\"itfeedsonthesouls\")\n\n11:20:28.299 [error] Too short, need 9 chars.\n:ok\niex(2)> Needle.UID.synthesise!(\"itfeedsonthesoulsofmortalsandothers\")\n\n11:20:31.819 [warn]  Too long, chopping off last 9 chars\n\"1TFEEDS0NTHES0V1S0FM0RTA1S\"\niex(3)> Needle.UID.synthesise!(\"itfeedsonthesoulsofmortals\")\n\"1TFEEDS0NTHES0V1S0FM0RTA1S\"\niex(4)> Needle.UID.synthesise!(\"gtfeedsonthesoulsofmortals\")\n\n11:21:03.268 [warn]  First character must be a digit in the range 0-7, replacing with 7\n\"7TFEEDS0NTHES0V1S0FM0RTA1S\"\n```","title":"Picking a table id - Needle","ref":"Needle.html#module-picking-a-table-id"},{"type":"module","doc":"`Needle.Virtual` is the simplest and most common type of object. Here's a definition of block:\n\n```elixir\ndefmodule Bonfire.Data.Social.Block do\n\n  use Needle.Virtual,\n    otp_app: :bonfire_data_social,\n    table_id: \"310CK1NGSTVFFAV01DSSEE1NG1\",\n    source: \"bonfire_data_social_block\"\n\n  alias Bonfire.Data.Edges.Edge\n\n  virtual_schema do\n    has_one :edge, Edge, foreign_key: :id\n  end\nend\n```\n\nIt should look quite similar to a mixin definition, except that we `use` `Needle.Virtual` this time (passing an additional `table_id` argument) and we call the `virtual_schema` macro.\n\nThe primary limitation of a virtual is that you cannot put extra fields on it. This also means that `belongs_to` is not generally permitted because it results in adding a field, while `has_one` and `has_many` work just fine as they do not cause the creation of fields in the schema.\n\nThis is not usually a problem, as extra fields can be put into [mixins](mixins-storing-data-about-objects) or [multimixins](#multimixins) as appropriate.\n\nIn all other respects, they behave like Pointables. You can have changesets over them and select and insert as usual.\n\n> Under the hood, a virtual has a writable view (in the above example, called `bonfire_data_social_block`). It looks like a table with just an id, but it's populated with all the ids of blocks that have not been deleted. When the view is inserted into, a record is created in the `pointers` table for you transparently. When you delete from the view, the corresponding `pointers` entry is marked deleted for you.\n\n> Before introducing Virtuals, we noticed it was very common to create Pointables with no extra fields just so we could use the Needle system. Virtuals are alternative for this case that requires less typing and provides a reduced overhead vs pointable (as they save the cost of maintaining a primary key in that table and the associated disk space).","title":"Virtual pointables (\"virtuals\") - Needle","ref":"Needle.html#module-virtual-pointables-virtuals"},{"type":"module","doc":"The other, lesser used, type of object is called the `Needle.Pointable`. The major difference is that unlike the simple case of virtuals, pointables are not backed by views, but by tables.\n\n> When a record is inserted into a pointable table, a copy is made in the `pointers` table for you transparently. When you delete from the table, the the corresponding `pointers` entry is marked deleted for you. In these ways, they behave very much like virtuals. By having a table, however, we are free to add new fields.\n\nPointables pay for this flexibility by being slightly more expensive than virtuals:\n\n* Records must be inserted into/deleted from two tables (the pointable's table and the `pointers` table).\n* The pointable table needs its own primary key index.\n\nThe choice of using a pointable instead of a virtual combined with one or more mixins is ultimately up to you.\n\nHere is a definition of a pointable type (indicating an ActivityPub activity whose type we don't recognise, stored as a JSON blob):\n\n```elixir\ndefmodule Bonfire.Data.Social.APActivity do\n\n  use Needle.Pointable,\n    otp_app: :bonfire_data_social,\n    table_id: \"30NF1REAPACTTAB1ENVMBER0NE\",\n    source: \"bonfire_data_social_apactivity\"\n\n  pointable_schema do\n    field :json, :map\n  end\nend\n```\n\n\n> As you can see, to declare a pointable schema, we start by using `Needle.Pointable`, providing the name of our otp application, the source table's name in the database and our chosen sentinel UID.\n\n> We then call `pointable_schema` and define any fields we wish to put directly in the table. For the most part, `pointable_schema` is like Ecto's `schema` macro, except you do not provide the table name and let it handle the primary key.\n\n> If for some reason you wished to turn ID autogeneration off, you could pass `autogenerate: false` to the options provided when using `Needle.Pointable`.","title":"Pointables - Needle","ref":"Needle.html#module-pointables"},{"type":"module","doc":"","title":"Adding re-usable fields - Needle","ref":"Needle.html#module-adding-re-usable-fields"},{"type":"module","doc":"Mixins are tables which contain extra information on behalf of objects. Each object can choose to\nrecord or not record information for each mixin. Sample mixins include:\n\n* user profile (containing a name, location and summary)\n* post content (containing the title, summary, and/or html body of a post or message)\n* created (containing the id of the object creator)\n\nIn this way, they are reusable across different object types. One mixin may (or may not) be used by any number of objects. This is mostly driven by the type of the object we are storing, but can also be driven by user input.\n\nMixins are just tables too! The only requirement is they have a `UID` primary key which references `Needle.Pointer`. The developer of the mixin is free to put whatever other fields they want in the table, so long as they have that primary-key-as-reference (which will be automatically added for you by the `mixin_schema` macro). \n\nHere is a sample mixin definition for a user profile:\n\n```elixir\ndefmodule Bonfire.Data.Social.Profile do\n\n  use Needle.Mixin,\n    otp_app: :bonfire_data_social,\n    source: \"bonfire_data_social_profile\"\n\n  mixin_schema do\n    field :name, :string\n    field :summary, :string\n    field :website, :string\n    field :location, :string\n  end\nend\n```\n\n> Mixin tables are not themselves pointable, so there is no need to specify a table id as when defining a pointable schema.\n\nAside from `use`ing `Needle.Mixin` instead of `Ecto.Schema` and calling `mixin_schema` instead of\n`schema`, pretty similar to a standard Ecto schema, right? \n\nThe arguments to `use Needle.Mixin` are:\n\n* `otp_app`: the OTP app name to use when loading dynamic configuration, e.g. the current extension or app (required)\n* `source`: the underlying table name to use in the database\n\nWe will cover dynamic configuration later. For now, you can use the OTP app that includes the module.","title":"Mixins - storing data about objects - Needle","ref":"Needle.html#module-mixins-storing-data-about-objects"},{"type":"module","doc":"Multimixins are like mixins, except that where an object may have 0 or 1 of a particular mixins, an object may have any number of a particular multimixin.\n\nFor this to work, a multimixin must have a *compound primary key* which must contain an `id` column referencing `Needle.Pointer` and at least one other field which will collectively be unique.\n\nAn example multimixin is used for publishing an item to feeds:\n\n```elixir\ndefmodule Bonfire.Data.Social.FeedPublish do\n\n  use Needle.Mixin,\n    otp_app: :bonfire_data_social,\n    source: \"bonfire_data_social_feed_publish\"\n\n  alias Needle.Pointer\n\n  mixin_schema do\n    belongs_to :feed, Pointer, primary_key: true\n  end\nend\n```\n\nNotice that this looks very similar to defining a mixin. Indeed, the only difference is the `primary_key: true` in this line, which adds a second field to the compound primary key.\nThis results in ecto recording a compound primary key of `(id, feed_id)` for the schema (the id is added for you as with regular mixins).","title":"Multimixins - Needle","ref":"Needle.html#module-multimixins"},{"type":"module","doc":"Migrations are typically included along with the schemas as public APIs you can call within your project's migrations.","title":"Writing Migrations - Needle","ref":"Needle.html#module-writing-migrations"},{"type":"module","doc":"Most virtuals are incredibly simple to migrate for:\n\n```elixir\ndefmodule Bonfire.Data.Social.Post.Migration do\n\n  import Needle.Migration\n  alias Bonfire.Data.Social.Post\n\n  def migrate_post(), do: migrate_virtual(Post)\n\nend\n```\n\nIf you need to do more work, it can be a little trickier. Here's an example for `block`, which also creates a unique index on another table:\n\n```elixir\ndefmodule Bonfire.Data.Social.Block.Migration do\n\n  import Ecto.Migration\n  import Needle.Migration\n  import Bonfire.Data.Edges.Edge.Migration\n  alias Bonfire.Data.Social.Block\n\n  def migrate_block_view(), do: migrate_virtual(Block)\n\n  def migrate_block_unique_index(), do: migrate_type_unique_index(Block)\n\n  def migrate_block(dir \\\\ direction())\n\n  def migrate_block(:up) do\n    migrate_block_view()\n    migrate_block_unique_index()\n  end\n\n  def migrate_block(:down) do\n    migrate_block_unique_index()\n    migrate_block_view()\n  end\n\nend\n```\n\nNotice how we have to write our `up` and `down` versions separately to get the correct ordering of operations.","title":"Virtuals - Needle","ref":"Needle.html#module-virtuals"},{"type":"module","doc":"Migration example for a `Pointable`:\n\n```elixir\ndefmodule Bonfire.Data.Social.APActivity.Migration do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n  alias Bonfire.Data.Social.APActivity\n\n  defp make_apactivity_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_pointable_table(Bonfire.Data.Social.APActivity) do\n        Ecto.Migration.add :json, :jsonb\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_apactivity_table, do: make_apactivity_table([])\n  defmacro create_apactivity_table([do: body]), do: make_apactivity_table(body)\n\n  def drop_apactivity_table(), do: drop_pointable_table(APActivity)\n\n  defp maa(:up), do: make_apactivity_table([])\n  defp maa(:down) do\n    quote do: Bonfire.Data.Social.APActivity.Migration.drop_apactivity_table()\n  end\n\n  defmacro migrate_apactivity() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(maa(:up)),\n        else: unquote(maa(:down))\n    end\n  end\n\nend\n```\n\nAs you can see, this `Pointable` migration a little trickier to define than a `Virtual` because we wanted to preserve the ability for the user to define extra fields in config. There are some questions about how useful this is in practice, so you could also go for a simpler option:\n\n```elixir\ndefmodule MyApp.Repo.Migrations.Greeting do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def up() do\n    create_pointable_table(:greeting, \"GREET1NGSFR0MD0CEXAMP1E000\") do\n      add :greeting, :text, null: false\n    end\n  end\n\n  def down() do\n    drop_pointable_table(:greeting, \"GREET1NGSFR0MD0CEXAMP1E000\")\n  end\nend\n```\n\n> As you can see, it's pretty similar to defining a regular migration, except you use `create_pointable_table` and\n`drop_pointable_table`. Notice that our sentinel UID makes an appearance again here. It's *very* important that these match what we declared in the schema.","title":"Pointables - Needle","ref":"Needle.html#module-pointables"},{"type":"module","doc":"Mixins look much like pointables:\n\n```elixir\ndefmodule Bonfire.Data.Social.Profile.Migration do\n\n  import Needle.Migration\n  alias Bonfire.Data.Social.Profile\n\n  # create_profile_table/{0,1}\n\n  defp make_profile_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_mixin_table(Bonfire.Data.Social.Profile) do\n        Ecto.Migration.add :name, :text\n        Ecto.Migration.add :summary, :text\n        Ecto.Migration.add :website, :text\n        Ecto.Migration.add :location, :text\n        Ecto.Migration.add :icon_id, strong_pointer(Bonfire.Files.Media)\n        Ecto.Migration.add :image_id, strong_pointer(Bonfire.Files.Media)\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_profile_table(), do: make_profile_table([])\n  defmacro create_profile_table([do: {_, _, body}]), do: make_profile_table(body)\n\n  # drop_profile_table/0\n\n  def drop_profile_table(), do: drop_mixin_table(Profile)\n\n  # migrate_profile/{0,1}\n\n  defp mp(:up), do: make_profile_table([])\n\n  defp mp(:down) do\n    quote do\n      Bonfire.Data.Social.Profile.Migration.drop_profile_table()\n    end\n  end\n\n  defmacro migrate_profile() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(mp(:up)),\n        else: unquote(mp(:down))\n    end\n  end\n\nend\n```","title":"Mixins - Needle","ref":"Needle.html#module-mixins"},{"type":"module","doc":"Similar to mixins:\n\n```elixir\ndefmodule Bonfire.Data.Social.FeedPublish.Migration do\n\n  import Ecto.Migration\n  import Needle.Migration\n  alias Bonfire.Data.Social.FeedPublish\n\n  @feed_publish_table FeedPublish.__schema__(:source)\n\n  # create_feed_publish_table/{0,1}\n\n  defp make_feed_publish_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_mixin_table(Bonfire.Data.Social.FeedPublish) do\n        Ecto.Migration.add :feed_id,\n          Needle.Migration.strong_pointer(), primary_key: true\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_feed_publish_table(), do: make_feed_publish_table([])\n  defmacro create_feed_publish_table([do: {_, _, body}]), do: make_feed_publish_table(body)\n\n  def drop_feed_publish_table(), do: drop_pointable_table(FeedPublish)\n\n  def migrate_feed_publish_feed_index(dir \\\\ direction(), opts \\\\ [])\n  def migrate_feed_publish_feed_index(:up, opts),\n    do: create_if_not_exists(index(@feed_publish_table, [:feed_id], opts))\n  def migrate_feed_publish_feed_index(:down, opts),\n    do: drop_if_exists(index(@feed_publish_table, [:feed_id], opts))\n\n  defp mf(:up) do\n    quote do\n      Bonfire.Data.Social.FeedPublish.Migration.create_feed_publish_table()\n      Bonfire.Data.Social.FeedPublish.Migration.migrate_feed_publish_feed_index()\n    end\n  end\n\n  defp mf(:down) do\n    quote do\n      Bonfire.Data.Social.FeedPublish.Migration.migrate_feed_publish_feed_index()\n      Bonfire.Data.Social.FeedPublish.Migration.drop_feed_publish_table()\n    end\n  end\n\n  defmacro migrate_feed_publish() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(mf(:up)),\n        else: unquote(mf(:down))\n    end\n  end\n\n  defmacro migrate_feed_publish(dir), do: mf(dir)\n\nend\n```","title":"Multimixins - Needle","ref":"Needle.html#module-multimixins"},{"type":"module","doc":"Take a look at a few of the migrations in our data libraries. Between them, they cover most\nscenarios by now:\n\n* [bonfire_data_social](https://github.com/bonfire-networks/bonfire_data_social/)\n* [bonfire_data_access_control](https://github.com/bonfire-networks/bonfire_data_access_control/)\n* [bonfire_data_identity](https://github.com/bonfire-networks/bonfire_data_identity/)\n* [bonfire_data_edges](https://github.com/bonfire-networks/bonfire_data_edges/) (feat. bonus triggers)\n\nIf you want to know exactly what's happening, you may want to read the code for\n[Needle.Migration](https://github.com/bonfire-networks/needle/blob/main/lib/migration.ex).","title":"More examples - Needle","ref":"Needle.html#module-more-examples"},{"type":"module","doc":"Every pointable or mixin schema is overrideable with configuration\nduring compilation (this is why using them requires an `:otp_app` to\nbe specified). For example, we could override `Needle.Table` (which\nis a pointable table) thus:\n\n```elixir\nconfig :needle, Needle.Table, source: \"my_pointers_table\"\n```\n\nThe `table_id` is also configurable, but we don't recommend you change it.\n\nIn addition, all pointable and mixin schemas permit extension with [Exto](https://github.com/bonfire-networks/exto). See the `Exto`'s docs for more information about how to extend schemas via configuration. You will probably at the very least want to insert some `has_one` for mixins off your pointables.","title":"Configuration and overrides - Needle","ref":"Needle.html#module-configuration-and-overrides"},{"type":"module","doc":"Ecto does not know anything about our scheme, so unless we specifically want something to reference one of the pointed tables, we typically `belongs_to` with `Needle.Pointer`. The table in which we do this does not itself need to necessarily be a `Pointable`.\n\n```elixir\ndefmodule MyApp.Foo do\n\n  use Ecto.Schema\n\n  # regular ecto table, not pointable!\n  schema \"hello\" do\n    belongs_to :pointer, Needle.Pointer # who knows what it points to?\n  end\nend\n```\n\nYou may choose to reference a specific schema rather than Pointer if it\nwill only point to a single table. If you do this, you must ensure\nthat the referenced record exists in that table in the normal\nway. There may be some performance benefit, we didn't benchmark it.\n\nThe migration is slightly more complex, we have to decide what type of\na pointer it is. Needle come in three categories:\n\n* A strong pointer is not nullable and is deleted when the object it\n  points to is deleted.\n* A weak pointer is nullable and is nilified when the object it points\n  to is deleted.\n* An unbreakable pointer will raise when you attempt to delete the\n  object it points to.\n\n| Type        | Nullable? | On Delete   |\n|-------------|-----------|-------------|\n| Strong      | No        | Cascade     |\n| Weak        | Yes       | Set Null    |\n| Unbreakable | No        | Raise       |\n\nIn this case we will use a strong pointer, because we want it to be\ndeleted if the pointed object is deleted.\n\n```elixir\ndefmodule MyApp.Repo.Migrations.Hello do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def change() do\n    create_if_not_exists table(:hello) do\n      add :pointer, strong_pointer(), null: false\n      add :greeting, :text, null: false\n    end\n  end\nend\n```\n\nIf you are pointing to a specific table instead of pointer,\n`strong_pointer/1` allows you to pass the name of that module\n(`strong_pointer/0` calls this with `Needle.Pointer`).","title":"Referencing Pointables - Needle","ref":"Needle.html#module-referencing-pointables"},{"type":"module","doc":"It is common that even though you have a universal foreign key, you\nwill want to issue different queries based upon the type that is being\npointed to. For this reason, it is up to you to decide how to perform\nan onward query.\n\n`Needle.Pointers.schema/1` turns a `Pointer` into an Ecto schema module name\nyou can switch against. `Needle.Pointers.plan` breaks down a list of Needle\ninto a map of ids keyed by schema module. It is handy to define some\nfunctions in your (non-library) application that can load any type of\npointer in given contexts.","title":"Dereferencing Pointables - Needle","ref":"Needle.html#module-dereferencing-pointables"},{"type":"module","doc":"","title":"Inserting data - Needle","ref":"Needle.html#module-inserting-data"},{"type":"module","doc":"The practical result of needle is that it pushes a certain amount of\nvalidation and consistency logic back into elixir land. It is\ntherefore your elixir code's responsibility to ensure that data is\ninserted into the appropriate mixin tables when inserting a pointable\nobject and to manage deletions as appropriate.\n\nWhen assembling queries with mixin tables, pay careful attention to\nthe type of join you are performing. An inner join is explicitly\nasking not to be shown objects that do not have a record for that\nmixin. You quite possibly wanted to left join.","title":"Elixir-based logic - Needle","ref":"Needle.html#module-elixir-based-logic"},{"type":"module","doc":"Since `Pointer` has a table, you can use its `table_id` field to\nfilter by pointed type. `Needle.Tables.id!/1` (or `ids!/1` for a\nlist) can be used to obtain the IDs for a table or tables.","title":"Querying Needle - Needle","ref":"Needle.html#module-querying-needle"},{"type":"module","doc":"All solutions to the universal primary key problem have tradeofs. Here\nare what we see as the deficiencies in our approach:\n\n1. It forces a UUIDv7 or ULID on you. This is great for us, but not\n   everyone. They both expose a timestamp with millisecond precision. \n   If the time of creation of a resource is sensitive information for\n   your purposes, they may not going to be suitable for you.\n2. Ecto has no knowledge of the specialty of `Pointer`,\n   e.g. `Repo.preload` does not work and you need to specify a join\n   condition to join through a pointer. Use our functions or add extra\n   associations with exto configuration.\n3. Dereferencing a list of needle requires a select query per table\n   type that occurs in the input set.\n4. Reliance on user attention. You have to follow the instructions\n   correctly to make the system work at all.\n5. There is likely some performance impact from postgres not\n   understanding the relationships between the various tables\n   properly. It's hard to gauge and we haven't even tried.\n\nThese are not likely to change. If you're going to pick\nthis library, do so in the full knowledge of the tradeoffs it makes.\n\nAlternatives include (I'm sure you can think of others):\n\n* Storing the table name in a second column alongside every foreign key.\n* A compound datatype of id and table name.\n* Byte/String manipulation tricks.\n* Evil SQL hacks based upon compile time configuration.\n\nWhile we have our gripes with this approach, once you've gotten the\nhang of using it, it works out pretty well for most purposes and it's\none of the simpler options to work with.","title":"Tradeoffs - Needle","ref":"Needle.html#module-tradeoffs"},{"type":"module","doc":"Copyright (c) 2020 needle Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Needle","ref":"Needle.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Needle.is_needle?/2","ref":"Needle.html#is_needle?/2"},{"type":"module","doc":"","title":"Needle.Changesets","ref":"Needle.Changesets.html"},{"type":"function","doc":"Like Ecto.build_assoc/3, but can work with a Changeset","title":"Needle.Changesets.build_assoc/3","ref":"Needle.Changesets.html#build_assoc/3"},{"type":"function","doc":"True if the schema object's current state is `:built`","title":"Needle.Changesets.built?/1","ref":"Needle.Changesets.html#built?/1"},{"type":"function","doc":"Like `Ecto.Changeset.cast` but for Pointables, Virtuals and Mixins.\n\nIf a pointable or virtual, Generates an ID if one is not present.","title":"Needle.Changesets.cast/3","ref":"Needle.Changesets.html#cast/3"},{"type":"function","doc":"","title":"Needle.Changesets.cast_assoc/3","ref":"Needle.Changesets.html#cast_assoc/3"},{"type":"function","doc":"","title":"Needle.Changesets.cast_belongs_to/4","ref":"Needle.Changesets.html#cast_belongs_to/4"},{"type":"function","doc":"","title":"Needle.Changesets.cast_has_many/4","ref":"Needle.Changesets.html#cast_has_many/4"},{"type":"function","doc":"","title":"Needle.Changesets.cast_has_one/4","ref":"Needle.Changesets.html#cast_has_one/4"},{"type":"function","doc":"","title":"Needle.Changesets.config_for/3","ref":"Needle.Changesets.html#config_for/3"},{"type":"function","doc":"True if the schema object's current state is `:deleted`","title":"Needle.Changesets.deleted?/1","ref":"Needle.Changesets.html#deleted?/1"},{"type":"function","doc":"","title":"Needle.Changesets.get_field/2","ref":"Needle.Changesets.html#get_field/2"},{"type":"function","doc":"","title":"Needle.Changesets.insert_verb/1","ref":"Needle.Changesets.html#insert_verb/1"},{"type":"function","doc":"True if the schema object's current state is `:loaded`","title":"Needle.Changesets.loaded?/1","ref":"Needle.Changesets.html#loaded?/1"},{"type":"function","doc":"","title":"Needle.Changesets.merge_child_errors/1","ref":"Needle.Changesets.html#merge_child_errors/1"},{"type":"function","doc":"Like `put_assoc!/3` but doesn't raise if the association doesn't exist","title":"Needle.Changesets.put_assoc/3","ref":"Needle.Changesets.html#put_assoc/3"},{"type":"function","doc":"Like `Ecto.Changeset.put_assoc/3` but for Pointables, Virtuals and Mixins.\n\nCopies across keys where possible.","title":"Needle.Changesets.put_assoc!/3","ref":"Needle.Changesets.html#put_assoc!/3"},{"type":"function","doc":"","title":"Needle.Changesets.put_id_on_mixins/3","ref":"Needle.Changesets.html#put_id_on_mixins/3"},{"type":"function","doc":"","title":"Needle.Changesets.put_new_id/2","ref":"Needle.Changesets.html#put_new_id/2"},{"type":"function","doc":"Returns the schema object's current state.","title":"Needle.Changesets.state/1","ref":"Needle.Changesets.html#state/1"},{"type":"function","doc":"","title":"Needle.Changesets.update_data/2","ref":"Needle.Changesets.html#update_data/2"},{"type":"function","doc":"true if the provided changeset or list of changesets is valid.","title":"Needle.Changesets.valid?/1","ref":"Needle.Changesets.html#valid?/1"},{"type":"module","doc":"","title":"Needle.Form","ref":"Needle.Form.html"},{"type":"macro","doc":"","title":"Needle.Form.form_schema/1","ref":"Needle.Form.html#form_schema/1"},{"type":"function","doc":"","title":"Needle.Form.using/2","ref":"Needle.Form.html#using/2"},{"type":"module","doc":"Helpers for writing Pointer-aware migrations.","title":"Needle.Migration","ref":"Needle.Migration.html"},{"type":"function","doc":"","title":"Needle.Migration.add_is_not_deleted/1","ref":"Needle.Migration.html#add_is_not_deleted/1"},{"type":"macro","doc":"Creates a mixin table - one with a UID primary key and no trigger","title":"Needle.Migration.create_mixin_table/3","ref":"Needle.Migration.html#create_mixin_table/3"},{"type":"macro","doc":"Creates a pointable table along with its trigger.","title":"Needle.Migration.create_pointable_table/2","ref":"Needle.Migration.html#create_pointable_table/2"},{"type":"macro","doc":"","title":"Needle.Migration.create_pointable_table/3","ref":"Needle.Migration.html#create_pointable_table/3"},{"type":"macro","doc":"","title":"Needle.Migration.create_pointable_table/4","ref":"Needle.Migration.html#create_pointable_table/4"},{"type":"macro","doc":"Creates a random table - one with a UUID v4 primary key.","title":"Needle.Migration.create_random_table/3","ref":"Needle.Migration.html#create_random_table/3"},{"type":"function","doc":"","title":"Needle.Migration.create_virtual/1","ref":"Needle.Migration.html#create_virtual/1"},{"type":"function","doc":"","title":"Needle.Migration.create_virtual/2","ref":"Needle.Migration.html#create_virtual/2"},{"type":"function","doc":"","title":"Needle.Migration.create_virtual_trigger_function/0","ref":"Needle.Migration.html#create_virtual_trigger_function/0"},{"type":"function","doc":"Drops a mixin table.","title":"Needle.Migration.drop_mixin_table/1","ref":"Needle.Migration.html#drop_mixin_table/1"},{"type":"function","doc":"Drops a pointable table","title":"Needle.Migration.drop_pointable_table/1","ref":"Needle.Migration.html#drop_pointable_table/1"},{"type":"function","doc":"","title":"Needle.Migration.drop_pointable_table/2","ref":"Needle.Migration.html#drop_pointable_table/2"},{"type":"function","doc":"Drops a random table.","title":"Needle.Migration.drop_random_table/1","ref":"Needle.Migration.html#drop_random_table/1"},{"type":"function","doc":"","title":"Needle.Migration.drop_table/1","ref":"Needle.Migration.html#drop_table/1"},{"type":"function","doc":"","title":"Needle.Migration.drop_virtual/1","ref":"Needle.Migration.html#drop_virtual/1"},{"type":"function","doc":"","title":"Needle.Migration.drop_virtual/2","ref":"Needle.Migration.html#drop_virtual/2"},{"type":"function","doc":"When migrating up: initialises the pointers database.\nWhen migrating down: deinitialises the pointers database.","title":"Needle.Migration.init_pointers/0","ref":"Needle.Migration.html#init_pointers/0"},{"type":"function","doc":"Given `:up`: initialises the pointers database.\nGiven `:down`: deinitialises the pointers database.","title":"Needle.Migration.init_pointers/1","ref":"Needle.Migration.html#init_pointers/1"},{"type":"function","doc":"","title":"Needle.Migration.init_pointers_ulid_extra/0","ref":"Needle.Migration.html#init_pointers_ulid_extra/0"},{"type":"function","doc":"","title":"Needle.Migration.migrate_virtual/1","ref":"Needle.Migration.html#migrate_virtual/1"},{"type":"function","doc":"","title":"Needle.Migration.migrate_virtual/2","ref":"Needle.Migration.html#migrate_virtual/2"},{"type":"function","doc":"","title":"Needle.Migration.migrate_virtual/3","ref":"Needle.Migration.html#migrate_virtual/3"},{"type":"function","doc":"Creates a strong, weak or unbreakable pointer depending on `type`.","title":"Needle.Migration.pointer/2","ref":"Needle.Migration.html#pointer/2"},{"type":"function","doc":"A reference to a pointer for use with `add/3`. A strong pointer will\nbe deleted when the thing it's pointing to is deleted.","title":"Needle.Migration.strong_pointer/1","ref":"Needle.Migration.html#strong_pointer/1"},{"type":"function","doc":"A reference to a pointer for use with `add/3`. An unbreakable\npointer will prevent the thing it's pointing to from being deleted.","title":"Needle.Migration.unbreakable_pointer/1","ref":"Needle.Migration.html#unbreakable_pointer/1"},{"type":"function","doc":"A reference to a pointer for use with `add/3`. A weak pointer will\nbe set null when the thing it's pointing to is deleted.","title":"Needle.Migration.weak_pointer/1","ref":"Needle.Migration.html#weak_pointer/1"},{"type":"type","doc":"","title":"Needle.Migration.pointer_type/0","ref":"Needle.Migration.html#t:pointer_type/0"},{"type":"module","doc":"If a Pointer represents an object, mixins represent data about the object. Mixins collate optional\nadditional information about an object. Different types of object will typically make use of\ndifferent mixins. You can see these as aspects of the data if you like.\n\nA mixin table starts with an `id` column which references `Pointer` and forms the default primary\nkey. It is up to the user to choose which other fields go in the table, and thus what the mixin is for.\n\nUse of a mixin is typically through `has_one`:\n\n```\nhas_one :my_mixin, MyMixin, foreign_key: :id, references: :id\n```\n\nSometimes, the user may wish to add fields to the primary key by using the `primary_key: true`\noption to `add` in their migrations. This is permitted and in such case we call the resulting\nmixin a `multimixin`. Use becomes `has_many`:\n\n```\nhas_many :my_mixin, MyMixin, foreign_key: :id, references: :id\n```\n\nThus the choice of single or multi comes down to how many times you want to store that data for\nthe object. A user's profile naturally lends itself to a regular `single` mixin, whereas an\nobject's appearance in a feed would naturally lend itself to being a multimixin since the object\nmay appear in many feeds.","title":"Needle.Mixin","ref":"Needle.Mixin.html"},{"type":"module","doc":"```\ndefmodule My.Mixin do\n\n  use Needle.Mixin,\n    otp_app: :my_app,\n    source: \"postgres_table_name\"\n\n  mixin_schema do\n    field :is_awesome, :boolean\n  end\nend\n```","title":"Declaring a mixin table type - Needle.Mixin","ref":"Needle.Mixin.html#module-declaring-a-mixin-table-type"},{"type":"macro","doc":"","title":"Needle.Mixin.mixin_schema/1","ref":"Needle.Mixin.html#mixin_schema/1"},{"type":"function","doc":"","title":"Needle.Mixin.using/2","ref":"Needle.Mixin.html#using/2"},{"type":"exception","doc":"We could not find the requested object","title":"Needle.NotFound","ref":"Needle.NotFound.html"},{"type":"function","doc":"Creates a new NotFound","title":"Needle.NotFound.new/1","ref":"Needle.NotFound.html#new/1"},{"type":"type","doc":"","title":"Needle.NotFound.t/0","ref":"Needle.NotFound.html#t:t/0"},{"type":"module","doc":"Sets up an Ecto Schema for a Pointable table.","title":"Needle.Pointable","ref":"Needle.Pointable.html"},{"type":"module","doc":"```\nuse Needle.Pointable,\n  otp_app: :my_app,   # your OTP application's name\n  source: \"my_table\", # default name of table in database\n  table_id: \"01EBTVSZJ6X02J01R1XWWPWGZW\" # unique UID to identify table\n\npointable_schema do\n  # ... fields go here, if any\nend\n```","title":"Sample Usage - Needle.Pointable","ref":"Needle.Pointable.html#module-sample-usage"},{"type":"module","doc":"During `use` (i.e. compilation time), we will attempt to load\nconfiguration from the provided `:otp_app` under the key of the\ncurrent module. Any values provided here will override the defaults\nprovided to `use`. This allows you to configure them after the fact.\n\nAdditionally, pointables use `Exto`'s `flex_schema()`, so you can\nprovide additional configuration for those in the same place.\n\nI shall say it again because it's important: This happens at\n*compile time*. You must rebuild the app containing the pointable\nwhenever the configuration changes.","title":"Overriding with configuration - Needle.Pointable","ref":"Needle.Pointable.html#module-overriding-with-configuration"},{"type":"module","doc":"Defines a function `__pointers__/1` to introspect data. Recognised\nparameters:\n\n`:role` - `:pointable`\n`:table_id` - retrieves the UID id of the pointable table.\n`:otp_app` - retrieves the OTP application to which this belongs.","title":"Introspection - Needle.Pointable","ref":"Needle.Pointable.html#module-introspection"},{"type":"macro","doc":"","title":"Needle.Pointable.pointable_schema/1","ref":"Needle.Pointable.html#pointable_schema/1"},{"type":"module","doc":"A Pointer is any object that can be referenced by its id.\n\nPointer is a simple table consisting of three fields:\n* id - the database-unique id for this pointer in UID format.\n* table_id - a type tag, references `Table`.\n* deleted_at - timestamp of when the object was deleted, null by default.\n\nTo reference `any` object, simply reference `Pointer`:\n\n```\nalias Needle.Pointer\nbelongs_to :object, Pointer\n```\n\nTo define a new object type there are two options, you should choose one:\n\n* `Virtual` - an object type with a view over `Pointer` limited by type.\n* `Pointable` - an object type with a table which is kept synchronised with `Pointer`.\n\nFor most purposes, you should use a `Virtual`. Pointable exists mostly to support existing code.\nThe major difference in practice is that you cannot add new fields to a virtual. Most of the time\nyou will want to store such extra fields in one or more mixins anyway so they may be reused.\n\nSee `Mixin` for more information about mixins.","title":"Needle.Pointer","ref":"Needle.Pointer.html"},{"type":"function","doc":"Changeset for creating a Pointer","title":"Needle.Pointer.create/2","ref":"Needle.Pointer.html#create/2"},{"type":"function","doc":"","title":"Needle.Pointer.delete/2","ref":"Needle.Pointer.html#delete/2"},{"type":"function","doc":"","title":"Needle.Pointer.get/3","ref":"Needle.Pointer.html#get/3"},{"type":"function","doc":"","title":"Needle.Pointer.put/3","ref":"Needle.Pointer.html#put/3"},{"type":"module","doc":"A context for working with Needle, a sort of global foreign key scheme.","title":"Needle.Pointers","ref":"Needle.Pointers.html"},{"type":"function","doc":"Return the provided pointer when it belongs to table queryable by the given table search term.","title":"Needle.Pointers.assert_points_to!/2","ref":"Needle.Pointers.html#assert_points_to!/2"},{"type":"function","doc":"Returns a Pointer, either the one provided or a synthesised one\npointing to the provided schema object. Does not hit the database or\ncause the pointer to be written to the database whatsoever.","title":"Needle.Pointers.cast!/1","ref":"Needle.Pointers.html#cast!/1"},{"type":"function","doc":"","title":"Needle.Pointers.get_table_id!/1","ref":"Needle.Pointers.html#get_table_id!/1"},{"type":"function","doc":"Given a list of pointers which may or may have their pointed loaded,\nreturn a plan for preloading, a map of module name to set of loadable IDs.","title":"Needle.Pointers.plan/1","ref":"Needle.Pointers.html#plan/1"},{"type":"function","doc":"Returns a basic query over non-deleted pointable objects in the system,\noptionally limited to one or more types.\n\nIf the type is set to a Pointable, Virtual or Mixin schema, records\nwill be selected from that schema directly. It is assumed this\nfilters deleted records by construction.\n\nOtherwise, will query from Pointer, filtering not is_nil(deleted_at)","title":"Needle.Pointers.query_base/1","ref":"Needle.Pointers.html#query_base/1"},{"type":"function","doc":"","title":"Needle.Pointers.schema/1","ref":"Needle.Pointers.html#schema/1"},{"type":"function","doc":"Looks up the table for a given pointer","title":"Needle.Pointers.table/1","ref":"Needle.Pointers.html#table/1"},{"type":"module","doc":"A securely randomly generated UUID keyed table. Not pointable.","title":"Needle.Random","ref":"Needle.Random.html"},{"type":"macro","doc":"","title":"Needle.Random.random_schema/1","ref":"Needle.Random.html#random_schema/1"},{"type":"function","doc":"","title":"Needle.Random.using/2","ref":"Needle.Random.html#using/2"},{"type":"module","doc":"One Table to rule them all. A record of a table participating in the\npointers abstraction - mandatory if participating.","title":"Needle.Table","ref":"Needle.Table.html"},{"type":"function","doc":"","title":"Needle.Table.delete/2","ref":"Needle.Table.html#delete/2"},{"type":"function","doc":"","title":"Needle.Table.get/3","ref":"Needle.Table.html#get/3"},{"type":"function","doc":"","title":"Needle.Table.put/3","ref":"Needle.Table.html#put/3"},{"type":"type","doc":"","title":"Needle.Table.t/0","ref":"Needle.Table.html#t:t/0"},{"type":"module","doc":"A Global cache of Tables to be queried by their (Pointer) IDs, table\nnames or Ecto Schema module names.\n\nUse of the Table Service requires:\n\n1. You have run the migrations shipped with this library.\n2. You have started `Needle.Tables` before querying.\n3. All OTP applications with pointable Ecto Schemata to be added to the schema path.\n4. OTP 21.2 or greater, though we recommend using the most recent release available.\n\nWhile this module is a GenServer, it is only responsible for setup\nof the cache and then exits with :ignore having done so. It is not\nrecommended to restart the service as this will lead to a stop the\nworld garbage collection of all processes and the copying of the\nentire cache to each process that has queried it since its last\nlocal garbage collection.","title":"Needle.Tables","ref":"Needle.Tables.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Needle.Tables.child_spec/1","ref":"Needle.Tables.html#child_spec/1"},{"type":"function","doc":"","title":"Needle.Tables.data/0","ref":"Needle.Tables.html#data/0"},{"type":"function","doc":"Look up a table id by id, name or schema.","title":"Needle.Tables.id/1","ref":"Needle.Tables.html#id/1"},{"type":"function","doc":"Look up a table id by id, name or schema, raise NotFound if not found.","title":"Needle.Tables.id!/1","ref":"Needle.Tables.html#id!/1"},{"type":"function","doc":"Look up many ids at once, raise NotFound if any of them are not found","title":"Needle.Tables.ids!/1","ref":"Needle.Tables.html#ids!/1"},{"type":"function","doc":"","title":"Needle.Tables.mixin_modules/0","ref":"Needle.Tables.html#mixin_modules/0"},{"type":"function","doc":"Look up a schema module by id, name or schema","title":"Needle.Tables.schema/1","ref":"Needle.Tables.html#schema/1"},{"type":"function","doc":"Look up a schema module by id, name or schema, raise NotFound if not found","title":"Needle.Tables.schema!/1","ref":"Needle.Tables.html#schema!/1"},{"type":"function","doc":"","title":"Needle.Tables.schema?/1","ref":"Needle.Tables.html#schema?/1"},{"type":"function","doc":"","title":"Needle.Tables.schema_modules/0","ref":"Needle.Tables.html#schema_modules/0"},{"type":"function","doc":"Populates the global cache with table data via introspection.","title":"Needle.Tables.start_link/1","ref":"Needle.Tables.html#start_link/1"},{"type":"function","doc":"Get a Table identified by name, id or module.","title":"Needle.Tables.table/1","ref":"Needle.Tables.html#table/1"},{"type":"function","doc":"Look up a Table by name or id, raise NotFound if not found.","title":"Needle.Tables.table!/1","ref":"Needle.Tables.html#table!/1"},{"type":"type","doc":"A query is either a table's (database) name or (Pointer) ID as a\nbinary or the name of its Ecto Schema Module as an atom.","title":"Needle.Tables.query/0","ref":"Needle.Tables.html#t:query/0"},{"type":"module","doc":"[![hex.pm](https://img.shields.io/hexpm/v/needle_uid)](https://hex.pm/packages/needle_uid)\n[hexdocs](https://hexdocs.pm/needle_uid)\n\nHybrid prefixed UUIDv7 and ULID data type for Ecto (using [pride](https://github.com/bonfire-networks/pride) and [needle_ulid](https://github.com/bonfire-networks/needle_ulid))","title":"Needle.UID","ref":"Needle.UID.html"},{"type":"module","doc":"```elixir\n{:needle_uid, git: \"https://github.com/bonfire-networks/needle_uid\", branch: \"main\"}\n```","title":"Installation - Needle.UID","ref":"Needle.UID.html#module-installation"},{"type":"module","doc":"Copyright (c) 2024 Bonfire contributors\n\nLicensed under the terms of the MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright and License - Needle.UID","ref":"Needle.UID.html#module-copyright-and-license"},{"type":"function","doc":"Casts an encoded string to ID. Transforms outside data into runtime data.\n\nUsed to (potentially) convert your data into an internal normalized representation which will be part of your changesets. It also used for verifying that something is actually valid input data for your type.","title":"Needle.UID.cast/2","ref":"Needle.UID.html#cast/2"},{"type":"function","doc":"Same as `cast/1` but raises `Ecto.CastError` on invalid arguments.","title":"Needle.UID.cast!/2","ref":"Needle.UID.html#cast!/2"},{"type":"function","doc":"Converts an encoded ID into a binary. Used to get your data ready to be written to the database. Transforms anything (outside data or runtime data) into database column data","title":"Needle.UID.dump/3","ref":"Needle.UID.html#dump/3"},{"type":"function","doc":"","title":"Needle.UID.dump!/3","ref":"Needle.UID.html#dump!/3"},{"type":"function","doc":"","title":"Needle.UID.generate/1","ref":"Needle.UID.html#generate/1"},{"type":"function","doc":"","title":"Needle.UID.is_pride?/2","ref":"Needle.UID.html#is_pride?/2"},{"type":"function","doc":"Takes a string and returns true if it is a valid ULID (Universally Unique Lexicographically Sortable Identifier).","title":"Needle.UID.is_ulid?/1","ref":"Needle.UID.html#is_ulid?/1"},{"type":"function","doc":"iex> is_ulid?(\"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\")\n    true\n\n    iex> is_ulid?(\"invalid_ulid\")\n    false","title":"Examples - Needle.UID.is_ulid?/1","ref":"Needle.UID.html#is_ulid?/1-examples"},{"type":"function","doc":"Takes a string and returns true if it is a valid Object ID or Prefixed UUID (Universally Unique Identifier).","title":"Needle.UID.is_uuid?/2","ref":"Needle.UID.html#is_uuid?/2"},{"type":"function","doc":"iex> is_uuid?(\"550e8400-e29b-41d4-a716-446655440000\")\n    true\n\n    iex> is_uuid?(\"test_3TUIKuXX5mNO2jSA41bsDx\")\n    true\n\n    iex> is_uuid?(\"invalid_uuid\")\n    false","title":"Examples - Needle.UID.is_uuid?/2","ref":"Needle.UID.html#is_uuid?/2-examples"},{"type":"function","doc":"Converts a binary ID into an encoded string. Transforms database column data into runtime data.","title":"Needle.UID.load/3","ref":"Needle.UID.html#load/3"},{"type":"function","doc":"translates alphanumerics into a sentinel ID value","title":"Needle.UID.synthesise!/1","ref":"Needle.UID.html#synthesise!/1"},{"type":"function","doc":"Returns the timestamp of an encoded or unencoded UID","title":"Needle.UID.timestamp/1","ref":"Needle.UID.html#timestamp/1"},{"type":"function","doc":"The underlying schema type.","title":"Needle.UID.type/1","ref":"Needle.UID.html#type/1"},{"type":"function","doc":"Takes a string and returns true if it is a valid UUID or ULID.","title":"Needle.UID.valid?/2","ref":"Needle.UID.html#valid?/2"},{"type":"function","doc":"iex> valid?(\"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\")\n    true\n\n    iex> valid?(\"550e8400-e29b-41d4-a716-446655440000\")\n    true\n\n    iex> is_uuid?(\"test_3TUIKuXX5mNO2jSA41bsDx\")\n    true\n\n    iex> valid?(\"invalid_id\")\n    false","title":"Examples - Needle.UID.valid?/2","ref":"Needle.UID.html#valid?/2-examples"},{"type":"module","doc":"[![hex.pm](https://img.shields.io/hexpm/v/needle_ulid)](https://hex.pm/packages/needle_ulid)\n[hexdocs](https://hexdocs.pm/needle_ulid)\n\nA ULID datatype and some postgres support for ULID operations (`min` and `max` functions and aggregates)\n\nOriginally forked from\n[ecto-ulid](https://github.com/TheRealReal/ecto-ulid) but the internals have been replaced with a dependency on [ex_ulid](https://github.com/omgnetwork/ex_ulid)","title":"Needle.ULID","ref":"Needle.ULID.html"},{"type":"module","doc":"```elixir\n{:needle_ulid, git: \"https://github.com/bonfire-networks/needle_ulid\", branch: \"main\"}\n```","title":"Installation - Needle.ULID","ref":"Needle.ULID.html#module-installation"},{"type":"module","doc":"Copyright (c) 2021 Bonfire contributors.\nCopyright (c) 2018 The RealReal, Inc.\nCopyright (c) 2020 needle_ulid contributors.\n\nLicensed under the terms of the MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright and License - Needle.ULID","ref":"Needle.ULID.html#module-copyright-and-license"},{"type":"function","doc":"Generates a binary ULID.\n\nIf a value is provided for `timestamp`, the generated ULID will be for the provided timestamp.\nOtherwise, a ULID will be generated for the current time.\n\nArguments:\n\n* `timestamp`: A Unix timestamp with millisecond precision.","title":"Needle.ULID.bingenerate/1","ref":"Needle.ULID.html#bingenerate/1"},{"type":"function","doc":"","title":"Needle.ULID.bintimestamp/1","ref":"Needle.ULID.html#bintimestamp/1"},{"type":"function","doc":"Casts a 26-byte encoded string to ULID or a 16-byte binary unchanged","title":"Needle.ULID.cast/1","ref":"Needle.ULID.html#cast/1"},{"type":"function","doc":"Same as `cast/1` but raises `Ecto.CastError` on invalid arguments.","title":"Needle.ULID.cast!/1","ref":"Needle.ULID.html#cast!/1"},{"type":"function","doc":"","title":"Needle.ULID.decode/1","ref":"Needle.ULID.html#decode/1"},{"type":"function","doc":"Converts a Crockford Base32 encoded ULID into a binary.","title":"Needle.ULID.dump/1","ref":"Needle.ULID.html#dump/1"},{"type":"function","doc":"","title":"Needle.ULID.dump!/1","ref":"Needle.ULID.html#dump!/1"},{"type":"function","doc":"","title":"Needle.ULID.embed_as/1","ref":"Needle.ULID.html#embed_as/1"},{"type":"function","doc":"","title":"Needle.ULID.encode/2","ref":"Needle.ULID.html#encode/2"},{"type":"function","doc":"Returns the randomness portion of the encoded ulid","title":"Needle.ULID.encoded_randomness/1","ref":"Needle.ULID.html#encoded_randomness/1"},{"type":"function","doc":"Returns the timestamp portion of the encoded ulid","title":"Needle.ULID.encoded_timestamp/1","ref":"Needle.ULID.html#encoded_timestamp/1"},{"type":"function","doc":"","title":"Needle.ULID.equal?/2","ref":"Needle.ULID.html#equal?/2"},{"type":"function","doc":"Generates a Crockford Base32 encoded ULID.\n\nIf a value is provided for `timestamp`, the generated ULID will be for the provided timestamp.\nOtherwise, a ULID will be generated for the current time.\n\nArguments:\n\n* `timestamp`: A Unix timestamp with millisecond precision.","title":"Needle.ULID.generate/1","ref":"Needle.ULID.html#generate/1"},{"type":"function","doc":"Converts a binary ULID into a Crockford Base32 encoded string.","title":"Needle.ULID.load/1","ref":"Needle.ULID.html#load/1"},{"type":"function","doc":"translates alphanumerics into a sentinel ulid value","title":"Needle.ULID.synthesise!/1","ref":"Needle.ULID.html#synthesise!/1"},{"type":"function","doc":"Returns the timestamp of an encoded or unencoded ULID","title":"Needle.ULID.timestamp/1","ref":"Needle.ULID.html#timestamp/1"},{"type":"function","doc":"The underlying schema type.","title":"Needle.ULID.type/0","ref":"Needle.ULID.html#type/0"},{"type":"function","doc":"","title":"Needle.ULID.valid?/1","ref":"Needle.ULID.html#valid?/1"},{"type":"module","doc":"","title":"Needle.ULID.Migration","ref":"Needle.ULID.Migration.html"},{"type":"function","doc":"","title":"Needle.ULID.Migration.init_pointers_ulid_extra/0","ref":"Needle.ULID.Migration.html#init_pointers_ulid_extra/0"},{"type":"function","doc":"","title":"Needle.ULID.Migration.init_pointers_ulid_extra/1","ref":"Needle.ULID.Migration.html#init_pointers_ulid_extra/1"},{"type":"module","doc":"Has a UID primary key but is not pointable.","title":"Needle.Unpointable","ref":"Needle.Unpointable.html"},{"type":"macro","doc":"","title":"Needle.Unpointable.unpointable_schema/1","ref":"Needle.Unpointable.html#unpointable_schema/1"},{"type":"function","doc":"","title":"Needle.Unpointable.using/2","ref":"Needle.Unpointable.html#using/2"},{"type":"module","doc":"Sets up an Ecto Schema for a Virtual Pointable\n\nVirtual Pointables (or just `virtuals`) are like pointables with no\nadditional columns, except instead of being backed by a table they\nare backed by a view. This is more efficient of resources but only\nworks when there are no additional columns to add.\n\nIf you need to add columns to the schema, you should use a pointable.","title":"Needle.Virtual","ref":"Needle.Virtual.html"},{"type":"module","doc":"```\nuse Needle.Virtual,\n  otp_app: :my_app,   # your OTP application's name\n  source: \"my_table\", # default name of view in database\n  table_id: \"01EBTVSZJ6X02J01R1XWWPWGZW\" # valid UID to identify virtual\n\nvirtual_schema do\n  # ... `has_one`, `has_many`, or *virtual* fields ONLY go here.\nend\n```","title":"Sample Usage - Needle.Virtual","ref":"Needle.Virtual.html#module-sample-usage"},{"type":"module","doc":"During `use` (i.e. compilation time), we will attempt to load\nconfiguration from the provided `:otp_app` under the key of the\ncurrent module. Any values provided here will override the defaults\nprovided to `use`. This allows you to configure them after the fact.\n\nAdditionally, pointables use `Exto`'s `flex_schema()`, so you can\nprovide additional configuration for those in the same place. Unlike\na regular pointable, you should not add additional\n(non-virtual) fields, but it is permitted to add `has_one` /\n`has_many` associations.\n\nI shall say it again because it's important: This happens at\n*compile time*. You must rebuild the app containing the pointable\nwhenever the configuration changes.","title":"Overriding with configuration - Needle.Virtual","ref":"Needle.Virtual.html#module-overriding-with-configuration"},{"type":"module","doc":"Defines a function `__pointers__/1` to introspect data. Recognised\nparameters:\n\n`:role` - `:virtual`.\n`:table_id` - retrieves the UID id of the virtual.\n`:otp_app` - retrieves the OTP application to which this belongs.","title":"Introspection - Needle.Virtual","ref":"Needle.Virtual.html#module-introspection"},{"type":"macro","doc":"","title":"Needle.Virtual.virtual_schema/1","ref":"Needle.Virtual.html#virtual_schema/1"},{"type":"module","doc":"","title":"Releaser.Git","ref":"Releaser.Git.html"},{"type":"function","doc":"This module contains some git-specific functionality","title":"Releaser.Git.add_commit_and_tag/1","ref":"Releaser.Git.html#add_commit_and_tag/1"},{"type":"module","doc":"","title":"Releaser.Publish","ref":"Releaser.Publish.html"},{"type":"function","doc":"","title":"Releaser.Publish.publish!/0","ref":"Releaser.Publish.html#publish!/0"},{"type":"module","doc":"","title":"Releaser.Tests","ref":"Releaser.Tests.html"},{"type":"function","doc":"","title":"Releaser.Tests.run_tests!/0","ref":"Releaser.Tests.html#run_tests!/0"},{"type":"module","doc":"","title":"Releaser.VersionUtils","ref":"Releaser.VersionUtils.html"},{"type":"function","doc":"Some utilities to get and set version numbers in the `mix.exs` file\nand to programmatically transform version numbers.\nMaybe the `bump_*` functions should be in the standard library?\nThis script doesn't support pre-release versions or versions with build information.","title":"Releaser.VersionUtils.bump_major/1","ref":"Releaser.VersionUtils.html#bump_major/1"},{"type":"function","doc":"","title":"Releaser.VersionUtils.bump_minor/1","ref":"Releaser.VersionUtils.html#bump_minor/1"},{"type":"function","doc":"","title":"Releaser.VersionUtils.bump_patch/1","ref":"Releaser.VersionUtils.html#bump_patch/1"},{"type":"function","doc":"","title":"Releaser.VersionUtils.bump_pre/2","ref":"Releaser.VersionUtils.html#bump_pre/2"},{"type":"function","doc":"","title":"Releaser.VersionUtils.get_version/1","ref":"Releaser.VersionUtils.html#get_version/1"},{"type":"function","doc":"","title":"Releaser.VersionUtils.set_version/2","ref":"Releaser.VersionUtils.html#set_version/2"},{"type":"function","doc":"","title":"Releaser.VersionUtils.update_version/2","ref":"Releaser.VersionUtils.html#update_version/2"},{"type":"function","doc":"","title":"Releaser.VersionUtils.version_to_string/1","ref":"Releaser.VersionUtils.html#version_to_string/1"},{"type":"module","doc":"Logging/inspecting data, and timing functions, with code location information.","title":"Untangle","ref":"Untangle.html"},{"type":"module","doc":"`Untangle` provides alternatives for `IO.inspect` and the macros in Elixir's `Logger` to output code location information. It also provides a polyfill for `dbg` which was introduce in Elixir 1.14\n\n![screenshot](priv/screenshot.png \"Screenshot showing sample logs (shown when running the library tests)\")\n\nThe first argument is `inspect`ed and the second argument (if provided) is used as a label:\n\n```\n> import Untangle\nUntangle\n> debug(:no, \"the answer is\") # log at debug\n11:19:09.915 [debug] [iex:2] the answer is: :no\n:no\n> dump(%{a: :map}, \"it\") # inspect something on stdout\n[iex:3] it: %{a: :map}\n%{a: :map}\n```\n\nWhen used in a code file, the location information becomes more useful, e.g.:\n\n```\n[lib/test_untangle.ex:15@Test.Untangle.example/2] Here's an empty list: []\n```\n\nYou may also notice from the iex output that it returns its first argument. This makes it ideal for inserting into a pipeline for debugging purposes:\n\n```elixir\ndo_something()\n|> debug(\"output of do_something/0\")\n```\n\nWhen you are done debugging something, the location of the debug statement is already in the output so you know where to remove it, comment it out, or simply change `warn` or `info` for `debug` if you only need it during development :-)","title":"Logging/inspecting - Untangle","ref":"Untangle.html#module-logging-inspecting"},{"type":"module","doc":"You can decorate functions to measure and log their execution time:\n\n```\nuse Untangle\n\n@decorate time()\ndef fun(), do: :stuff\n```\n\nwill output something like `[info] Time to run MyModule.fun/0: 1 ms`","title":"Timing functions - Untangle","ref":"Untangle.html#module-timing-functions"},{"type":"module","doc":"If [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `untangle` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:untangle, \"~> 0.3\"}\n  ]\nend\n```\n\n# Configure as default `dbg/2` handler","title":"Installation - Untangle","ref":"Untangle.html#module-installation"},{"type":"module","doc":"`config :elixir, :dbg_callback, {Untangle, :custom_dbg, []}`\n\n# Docs\n\nThe docs can be found at [https://hexdocs.pm/untangle](https://hexdocs.pm/untangle).","title":"In config/config.exs - Untangle","ref":"Untangle.html#module-in-config-config-exs"},{"type":"module","doc":"Copyright (c) 2022 Bonfire contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Untangle","ref":"Untangle.html#module-copyright-and-license"},{"type":"function","doc":"Custom backend for `Kernel.dbg/2`.\nThis function provides a backend for `Kernel.dbg/2`.\nThis function:\n  * may log or print information about the given `env`\n  * may log or print information about `code` and its returned value (using `opts` to inspect terms)\n  * returns the value returned by evaluating `code`","title":"Untangle.custom_dbg/3","ref":"Untangle.html#custom_dbg/3"},{"type":"macro","doc":"Like `dump`, but for logging at debug level","title":"Untangle.debug/3","ref":"Untangle.html#debug/3"},{"type":"macro","doc":"IO.inspect but outputs to Logger with position information, an optional label and configured not to truncate output too much.","title":"Untangle.dump/3","ref":"Untangle.html#dump/3"},{"type":"macro","doc":"Similar to `dump`, but for logging at error level, and returns an error tuple:\n- an error tuple with the label, if any\n- an error tuple with the passed value otherwise\n\n  iex> error(:value)\n  ### [error] :value\n  {:error, :value}\n\n  iex> error({:error, :value})\n  ### [error] :value\n  {:error, :value}\n\n  iex> error(:value, \"with label\")\n  ### [error] with label: :value\n  {:error, \"with label\"}\n\n  iex> error({:error, :value}, \"with label\")\n  ### [error] with label: :value\n  {:error, \"with label\"}","title":"Untangle.error/3","ref":"Untangle.html#error/3"},{"type":"function","doc":"","title":"Untangle.format_application_location/3","ref":"Untangle.html#format_application_location/3"},{"type":"function","doc":"","title":"Untangle.format_location/2","ref":"Untangle.html#format_location/2"},{"type":"function","doc":"Formats the stacktrace.\n\nA stacktrace must be given as an argument. If not, the stacktrace\nis retrieved from `Process.info/2`.","title":"Untangle.format_stacktrace/1","ref":"Untangle.html#format_stacktrace/1"},{"type":"function","doc":"Receives a stacktrace entry and formats it into a string.","title":"Untangle.format_stacktrace_entry/1","ref":"Untangle.html#format_stacktrace_entry/1"},{"type":"function","doc":"","title":"Untangle.format_stacktrace_label/2","ref":"Untangle.html#format_stacktrace_label/2"},{"type":"function","doc":"","title":"Untangle.format_stacktrace_sliced/3","ref":"Untangle.html#format_stacktrace_sliced/3"},{"type":"macro","doc":"Like `dump`, but for logging at info level","title":"Untangle.info/3","ref":"Untangle.html#info/3"},{"type":"function","doc":"","title":"Untangle.log_level?/1","ref":"Untangle.html#log_level?/1"},{"type":"macro","doc":"Like `debug`, but will do nothing unless the `:debug` option is truthy","title":"Untangle.maybe_dbg/3","ref":"Untangle.html#maybe_dbg/3"},{"type":"macro","doc":"Like `maybe_dbg`, but requires the `:verbose` option to be set. Intended for large outputs.","title":"Untangle.maybe_info/3","ref":"Untangle.html#maybe_info/3"},{"type":"function","doc":"","title":"Untangle.module_name/1","ref":"Untangle.html#module_name/1"},{"type":"macro","doc":"Tries to 'do what i mean'. Requires the `debug` option to be set regardless. If `verbose` is also\nset, will inspect else will attempt to print some (hopefully smaller) type-dependent summary of\nthe data (list length, map keys).","title":"Untangle.smart/3","ref":"Untangle.html#smart/3"},{"type":"macro","doc":"Like `dump`, but for logging at warn level","title":"Untangle.warn/3","ref":"Untangle.html#warn/3"},{"type":"module","doc":"","title":"Untangle.Time","ref":"Untangle.Time.html"},{"type":"macro","doc":"","title":"Untangle.Time.time/0","ref":"Untangle.Time.html#time/0"},{"type":"function","doc":"","title":"Untangle.Time.time/2","ref":"Untangle.Time.html#time/2"},{"type":"module","doc":"`Voodoo` is a drop-in replacement for the old-style Phoenix path helpers (before `Phoenix.VerifiedRoutes` was introduced) which is more convenient to use.","title":"Voodoo","ref":"Voodoo.html"},{"type":"macro","doc":"Generates a reverse router function with the given name based upon a\ncompiled(!) phoenix router module.\n\nMust be used outside of the router module, or else the router won't\nbe compiled yet and we won't be able to look up the routes.\n\nGenerated function wraps the existing phoenix helpers.\n\n```\ndefmodule MyAppWeb.Router do\n  use MyAppWeb, :router\n  # ...\nend\ndefmodule MyAppWeb.Router.Reverse do\n  import Voodoo, only: [def_reverse_router: 2]\n  def_reverse_router :path, for: MyAppWeb.Router\nend\n```","title":"Voodoo.def_reverse_router/2","ref":"Voodoo.html#def_reverse_router/2"},{"type":"function","doc":"Turns a Conn or Socket into the name of the router that routed it.","title":"Voodoo.router/1","ref":"Voodoo.html#router/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL","ref":"Bonfire.API.GraphQL.html"},{"type":"module","doc":"Go to http://your-instance-url/api/ to start playing with the GraphQL API. The GraphiQL UI should autocomplete types, queries and mutations for you, and you can also explore the schema there.\n\nLet's start with a simple GraphQL thoeretical query:\n\n```graphql\nquery {\n  greetings(limit: 10) {\n    greeting\n    to {\n      name\n    }\n  }\n}\n```\n\nLet's break this apart:\n\n- `query {}` is how you retrieve information from GraphQL.\n- `greetings` is a `field` within the query.\n- `greetings` takes a `limit` argument, a positive integer.\n- `greetings` has two fields, `greeting` and `to`.\n- `to` has one `field`, `name`.\n\nThis query is asking for a list of (up to) 10 greetings and the people\nthey are for. Notice that the result of both `greetings` and `to` are\nmap/object structures with their own fields and that if the type has\nmultiple fields, we can select more than one field.\n\nHere is some possible data we could get returned\n\n```elixir\n%{greetings: [\n    %{greeting: \"hello\", to: %{ name: \"dear reader\"}}, # english\n    %{greeting: \"hallo\", to: %{ name: \"beste lezer\"}}, # dutch\n  ]}\n```\n\nWhere is the magic? Typically an object type will reside in its own\ntable in the database, so this query is actually querying two tables\nin one go. In fact, given a supporting schema, you can nest queries\narbitrarily and the backend will figure out how to run them.\n\nThe fact that you can represent arbitrarily complex queries puts quite\na lot of pressure on the backend to make it all efficient. This is\nstill a work in progress at this time.","title":"GraphQL Introduction - Bonfire.API.GraphQL","ref":"Bonfire.API.GraphQL.html#module-graphql-introduction"},{"type":"module","doc":"Every `field` is filled by a resolver. Let's take our existing query\nand define a schema for it in Absinthe's query DSL:\n\n```elixir\ndefmodule MyApp.Schema do\n  # the schema macro language\n  use Absinthe.Schema.Notation\n  # where we will actually resolve the fields\n  alias MyApp.Resolver\n\n  # Our user object is pretty simple, just a name\n  object :user do\n    field :name, non_null(:string)\n  end\n\n  # This one is slightly more complicated, we have that nested `to`\n  object :greeting do\n    # the easy one\n    field :greeting, non_null(:string)\n    # the hard one. `edge` is the term for when we cross an object boundary.\n    field :to, non_null(:user), do: resolve(&Resolver.to_edge/3)\n  end\n\n  # something to put our top level queries in, because they're just fields too!\n  object :queries do\n    field :greetings, non_null(list_of(non_null(:string))) do\n      arg :limit, :integer # optional\n      resolve &Resolver.greetings/2 # we need to manually process this one\n    end\n  end\n\nend\n```\n\nThere are a couple of interesting things about this:\n\n- Sprinklings of `not_null` to require that values be present (if you\n  don't return them, absinthe will get upset).\n- Only two fields have explicit resolvers. Anything else will default\n  to a map key lookup (which is more often than not what you want).\n- `greeting.to_edge` has a `/3` resolver and `queries.greetings` a\n  `/2` resolver.\n\nTo understand the last one (and partially the middle one), we must\nunderstand how resolution works and what a parent is. The best way of\ndoing that is probably to look at the resolver code:\n\n```elixir\ndefmodule MyApp.Resolver do\n\n  # For purposes of this, we will just fake the data out\n  defp greetings_data() do\n    [ %{greeting: \"hello\", to: %{ name: \"dear reader\"}}, # english\n      %{greeting: \"hallo\", to: %{ name: \"beste lezer\"}}, # dutch\n    ]\n  end\n\n  # the /2 resolver takes only arguments (which in this case is just limit)\n  # and an info (which we'll explain later)\n  def greetings(%{limit: limit}, _info) when is_integer(limit) and limit > 0 do\n    {:ok, Enum.take(greetings_data(), limit)} # absinthe expects an ok/error tuple\n  end\n  def greetings(_args, _info), do: {:ok, greetings_data()} # no limit\n\n  # the /3 resolver takes an additional parent argument in first position.\n  # `parent` here will be the `greeting` we are resolving `to` for.\n  def to_edge(parent, args, info), do: Map.get(parent, :to)\n\nend\n```\n\nThe keen-eyed amongst you may have noticed I said the default resolver\nis a map lookup and our `to_edge/3` is a map lookup too, so\ntechnically we didn't need to write it. But then you wouldn't have an\nexample of a `/3` resolver! In most of the app, these will be querying\nfrom the database, not looking up in a constant.\n\nSo for every field, a resolver function is run. It defaults to a map\nlookup, but you can override it with `resolve/1`. It may or may not\nhave arguments. And all absinthe resolvers return an ok/error tuple.","title":"Absinthe Introduction - Bonfire.API.GraphQL","ref":"Bonfire.API.GraphQL.html#module-absinthe-introduction"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program. If not, see  .","title":"Copyright and License - Bonfire.API.GraphQL","ref":"Bonfire.API.GraphQL.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.admin_or/2","ref":"Bonfire.API.GraphQL.html#admin_or/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.admin_or_empty_page/1","ref":"Bonfire.API.GraphQL.html#admin_or_empty_page/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.admin_or_not_permitted/1","ref":"Bonfire.API.GraphQL.html#admin_or_not_permitted/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.cast_int_ulid_id/1","ref":"Bonfire.API.GraphQL.html#cast_int_ulid_id/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.cast_nonnegint/1","ref":"Bonfire.API.GraphQL.html#cast_nonnegint/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.cast_posint/1","ref":"Bonfire.API.GraphQL.html#cast_posint/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.cast_ulid/1","ref":"Bonfire.API.GraphQL.html#cast_ulid/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_account/1","ref":"Bonfire.API.GraphQL.html#current_account/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_user/1","ref":"Bonfire.API.GraphQL.html#current_user/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_user_or/2","ref":"Bonfire.API.GraphQL.html#current_user_or/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_user_or_empty_page/1","ref":"Bonfire.API.GraphQL.html#current_user_or_empty_page/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_user_or_not_found/1","ref":"Bonfire.API.GraphQL.html#current_user_or_not_found/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.current_user_or_not_logged_in/1","ref":"Bonfire.API.GraphQL.html#current_user_or_not_logged_in/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.empty_page/0","ref":"Bonfire.API.GraphQL.html#empty_page/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.equals_or/4","ref":"Bonfire.API.GraphQL.html#equals_or/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.equals_or_not_permitted/2","ref":"Bonfire.API.GraphQL.html#equals_or_not_permitted/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.full_page_opts/3","ref":"Bonfire.API.GraphQL.html#full_page_opts/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.guest_only/1","ref":"Bonfire.API.GraphQL.html#guest_only/1"},{"type":"function","doc":"Are we in a list (recursively)?","title":"Bonfire.API.GraphQL.in_list?/1","ref":"Bonfire.API.GraphQL.html#in_list?/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.invalid_credential/0","ref":"Bonfire.API.GraphQL.html#invalid_credential/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.is_authenticated/1","ref":"Bonfire.API.GraphQL.html#is_authenticated/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.limit_page_opts/2","ref":"Bonfire.API.GraphQL.html#limit_page_opts/2"},{"type":"function","doc":"How many lists are we in (recursively)?","title":"Bonfire.API.GraphQL.list_depth/1","ref":"Bonfire.API.GraphQL.html#list_depth/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.not_found/0","ref":"Bonfire.API.GraphQL.html#not_found/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.not_in_list_or/2","ref":"Bonfire.API.GraphQL.html#not_in_list_or/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.not_in_list_or_empty_page/1","ref":"Bonfire.API.GraphQL.html#not_in_list_or_empty_page/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.not_logged_in/0","ref":"Bonfire.API.GraphQL.html#not_logged_in/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.not_permitted/1","ref":"Bonfire.API.GraphQL.html#not_permitted/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.parent_name/1","ref":"Bonfire.API.GraphQL.html#parent_name/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.predicated/1","ref":"Bonfire.API.GraphQL.html#predicated/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.predicated/2","ref":"Bonfire.API.GraphQL.html#predicated/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.reproject/2","ref":"Bonfire.API.GraphQL.html#reproject/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.reverse_path/1","ref":"Bonfire.API.GraphQL.html#reverse_path/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.validate_cursor/2","ref":"Bonfire.API.GraphQL.html#validate_cursor/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.wanted/2","ref":"Bonfire.API.GraphQL.html#wanted/2"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Auth","ref":"Bonfire.API.GraphQL.Auth.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.account_by/1","ref":"Bonfire.API.GraphQL.Auth.html#account_by/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.build_context/1","ref":"Bonfire.API.GraphQL.Auth.html#build_context/1"},{"type":"function","doc":"Resolver for login mutation for Bonfire.API.GraphQL.CommonSchema","title":"Bonfire.API.GraphQL.Auth.login/3","ref":"Bonfire.API.GraphQL.Auth.html#login/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.select_user/3","ref":"Bonfire.API.GraphQL.Auth.html#select_user/3"},{"type":"function","doc":"Puts the account/user data in Absinthe context (runs after on `login/3` resolver)","title":"Bonfire.API.GraphQL.Auth.set_context_from_resolution/2","ref":"Bonfire.API.GraphQL.Auth.html#set_context_from_resolution/2"},{"type":"function","doc":"Sets session cookie based on the Absinthe context set in `set_context_from_resolution/2` (called from router's `absinthe_before_send/2` )","title":"Bonfire.API.GraphQL.Auth.set_session_from_context/2","ref":"Bonfire.API.GraphQL.Auth.html#set_session_from_context/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.token_new/1","ref":"Bonfire.API.GraphQL.Auth.html#token_new/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.token_verify/1","ref":"Bonfire.API.GraphQL.Auth.html#token_verify/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.user_by/1","ref":"Bonfire.API.GraphQL.Auth.html#user_by/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.user_by/2","ref":"Bonfire.API.GraphQL.Auth.html#user_by/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Auth.username/1","ref":"Bonfire.API.GraphQL.Auth.html#username/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.CommonResolver","ref":"Bonfire.API.GraphQL.CommonResolver.html"},{"type":"function","doc":"Returns the canonical url for a thing or character","title":"Bonfire.API.GraphQL.CommonResolver.canonical_url_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#canonical_url_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.context_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#context_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.context_edges/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#context_edges/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.created_at_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#created_at_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.delete/2","ref":"Bonfire.API.GraphQL.CommonResolver.html#delete/2"},{"type":"function","doc":"Returns the username for a character","title":"Bonfire.API.GraphQL.CommonResolver.display_username_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#display_username_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.fetch_context_edge/2","ref":"Bonfire.API.GraphQL.CommonResolver.html#fetch_context_edge/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.fetch_context_edges/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#fetch_context_edges/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.is_deleted_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#is_deleted_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.is_disabled_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#is_disabled_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.is_hidden_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#is_hidden_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.is_local_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#is_local_edge/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.CommonResolver.is_public_edge/3","ref":"Bonfire.API.GraphQL.CommonResolver.html#is_public_edge/3"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.CommonSchema","ref":"Bonfire.API.GraphQL.CommonSchema.html"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Cursor","ref":"Bonfire.API.GraphQL.Cursor.html"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.FetchFields","ref":"Bonfire.API.GraphQL.FetchFields.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.FetchFields.run/1","ref":"Bonfire.API.GraphQL.FetchFields.html#run/1"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.FetchFields.t/0","ref":"Bonfire.API.GraphQL.FetchFields.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.FetchPage","ref":"Bonfire.API.GraphQL.FetchPage.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.FetchPage.run/1","ref":"Bonfire.API.GraphQL.FetchPage.html#run/1"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.FetchPage.t/0","ref":"Bonfire.API.GraphQL.FetchPage.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.FetchPages","ref":"Bonfire.API.GraphQL.FetchPages.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.FetchPages.run/1","ref":"Bonfire.API.GraphQL.FetchPages.html#run/1"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.FetchPages.t/0","ref":"Bonfire.API.GraphQL.FetchPages.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Fields","ref":"Bonfire.API.GraphQL.Fields.html"},{"type":"function","doc":"Returns the result corresponding to the given key, or the given default (or nil).","title":"Bonfire.API.GraphQL.Fields.get/3","ref":"Bonfire.API.GraphQL.Fields.html#get/3"},{"type":"function","doc":"Returns a post-batch callback function which calls get with the\nprovided key and optional default value (or nil).","title":"Bonfire.API.GraphQL.Fields.getter/2","ref":"Bonfire.API.GraphQL.Fields.html#getter/2"},{"type":"function","doc":"Creates a new Fields from the data and a grouping function","title":"Bonfire.API.GraphQL.Fields.new/2","ref":"Bonfire.API.GraphQL.Fields.html#new/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Fields.new/3","ref":"Bonfire.API.GraphQL.Fields.html#new/3"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.Fields.t/0","ref":"Bonfire.API.GraphQL.Fields.html#t:t/0"},{"type":"module","doc":"The Json scalar type allows arbitrary JSON values to be passed in and out.\nRequires `{ :jason, \"~> 1.1\" }` package: https://github.com/michalmuskala/jason","title":"Bonfire.API.GraphQL.JSON","ref":"Bonfire.API.GraphQL.JSON.html"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.MastoCompatible.Router","ref":"Bonfire.API.GraphQL.MastoCompatible.Router.html"},{"type":"macro","doc":"","title":"Bonfire.API.GraphQL.MastoCompatible.Router.include_masto_api/0","ref":"Bonfire.API.GraphQL.MastoCompatible.Router.html#include_masto_api/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Middleware.CollapseErrors","ref":"Bonfire.API.GraphQL.Middleware.CollapseErrors.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.CollapseErrors.call/2","ref":"Bonfire.API.GraphQL.Middleware.CollapseErrors.html#call/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.CollapseErrors.collapse/1","ref":"Bonfire.API.GraphQL.Middleware.CollapseErrors.html#collapse/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.CollapseErrors.collapse/2","ref":"Bonfire.API.GraphQL.Middleware.CollapseErrors.html#collapse/2"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Middleware.Debug","ref":"Bonfire.API.GraphQL.Middleware.Debug.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.Debug.call/2","ref":"Bonfire.API.GraphQL.Middleware.Debug.html#call/2"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Middleware.RenderLists","ref":"Bonfire.API.GraphQL.Middleware.RenderLists.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.RenderLists.call/2","ref":"Bonfire.API.GraphQL.Middleware.RenderLists.html#call/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Middleware.RenderLists.collapse/1","ref":"Bonfire.API.GraphQL.Middleware.RenderLists.html#collapse/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Page","ref":"Bonfire.API.GraphQL.Page.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Page.new/4","ref":"Bonfire.API.GraphQL.Page.html#new/4"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.Page.t/0","ref":"Bonfire.API.GraphQL.Page.html#t:t/0"},{"type":"module","doc":"Information about this page's relation to a larger result set","title":"Bonfire.API.GraphQL.PageInfo","ref":"Bonfire.API.GraphQL.PageInfo.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.PageInfo.new/4","ref":"Bonfire.API.GraphQL.PageInfo.html#new/4"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.PageInfo.t/0","ref":"Bonfire.API.GraphQL.PageInfo.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Pages","ref":"Bonfire.API.GraphQL.Pages.html"},{"type":"function","doc":"Returns a Page for the given key, defaulting to an empty one","title":"Bonfire.API.GraphQL.Pages.get/2","ref":"Bonfire.API.GraphQL.Pages.html#get/2"},{"type":"function","doc":"Returns a post-batch callback (i.e. the third argument to batch/3)\nfor a key which calls get() with the callback param and the key","title":"Bonfire.API.GraphQL.Pages.getter/1","ref":"Bonfire.API.GraphQL.Pages.html#getter/1"},{"type":"function","doc":"Create a new pages from a data map, counts map, cursor function and page opts","title":"Bonfire.API.GraphQL.Pages.new/4","ref":"Bonfire.API.GraphQL.Pages.html#new/4"},{"type":"function","doc":"Create a new Pages from some data rows, count rows and a\ngrouping key. Groups the data by the grouping key on insertion and\nturns the counts into a map ready for lookup on a per-row basis.\n\nNote: if the grouping key is not present in the returned data rows,\nthis function will crash. Our intuition is that this would mean an\nerror in the calling code, so we would rather raise it early.","title":"Bonfire.API.GraphQL.Pages.new/5","ref":"Bonfire.API.GraphQL.Pages.html#new/5"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.Pages.counts/0","ref":"Bonfire.API.GraphQL.Pages.html#t:counts/0"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.Pages.data/0","ref":"Bonfire.API.GraphQL.Pages.html#t:data/0"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.Pages.t/0","ref":"Bonfire.API.GraphQL.Pages.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Pagination","ref":"Bonfire.API.GraphQL.Pagination.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Pagination.connection_paginate/3","ref":"Bonfire.API.GraphQL.Pagination.html#connection_paginate/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Pagination.page/7","ref":"Bonfire.API.GraphQL.Pagination.html#page/7"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Pagination.page_all/7","ref":"Bonfire.API.GraphQL.Pagination.html#page_all/7"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Pagination.pages/8","ref":"Bonfire.API.GraphQL.Pagination.html#pages/8"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Pagination.pagination_args_filter/1","ref":"Bonfire.API.GraphQL.Pagination.html#pagination_args_filter/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.PlugPipelines","ref":"Bonfire.API.GraphQL.PlugPipelines.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.PlugPipelines.default_pipeline/2","ref":"Bonfire.API.GraphQL.PlugPipelines.html#default_pipeline/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.PlugPipelines.run/2","ref":"Bonfire.API.GraphQL.PlugPipelines.html#run/2"},{"type":"module","doc":"GraphQL Plug to add current user to the context","title":"Bonfire.API.GraphQL.Plugs.GraphQLContext","ref":"Bonfire.API.GraphQL.Plugs.GraphQLContext.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Plugs.GraphQLContext.call/2","ref":"Bonfire.API.GraphQL.Plugs.GraphQLContext.html#call/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Plugs.GraphQLContext.init/1","ref":"Bonfire.API.GraphQL.Plugs.GraphQLContext.html#init/1"},{"type":"module","doc":"Helpful functions for preparing to query or test Absinthe applications.\n\nThese functions make it trivially easy to generate very large, comprehensive queries for our types in Absinthe that will resolve every field in that type (and any number of subtypes as well to a given level of depth)\n\nAdapted from https://github.com/devonestes/assertions (MIT license)","title":"Bonfire.API.GraphQL.QueryHelper","ref":"Bonfire.API.GraphQL.QueryHelper.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.apply_overrides/2","ref":"Bonfire.API.GraphQL.QueryHelper.html#apply_overrides/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.camelize/1","ref":"Bonfire.API.GraphQL.QueryHelper.html#camelize/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.do_format_fields/3","ref":"Bonfire.API.GraphQL.QueryHelper.html#do_format_fields/3"},{"type":"function","doc":"Returns a document containing the fields in a type and any sub-types down to a limited depth of\nnesting (default `3`).\n\nThis is helpful for generating a document to use for testing your GraphQL API. This function\nwill always return all fields in the given type, ensuring that there aren't any accidental\nfields with resolver functions that aren't tested in at least some fashion.","title":"Bonfire.API.GraphQL.QueryHelper.document_for/4","ref":"Bonfire.API.GraphQL.QueryHelper.html#document_for/4"},{"type":"function","doc":"iex> document_for(:user, 2)\n\n    ```\n    name\n    age\n    posts {\n      title\n      subtitle\n    }\n    comments {\n      body\n    }\n    ```","title":"Example - Bonfire.API.GraphQL.QueryHelper.document_for/4","ref":"Bonfire.API.GraphQL.QueryHelper.html#document_for/4-example"},{"type":"function","doc":"Returns all fields in a type and any sub-types down to a limited depth of nesting (default `3`).\n\nThis is helpful for converting a struct or map into an expected response that is a bare map\nand which can be used in some of the other assertions below.","title":"Bonfire.API.GraphQL.QueryHelper.fields_for/3","ref":"Bonfire.API.GraphQL.QueryHelper.html#fields_for/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.format_fields/4","ref":"Bonfire.API.GraphQL.QueryHelper.html#format_fields/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.get_fields/3","ref":"Bonfire.API.GraphQL.QueryHelper.html#get_fields/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.maybe_debug_api/4","ref":"Bonfire.API.GraphQL.QueryHelper.html#maybe_debug_api/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.padding/1","ref":"Bonfire.API.GraphQL.QueryHelper.html#padding/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.query_with_id/4","ref":"Bonfire.API.GraphQL.QueryHelper.html#query_with_id/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.QueryHelper.run_query_id/6","ref":"Bonfire.API.GraphQL.QueryHelper.html#run_query_id/6"},{"type":"module","doc":"Encapsulates the flow for resolving a field in the absence of\nmultiple parents.","title":"Bonfire.API.GraphQL.ResolveField","ref":"Bonfire.API.GraphQL.ResolveField.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolveField.run/1","ref":"Bonfire.API.GraphQL.ResolveField.html#run/1"},{"type":"module","doc":"Encapsulates the flow for resolving a field for potentially multiple\nparents.","title":"Bonfire.API.GraphQL.ResolveFields","ref":"Bonfire.API.GraphQL.ResolveFields.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolveFields.default_getter/2","ref":"Bonfire.API.GraphQL.ResolveFields.html#default_getter/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolveFields.run/1","ref":"Bonfire.API.GraphQL.ResolveFields.html#run/1"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.ResolveFields.getter/0","ref":"Bonfire.API.GraphQL.ResolveFields.html#t:getter/0"},{"type":"type","doc":"","title":"Bonfire.API.GraphQL.ResolveFields.t/0","ref":"Bonfire.API.GraphQL.ResolveFields.html#t:t/0"},{"type":"module","doc":"Encapsulates the flow of resolving a page in the presence of a\nsingle parent. We also currently use this as a stopgap while we\nfinish implementing some things, trading speed for correctness.","title":"Bonfire.API.GraphQL.ResolvePage","ref":"Bonfire.API.GraphQL.ResolvePage.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolvePage.run/1","ref":"Bonfire.API.GraphQL.ResolvePage.html#run/1"},{"type":"module","doc":"Encapsulates the flow of resolving a page in the presence of a\nsingle parent. We also currently use this as a stopgap while we\nfinish implementing some things, trading speed for correctness.","title":"Bonfire.API.GraphQL.ResolvePages","ref":"Bonfire.API.GraphQL.ResolvePages.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolvePages.run/1","ref":"Bonfire.API.GraphQL.ResolvePages.html#run/1"},{"type":"module","doc":"Encapsulates the flow of resolving a page in the absence of parents.","title":"Bonfire.API.GraphQL.ResolveRootPage","ref":"Bonfire.API.GraphQL.ResolveRootPage.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.ResolveRootPage.run/1","ref":"Bonfire.API.GraphQL.ResolveRootPage.html#run/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.RestAdapter","ref":"Bonfire.API.GraphQL.RestAdapter.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.endpoint/3","ref":"Bonfire.API.GraphQL.RestAdapter.html#endpoint/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.error_fn/2","ref":"Bonfire.API.GraphQL.RestAdapter.html#error_fn/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.return/4","ref":"Bonfire.API.GraphQL.RestAdapter.html#return/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.success_fn/2","ref":"Bonfire.API.GraphQL.RestAdapter.html#success_fn/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.transform_data/1","ref":"Bonfire.API.GraphQL.RestAdapter.html#transform_data/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.transform_data/2","ref":"Bonfire.API.GraphQL.RestAdapter.html#transform_data/2"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.RestAdapter.EndpointConfig","ref":"Bonfire.API.GraphQL.RestAdapter.EndpointConfig.html"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Router","ref":"Bonfire.API.GraphQL.Router.html"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.SchemaPipelines","ref":"Bonfire.API.GraphQL.SchemaPipelines.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.SchemaPipelines.pipeline/1","ref":"Bonfire.API.GraphQL.SchemaPipelines.html#pipeline/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.SchemaPipelines.run/2","ref":"Bonfire.API.GraphQL.SchemaPipelines.html#run/2"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.SchemaUtils","ref":"Bonfire.API.GraphQL.SchemaUtils.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.SchemaUtils.context_types/0","ref":"Bonfire.API.GraphQL.SchemaUtils.html#context_types/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.SchemaUtils.hydrations_merge/1","ref":"Bonfire.API.GraphQL.SchemaUtils.html#hydrations_merge/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_binary/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_binary/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_boolean/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_boolean/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_created_at/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_created_at/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_cursor/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_cursor/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_cursors/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_cursors/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_datetime/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_datetime/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_datetime/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_datetime/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_display_username/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_display_username/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_email/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_email/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_eq/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_eq/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_field/3","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_field/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_float/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_float/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_int/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_int/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_invalid_credential/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_invalid_credential/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_list/0","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_list/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_list/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_list/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_list/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_list/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_location/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_location/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_maps_eq/3","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_maps_eq/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_maps_eq/4","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_maps_eq/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_maps_eq/5","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_maps_eq/5"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_non_neg/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_non_neg/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_not_found/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_not_found/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_not_logged_in/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_not_logged_in/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_not_permitted/3","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_not_permitted/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_object/4","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_object/4"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_optional/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_optional/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_optional_field/3","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_optional_field/3"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_page/0","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_page/0"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_page/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_page/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_page/6","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_page/6"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_page_info/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_page_info/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_pos/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_pos/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_ulid/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_ulid/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_updated_at/2","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_updated_at/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_url/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_url/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_username/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_username/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.assert_uuid/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#assert_uuid/1"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.Test.GraphQLAssertions.uncamel_map/1","ref":"Bonfire.API.GraphQL.Test.GraphQLAssertions.html#uncamel_map/1"},{"type":"module","doc":"","title":"Bonfire.API.GraphQL.UserSocket","ref":"Bonfire.API.GraphQL.UserSocket.html"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.UserSocket.build_context_from_params/2","ref":"Bonfire.API.GraphQL.UserSocket.html#build_context_from_params/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.UserSocket.connect/2","ref":"Bonfire.API.GraphQL.UserSocket.html#connect/2"},{"type":"function","doc":"","title":"Bonfire.API.GraphQL.UserSocket.id/1","ref":"Bonfire.API.GraphQL.UserSocket.html#id/1"},{"type":"module","doc":"Bonfire's boundaries framework provides a flexible way to control user access to specific actions and data. It ensures that users can only see and do what they're authorized to.\n\nYou can create custom groups of contacts (circles) and grant them specific permissions to interact with you and your content. They can help you take control of your online presence and ensure that your data is shared only with the people you want.\n\n> Boundaries are limits that you set for yourself or others to define what you're comfortable with.\n> These limits can be physical, like curtains or doors; digital, like sharing settings on social media; in writing, like codes of conduct; emotional, like feeling comfortable to take time for self-care; or mental, like choosing what you pay attention to. In Bonfire, boundaries can help limit the type of interactions that others may have with you or things you post.\n> Boundaries are important because they help you protect yourself, maintain your autonomy, and communicate your needs and expectations clearly.","title":"Bonfire.Boundaries","ref":"Bonfire.Boundaries.html"},{"type":"module","doc":"| Term                                                  | Definition                                                                                           |\n| ----------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| **Subject** or **User**                               | An individual who interacts with the system.                                                         |\n| **[Circle](Bonfire.Boundaries.Circles.html)**         | A categorization method for users, allowing users to group other users (e.g., colleagues, friends).  |\n| **[Verb](Bonfire.Boundaries.Verbs.html)**             | An action that a user can perform (e.g., read, reply).                                               |\n| **Permission**                                        | A value indicating whether an action is allowed (`true`), denied (`false`), or `nil`.                |\n| **[Grant](Bonfire.Boundaries.Grants.html)**           | Links a user or circle with a verb and permission.                                                   |\n| **[ACL](Bonfire.Boundaries.Acls.html)**               | Access Control List, a collection of grants. Also called \"boundary\" or \"boundary preset\" in the app. |\n| **[Controlled](Bonfire.Boundaries.Controlleds.html)** | Links an object to one or more ACLs, to determine access based on the grants.                        |\n| **[Role](Bonfire.Boundaries.Roles.html)**             | A group of verbs linked to a permission.                                                             |","title":"Glossary - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-glossary"},{"type":"module","doc":"Circles are a way of categorizing users. Each user can have their own set of circles to categorize other users. Circles allow a user to group work colleagues differently from friends for example, and to allow different interactions for users in each circle or limit content visibility on a per-item basis.","title":"Users and Circles - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-users-and-circles"},{"type":"module","doc":"Verbs represent actions users can perform, such as reading a post or replying to a message. Each verb has a unique ID and are defined in configuration.","title":"Verbs - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-verbs"},{"type":"module","doc":"A permission is a decision about whether the action may be performed or not. There are 3 possible values:\n\n- `true`: yes, the action is allowed\n- `false`: no, the action is explicitly denied (i.e. never permit)\n- `null`/`nil`: unknown, the action isn't explicitly allowed (defaults to not allowed)","title":"Permissions - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-permissions"},{"type":"module","doc":"A `Grant` links a `subject` (user or circle) with a `Verb` and a permission. It defines the access rights for a specific user or circle in relation to a particular action.","title":"Grants - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-grants"},{"type":"module","doc":"An `Acl` is a list of `Grant`s used to define access permissions for objects.\n\nBecause a user could be in more than one circle and each circle may have a different permission, when a user attempts an action on an object, the system combines all relevant grants to determine the final permission. This combination prioritizes permissions as follows: `false > true > nil`, resulting in:\n\n| input   | input   | result  |\n| :------ | :------ | :------ |\n| `nil`   | `nil`   | `nil`   |\n| `nil`   | `true`  | `true`  |\n| `nil`   | `false` | `false` |\n| `true`  | `nil`   | `true`  |\n| `true`  | `true`  | `true`  |\n| `true`  | `false` | `false` |\n| `false` | `nil`   | `false` |\n| `false` | `true`  | `false` |\n| `false` | `false` | `false` |\n\nIn simpler terms, a final permission is granted only if the combined result is `true`. Think of it as requiring an explicit \"yes\" for permission, while \"no\" always takes precedence. Notably, `nil` acts as a sort of \"weak no,\" it can be overridden by a `true` but not granting access on its own. This approach provides flexibility for implementing features like user blocking (`false` is crucial here).\n\nFor efficiency, `nil` is the assumed default and not stored in the database.","title":"ACLs - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-acls"},{"type":"module","doc":"The `Controlled` [multimixin](./DATABASE.md#multimixins) link an object to one or more ACLs. This allows for applying multiple boundaries to the same object. In case of overlapping permissions, the system combines them following the logic described above.","title":"Controlled - Applying boundaries to an object - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-controlled-applying-boundaries-to-an-object"},{"type":"module","doc":"Roles are groups of verbs associated with permissions. While not stored in the database, they are defined at the configuration level to enhance readability and user experience.","title":"Roles - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-roles"},{"type":"module","doc":"Let's illustrate how boundaries work with a real-world example: planning a surprise party without the birthday girl finding out.","title":"Practical example: Surprise birthday party - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-practical-example-surprise-birthday-party"},{"type":"module","doc":"```elixir\niex> import Bonfire.Me.Fake\niex> organizer = fake_user!()\niex> birthday_girl = fake_user!()\niex> friends = [fake_user!(), fake_user!()]\niex> family = [fake_user!(), fake_user!()]\n```","title":"1. Setting up users - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-1-setting-up-users"},{"type":"module","doc":"Organize users into relevant circles (friends and family).\n\n```elixir\niex> alias Bonfire.Boundaries.Circles\niex> {:ok, friends_circle} = Circles.create(organizer, %{named: %{name: \"friends\"}})\niex> Circles.add_to_circles(friends, friends_circle)\niex> Circles.is_encircled_by?(List.first(friends), friends_circle)\ntrue\niex> {:ok, family_circle} = Circles.create(organizer, %{named: %{name: \"family\"}})\niex> Circles.add_to_circles(family, family_circle)\n```","title":"2. Define your Circles - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-2-define-your-circles"},{"type":"module","doc":"This boundary will control access to the surprise party plans.\n\n```elixir\niex> alias Bonfire.Boundaries.Acls\niex> {:ok, boundary} = Acls.simple_create(organizer, \"Surprise party\")\n```","title":"3. Create the ACL (boundary preset) - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-3-create-the-acl-boundary-preset"},{"type":"module","doc":"Allow friends to discover, read, and respond to party plans, while family members can also edit details and send invitations.\n\n```elixir\niex> alias Bonfire.Boundaries.Grants\niex> Grants.grant(friends_circle.id, boundary.id, [:see, :read, :reply], true, current_user: organizer)\niex> Grants.grant(family_circle.id, boundary.id, [:see, :read, :reply, :edit, :invite], true, current_user: organizer)\n```\n\nPrevent the birthday person from accessing any party information.\n\n```elixir\niex> Grants.grant(birthday_girl.id, boundary.id, [:see, :read], false, current_user: organizer)\n```","title":"4. Grant permissions - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-4-grant-permissions"},{"type":"module","doc":"```elixir\niex> alias Bonfire.Posts\niex> {:ok, party_plan} = Posts.publish(\n        current_user: organizer,\n        boundary: boundary.id,\n        post_attrs: %{post_content: %{name: \"Surprise party!\"}})\n```","title":"5. Post about the party - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-5-post-about-the-party"},{"type":"module","doc":"```elixir\niex> Boundaries.can?(List.first(friends).id, :read, party_plan.id)\ntrue\niex> Boundaries.can?(List.first(family).id, :invite, party_plan.id)\ntrue\niex> Boundaries.can?(birthday_girl.id, :see, party_plan.id)\nfalse\niex> Boundaries.load_pointer(party_plan.id, current_user: birthday_girl)\nnil\n```\n\nBy following these steps, the organizer can effectively manage access to ensure the birthday girl cannot see the party plans, while friends and family can.","title":"6. Double-check applied boundaries - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-6-double-check-applied-boundaries"},{"type":"module","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Boundaries","ref":"Bonfire.Boundaries.html#module-copyright-and-license"},{"type":"function","doc":"Returns ACLs for a set of preset boundary names.","title":"Bonfire.Boundaries.acls_from_preset_boundary_names/1","ref":"Bonfire.Boundaries.html#acls_from_preset_boundary_names/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.acls_from_preset_boundary_names([\"public\"])","title":"Examples - Bonfire.Boundaries.acls_from_preset_boundary_names/1","ref":"Bonfire.Boundaries.html#acls_from_preset_boundary_names/1-examples"},{"type":"function","doc":"Normalizes boundaries represented as text or list.","title":"Bonfire.Boundaries.boundaries_normalise/1","ref":"Bonfire.Boundaries.html#boundaries_normalise/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.boundaries_normalise(\"local,public\")\n    [\"local\", \"public\"]\n\n    iex> Bonfire.Boundaries.boundaries_normalise([\"local\", \"public\"])\n    [\"local\", \"public\"]","title":"Examples - Bonfire.Boundaries.boundaries_normalise/1","ref":"Bonfire.Boundaries.html#boundaries_normalise/1-examples"},{"type":"function","doc":"Returns custom boundaries or a default set of boundaries to use","title":"Bonfire.Boundaries.boundaries_or_default/2","ref":"Bonfire.Boundaries.html#boundaries_or_default/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.boundaries_or_default([\"local\"])\n    [\"local\"]\n\n    iex> Bonfire.Boundaries.boundaries_or_default(nil, current_user: me)\n    [{\"public\", \"Public\"}]","title":"Examples - Bonfire.Boundaries.boundaries_or_default/2","ref":"Bonfire.Boundaries.html#boundaries_or_default/2-examples"},{"type":"function","doc":"Checks if a subject has permission to conduct the specified action(s)/verb(s) on an object.","title":"Bonfire.Boundaries.can?/4","ref":"Bonfire.Boundaries.html#can?/4"},{"type":"function","doc":"iex> Bonfire.Boundaries.can?(%User{id: 1}, [:see], %{id: 2})\n    false","title":"Examples - Bonfire.Boundaries.can?/4","ref":"Bonfire.Boundaries.html#can?/4-examples"},{"type":"function","doc":"Returns default boundaries to use based on the provided context.","title":"Bonfire.Boundaries.default_boundaries/1","ref":"Bonfire.Boundaries.html#default_boundaries/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.default_boundaries()\n    [{\"public\", \"Public\"}]\n\n    iex> Bonfire.Boundaries.default_boundaries(current_user: me)\n    [{\"local\", \"Local\"}]","title":"Examples - Bonfire.Boundaries.default_boundaries/1","ref":"Bonfire.Boundaries.html#default_boundaries/1-examples"},{"type":"function","doc":"Finds a caretaker stereotype based on the specified caretaker and stereotype IDs.","title":"Bonfire.Boundaries.find_caretaker_stereotype/3","ref":"Bonfire.Boundaries.html#find_caretaker_stereotype/3"},{"type":"function","doc":"Finds caretaker stereotypes based on the specified caretaker and stereotype IDs.","title":"Bonfire.Boundaries.find_caretaker_stereotypes/3","ref":"Bonfire.Boundaries.html#find_caretaker_stereotypes/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.find_caretaker_stereotypes(%User{id: 1}, [%{id: 2}])\n    [%Needle.Pointer{id: 1}]","title":"Examples - Bonfire.Boundaries.find_caretaker_stereotypes/3","ref":"Bonfire.Boundaries.html#find_caretaker_stereotypes/3-examples"},{"type":"function","doc":"Lists grants for a given set of objects.","title":"Bonfire.Boundaries.list_grants_on/1","ref":"Bonfire.Boundaries.html#list_grants_on/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.list_grants_on([1, 2, 3])","title":"Examples - Bonfire.Boundaries.list_grants_on/1","ref":"Bonfire.Boundaries.html#list_grants_on/1-examples"},{"type":"function","doc":"Lists grants for a given set of objects and verbs.","title":"Bonfire.Boundaries.list_grants_on/2","ref":"Bonfire.Boundaries.html#list_grants_on/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.list_grants_on([1, 2, 3], [:see, :read])","title":"Examples - Bonfire.Boundaries.list_grants_on/2","ref":"Bonfire.Boundaries.html#list_grants_on/2-examples"},{"type":"function","doc":"Lists ACLs for a given object.","title":"Bonfire.Boundaries.list_object_acls/2","ref":"Bonfire.Boundaries.html#list_object_acls/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.list_object_acls(%{id: 1})\n    [%Bonfire.Data.AccessControl.Acl{id: 42}]","title":"Examples - Bonfire.Boundaries.list_object_acls/2","ref":"Bonfire.Boundaries.html#list_object_acls/2-examples"},{"type":"function","doc":"Lists boundaries (ACLs and grants) for a given object \n\n    iex> Bonfire.Boundaries.list_object_boundaries(%{id: 1})\n    [%Bonfire.Data.AccessControl.Acl{id: 42, grants: [...]}]","title":"Bonfire.Boundaries.list_object_boundaries/2","ref":"Bonfire.Boundaries.html#list_object_boundaries/2"},{"type":"function","doc":"Loads a pointer based on the permissions which are checked based on provided options.","title":"Bonfire.Boundaries.load_pointer/2","ref":"Bonfire.Boundaries.html#load_pointer/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.load_pointer(%{id: 1}, verbs: [:read], current_user: %{id: 2})\n    %Needle.Pointer{id: 1}","title":"Examples - Bonfire.Boundaries.load_pointer/2","ref":"Bonfire.Boundaries.html#load_pointer/2-examples"},{"type":"function","doc":"Loads pointers based on boundaries (which are checked based on provided options) and returns a list of permitted pointers.","title":"Bonfire.Boundaries.load_pointers/2","ref":"Bonfire.Boundaries.html#load_pointers/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.load_pointers([%{id: 1}], verbs: [:read], current_user: %{id: 2})\n    [%Needle.Pointer{id: 1}]","title":"Examples - Bonfire.Boundaries.load_pointers/2","ref":"Bonfire.Boundaries.html#load_pointers/2-examples"},{"type":"function","doc":"Loads pointers based on boundaries (which are checked based on provided options) and raises an error if not all pointers are permitted.","title":"Bonfire.Boundaries.load_pointers!/2","ref":"Bonfire.Boundaries.html#load_pointers!/2"},{"type":"function","doc":"Checks if a pointer has permission based on the specified options.","title":"Bonfire.Boundaries.pointer_permitted?/2","ref":"Bonfire.Boundaries.html#pointer_permitted?/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.pointer_permitted?(%{id: 1}, verbs: [:edit], current_user: %{id: 2})\n    true","title":"Examples - Bonfire.Boundaries.pointer_permitted?/2","ref":"Bonfire.Boundaries.html#pointer_permitted?/2-examples"},{"type":"function","doc":"Converts an ACL to a preset boundary name based on the object type.","title":"Bonfire.Boundaries.preset_boundary_from_acl/2","ref":"Bonfire.Boundaries.html#preset_boundary_from_acl/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.preset_boundary_from_acl(%Bonfire.Data.AccessControl.Acl{id: 1})\n    {\"public\", \"Public\"}","title":"Examples - Bonfire.Boundaries.preset_boundary_from_acl/2","ref":"Bonfire.Boundaries.html#preset_boundary_from_acl/2-examples"},{"type":"function","doc":"Converts an ACL to a preset boundary tuple based on the object type.","title":"Bonfire.Boundaries.preset_boundary_tuple_from_acl/2","ref":"Bonfire.Boundaries.html#preset_boundary_tuple_from_acl/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.preset_boundary_tuple_from_acl(%Bonfire.Data.AccessControl.Acl{id: 1})\n    {\"public\", \"Public\"}\n\n    iex> Bonfire.Boundaries.preset_boundary_tuple_from_acl(%Bonfire.Data.AccessControl.Acl{id: 1}, :group)\n    {\"open\", \"Open\"}","title":"Examples - Bonfire.Boundaries.preset_boundary_tuple_from_acl/2","ref":"Bonfire.Boundaries.html#preset_boundary_tuple_from_acl/2-examples"},{"type":"function","doc":"Returns the name of a preset boundary given a list of boundaries or other boundary representation.","title":"Bonfire.Boundaries.preset_name/2","ref":"Bonfire.Boundaries.html#preset_name/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.preset_name([\"admins\", \"mentions\"])\n    \"admins\"\n\n    iex> Bonfire.Boundaries.preset_name(\"public_remote\", true)\n    \"public_remote\"","title":"Examples - Bonfire.Boundaries.preset_name/2","ref":"Bonfire.Boundaries.html#preset_name/2-examples"},{"type":"function","doc":"Sets or replace boundaries for a given object.","title":"Bonfire.Boundaries.set_boundaries/3","ref":"Bonfire.Boundaries.html#set_boundaries/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.set_boundaries(%User{id: 1}, %{id: 2}, [boundary: \"public\"])\n    {:ok, :granted}","title":"Set boundaries on a black object - Bonfire.Boundaries.set_boundaries/3","ref":"Bonfire.Boundaries.html#set_boundaries/3-set-boundaries-on-a-black-object"},{"type":"function","doc":"iex> Bonfire.Boundaries.set_boundaries(%User{id: 1}, %{id: 2}, [boundary: \"local\", remove_previous_preset: \"public\"])\n    {:ok, :granted}","title":"Replace boundaries on an existing object that previously had a preset applied - Bonfire.Boundaries.set_boundaries/3","ref":"Bonfire.Boundaries.html#set_boundaries/3-replace-boundaries-on-an-existing-object-that-previously-had-a-preset-applied"},{"type":"function","doc":"Assigns the user as the caretaker of the given object or objects, replacing the existing caretaker, if any.","title":"Bonfire.Boundaries.take_care_of!/2","ref":"Bonfire.Boundaries.html#take_care_of!/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.take_care_of!([%{id: 1}], %{id: 2})\n    [%{id: 1, caretaker: %{id: 1, caretaker_id: 2, caretaker: %{id: 2}}}]","title":"Examples - Bonfire.Boundaries.take_care_of!/2","ref":"Bonfire.Boundaries.html#take_care_of!/2-examples"},{"type":"function","doc":"Returns the default boundaries to be set for new users from config.","title":"Bonfire.Boundaries.user_default_boundaries/1","ref":"Bonfire.Boundaries.html#user_default_boundaries/1"},{"type":"function","doc":"Lists grants for a given set of users on a set of objects.","title":"Bonfire.Boundaries.users_grants_on/2","ref":"Bonfire.Boundaries.html#users_grants_on/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.users_grants_on([%{id: 1}], [%{id: 2}])","title":"Examples - Bonfire.Boundaries.users_grants_on/2","ref":"Bonfire.Boundaries.html#users_grants_on/2-examples"},{"type":"function","doc":"Lists grants for a given set of users on a set of objects, filtered by verbs.","title":"Bonfire.Boundaries.users_grants_on/3","ref":"Bonfire.Boundaries.html#users_grants_on/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.users_grants_on([%{id: 1}], [%{id: 2}], [:see, :read])\n    [%Bonfire.Boundaries.Summary{object_id: 2, subject_id: 1}]","title":"Examples - Bonfire.Boundaries.users_grants_on/3","ref":"Bonfire.Boundaries.html#users_grants_on/3-examples"},{"type":"module","doc":"Provides functionality for managing Access Control Lists (ACLs) in the Bonfire system.\n\nAn `Acl` is a list of `Grant`s used to define access permissions for objects. It represents fully populated access control rules that can be reused. It can be used to secure multiple objects and exists independently of any object.\n\n> ACLs (also referred to as \"preset boundaries\") enable you to make a list of circles and users and then grant specific roles or permissions to each of those. For example, you might create a \"Fitness\" ACL and grant the \"Participate\" role to your gym buddies, allowing them to interact with your fitness-related content, while granting the \"Interact\" role to your family and friends, who can view and react to your posts but not comment on them.\n\nThe corresponding Ecto schema is `Bonfire.Data.AccessControl.Acl` which is defined in a [seperate repo](https://github.com/bonfire-networks/bonfire_data_access_control).","title":"Bonfire.Boundaries.Acls","ref":"Bonfire.Boundaries.Acls.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.acl_grants_to_tuples/2","ref":"Bonfire.Boundaries.Acls.html#acl_grants_to_tuples/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.acl_id/1","ref":"Bonfire.Boundaries.Acls.html#acl_id/1"},{"type":"function","doc":"Returns a list of special built-in ACLs (e.g., guest, local, activity_pub).","title":"Bonfire.Boundaries.Acls.acls/0","ref":"Bonfire.Boundaries.Acls.html#acls/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.acls_from_preset/3","ref":"Bonfire.Boundaries.Acls.html#acls_from_preset/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.base_acls_from_preset/3","ref":"Bonfire.Boundaries.Acls.html#base_acls_from_preset/3"},{"type":"function","doc":"Returns a list of built-in ACL IDs.","title":"Bonfire.Boundaries.Acls.built_in_ids/0","ref":"Bonfire.Boundaries.Acls.html#built_in_ids/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.built_in_ids()\n    [\"BUILT_IN_ACL_ID1\", \"BUILT_IN_ACL_ID2\"]","title":"Examples - Bonfire.Boundaries.Acls.built_in_ids/0","ref":"Bonfire.Boundaries.Acls.html#built_in_ids/0-examples"},{"type":"function","doc":"Casts ACLs (existing ones or creating some on-the-fly) and Controlled on an object.","title":"Bonfire.Boundaries.Acls.cast/3","ref":"Bonfire.Boundaries.Acls.html#cast/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.cast(changeset, creator, [boundary: \"local\"])","title":"Examples - Bonfire.Boundaries.Acls.cast/3","ref":"Bonfire.Boundaries.Acls.html#cast/3-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.changeset/3","ref":"Bonfire.Boundaries.Acls.html#changeset/3"},{"type":"function","doc":"Creates a new ACL.","title":"Bonfire.Boundaries.Acls.create/2","ref":"Bonfire.Boundaries.Acls.html#create/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.create(%{named: %{name: \"New ACL\"}}, current_user: user)\n    {:ok, %Acl{}}","title":"Examples - Bonfire.Boundaries.Acls.create/2","ref":"Bonfire.Boundaries.Acls.html#create/2-examples"},{"type":"function","doc":"Returns a list of default IDs to exclude from queries.","title":"Bonfire.Boundaries.Acls.default_exclude_ids/1","ref":"Bonfire.Boundaries.Acls.html#default_exclude_ids/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.default_exclude_ids()\n    [\"2HEYS11ENCEDMES0CAN0TSEEME\", \"7HECVST0MAC1F0RAN0BJECTETC\", \"71MAYADM1N1STERMY0WNSTVFFS\", \"0H0STEDCANTSEE0RD0ANYTH1NG\", \"1S11ENCEDTHEMS0CAN0TP1NGME\"]","title":"Examples - Bonfire.Boundaries.Acls.default_exclude_ids/1","ref":"Bonfire.Boundaries.Acls.html#default_exclude_ids/1-examples"},{"type":"function","doc":"Fully delete the ACL, including permissions/grants and controlled information. This will affect all objects previously shared with this ACL.","title":"Bonfire.Boundaries.Acls.delete/2","ref":"Bonfire.Boundaries.Acls.html#delete/2"},{"type":"function","doc":"Edits an existing ACL.","title":"Bonfire.Boundaries.Acls.edit/3","ref":"Bonfire.Boundaries.Acls.html#edit/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.edit(acl_id, user, %{name: \"Updated ACL\"})\n\n    iex> Bonfire.Boundaries.Acls.edit(%Acl{}, user, %{name: \"Updated ACL\"})","title":"Examples - Bonfire.Boundaries.Acls.edit/3","ref":"Bonfire.Boundaries.Acls.html#edit/3-examples"},{"type":"function","doc":"Returns a list of stereotype IDs to exclude from queries.","title":"Bonfire.Boundaries.Acls.exclude_stereotypes/1","ref":"Bonfire.Boundaries.Acls.html#exclude_stereotypes/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.exclude_stereotypes()\n    [\"2HEYS11ENCEDMES0CAN0TSEEME\", \"7HECVST0MAC1F0RAN0BJECTETC\"]\n\n    iex> Bonfire.Boundaries.Acls.exclude_stereotypes(false)\n    [\"2HEYS11ENCEDMES0CAN0TSEEME\"]","title":"Examples - Bonfire.Boundaries.Acls.exclude_stereotypes/1","ref":"Bonfire.Boundaries.Acls.html#exclude_stereotypes/1-examples"},{"type":"function","doc":"Retrieves an ACL by its slug.","title":"Bonfire.Boundaries.Acls.get/1","ref":"Bonfire.Boundaries.Acls.html#get/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.get(:instance_care)\n\n    iex> Bonfire.Boundaries.Acls.get(:non_existent)\n    nil","title":"Examples - Bonfire.Boundaries.Acls.get/1","ref":"Bonfire.Boundaries.Acls.html#get/1-examples"},{"type":"function","doc":"Retrieves an ACL by its slug, raising an error if not found.","title":"Bonfire.Boundaries.Acls.get!/1","ref":"Bonfire.Boundaries.Acls.html#get!/1"},{"type":"function","doc":"Retrieves an ACL for a caretaker.","title":"Bonfire.Boundaries.Acls.get_for_caretaker/3","ref":"Bonfire.Boundaries.Acls.html#get_for_caretaker/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.get_for_caretaker(\"ACL_ID\", user)\n    {:ok, %Acl{}}","title":"Examples - Bonfire.Boundaries.Acls.get_for_caretaker/3","ref":"Bonfire.Boundaries.Acls.html#get_for_caretaker/3-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.get_for_caretaker_q/3","ref":"Bonfire.Boundaries.Acls.html#get_for_caretaker_q/3"},{"type":"function","doc":"Retrieves an ACL ID by its slug.","title":"Bonfire.Boundaries.Acls.get_id/1","ref":"Bonfire.Boundaries.Acls.html#get_id/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.get_id(:instance_care)\n    \"01SETT1NGSF0R10CA11NSTANCE\"\n\n    iex> Bonfire.Boundaries.Acls.get_id(:non_existent)\n    nil","title":"Examples - Bonfire.Boundaries.Acls.get_id/1","ref":"Bonfire.Boundaries.Acls.html#get_id/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.get_id!/1","ref":"Bonfire.Boundaries.Acls.html#get_id!/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.get_object_custom_acl/1","ref":"Bonfire.Boundaries.Acls.html#get_object_custom_acl/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.get_or_create_object_custom_acl/2","ref":"Bonfire.Boundaries.Acls.html#get_or_create_object_custom_acl/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.grant_tuples_from_preset/3","ref":"Bonfire.Boundaries.Acls.html#grant_tuples_from_preset/3"},{"type":"function","doc":"Checks if an ACL is built-in.","title":"Bonfire.Boundaries.Acls.is_built_in?/1","ref":"Bonfire.Boundaries.Acls.html#is_built_in?/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.is_built_in?(\"BUILT_IN_ACL_ID\")\n    true\n\n    iex> Bonfire.Boundaries.Acls.is_built_in?(\"CUSTOM_ACL_ID\")\n    false","title":"Examples - Bonfire.Boundaries.Acls.is_built_in?/1","ref":"Bonfire.Boundaries.Acls.html#is_built_in?/1-examples"},{"type":"function","doc":"Checks if an ACL is a custom ACL for an object.","title":"Bonfire.Boundaries.Acls.is_object_custom?/1","ref":"Bonfire.Boundaries.Acls.html#is_object_custom?/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.is_object_custom?(%Acl{stereotyped: %{stereotype_id: \"CUSTOM_ACL_ID\"}})\n    true\n\n    iex> Bonfire.Boundaries.Acls.is_object_custom?(%Acl{})\n    false","title":"Examples - Bonfire.Boundaries.Acls.is_object_custom?/1","ref":"Bonfire.Boundaries.Acls.html#is_object_custom?/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.is_stereotype?/1","ref":"Bonfire.Boundaries.Acls.html#is_stereotype?/1"},{"type":"function","doc":"Checks if an ACL is stereotyped.","title":"Bonfire.Boundaries.Acls.is_stereotyped?/1","ref":"Bonfire.Boundaries.Acls.html#is_stereotyped?/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.is_stereotyped?(%Acl{stereotyped: %{stereotype_id: \"STEREOTYPE_ID\"}})\n    true\n\n    iex> Bonfire.Boundaries.Acls.is_stereotyped?(\"STEREOTYPE_ID\")\n    true\n\n    iex> Bonfire.Boundaries.Acls.is_stereotyped?(%Acl{})\n    false","title":"Examples - Bonfire.Boundaries.Acls.is_stereotyped?/1","ref":"Bonfire.Boundaries.Acls.html#is_stereotyped?/1-examples"},{"type":"function","doc":"Lists ACLs the current user is permitted to see.","title":"Bonfire.Boundaries.Acls.list/1","ref":"Bonfire.Boundaries.Acls.html#list/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.list(current_user: user)\n    [%Acl{}, %Acl{}]","title":"Examples - Bonfire.Boundaries.Acls.list/1","ref":"Bonfire.Boundaries.Acls.html#list/1-examples"},{"type":"function","doc":"Lists built-in ACLs.","title":"Bonfire.Boundaries.Acls.list_built_ins/1","ref":"Bonfire.Boundaries.Acls.html#list_built_ins/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.list_built_ins()\n    [%Acl{}, %Acl{}]","title":"Examples - Bonfire.Boundaries.Acls.list_built_ins/1","ref":"Bonfire.Boundaries.Acls.html#list_built_ins/1-examples"},{"type":"function","doc":"Lists ACLs for a specific user.\n\nIncludes the ACLs we are the registered caretakers of that we are\npermitted to see. If any are created without permitting the\nuser to see them, they will not be shown.","title":"Bonfire.Boundaries.Acls.list_my/2","ref":"Bonfire.Boundaries.Acls.html#list_my/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.list_my(user)\n    [%Acl{}, %Acl{}]","title":"Examples - Bonfire.Boundaries.Acls.list_my/2","ref":"Bonfire.Boundaries.Acls.html#list_my/2-examples"},{"type":"function","doc":"query for `list_my`","title":"Bonfire.Boundaries.Acls.list_my_q/2","ref":"Bonfire.Boundaries.Acls.html#list_my_q/2"},{"type":"function","doc":"Lists ACLs for a specific user with grant counts (how many rules ).","title":"Bonfire.Boundaries.Acls.list_my_with_counts/2","ref":"Bonfire.Boundaries.Acls.html#list_my_with_counts/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.list_my_with_counts(user)\n    [%{acl: %Acl{}, grants_count: 5}, %{acl: %Acl{}, grants_count: 2}]","title":"Examples - Bonfire.Boundaries.Acls.list_my_with_counts/2","ref":"Bonfire.Boundaries.Acls.html#list_my_with_counts/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.list_q/1","ref":"Bonfire.Boundaries.Acls.html#list_q/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.maybe_by_ids/2","ref":"Bonfire.Boundaries.Acls.html#maybe_by_ids/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.maybe_search/2","ref":"Bonfire.Boundaries.Acls.html#maybe_search/2"},{"type":"function","doc":"Returns options to use when querying for ACLs to show in a dropdown in the UI.","title":"Bonfire.Boundaries.Acls.opts_for_dropdown/0","ref":"Bonfire.Boundaries.Acls.html#opts_for_dropdown/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.opts_for_dropdown()\n    [exclude_ids: [...], extra_ids_to_include: [...]]","title":"Examples - Bonfire.Boundaries.Acls.opts_for_dropdown/0","ref":"Bonfire.Boundaries.Acls.html#opts_for_dropdown/0-examples"},{"type":"function","doc":"Returns options to use when querying for ACLs to show in a list.","title":"Bonfire.Boundaries.Acls.opts_for_list/0","ref":"Bonfire.Boundaries.Acls.html#opts_for_list/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.opts_for_list()\n    [exclude_ids: [...]]","title":"Examples - Bonfire.Boundaries.Acls.opts_for_list/0","ref":"Bonfire.Boundaries.Acls.html#opts_for_list/0-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.prepare_cast/3","ref":"Bonfire.Boundaries.Acls.html#prepare_cast/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.preset_acl_ids/0","ref":"Bonfire.Boundaries.Acls.html#preset_acl_ids/0"},{"type":"function","doc":"Returns a list of ACL IDs for a preset (eg. \"local\" and \"public\").","title":"Bonfire.Boundaries.Acls.preset_acl_ids/2","ref":"Bonfire.Boundaries.Acls.html#preset_acl_ids/2"},{"type":"function","doc":"Previews ACLs as they would be set based on provided opts.","title":"Bonfire.Boundaries.Acls.preview/2","ref":"Bonfire.Boundaries.Acls.html#preview/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.preview(creator, [\n      preview_for_id: object_id,\n      boundary: \"mentions\",\n      to_circles: mentioned_users_or_custom_circles\n    ])\n\n    iex> Bonfire.Boundaries.Acls.preview(creator, [\n      preview_for_id: object_id,\n      boundary: \"clone_context\",\n      context_id: context_object_id\n    ])","title":"Examples - Bonfire.Boundaries.Acls.preview/2","ref":"Bonfire.Boundaries.Acls.html#preview/2-examples"},{"type":"function","doc":"Returns a list of ACL IDs for remote public access.","title":"Bonfire.Boundaries.Acls.remote_public_acl_ids/0","ref":"Bonfire.Boundaries.Acls.html#remote_public_acl_ids/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.remote_public_acl_ids()\n    [\"5REM0TEPE0P1E1NTERACTREACT\", \"5REM0TEPE0P1E1NTERACTREP1Y\", \"7REM0TEACT0RSCANC0NTR1BVTE\"]","title":"Examples - Bonfire.Boundaries.Acls.remote_public_acl_ids/0","ref":"Bonfire.Boundaries.Acls.html#remote_public_acl_ids/0-examples"},{"type":"function","doc":"Sets ACLs (existing ones or creating some on-the-fly) and Controlled on an object.","title":"Bonfire.Boundaries.Acls.set/3","ref":"Bonfire.Boundaries.Acls.html#set/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.set(%{}, creator, [boundary: \"local\"])\n    {:ok, :granted}","title":"Examples - Bonfire.Boundaries.Acls.set/3","ref":"Bonfire.Boundaries.Acls.html#set/3-examples"},{"type":"function","doc":"Creates a simple ACL with a name.","title":"Bonfire.Boundaries.Acls.simple_create/2","ref":"Bonfire.Boundaries.Acls.html#simple_create/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.simple_create(user, \"My ACL\")\n    {:ok, %Acl{}}","title":"Examples - Bonfire.Boundaries.Acls.simple_create/2","ref":"Bonfire.Boundaries.Acls.html#simple_create/2-examples"},{"type":"function","doc":"Soft-delete the ACL, meaning it will not be displayed anymore, but permissions/grants and controlled information will be preserved. This will not affect objects previously shared with this ACL.","title":"Bonfire.Boundaries.Acls.soft_delete/2","ref":"Bonfire.Boundaries.Acls.html#soft_delete/2"},{"type":"function","doc":"Returns a list of stereotype ACL IDs.","title":"Bonfire.Boundaries.Acls.stereotype_ids/0","ref":"Bonfire.Boundaries.Acls.html#stereotype_ids/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Acls.stereotype_ids()\n    [\"STEREOTYPE_ACL_ID1\", \"STEREOTYPE_ACL_ID2\"]","title":"Examples - Bonfire.Boundaries.Acls.stereotype_ids/0","ref":"Bonfire.Boundaries.Acls.html#stereotype_ids/0-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.user_default_acl/2","ref":"Bonfire.Boundaries.Acls.html#user_default_acl/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acls.user_default_acls/1","ref":"Bonfire.Boundaries.Acls.html#user_default_acls/1"},{"type":"module","doc":"","title":"Bonfire.Boundaries.Acts.SetBoundaries","ref":"Bonfire.Boundaries.Acts.SetBoundaries.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Acts.SetBoundaries.run/2","ref":"Bonfire.Boundaries.Acts.SetBoundaries.html#run/2"},{"type":"module","doc":"Handles blocking of users and instances\n\nThis module provides functions to block and unblock users or instances, check\nif a user or instance is blocked, and manage block lists. It also includes\nfederation support for ActivityPub.","title":"Bonfire.Boundaries.Blocks","ref":"Bonfire.Boundaries.Blocks.html"},{"type":"function","doc":"Handles incoming Block activities from ActivityPub federation.","title":"Bonfire.Boundaries.Blocks.ap_receive_activity/3","ref":"Bonfire.Boundaries.Blocks.html#ap_receive_activity/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.ap_receive_activity(blocker, activity, blocked)","title":"Examples - Bonfire.Boundaries.Blocks.ap_receive_activity/3","ref":"Bonfire.Boundaries.Blocks.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Blocks, silences, or ghosts a user or instance.","title":"Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, current_user: blocker)\n    {:ok, \"Blocked\"}","title":"Block a user for current user - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-block-a-user-for-current-user"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, :instance_wide)\n    {:ok, \"Blocked\"}","title":"Block a user for everyone on the instance (as an admin/mod) - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-block-a-user-for-everyone-on-the-instance-as-an-admin-mod"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, :silence, current_user: blocker)\n    {:ok, \"Blocked\"}","title":"Silence a user for current user - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-silence-a-user-for-current-user"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, :silence, :instance_wide)\n    {:ok, \"Blocked\"}","title":"Silence a user for everyone on the instance (as an admin/mod) - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-silence-a-user-for-everyone-on-the-instance-as-an-admin-mod"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, :ghost, current_user: blocker)\n    {:ok, \"Blocked\"}","title":"Ghost a user for current user - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-ghost-a-user-for-current-user"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.block(user, :ghost, :instance_wide)\n    {:ok, \"Blocked\"}","title":"Ghost a user for everyone on the instance (as an admin/mod) - Bonfire.Boundaries.Blocks.block/3","ref":"Bonfire.Boundaries.Blocks.html#block/3-ghost-a-user-for-everyone-on-the-instance-as-an-admin-mod"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Blocks.federation_module/0","ref":"Bonfire.Boundaries.Blocks.html#federation_module/0"},{"type":"function","doc":"Blocks a user or instance for everyone on the instance (for admin/mod use only).","title":"Bonfire.Boundaries.Blocks.instance_wide_block/2","ref":"Bonfire.Boundaries.Blocks.html#instance_wide_block/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.instance_wide_block(user, :ghost)\n    {:ok, \"Blocked\"}","title":"Examples - Bonfire.Boundaries.Blocks.instance_wide_block/2","ref":"Bonfire.Boundaries.Blocks.html#instance_wide_block/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Blocks.instance_wide_circles/1","ref":"Bonfire.Boundaries.Blocks.html#instance_wide_circles/1"},{"type":"function","doc":"Checks if a user or instance is blocked.","title":"Bonfire.Boundaries.Blocks.is_blocked?/3","ref":"Bonfire.Boundaries.Blocks.html#is_blocked?/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.is_blocked?(instance, :ghost, current_user: checker)\n    false\n\n    iex> Bonfire.Boundaries.Blocks.is_blocked?(user, :silence, :instance_wide)\n    true","title":"Examples - Bonfire.Boundaries.Blocks.is_blocked?/3","ref":"Bonfire.Boundaries.Blocks.html#is_blocked?/3-examples"},{"type":"function","doc":"Lists blocked users or instances for a given block type and scope","title":"Bonfire.Boundaries.Blocks.list/2","ref":"Bonfire.Boundaries.Blocks.html#list/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.list(:ghost, :instance_wide)\n    [%{id: \"123\", type: :ghost}, %{id: \"456\", type: :ghost}]\n\n    iex> Bonfire.Boundaries.Blocks.list(:silence, current_user: user)\n    [%{id: \"789\", type: :silence}]","title":"Examples - Bonfire.Boundaries.Blocks.list/2","ref":"Bonfire.Boundaries.Blocks.html#list/2-examples"},{"type":"function","doc":"Converts provided block types (eg. `:ghost` or `:silence`) into a list of internal block types.","title":"Bonfire.Boundaries.Blocks.types_blocked/1","ref":"Bonfire.Boundaries.Blocks.html#types_blocked/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.types_blocked([:ghost, :silence])\n    [:ghost_them, :silence_them]\n\n    iex> Bonfire.Boundaries.Blocks.types_blocked(:ghost)\n    [:ghost_them]\n\n    iex> Bonfire.Boundaries.Blocks.types_blocked(nil)\n    [:silence_them, :ghost_them]","title":"Examples - Bonfire.Boundaries.Blocks.types_blocked/1","ref":"Bonfire.Boundaries.Blocks.html#types_blocked/1-examples"},{"type":"function","doc":"Unblocks a user or instance.","title":"Bonfire.Boundaries.Blocks.unblock/3","ref":"Bonfire.Boundaries.Blocks.html#unblock/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.unblock(user, :ghost, current_user: unblocker)\n    {:ok, \"Unblocked\"}\n\n    iex> Bonfire.Boundaries.Blocks.unblock(user, :silence, :instance_wide)\n    {:ok, \"Unblocked\"}","title":"Examples - Bonfire.Boundaries.Blocks.unblock/3","ref":"Bonfire.Boundaries.Blocks.html#unblock/3-examples"},{"type":"function","doc":"Unblocks *all* users or instances for a given block type and scope (only used for debugging purposes)","title":"Bonfire.Boundaries.Blocks.unblock_all/2","ref":"Bonfire.Boundaries.Blocks.html#unblock_all/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Blocks.unblock_all(:ghost, :instance_wide)\n    {:ok, \"All unblocked\"}","title":"Examples - Bonfire.Boundaries.Blocks.unblock_all/2","ref":"Bonfire.Boundaries.Blocks.html#unblock_all/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Blocks.user_block_circles/2","ref":"Bonfire.Boundaries.Blocks.html#user_block_circles/2"},{"type":"module","doc":"","title":"Bonfire.Boundaries.Blocks.LiveHandler","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Blocks.LiveHandler.handle_event/3","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Blocks.LiveHandler.preload_one/2","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#preload_one/2"},{"type":"macro","doc":"","title":"Bonfire.Boundaries.Blocks.LiveHandler.sigil_p/2","ref":"Bonfire.Boundaries.Blocks.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Functions to create, query, and manage circles, which are used to group users (for the purpose of control access to various resources).\n\nCircles are a way of categorizing users. Each user can have their own set of circles to categorize other users. Circles allow a user to group work colleagues differently from friends for example, and to allow different interactions for users in each circle or limit content visibility on a per-item basis.\n\n> Circles are a tool that can be used to establish relationships. They are representations of multifaceted relationships that you have with people in your life. Circles can help you understand the different levels of intimacy and trust that you have with different people, as well the different contexts or topics which are relevant to particular relationships, and can help build stronger, healthier relationships.\n\n> In Bonfire, you can define circles based on your unique style of relationships and interests. For example, you might create a circle for your colleagues, which can help you keep track of work-related content and collaborate with them more efficiently. You could also have a locals circle, with which you may share and discover local events, news, and recommendations. You might also create a comrades circle, to stay connected with fellow activists and organise around shared goals. Finally, you could create a happy hour circle, to coordinate social gatherings with local friends or colleagues, and the crew for your inner circle. With circles, you have the flexibility to manage your relationships and social activities in a way that makes sense for you.\n\nThe corresponding Ecto schema are `Bonfire.Data.AccessControl.Circle` and `Bonfire.Data.AccessControl.Encircle` which is defined in a [seperate repo](https://github.com/bonfire-networks/bonfire_data_access_control).","title":"Bonfire.Boundaries.Circles","ref":"Bonfire.Boundaries.Circles.html"},{"type":"function","doc":"Adds subject(s) to circle(s).","title":"Bonfire.Boundaries.Circles.add_to_circles/2","ref":"Bonfire.Boundaries.Circles.html#add_to_circles/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.add_to_circles(user, circle)\n    {:ok, %Encircle{}}\n\n    iex> Bonfire.Boundaries.Circles.add_to_circles([user1, user2], [circle1, circle2])\n    [{{:ok, %Encircle{}}, {:ok, %Encircle{}}}, {{:ok, %Encircle{}}, {:ok, %Encircle{}}}]","title":"Examples - Bonfire.Boundaries.Circles.add_to_circles/2","ref":"Bonfire.Boundaries.Circles.html#add_to_circles/2-examples"},{"type":"function","doc":"Returns a list of built-in circle IDs.","title":"Bonfire.Boundaries.Circles.built_in_ids/0","ref":"Bonfire.Boundaries.Circles.html#built_in_ids/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.changeset/2","ref":"Bonfire.Boundaries.Circles.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.changeset/3","ref":"Bonfire.Boundaries.Circles.html#changeset/3"},{"type":"function","doc":"Converts a list of circles to circle IDs.","title":"Bonfire.Boundaries.Circles.circle_ids/1","ref":"Bonfire.Boundaries.Circles.html#circle_ids/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.circle_ids([:guest, :local])\n    [\"guest_circle_id\", \"local_circle_id\"]\n\n    iex> Bonfire.Boundaries.Circles.circle_ids(%{id: \"user_id\"})\n    \"user_id\"","title":"Examples - Bonfire.Boundaries.Circles.circle_ids/1","ref":"Bonfire.Boundaries.Circles.html#circle_ids/1-examples"},{"type":"function","doc":"Returns a list of special built-in circles (e.g., guest, local, activity_pub).","title":"Bonfire.Boundaries.Circles.circles/0","ref":"Bonfire.Boundaries.Circles.html#circles/0"},{"type":"function","doc":"Creates a new circle for the provided user.","title":"Bonfire.Boundaries.Circles.create/2","ref":"Bonfire.Boundaries.Circles.html#create/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.create(caretaker, %{named: %{name: \"My Circle\"}})\n    {:ok, %Circle{id: \"new_circle_id\", name: \"My Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.create/2","ref":"Bonfire.Boundaries.Circles.html#create/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.create_stereotype_circle/2","ref":"Bonfire.Boundaries.Circles.html#create_stereotype_circle/2"},{"type":"function","doc":"Deletes a circle and its associated data, including membership and boundary information. This will affect all objects previously shared with members of this circle","title":"Bonfire.Boundaries.Circles.delete/2","ref":"Bonfire.Boundaries.Circles.html#delete/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.delete(circle, [current_user: user])\n\n    iex> Bonfire.Boundaries.Circles.delete(\"circle_id\", [current_user: user])","title":"Examples - Bonfire.Boundaries.Circles.delete/2","ref":"Bonfire.Boundaries.Circles.html#delete/2-examples"},{"type":"function","doc":"Edits a circle's attributes.","title":"Bonfire.Boundaries.Circles.edit/3","ref":"Bonfire.Boundaries.Circles.html#edit/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.edit(circle, user, %{name: \"Updated Circle\"})\n    {:ok, %Circle{id: \"circle_id\", name: \"Updated Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.edit/3","ref":"Bonfire.Boundaries.Circles.html#edit/3-examples"},{"type":"function","doc":"Empties circles by removing all members.","title":"Bonfire.Boundaries.Circles.empty_circles/1","ref":"Bonfire.Boundaries.Circles.html#empty_circles/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.empty_circles([circle1, circle2])\n    {10, nil}","title":"Examples - Bonfire.Boundaries.Circles.empty_circles/1","ref":"Bonfire.Boundaries.Circles.html#empty_circles/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.exists?/2","ref":"Bonfire.Boundaries.Circles.html#exists?/2"},{"type":"function","doc":"Retrieves a circle by its slug or ID.","title":"Bonfire.Boundaries.Circles.get/1","ref":"Bonfire.Boundaries.Circles.html#get/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get(:guest)\n    %{id: \"guest_circle_id\", name: \"Guest\"}\n\n    iex> Bonfire.Boundaries.Circles.get(\"circle_id\")\n    %Circle{id: \"circle_id\", name: \"Custom Circle\"}","title":"Examples - Bonfire.Boundaries.Circles.get/1","ref":"Bonfire.Boundaries.Circles.html#get/1-examples"},{"type":"function","doc":"Gets a circle by ID, after checking boundaries to see if this is a list shared with me","title":"Bonfire.Boundaries.Circles.get/2","ref":"Bonfire.Boundaries.Circles.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.get!/1","ref":"Bonfire.Boundaries.Circles.html#get!/1"},{"type":"function","doc":"Retrieves a circle by name for a caretaker.","title":"Bonfire.Boundaries.Circles.get_by_name/2","ref":"Bonfire.Boundaries.Circles.html#get_by_name/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_by_name(\"My Circle\", user)\n    {:ok, %Circle{id: \"circle_id\", name: \"My Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.get_by_name/2","ref":"Bonfire.Boundaries.Circles.html#get_by_name/2-examples"},{"type":"function","doc":"Retrieves a circle for a caretaker by ID.","title":"Bonfire.Boundaries.Circles.get_for_caretaker/3","ref":"Bonfire.Boundaries.Circles.html#get_for_caretaker/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_for_caretaker(\"circle_id\", user)\n    {:ok, %Circle{id: \"circle_id\", name: \"My Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.get_for_caretaker/3","ref":"Bonfire.Boundaries.Circles.html#get_for_caretaker/3-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.get_for_instance/2","ref":"Bonfire.Boundaries.Circles.html#get_for_instance/2"},{"type":"function","doc":"Retrieves the ID of a circle by its slug.","title":"Bonfire.Boundaries.Circles.get_id/1","ref":"Bonfire.Boundaries.Circles.html#get_id/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_id(:guest)\n    \"guest_circle_id\"\n\n    iex> Bonfire.Boundaries.Circles.get_id(:nonexistent)\n    nil","title":"Examples - Bonfire.Boundaries.Circles.get_id/1","ref":"Bonfire.Boundaries.Circles.html#get_id/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.get_id!/1","ref":"Bonfire.Boundaries.Circles.html#get_id!/1"},{"type":"function","doc":"Retrieves or creates a circle by name for a caretaker.","title":"Bonfire.Boundaries.Circles.get_or_create/2","ref":"Bonfire.Boundaries.Circles.html#get_or_create/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_or_create(\"New Circle\", user)\n    {:ok, %Circle{id: \"new_circle_id\", name: \"New Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.get_or_create/2","ref":"Bonfire.Boundaries.Circles.html#get_or_create/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.get_or_create_stereotype_circle/2","ref":"Bonfire.Boundaries.Circles.html#get_or_create_stereotype_circle/2"},{"type":"function","doc":"Retrieves stereotype circles for a subject.","title":"Bonfire.Boundaries.Circles.get_stereotype_circles/2","ref":"Bonfire.Boundaries.Circles.html#get_stereotype_circles/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_stereotype_circles(user, [:follow, :block])\n    [%Circle{id: \"follow_circle_id\", name: \"Follow\"}, %Circle{id: \"block_circle_id\", name: \"Block\"}]","title":"Examples - Bonfire.Boundaries.Circles.get_stereotype_circles/2","ref":"Bonfire.Boundaries.Circles.html#get_stereotype_circles/2-examples"},{"type":"function","doc":"Retrieves a tuple containing the name and ID of a circle by its slug or ID.","title":"Bonfire.Boundaries.Circles.get_tuple/1","ref":"Bonfire.Boundaries.Circles.html#get_tuple/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.get_tuple(:guest)\n    {\"Guest\", \"guest_circle_id\"}\n\n    iex> Bonfire.Boundaries.Circles.get_tuple(\"circle_id\")\n    {:my_circle, %{id: \"circle_id\", name: \"My Circle\"}}","title":"Examples - Bonfire.Boundaries.Circles.get_tuple/1","ref":"Bonfire.Boundaries.Circles.html#get_tuple/1-examples"},{"type":"function","doc":"Checks if a circle is a built-in circle.","title":"Bonfire.Boundaries.Circles.is_built_in?/1","ref":"Bonfire.Boundaries.Circles.html#is_built_in?/1"},{"type":"function","doc":"Checks if a subject is encircled by a circle or list of circles.","title":"Bonfire.Boundaries.Circles.is_encircled_by?/2","ref":"Bonfire.Boundaries.Circles.html#is_encircled_by?/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.is_encircled_by?(user, circle)\n    true\n\n    iex> Bonfire.Boundaries.Circles.is_encircled_by?(user, [circle1, circle2])\n    false","title":"Examples - Bonfire.Boundaries.Circles.is_encircled_by?/2","ref":"Bonfire.Boundaries.Circles.html#is_encircled_by?/2-examples"},{"type":"function","doc":"Checks if a circle is a stereotype circle.","title":"Bonfire.Boundaries.Circles.is_stereotype?/1","ref":"Bonfire.Boundaries.Circles.html#is_stereotype?/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.is_stereotype?(\"7DAPE0P1E1PERM1TT0F0110WME\")\n    true\n\n    iex> Bonfire.Boundaries.Circles.is_stereotype?(\"custom_circle_id\")\n    false","title":"Examples - Bonfire.Boundaries.Circles.is_stereotype?/1","ref":"Bonfire.Boundaries.Circles.html#is_stereotype?/1-examples"},{"type":"function","doc":"Removes user(s) from all circles.","title":"Bonfire.Boundaries.Circles.leave_all_circles/1","ref":"Bonfire.Boundaries.Circles.html#leave_all_circles/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.empty_circles([circle1, circle2])\n    {10, nil}","title":"Examples - Bonfire.Boundaries.Circles.leave_all_circles/1","ref":"Bonfire.Boundaries.Circles.html#leave_all_circles/1-examples"},{"type":"function","doc":"Lists all built-in circles.","title":"Bonfire.Boundaries.Circles.list_built_ins/0","ref":"Bonfire.Boundaries.Circles.html#list_built_ins/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_built_ins()\n    [%Circle{id: \"guest_circle_id\", name: \"Guest\"}, %Circle{id: \"local_circle_id\", name: \"Local\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_built_ins/0","ref":"Bonfire.Boundaries.Circles.html#list_built_ins/0-examples"},{"type":"function","doc":"Lists circles by their IDs.","title":"Bonfire.Boundaries.Circles.list_by_ids/1","ref":"Bonfire.Boundaries.Circles.html#list_by_ids/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_by_ids([\"circle_id1\", \"circle_id2\"])\n    [%Circle{id: \"circle_id1\", name: \"Circle 1\"}, %Circle{id: \"circle_id2\", name: \"Circle 2\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_by_ids/1","ref":"Bonfire.Boundaries.Circles.html#list_by_ids/1-examples"},{"type":"function","doc":"Lists circles owned by a user.\n\nIncludes circles we are the registered caretakers of that we are\npermitted to see. If any circles are created without permitting the\nuser to see them, they will not be shown.","title":"Bonfire.Boundaries.Circles.list_my/2","ref":"Bonfire.Boundaries.Circles.html#list_my/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_my(user)\n    [%Circle{id: \"circle_id1\", name: \"My Circle 1\"}, %Circle{id: \"circle_id2\", name: \"My Circle 2\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_my/2","ref":"Bonfire.Boundaries.Circles.html#list_my/2-examples"},{"type":"function","doc":"Lists default circles for a user.","title":"Bonfire.Boundaries.Circles.list_my_defaults/1","ref":"Bonfire.Boundaries.Circles.html#list_my_defaults/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_my_defaults()\n    [{\"Guest\", \"guest_circle_id\"}, {\"Local\", \"local_circle_id\"}, {\"ActivityPub\", \"activity_pub_circle_id\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_my_defaults/1","ref":"Bonfire.Boundaries.Circles.html#list_my_defaults/1-examples"},{"type":"function","doc":"Lists circles owned by a user with member counts.","title":"Bonfire.Boundaries.Circles.list_my_with_counts/2","ref":"Bonfire.Boundaries.Circles.html#list_my_with_counts/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_my_with_counts(user)\n    [%Circle{id: \"circle_id1\", name: \"My Circle\", encircles_count: 5}]","title":"Examples - Bonfire.Boundaries.Circles.list_my_with_counts/2","ref":"Bonfire.Boundaries.Circles.html#list_my_with_counts/2-examples"},{"type":"function","doc":"Lists circles owned by a user and global/built-in circles.","title":"Bonfire.Boundaries.Circles.list_my_with_global/2","ref":"Bonfire.Boundaries.Circles.html#list_my_with_global/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_my_with_global(user)\n    [%Circle{id: \"circle_id1\", name: \"My Circle\"}, %Circle{id: \"global_circle_id\", name: \"Global Circle\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_my_with_global/2","ref":"Bonfire.Boundaries.Circles.html#list_my_with_global/2-examples"},{"type":"function","doc":"Lists visible circles for a user.","title":"Bonfire.Boundaries.Circles.list_visible/2","ref":"Bonfire.Boundaries.Circles.html#list_visible/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.list_visible(user)\n    [%Circle{id: \"circle_id1\", name: \"Circle 1\"}, %Circle{id: \"circle_id2\", name: \"Circle 2\"}]","title":"Examples - Bonfire.Boundaries.Circles.list_visible/2","ref":"Bonfire.Boundaries.Circles.html#list_visible/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.preload_encircled_by/3","ref":"Bonfire.Boundaries.Circles.html#preload_encircled_by/3"},{"type":"function","doc":"Generates a query for circles","title":"Bonfire.Boundaries.Circles.query/1","ref":"Bonfire.Boundaries.Circles.html#query/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.query(exclude_built_ins: true)","title":"Examples - Bonfire.Boundaries.Circles.query/1","ref":"Bonfire.Boundaries.Circles.html#query/1-examples"},{"type":"function","doc":"Generates a query for circles owned by a user.","title":"Bonfire.Boundaries.Circles.query_my/2","ref":"Bonfire.Boundaries.Circles.html#query_my/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.query_my(user)","title":"Examples - Bonfire.Boundaries.Circles.query_my/2","ref":"Bonfire.Boundaries.Circles.html#query_my/2-examples"},{"type":"function","doc":"Generates a query for a specific circle owned by a user.","title":"Bonfire.Boundaries.Circles.query_my_by_id/3","ref":"Bonfire.Boundaries.Circles.html#query_my_by_id/3"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.query_my_by_id(\"circle_id\", user)","title":"Examples - Bonfire.Boundaries.Circles.query_my_by_id/3","ref":"Bonfire.Boundaries.Circles.html#query_my_by_id/3-examples"},{"type":"function","doc":"Generates a query for visible circles for a user.","title":"Bonfire.Boundaries.Circles.query_visible/2","ref":"Bonfire.Boundaries.Circles.html#query_visible/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.query_visible(user)\n    #Ecto.Query<...>","title":"Examples - Bonfire.Boundaries.Circles.query_visible/2","ref":"Bonfire.Boundaries.Circles.html#query_visible/2-examples"},{"type":"function","doc":"Removes a user from circles.","title":"Bonfire.Boundaries.Circles.remove_from_circles/2","ref":"Bonfire.Boundaries.Circles.html#remove_from_circles/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.remove_from_circles(user, circle)\n    {1, nil}\n\n    iex> Bonfire.Boundaries.Circles.remove_from_circles(user, [circle1, circle2])\n    {2, nil}","title":"Examples - Bonfire.Boundaries.Circles.remove_from_circles/2","ref":"Bonfire.Boundaries.Circles.html#remove_from_circles/2-examples"},{"type":"function","doc":"Returns a list of stereotype circle IDs.","title":"Bonfire.Boundaries.Circles.stereotype_ids/0","ref":"Bonfire.Boundaries.Circles.html#stereotype_ids/0"},{"type":"function","doc":"Returns a list of stereotype IDs for a specific category.","title":"Bonfire.Boundaries.Circles.stereotypes/1","ref":"Bonfire.Boundaries.Circles.html#stereotypes/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.stereotypes(:follow)\n\n    iex> Bonfire.Boundaries.Circles.stereotypes(:block)","title":"Examples - Bonfire.Boundaries.Circles.stereotypes/1","ref":"Bonfire.Boundaries.Circles.html#stereotypes/1-examples"},{"type":"function","doc":"Converts a list of circles to circle IDs, including adding default circles (such as local or activity_pub when relevant)","title":"Bonfire.Boundaries.Circles.to_circle_ids/1","ref":"Bonfire.Boundaries.Circles.html#to_circle_ids/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Circles.to_circle_ids([:guest, :custom])\n    [\"guest_circle_id\", \"custom_circle_id\", \"local_circle_id\", \"activity_pub_circle_id\"]","title":"Examples - Bonfire.Boundaries.Circles.to_circle_ids/1","ref":"Bonfire.Boundaries.Circles.html#to_circle_ids/1-examples"},{"type":"module","doc":"","title":"Bonfire.Boundaries.Circles.LiveHandler","ref":"Bonfire.Boundaries.Circles.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Circles.LiveHandler.add_member/2","ref":"Bonfire.Boundaries.Circles.LiveHandler.html#add_member/2"},{"type":"macro","doc":"","title":"Bonfire.Boundaries.Circles.LiveHandler.sigil_p/2","ref":"Bonfire.Boundaries.Circles.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"An object is linked to one or more `Acl`s by the `Controlled` multimixin, which pairs an object ID with an ACL ID.\nBecause it is a multimixin, a given object can have multiple ACLs applied. In the case of overlap, permissions are combined with `false` being prioritised.\n\nThe `Controlled` multimixin link an object to one or more ACLs. This allows for applying multiple boundaries to the same object. In case of overlapping permissions, the system combines them following the logic described in `Bonfire.Boundaries`.\n\nThe corresponding Ecto schema is `Bonfire.Data.AccessControl.Controlled` which is defined in a [seperate repo](https://github.com/bonfire-networks/bonfire_data_access_control).","title":"Bonfire.Boundaries.Controlleds","ref":"Bonfire.Boundaries.Controlleds.html"},{"type":"function","doc":"Adds the given ACL to an object.","title":"Bonfire.Boundaries.Controlleds.add_acls/2","ref":"Bonfire.Boundaries.Controlleds.html#add_acls/2"},{"type":"function","doc":"iex> add_acls(object, :acl)\n    {:ok, %Controlled{}}","title":"Examples - Bonfire.Boundaries.Controlleds.add_acls/2","ref":"Bonfire.Boundaries.Controlleds.html#add_acls/2-examples"},{"type":"function","doc":"Returns a changeset for a `Controlled` with the given attributes.","title":"Bonfire.Boundaries.Controlleds.changeset/2","ref":"Bonfire.Boundaries.Controlleds.html#changeset/2"},{"type":"function","doc":"iex> changeset(%Controlled{}, %{field: value})\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Boundaries.Controlleds.changeset/2","ref":"Bonfire.Boundaries.Controlleds.html#changeset/2-examples"},{"type":"function","doc":"Creates a `Controlled` record with the given attributes.","title":"Bonfire.Boundaries.Controlleds.create/1","ref":"Bonfire.Boundaries.Controlleds.html#create/1"},{"type":"function","doc":"iex> create(%{field: value})\n    {:ok, %Controlled{}}","title":"Examples - Bonfire.Boundaries.Controlleds.create/1","ref":"Bonfire.Boundaries.Controlleds.html#create/1-examples"},{"type":"function","doc":"Gets a preset ACL applied to an object, if any.","title":"Bonfire.Boundaries.Controlleds.get_preset_on_object/1","ref":"Bonfire.Boundaries.Controlleds.html#get_preset_on_object/1"},{"type":"function","doc":"iex> get_preset_on_object(object)\n    %ACL{}","title":"Examples - Bonfire.Boundaries.Controlleds.get_preset_on_object/1","ref":"Bonfire.Boundaries.Controlleds.html#get_preset_on_object/1-examples"},{"type":"function","doc":"Grants a role to a subject for an object.","title":"Bonfire.Boundaries.Controlleds.grant_role/4","ref":"Bonfire.Boundaries.Controlleds.html#grant_role/4"},{"type":"function","doc":"iex> grant_role(subject_id, object, :editor)\n    {:ok, %Grant{}}","title":"Examples - Bonfire.Boundaries.Controlleds.grant_role/4","ref":"Bonfire.Boundaries.Controlleds.html#grant_role/4-examples"},{"type":"function","doc":"Lists ACLs applied to an object.\nOnly call this as an admin or curator of the object.","title":"Bonfire.Boundaries.Controlleds.list_acls_on_object/2","ref":"Bonfire.Boundaries.Controlleds.html#list_acls_on_object/2"},{"type":"function","doc":"iex> list_acls_on_object(object)\n    [%Acl{}]","title":"Examples - Bonfire.Boundaries.Controlleds.list_acls_on_object/2","ref":"Bonfire.Boundaries.Controlleds.html#list_acls_on_object/2-examples"},{"type":"function","doc":"Lists grants of a given verb on specified object(s).","title":"Bonfire.Boundaries.Controlleds.list_grants_by_verbs/3","ref":"Bonfire.Boundaries.Controlleds.html#list_grants_by_verbs/3"},{"type":"function","doc":"iex> list_grants_by_verbs(objects, :read)\n\n    iex> list_grants_by_verbs(objects, :edit, false)","title":"Examples - Bonfire.Boundaries.Controlleds.list_grants_by_verbs/3","ref":"Bonfire.Boundaries.Controlleds.html#list_grants_by_verbs/3-examples"},{"type":"function","doc":"Lists ALL boundaries (ACLs and grants) applied to an object.\nOnly call this as an admin or curator of the object.","title":"Bonfire.Boundaries.Controlleds.list_on_object/2","ref":"Bonfire.Boundaries.Controlleds.html#list_on_object/2"},{"type":"function","doc":"iex> list_on_object(object)\n    [%Boundary{}]","title":"Examples - Bonfire.Boundaries.Controlleds.list_on_object/2","ref":"Bonfire.Boundaries.Controlleds.html#list_on_object/2-examples"},{"type":"function","doc":"Lists ACLs applied to the given objects by the subject (current_user).","title":"Bonfire.Boundaries.Controlleds.list_on_objects_by_subject/2","ref":"Bonfire.Boundaries.Controlleds.html#list_on_objects_by_subject/2"},{"type":"function","doc":"iex> list_on_objects_by_subject(objects, current_user)\n    %{object1_id => [%Acl{}], object2_id => [%Acl{}]}","title":"Examples - Bonfire.Boundaries.Controlleds.list_on_objects_by_subject/2","ref":"Bonfire.Boundaries.Controlleds.html#list_on_objects_by_subject/2-examples"},{"type":"function","doc":"Lists presets ACLs applied to the given objects.","title":"Bonfire.Boundaries.Controlleds.list_presets_on_objects/1","ref":"Bonfire.Boundaries.Controlleds.html#list_presets_on_objects/1"},{"type":"function","doc":"iex> list_presets_on_objects(objects)\n    %{object_id => %Preset{}}","title":"Examples - Bonfire.Boundaries.Controlleds.list_presets_on_objects/1","ref":"Bonfire.Boundaries.Controlleds.html#list_presets_on_objects/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Controlleds.list_q/1","ref":"Bonfire.Boundaries.Controlleds.html#list_q/1"},{"type":"function","doc":"Lists subjects who have been granted a given verb on specified object(s).","title":"Bonfire.Boundaries.Controlleds.list_subjects_by_verb/3","ref":"Bonfire.Boundaries.Controlleds.html#list_subjects_by_verb/3"},{"type":"function","doc":"iex> list_subjects_by_verb(objects, :read)\n\n    iex> list_subjects_by_verb(objects, :edit, false)","title":"Examples - Bonfire.Boundaries.Controlleds.list_subjects_by_verb/3","ref":"Bonfire.Boundaries.Controlleds.html#list_subjects_by_verb/3-examples"},{"type":"function","doc":"Removes the given ACLs from an object.","title":"Bonfire.Boundaries.Controlleds.remove_acls/2","ref":"Bonfire.Boundaries.Controlleds.html#remove_acls/2"},{"type":"function","doc":"iex> remove_acls(object, acls)","title":"Examples - Bonfire.Boundaries.Controlleds.remove_acls/2","ref":"Bonfire.Boundaries.Controlleds.html#remove_acls/2-examples"},{"type":"module","doc":"Debug utilities for Bonfire Boundaries.\n\nThis module provides functions to debug and inspect user circles, ACLs, and grants.","title":"Bonfire.Boundaries.Debug","ref":"Bonfire.Boundaries.Debug.html"},{"type":"function","doc":"Prints debug information about all grants on specific things.","title":"Bonfire.Boundaries.Debug.debug_grants_on/1","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_grants_on(things)\n    +------------+------------+---------+-------+\n    | subject_id | object_id  | verbs   | value |\n    +------------+------------+---------+-------+\n    | user_1     | object_1   | [read]  | true  |\n    | user_2     | object_2   | [reply] | true |\n    | user_2     | object_2   | [edit] | false |\n    +------------+------------+---------+-------+","title":"Examples - Bonfire.Boundaries.Debug.debug_grants_on/1","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/1-examples"},{"type":"function","doc":"Prints debug information about grants on specific things for given verbs.","title":"Bonfire.Boundaries.Debug.debug_grants_on/2","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_grants_on(things, [:read, :edit])\n    +------------+------------+---------+-------+\n    | subject_id | object_id  | verbs   | value |\n    +------------+------------+---------+-------+\n    | user_1     | object_1   | [read]  | true  |\n    | user_2     | object_2   | [edit] | false |\n    +------------+------------+---------+-------+","title":"Examples - Bonfire.Boundaries.Debug.debug_grants_on/2","ref":"Bonfire.Boundaries.Debug.html#debug_grants_on/2-examples"},{"type":"function","doc":"Prints debug information about users' grants on specific things.","title":"Bonfire.Boundaries.Debug.debug_my_grants_on/2","ref":"Bonfire.Boundaries.Debug.html#debug_my_grants_on/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_my_grants_on(users, things)\n    +------------+------------+---------+-------+\n    | subject_id | object_id  | verbs   | value |\n    +------------+------------+---------+-------+\n    | user_1     | object_1   | [read]  | true  |\n    | user_2     | object_2   | [write] | false |\n    +------------+------------+---------+-------+","title":"Examples - Bonfire.Boundaries.Debug.debug_my_grants_on/2","ref":"Bonfire.Boundaries.Debug.html#debug_my_grants_on/2-examples"},{"type":"function","doc":"Prints debug information about an object's ACLs.","title":"Bonfire.Boundaries.Debug.debug_object_acls/1","ref":"Bonfire.Boundaries.Debug.html#debug_object_acls/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_object_acls(object)\n    Object: object_id\n    +--------+----------+-----------+------------+---------------+-----------+\n    | acl_id | acl_name | acl_stereo| grant_verb | grant_subject | grant_value |\n    +--------+----------+-----------+------------+---------------+-----------+\n    | acl_1  | Private  | null      | read       | Friends       | true      |\n    | acl_2  | Public   | null      | write      | Everyone      | false     |\n    +--------+----------+-----------+------------+---------------+-----------+","title":"Examples - Bonfire.Boundaries.Debug.debug_object_acls/1","ref":"Bonfire.Boundaries.Debug.html#debug_object_acls/1-examples"},{"type":"function","doc":"Prints debug information about a user's ACLs.","title":"Bonfire.Boundaries.Debug.debug_user_acls/2","ref":"Bonfire.Boundaries.Debug.html#debug_user_acls/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_user_acls(user)\n    user ACLs: user_id\n    +--------+----------+-----------+------------+---------------+-----------+\n    | acl_id | acl_name | acl_stereo| grant_verb | grant_subject | grant_value |\n    +--------+----------+-----------+------------+---------------+-----------+\n    | acl_1  | Private  | null      | read       | Friends       | true      |\n    | acl_2  | Public   | null      | write      | Everyone      | false     |\n    +--------+----------+-----------+------------+---------------+-----------+\n\n    iex> Bonfire.Boundaries.Debug.debug_user_acls(user, \"Custom label\")\n    Custom label user ACLs: user_id\n    ...","title":"Examples - Bonfire.Boundaries.Debug.debug_user_acls/2","ref":"Bonfire.Boundaries.Debug.html#debug_user_acls/2-examples"},{"type":"function","doc":"Prints debug information about a user's circles.","title":"Bonfire.Boundaries.Debug.debug_user_circles/1","ref":"Bonfire.Boundaries.Debug.html#debug_user_circles/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Debug.debug_user_circles(user)\n    User: user_id\n    +------------+------------+\n    | circle_id  | circle_name|\n    +------------+------------+\n    | circle_1   | Friends    |\n    | circle_2   | Family     |\n    +------------+------------+","title":"Examples - Bonfire.Boundaries.Debug.debug_user_circles/1","ref":"Bonfire.Boundaries.Debug.html#debug_user_circles/1-examples"},{"type":"module","doc":"A grant defines a permission (`value` boolean on a `Verb`) for a subject, within the context of an `Acl`. It defines the access rights for a specific user or circle in relation to a particular action.\n\nA permission is a decision about whether the action may be performed or not. There are 3 possible values:\n\n* `true`: yes, the action is allowed\n* `false`: no, the action is explicitly denied (i.e. never permit)\n* `null`/`nil`: unknown, the action isn't explicitly allowed (defaults to not allowed) \n\nThe corresponding Ecto schema is `Bonfire.Data.AccessControl.Grant` which is defined in a [seperate repo](https://github.com/bonfire-networks/bonfire_data_access_control).","title":"Bonfire.Boundaries.Grants","ref":"Bonfire.Boundaries.Grants.html"},{"type":"function","doc":"Edit grants of an ACL based on a role.","title":"Bonfire.Boundaries.Grants.change_role/4","ref":"Bonfire.Boundaries.Grants.html#change_role/4"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.change_role(\"subject_123\", \"acl_456\", :admin, [])\n    {:ok, %Grant{}}","title":"Examples - Bonfire.Boundaries.Grants.change_role/4","ref":"Bonfire.Boundaries.Grants.html#change_role/4-examples"},{"type":"function","doc":"Creates a new grant with the given attributes and options.","title":"Bonfire.Boundaries.Grants.create/2","ref":"Bonfire.Boundaries.Grants.html#create/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.create(%{subject_id: \"123\", acl_id: \"456\", verb_id: \"789\", value: true}, [])\n    {:ok, %Grant{}}","title":"Examples - Bonfire.Boundaries.Grants.create/2","ref":"Bonfire.Boundaries.Grants.html#create/2-examples"},{"type":"function","doc":"Gets the grant configuration by a given slug.","title":"Bonfire.Boundaries.Grants.get/1","ref":"Bonfire.Boundaries.Grants.html#get/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.get(:guests_may_see_read)","title":"Examples - Bonfire.Boundaries.Grants.get/1","ref":"Bonfire.Boundaries.Grants.html#get/1-examples"},{"type":"function","doc":"Adds or update a grant on an Acl.\n\nTakes five parameters:\n- `subject_id`: who we are granting access to\n- `acl_id`: what ACL we're applying a grant to\n- `verb`: which verb/action\n- `value`: true, false, or nil\n- `opts`: additional options","title":"Bonfire.Boundaries.Grants.grant/5","ref":"Bonfire.Boundaries.Grants.html#grant/5"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.grant(\"subject_123\", \"acl_456\", :read, true)","title":"Examples - Bonfire.Boundaries.Grants.grant/5","ref":"Bonfire.Boundaries.Grants.html#grant/5-examples"},{"type":"function","doc":"Adds grants to an ACL based on a role.","title":"Bonfire.Boundaries.Grants.grant_role/4","ref":"Bonfire.Boundaries.Grants.html#grant_role/4"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.grant_role(\"subject_123\", \"acl_456\", :admin, [])\n    {:ok, %Grant{}}","title":"Examples - Bonfire.Boundaries.Grants.grant_role/4","ref":"Bonfire.Boundaries.Grants.html#grant_role/4-examples"},{"type":"function","doc":"Gets the configuration for grants.","title":"Bonfire.Boundaries.Grants.grants/0","ref":"Bonfire.Boundaries.Grants.html#grants/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.grants()\n    %{}","title":"Examples - Bonfire.Boundaries.Grants.grants/0","ref":"Bonfire.Boundaries.Grants.html#grants/0-examples"},{"type":"function","doc":"Converts a list of grants to a list of tuples for a given creator.","title":"Bonfire.Boundaries.Grants.grants_to_tuples/2","ref":"Bonfire.Boundaries.Grants.html#grants_to_tuples/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.grants_to_tuples(%User{}, %{grants: [%Grant{}]})\n    [{%User{}, :some_role}]","title":"Examples - Bonfire.Boundaries.Grants.grants_to_tuples/2","ref":"Bonfire.Boundaries.Grants.html#grants_to_tuples/2-examples"},{"type":"function","doc":"Lists the grants permitted to see.","title":"Bonfire.Boundaries.Grants.list/1","ref":"Bonfire.Boundaries.Grants.html#list/1"},{"type":"function","doc":"Lists the grants for a given ACL.","title":"Bonfire.Boundaries.Grants.list_for_acl/2","ref":"Bonfire.Boundaries.Grants.html#list_for_acl/2"},{"type":"function","doc":"Lists the grants we are the registered caretakers of that we are\npermitted to see. If any are created without permitting the\nuser to see them, they will not be shown.","title":"Bonfire.Boundaries.Grants.list_my/1","ref":"Bonfire.Boundaries.Grants.html#list_my/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Grants.list_q/1","ref":"Bonfire.Boundaries.Grants.html#list_q/1"},{"type":"function","doc":"Adds grants to an ACL based on a role.","title":"Bonfire.Boundaries.Grants.remove_role/4","ref":"Bonfire.Boundaries.Grants.html#remove_role/4"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.remove_role(\"subject_123\", \"acl_456\", :admin, [])\n    {:ok, %Grant{}}","title":"Examples - Bonfire.Boundaries.Grants.remove_role/4","ref":"Bonfire.Boundaries.Grants.html#remove_role/4-examples"},{"type":"function","doc":"Removes a subject's grants from an ACL or ACLs.","title":"Bonfire.Boundaries.Grants.remove_subject_from_acl/2","ref":"Bonfire.Boundaries.Grants.html#remove_subject_from_acl/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.remove_subject_from_acl(\"subject_123\", [\"acl_456\", \"acl_789\"])\n    {:ok, %{}}","title":"Examples - Bonfire.Boundaries.Grants.remove_subject_from_acl/2","ref":"Bonfire.Boundaries.Grants.html#remove_subject_from_acl/2-examples"},{"type":"function","doc":"Returns a list of grants-per-subject from a list of grants.","title":"Bonfire.Boundaries.Grants.subject_grants/1","ref":"Bonfire.Boundaries.Grants.html#subject_grants/1"},{"type":"function","doc":"Returns a list of grants-per-verb-per-subject from a list of grants.","title":"Bonfire.Boundaries.Grants.subject_verb_grants/1","ref":"Bonfire.Boundaries.Grants.html#subject_verb_grants/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.subject_verb_grants([%Grant{}])\n    %{}","title":"Examples - Bonfire.Boundaries.Grants.subject_verb_grants/1","ref":"Bonfire.Boundaries.Grants.html#subject_verb_grants/1-examples"},{"type":"function","doc":"Returns the subject(s) from a list of grants.","title":"Bonfire.Boundaries.Grants.subjects/1","ref":"Bonfire.Boundaries.Grants.html#subjects/1"},{"type":"function","doc":"Inserts, updates, or deletes a grant based on the given attributes and options.","title":"Bonfire.Boundaries.Grants.upsert_or_delete/2","ref":"Bonfire.Boundaries.Grants.html#upsert_or_delete/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.upsert_or_delete(%{acl_id: \"456\", subject_id: \"123\", verb_id: \"789\", value: true}, [])\n    {:ok, %Grant{}}\n\n    iex> Bonfire.Boundaries.Grants.upsert_or_delete(%{acl_id: \"456\", subject_id: \"123\", verb_id: \"789\", value: nil}, [])\n    {:ok, _deleted}","title":"Examples - Bonfire.Boundaries.Grants.upsert_or_delete/2","ref":"Bonfire.Boundaries.Grants.html#upsert_or_delete/2-examples"},{"type":"function","doc":"Returns a list of grants-per-subject-per-verb from a list of grants.","title":"Bonfire.Boundaries.Grants.verb_subject_grant/1","ref":"Bonfire.Boundaries.Grants.html#verb_subject_grant/1"},{"type":"function","doc":"iex> Bonfire.Boundaries.Grants.verb_subject_grant([%Grant{}])\n    %{}","title":"Examples - Bonfire.Boundaries.Grants.verb_subject_grant/1","ref":"Bonfire.Boundaries.Grants.html#verb_subject_grant/1-examples"},{"type":"module","doc":"","title":"Bonfire.Boundaries.Integration","ref":"Bonfire.Boundaries.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Integration.is_local?/2","ref":"Bonfire.Boundaries.Integration.html#is_local?/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Integration.many/3","ref":"Bonfire.Boundaries.Integration.html#many/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Integration.repo/0","ref":"Bonfire.Boundaries.Integration.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.Boundaries.LiveHandler","ref":"Bonfire.Boundaries.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.acl_create/2","ref":"Bonfire.Boundaries.LiveHandler.html#acl_create/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.boundaries_on_objects/2","ref":"Bonfire.Boundaries.LiveHandler.html#boundaries_on_objects/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.circle_create/2","ref":"Bonfire.Boundaries.LiveHandler.html#circle_create/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.handle_event/3","ref":"Bonfire.Boundaries.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.maybe_check_boundaries/2","ref":"Bonfire.Boundaries.LiveHandler.html#maybe_check_boundaries/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.maybe_redirect_to/3","ref":"Bonfire.Boundaries.LiveHandler.html#maybe_redirect_to/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.my_acls/2","ref":"Bonfire.Boundaries.LiveHandler.html#my_acls/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.my_circles_paginated/2","ref":"Bonfire.Boundaries.LiveHandler.html#my_circles_paginated/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.prepare_assigns/1","ref":"Bonfire.Boundaries.LiveHandler.html#prepare_assigns/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.remove_from_circle_tuples/2","ref":"Bonfire.Boundaries.LiveHandler.html#remove_from_circle_tuples/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.scope_origin/2","ref":"Bonfire.Boundaries.LiveHandler.html#scope_origin/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.set_circles_tuples/3","ref":"Bonfire.Boundaries.LiveHandler.html#set_circles_tuples/3"},{"type":"macro","doc":"","title":"Bonfire.Boundaries.LiveHandler.sigil_p/2","ref":"Bonfire.Boundaries.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.subject_name/1","ref":"Bonfire.Boundaries.LiveHandler.html#subject_name/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.unblock/4","ref":"Bonfire.Boundaries.LiveHandler.html#unblock/4"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.update_many/2","ref":"Bonfire.Boundaries.LiveHandler.html#update_many/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.LiveHandler.update_many_opts/1","ref":"Bonfire.Boundaries.LiveHandler.html#update_many_opts/1"},{"type":"module","doc":"Helpers for writing common boundary-related queries, particularly for applying access control to queries.\n\nThis module provides macros and functions to assist with boundary checks and permission queries.","title":"Bonfire.Boundaries.Queries","ref":"Bonfire.Boundaries.Queries.html"},{"type":"macro","doc":"A macro that calls the `add_perms(bool?, bool?)` DB function","title":"Bonfire.Boundaries.Queries.add_perms/2","ref":"Bonfire.Boundaries.Queries.html#add_perms/2"},{"type":"macro","doc":"iex> import Bonfire.Boundaries.Queries\n    iex> query = from(p in Summary, select: add_perms(p.read, p.write))","title":"Examples - Bonfire.Boundaries.Queries.add_perms/2","ref":"Bonfire.Boundaries.Queries.html#add_perms/2-examples"},{"type":"macro","doc":"A macro that calls the `agg_perms(bool?)` aggregate DB function for combining permissions.","title":"Bonfire.Boundaries.Queries.agg_perms/1","ref":"Bonfire.Boundaries.Queries.html#agg_perms/1"},{"type":"macro","doc":"iex> import Bonfire.Boundaries.Queries\n    iex> query = from(p in Summary, group_by: p.object_id, having: agg_perms(p.value))","title":"Examples - Bonfire.Boundaries.Queries.agg_perms/1","ref":"Bonfire.Boundaries.Queries.html#agg_perms/1-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Queries.base_summary_query/1","ref":"Bonfire.Boundaries.Queries.html#base_summary_query/1"},{"type":"macro","doc":"A macro to apply boundary checks to a query.","title":"Bonfire.Boundaries.Queries.boundarise/3","ref":"Bonfire.Boundaries.Queries.html#boundarise/3"},{"type":"macro","doc":"iex> import Bonfire.Boundaries.Queries\n    iex> query_visible_posts = from(p in Post)\n                              |> boundarise(p.id, current_user: user)\n\n    iex> query_editable_posts = from(p in Post)\n                              |> boundarise(p.id, verbs: [:edit], current_user: user)","title":"Examples - Bonfire.Boundaries.Queries.boundarise/3","ref":"Bonfire.Boundaries.Queries.html#boundarise/3-examples"},{"type":"function","doc":"Applies boundary checks to a query for a specific object.","title":"Bonfire.Boundaries.Queries.object_boundarised/2","ref":"Bonfire.Boundaries.Queries.html#object_boundarised/2"},{"type":"function","doc":"iex> query = from(p in Post)\n    iex> Bonfire.Boundaries.Queries.object_boundarised(query, current_user: user)","title":"Examples - Bonfire.Boundaries.Queries.object_boundarised/2","ref":"Bonfire.Boundaries.Queries.html#object_boundarised/2-examples"},{"type":"function","doc":"Queries for all permitted objects for a user.","title":"Bonfire.Boundaries.Queries.permitted/1","ref":"Bonfire.Boundaries.Queries.html#permitted/1"},{"type":"function","doc":"iex> user_id = \"user123\"\n    iex> Bonfire.Boundaries.Queries.permitted(user_id)","title":"Examples - Bonfire.Boundaries.Queries.permitted/1","ref":"Bonfire.Boundaries.Queries.html#permitted/1-examples"},{"type":"function","doc":"Queries for permitted objects for a user with specific verbs.","title":"Bonfire.Boundaries.Queries.permitted/2","ref":"Bonfire.Boundaries.Queries.html#permitted/2"},{"type":"function","doc":"iex> user_id = \"user123\"\n    iex> Bonfire.Boundaries.Queries.permitted(user_id, [:read, :write])","title":"Examples - Bonfire.Boundaries.Queries.permitted/2","ref":"Bonfire.Boundaries.Queries.html#permitted/2-examples"},{"type":"function","doc":"Creates a subquery to filter results based on user permissions.\n\nFilters out results that the current user is not permitted to perform *all* of the specified verbs on.","title":"Bonfire.Boundaries.Queries.query_with_summary/2","ref":"Bonfire.Boundaries.Queries.html#query_with_summary/2"},{"type":"function","doc":"- `user`: The current user or their ID\n- `verbs`: A list of verbs to check permissions for (default: [:see, :read])\n- `query`: An initial query on `Summary` to filter objects (optional)","title":"Parameters - Bonfire.Boundaries.Queries.query_with_summary/2","ref":"Bonfire.Boundaries.Queries.html#query_with_summary/2-parameters"},{"type":"function","doc":"iex> user_id = \"user123\"\n    iex> Bonfire.Boundaries.Queries.query_with_summary(user_id, [:read, :write])","title":"Examples - Bonfire.Boundaries.Queries.query_with_summary/2","ref":"Bonfire.Boundaries.Queries.html#query_with_summary/2-examples"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Queries.query_with_summary/3","ref":"Bonfire.Boundaries.Queries.html#query_with_summary/3"},{"type":"function","doc":"Checks if boundary checks should be skipped based on the provided options and object.","title":"Bonfire.Boundaries.Queries.skip_boundary_check?/2","ref":"Bonfire.Boundaries.Queries.html#skip_boundary_check?/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Queries.skip_boundary_check?([skip_boundary_check: true])\n    true\n\n    iex> Bonfire.Boundaries.Queries.skip_boundary_check?([], %{id: \"user123\"})\n    false\n\n    iex> Bonfire.Boundaries.Queries.skip_boundary_check?([current_user: %{id: \"user123\"}], %{id: \"user123\"})\n    true","title":"Examples - Bonfire.Boundaries.Queries.skip_boundary_check?/2","ref":"Bonfire.Boundaries.Queries.html#skip_boundary_check?/2-examples"},{"type":"module","doc":"Roles are groups of verbs associated with permissions. While not stored in the database, they are defined at the configuration level to enhance readability and user experience.\n\nHere are some preset roles and their associated actions:\n\n- **Read**: can discover the content in lists (like feeds) and read it; request permission for another verb (e.g., request to follow).\n- **Interact**: can read, plus like an object (and notify the author); follow a user or thread; boost an object (and notify the author); pin something to highlight it.\n- **Participate**: can interact, plus reply to an activity or post; mention a user or object (and notify them); send a message.\n- **Contribute**: can participate, plus create a post or other object; tag a user or object or publish in a topic.\n- **Caretaker**: can perform all of the above actions and more, including actions like deletion.\n\nThere are also negative roles, indicating actions which you specifically do not want to allow a particular circle or user to do, such as:\n\n- **Cannot Read**: not discoverable in lists or readable, and also can't interact or participate.\n- **Cannot Interact**: cannot perform any actions related to interaction, including liking, following, boosting, and pinning, and also can't participate.\n- **Cannot Participate**: cannot perform any actions related to participation, including replying, mentioning, and sending messages.\n\nNegative permissions always take precedence over positive or undefined permissions. For example, if you share something giving permission to anyone to read and reply to it, and you assign the *Cannot Participate* role to your *Likely to troll* circle, the people in that circle will be able to read the content but will not be able to reply to it.\n\n> Note that these negative roles do not grant any additional permissions. Assigning the Cannot Participate role to someone who wouldn't otherwise be able to read the content does not mean they will now have the ability to do so. Negative roles simply limit or override any permissions defined elsewhere, ensuring that the specified actions are explicitly restricted.","title":"Bonfire.Boundaries.Roles","ref":"Bonfire.Boundaries.Roles.html"},{"type":"function","doc":"Determines a matching negative role (if any) from a list of verbs.","title":"Bonfire.Boundaries.Roles.cannot_role_from_verb/5","ref":"Bonfire.Boundaries.Roles.html#cannot_role_from_verb/5"},{"type":"function","doc":"iex> cannot_role_from_verb(verbs)","title":"Examples - Bonfire.Boundaries.Roles.cannot_role_from_verb/5","ref":"Bonfire.Boundaries.Roles.html#cannot_role_from_verb/5-examples"},{"type":"function","doc":"Creates a role with given attributes and options.","title":"Bonfire.Boundaries.Roles.create/2","ref":"Bonfire.Boundaries.Roles.html#create/2"},{"type":"function","doc":"Creates a role with a given name, usage, and options.\n\n    iex> create(\"Mod\", :ops, scope: :instance)\n    # creates a Mod role for the instance, that will not be shown in the dropdown when creating content\n\n    iex> create(\"Contributor\", nil, current_user: current_user)\n    # creates a Contributor role for the user","title":"Bonfire.Boundaries.Roles.create/3","ref":"Bonfire.Boundaries.Roles.html#create/3"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Roles.delete/2","ref":"Bonfire.Boundaries.Roles.html#delete/2"},{"type":"function","doc":"Edit a role with a given name and usage\n\n    iex> edit_details(\"Mod\", \"Moderator\", :ops, scope: :instance)\n    # renames the moderator role for the instance, and ensure it will not be shown in the dropdown when creating content\n\n    iex> edit_details(\"Contributor\", \"Editor\", nil, current_user: current_user)\n    # renames the contributor role for the user","title":"Bonfire.Boundaries.Roles.edit_details/4","ref":"Bonfire.Boundaries.Roles.html#edit_details/4"},{"type":"function","doc":"Edits a verb permission for a role","title":"Bonfire.Boundaries.Roles.edit_verb_permission/4","ref":"Bonfire.Boundaries.Roles.html#edit_verb_permission/4"},{"type":"function","doc":"iex> edit_verb_permission(:admin, :read, true, opts)\n    # updates the read permission for the admin role to true\n\n    iex> edit_verb_permission(:admin, :read, false, opts)\n    # updates the read permission for the admin role to false\n\n    iex> edit_verb_permission(:admin, :read, nil, opts)\n    # resets the read permission for the admin role to default","title":"Examples - Bonfire.Boundaries.Roles.edit_verb_permission/4","ref":"Bonfire.Boundaries.Roles.html#edit_verb_permission/4-examples"},{"type":"function","doc":"Retrieves the details of a role by `role_name`.","title":"Bonfire.Boundaries.Roles.get/2","ref":"Bonfire.Boundaries.Roles.html#get/2"},{"type":"function","doc":"iex> get(:admin)\n    # returns admin role details","title":"Examples - Bonfire.Boundaries.Roles.get/2","ref":"Bonfire.Boundaries.Roles.html#get/2-examples"},{"type":"function","doc":"Determines the preset boundary role from an ACL summary or list of verbs.","title":"Bonfire.Boundaries.Roles.preset_boundary_role_from_acl/1","ref":"Bonfire.Boundaries.Roles.html#preset_boundary_role_from_acl/1"},{"type":"function","doc":"iex> preset_boundary_role_from_acl(%{verbs: verbs})\n\n    iex> preset_boundary_role_from_acl(verbs)","title":"Examples - Bonfire.Boundaries.Roles.preset_boundary_role_from_acl/1","ref":"Bonfire.Boundaries.Roles.html#preset_boundary_role_from_acl/1-examples"},{"type":"function","doc":"Clears instance-wide roles from config.","title":"Bonfire.Boundaries.Roles.reset_instance_roles/0","ref":"Bonfire.Boundaries.Roles.html#reset_instance_roles/0"},{"type":"function","doc":"Determines the matching role (if any) from a list of verbs.","title":"Bonfire.Boundaries.Roles.role_from_grants/2","ref":"Bonfire.Boundaries.Roles.html#role_from_grants/2"},{"type":"function","doc":"iex> role_from_grants(grants)","title":"Examples - Bonfire.Boundaries.Roles.role_from_grants/2","ref":"Bonfire.Boundaries.Roles.html#role_from_grants/2-examples"},{"type":"function","doc":"Determines a matching positive role (if any) from a list of verbs.","title":"Bonfire.Boundaries.Roles.role_from_verb/5","ref":"Bonfire.Boundaries.Roles.html#role_from_verb/5"},{"type":"function","doc":"iex> role_from_verb(verbs)","title":"Examples - Bonfire.Boundaries.Roles.role_from_verb/5","ref":"Bonfire.Boundaries.Roles.html#role_from_verb/5-examples"},{"type":"function","doc":"Retrieves role verbs based on the given `usage`.","title":"Bonfire.Boundaries.Roles.role_verbs/2","ref":"Bonfire.Boundaries.Roles.html#role_verbs/2"},{"type":"function","doc":"iex> role_verbs(:all, scope: :instance)\n    # returns all instance-level role verbs\n\n    iex> role_verbs(nil, current_user: me)\n    # returns my role verbs","title":"Examples - Bonfire.Boundaries.Roles.role_verbs/2","ref":"Bonfire.Boundaries.Roles.html#role_verbs/2-examples"},{"type":"function","doc":"Returns a list of roles to be used in a user's a dropdown menu.","title":"Bonfire.Boundaries.Roles.roles_for_dropdown/2","ref":"Bonfire.Boundaries.Roles.html#roles_for_dropdown/2"},{"type":"function","doc":"iex> roles_for_dropdown(:ops, current_user: me)","title":"Examples - Bonfire.Boundaries.Roles.roles_for_dropdown/2","ref":"Bonfire.Boundaries.Roles.html#roles_for_dropdown/2-examples"},{"type":"function","doc":"Splits a list of tuples into can and cannot categories.","title":"Bonfire.Boundaries.Roles.split_tuples_can_cannot/1","ref":"Bonfire.Boundaries.Roles.html#split_tuples_can_cannot/1"},{"type":"function","doc":"iex> split_tuples_can_cannot(tuples)\n    # splits tuples into can and cannot categories","title":"Examples - Bonfire.Boundaries.Roles.split_tuples_can_cannot/1","ref":"Bonfire.Boundaries.Roles.html#split_tuples_can_cannot/1-examples"},{"type":"function","doc":"Returns a list of positive and negative verbs for the given role.","title":"Bonfire.Boundaries.Roles.verbs_for_role/2","ref":"Bonfire.Boundaries.Roles.html#verbs_for_role/2"},{"type":"function","doc":"iex> verbs_for_role(:admin)\n    {:ok, positive_verbs, negative_verbs}","title":"Examples - Bonfire.Boundaries.Roles.verbs_for_role/2","ref":"Bonfire.Boundaries.Roles.html#verbs_for_role/2-examples"},{"type":"module","doc":"","title":"Bonfire.Boundaries.RuntimeConfig","ref":"Bonfire.Boundaries.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's runtime.exs, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs` line","title":"Bonfire.Boundaries.RuntimeConfig.config/0","ref":"Bonfire.Boundaries.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.RuntimeConfig.config_module/0","ref":"Bonfire.Boundaries.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"Provides functions to create default boundary fixtures for the instance or for users.","title":"Bonfire.Boundaries.Scaffold","ref":"Bonfire.Boundaries.Scaffold.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.create_default_boundaries/2","ref":"Bonfire.Boundaries.Scaffold.html#create_default_boundaries/2"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.create_missing_boundaries/1","ref":"Bonfire.Boundaries.Scaffold.html#create_missing_boundaries/1"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.insert/0","ref":"Bonfire.Boundaries.Scaffold.html#insert/0"},{"type":"module","doc":"Provides functions to create default boundary fixtures for the instance.","title":"Bonfire.Boundaries.Scaffold.Instance","ref":"Bonfire.Boundaries.Scaffold.Instance.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.activity_pub_circle/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#activity_pub_circle/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.admin_circle/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#admin_circle/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.custom_acl/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#custom_acl/0"},{"type":"function","doc":"Prepares and returns the fixtures for ACLs, circles, verbs, named entities, and grants.","title":"Bonfire.Boundaries.Scaffold.Instance.fixtures/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#fixtures/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.global_circles/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#global_circles/0"},{"type":"function","doc":"Prepares fixtures and inserts them into the database.","title":"Bonfire.Boundaries.Scaffold.Instance.insert/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#insert/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.instance_acl/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#instance_acl/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Instance.mod_circle/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#mod_circle/0"},{"type":"function","doc":"Inserts or updates the verbs in the database.","title":"Bonfire.Boundaries.Scaffold.Instance.upsert_verbs/0","ref":"Bonfire.Boundaries.Scaffold.Instance.html#upsert_verbs/0"},{"type":"module","doc":"Provides batching functionality to insert/update default boundary fixtures for all users.\n\nThe functions that define and insert user fixtures are defined in `Bonfire.Boundaries.Users` and `Bonfire.Boundaries.Users.PreparedBoundaries`.","title":"Bonfire.Boundaries.Scaffold.Users","ref":"Bonfire.Boundaries.Scaffold.Users.html"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Users.down/0","ref":"Bonfire.Boundaries.Scaffold.Users.html#down/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Scaffold.Users.up/0","ref":"Bonfire.Boundaries.Scaffold.Users.html#up/0"},{"type":"module","doc":"View that facilities the querying of objects' boundaries. See `Bonfire.Boundaries.Queries` for how it is used.","title":"Bonfire.Boundaries.Summary","ref":"Bonfire.Boundaries.Summary.html"},{"type":"function","doc":"An equivalent of the Summary view, but represented as an Ecto subquery instead","title":"Bonfire.Boundaries.Summary.base_summary_query/0","ref":"Bonfire.Boundaries.Summary.html#base_summary_query/0"},{"type":"function","doc":"Executes the dropping of views for the given `view_type`.","title":"Bonfire.Boundaries.Summary.drop_views/1","ref":"Bonfire.Boundaries.Summary.html#drop_views/1"},{"type":"function","doc":"Migrates the module down.\n\nThis function handles the migration process for the down direction. It calls `migrate_views/0` and `migrate_functions/0`.","title":"Bonfire.Boundaries.Summary.migrate/1","ref":"Bonfire.Boundaries.Summary.html#migrate/1"},{"type":"function","doc":"Migrates the custom SQL functions for permission calculation.\n\nThis function executes the creation or dropping of the `add_perms` and `agg_perms` functions.","title":"Bonfire.Boundaries.Summary.migrate_functions/0","ref":"Bonfire.Boundaries.Summary.html#migrate_functions/0"},{"type":"function","doc":"Migrates the summary view.\n\nThis function creates the summary view using the `@create_summary_view` SQL query, or drops it in down migrations.","title":"Bonfire.Boundaries.Summary.migrate_views/0","ref":"Bonfire.Boundaries.Summary.html#migrate_views/0"},{"type":"function","doc":"A function that refreshes a current version of the view,\ndefined in module.\nCurrently support only materialized views.\n\n  iex> Catalog.refresh\n  :ok","title":"Bonfire.Boundaries.Summary.refresh/0","ref":"Bonfire.Boundaries.Summary.html#refresh/0"},{"type":"function","doc":"Refreshes the materialized view.\n\nThis function is used to refresh the materialized view (only use if the view is materialized).","title":"Bonfire.Boundaries.Summary.refresh_material_view/0","ref":"Bonfire.Boundaries.Summary.html#refresh_material_view/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Summary.repo/0","ref":"Bonfire.Boundaries.Summary.html#repo/0"},{"type":"function","doc":"","title":"Bonfire.Boundaries.Summary.source/0","ref":"Bonfire.Boundaries.Summary.html#source/0"},{"type":"module","doc":"Reads fixtures in configuration and creates a default boundaries setup for a user","title":"Bonfire.Boundaries.Users","ref":"Bonfire.Boundaries.Users.html"},{"type":"function","doc":"Creates the default boundaries setup for a newly-created user.","title":"Bonfire.Boundaries.Users.create_default_boundaries/2","ref":"Bonfire.Boundaries.Users.html#create_default_boundaries/2"},{"type":"function","doc":"- `user`: The user for whom to create the default boundaries.\n  - `opts`: Optional parameters for customizing the boundaries (such as whether the user is `undiscoverable` or requires `request_before_follow`)","title":"Parameters - Bonfire.Boundaries.Users.create_default_boundaries/2","ref":"Bonfire.Boundaries.Users.html#create_default_boundaries/2-parameters"},{"type":"function","doc":"> Bonfire.Boundaries.Users.create_default_boundaries(user)","title":"Examples - Bonfire.Boundaries.Users.create_default_boundaries/2","ref":"Bonfire.Boundaries.Users.html#create_default_boundaries/2-examples"},{"type":"function","doc":"Creates any missing boundaries for an existing user. Used when the app or config has defined some new types of default boundaries.","title":"Bonfire.Boundaries.Users.create_missing_boundaries/1","ref":"Bonfire.Boundaries.Users.html#create_missing_boundaries/1"},{"type":"function","doc":"- `user`: The user for whom to create the missing boundaries.\n  - `opts`: Optional parameters for customizing the boundaries (not currently used)","title":"Parameters - Bonfire.Boundaries.Users.create_missing_boundaries/1","ref":"Bonfire.Boundaries.Users.html#create_missing_boundaries/1-parameters"},{"type":"function","doc":"> Bonfire.Boundaries.Users.create_missing_boundaries(user)","title":"Examples - Bonfire.Boundaries.Users.create_missing_boundaries/1","ref":"Bonfire.Boundaries.Users.html#create_missing_boundaries/1-examples"},{"type":"module","doc":"This module structures the information about the default boundaries for a newly created user before they are inserted in the database.\nIt takes care of reading the configuration about the default boundaries and prepare the information for the  Bonfire.Boundaries.Users module.","title":"Bonfire.Boundaries.Users.PreparedBoundaries","ref":"Bonfire.Boundaries.Users.PreparedBoundaries.html"},{"type":"function","doc":"Creates PreparedBoundaries for a given user based on the runtime config.","title":"Bonfire.Boundaries.Users.PreparedBoundaries.from_config/2","ref":"Bonfire.Boundaries.Users.PreparedBoundaries.html#from_config/2"},{"type":"module","doc":"Verbs represent actions users can perform, such as reading a post or replying to a message. Each verb has a unique ID and are defined in configuration.\n\nThe corresponding Ecto schema is `Bonfire.Data.AccessControl.Verb` which is defined in a [seperate repo](https://github.com/bonfire-networks/bonfire_data_access_control).","title":"Bonfire.Boundaries.Verbs","ref":"Bonfire.Boundaries.Verbs.html"},{"type":"function","doc":"Returns a changeset for the given verb and attributes.","title":"Bonfire.Boundaries.Verbs.changeset/2","ref":"Bonfire.Boundaries.Verbs.html#changeset/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.changeset(%{verb: :new_verb, description: \"A new verb\"})","title":"Examples - Bonfire.Boundaries.Verbs.changeset/2","ref":"Bonfire.Boundaries.Verbs.html#changeset/2-examples"},{"type":"function","doc":"Creates a new verb with the given attributes.","title":"Bonfire.Boundaries.Verbs.create/1","ref":"Bonfire.Boundaries.Verbs.html#create/1"},{"type":"function","doc":"> Bonfire.Boundaries.Verbs.create(%{verb: :new_verb, description: \"A new verb\"})\n{:ok, %Verb{id: \"new_verb_id\", verb: :new_verb, description: \"A new verb\"}}","title":"Examples - Bonfire.Boundaries.Verbs.create/1","ref":"Bonfire.Boundaries.Verbs.html#create/1-examples"},{"type":"function","doc":"Retrieves a verb by its slug or ID.","title":"Bonfire.Boundaries.Verbs.get/2","ref":"Bonfire.Boundaries.Verbs.html#get/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.get(:read)\n    %{id: \"read_id\", verb: :read}\n\n    iex> Bonfire.Boundaries.Verbs.get(\"read_id\")\n    %{id: \"read_id\", verb: :read}\n\n    iex> Bonfire.Boundaries.Verbs.get(\"non_existent\")\n    nil","title":"Examples - Bonfire.Boundaries.Verbs.get/2","ref":"Bonfire.Boundaries.Verbs.html#get/2-examples"},{"type":"function","doc":"Retrieves verb details by its ID or name, raising an error if not found.","title":"Bonfire.Boundaries.Verbs.get!/2","ref":"Bonfire.Boundaries.Verbs.html#get!/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.get!(\"read\")\n    %{id: \"some_id\", verb: :read}  # Example output\n\n    iex> Bonfire.Boundaries.Verbs.get!(\"non_existent_id\")\n    ** (RuntimeError) Missing default verb: \"non_existent_id\"","title":"Examples - Bonfire.Boundaries.Verbs.get!/2","ref":"Bonfire.Boundaries.Verbs.html#get!/2-examples"},{"type":"function","doc":"Retrieves a verb ID by its slug.","title":"Bonfire.Boundaries.Verbs.get_id/2","ref":"Bonfire.Boundaries.Verbs.html#get_id/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.get_id(:read)\n    \"read_id\"\n\n    iex> Bonfire.Boundaries.Verbs.get_id(\"read\")\n    \"read_id\"\n\n    iex> Bonfire.Boundaries.Verbs.get_id(\"non_existent\")\n    nil","title":"Examples - Bonfire.Boundaries.Verbs.get_id/2","ref":"Bonfire.Boundaries.Verbs.html#get_id/2-examples"},{"type":"function","doc":"Retrieves a verb ID by its slug or ID, raising an error if not found.\n\n    iex> Bonfire.Boundaries.Verbs.get_id!(:read)\n    \"read_id\"\n\n    iex> Bonfire.Boundaries.Verbs.get_id!(\"non_existent\")\n    ** (RuntimeError) Missing default verb: \"non_existent\"","title":"Bonfire.Boundaries.Verbs.get_id!/2","ref":"Bonfire.Boundaries.Verbs.html#get_id!/2"},{"type":"function","doc":"Retrieves a verb slug by its ID or name.","title":"Bonfire.Boundaries.Verbs.get_slug/2","ref":"Bonfire.Boundaries.Verbs.html#get_slug/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.get_slug(\"read_id\")\n    :read","title":"Examples - Bonfire.Boundaries.Verbs.get_slug/2","ref":"Bonfire.Boundaries.Verbs.html#get_slug/2-examples"},{"type":"function","doc":"Retrieves a verb tuple by its ID or name.","title":"Bonfire.Boundaries.Verbs.get_tuple/2","ref":"Bonfire.Boundaries.Verbs.html#get_tuple/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.get_tuple(\"read_id\")\n    {:read, %{id: \"read_id\", verb: :read}}\n\n    iex> Bonfire.Boundaries.Verbs.get_tuple(\"non_existent\")\n    nil","title":"Examples - Bonfire.Boundaries.Verbs.get_tuple/2","ref":"Bonfire.Boundaries.Verbs.html#get_tuple/2-examples"},{"type":"function","doc":"Retrieves the IDs of the given verbs.\n\n    iex> Bonfire.Boundaries.Verbs.ids([:read, :write])\n    [\"read_id\", \"write_id\"]\n\n    iex> Bonfire.Boundaries.Verbs.ids(:read)\n    [\"read_id\"]","title":"Bonfire.Boundaries.Verbs.ids/2","ref":"Bonfire.Boundaries.Verbs.html#ids/2"},{"type":"function","doc":"Lists the verbs from the specified source and key.","title":"Bonfire.Boundaries.Verbs.list/2","ref":"Bonfire.Boundaries.Verbs.html#list/2"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.list(:db, :verb)\n    %{read: %Verb{id: \"read_id\", verb: :read}, write: %Verb{id: \"write_id\", verb: :write}}\n\n    iex> Bonfire.Boundaries.Verbs.list(:instance, :id)\n    [\"read_id\", \"write_id\"]","title":"Examples - Bonfire.Boundaries.Verbs.list/2","ref":"Bonfire.Boundaries.Verbs.html#list/2-examples"},{"type":"function","doc":"Returns a debug list of verbs by comparing the database and code.","title":"Bonfire.Boundaries.Verbs.list_verbs_debug/0","ref":"Bonfire.Boundaries.Verbs.html#list_verbs_debug/0"},{"type":"function","doc":"> Bonfire.Boundaries.Verbs.list_verbs_debug()\n    # Example output:\n    [ok: :read, error: \"Code and DB have differing IDs for the same verb\", ...]","title":"Examples - Bonfire.Boundaries.Verbs.list_verbs_debug/0","ref":"Bonfire.Boundaries.Verbs.html#list_verbs_debug/0-examples"},{"type":"function","doc":"Returns the list of verb slugs.","title":"Bonfire.Boundaries.Verbs.slugs/0","ref":"Bonfire.Boundaries.Verbs.html#slugs/0"},{"type":"function","doc":"iex> Bonfire.Boundaries.Verbs.slugs()\n    [:read, :write]","title":"Examples - Bonfire.Boundaries.Verbs.slugs/0","ref":"Bonfire.Boundaries.Verbs.html#slugs/0-examples"},{"type":"function","doc":"Returns the list of verbs from the configuration.","title":"Bonfire.Boundaries.Verbs.verbs/0","ref":"Bonfire.Boundaries.Verbs.html#verbs/0"},{"type":"function","doc":"Returns the count of verbs in the configuration.","title":"Bonfire.Boundaries.Verbs.verbs_count/0","ref":"Bonfire.Boundaries.Verbs.html#verbs_count/0"},{"type":"module","doc":"A library of common utils and helpers used across Bonfire extensions.\n\nAn extension for [Bonfire](https://bonfire.cafe/) that contains:\n\n- Many common functions in `Bonfire.Common.Utils`\n- Path and URL generators in `Bonfire.Common.URIs`\n- Date and time helpers in `Bonfire.Common.DatesTimes`\n- Etc","title":"Bonfire.Common","ref":"Bonfire.Common.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Common","ref":"Bonfire.Common.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Common","ref":"Bonfire.Common.html#module-copyright-and-license"},{"type":"function","doc":"Provides a fallback value or function when the first argument is `nil`.\n\n- If the first argument is not `nil`, returns the first argument as is.\n- If both arguments are `nil`, returns `nil`.\n- If the first argument is `nil` and the second argument is a function, calls the function and returns its result.\n- If the first argument is `nil` and the second argument is not a function, returns the second argument as is.","title":"Bonfire.Common.maybe_fallback/2","ref":"Bonfire.Common.html#maybe_fallback/2"},{"type":"function","doc":"iex> maybe_fallback(\"value\", \"fallback value\")\n    \"value\"\n    \n    iex> maybe_fallback(\"\", \"fallback value\")\n    \"fallback value\"\n\n    iex> maybe_fallback(nil, nil)\n    nil\n\n    iex> maybe_fallback(nil, fn -> 1+2 end)\n    3\n\n    iex> maybe_fallback(nil, \"fallback value\")\n    \"fallback value\"","title":"Examples - Bonfire.Common.maybe_fallback/2","ref":"Bonfire.Common.html#maybe_fallback/2-examples"},{"type":"module","doc":"Module to load the service adapter defined inside the configuration.\n\nSee `Bonfire.Common.AntiSpam.Provider`.","title":"Bonfire.Common.AntiSpam","ref":"Bonfire.Common.AntiSpam.html"},{"type":"function","doc":"Returns the appropriate service adapter.\n\nAccording to the config behind\n  `config :mobilizon, Bonfire.Common.AntiSpam,\n     service: Bonfire.Common.AntiSpam.Module`","title":"Bonfire.Common.AntiSpam.service/0","ref":"Bonfire.Common.AntiSpam.html#service/0"},{"type":"module","doc":"Integration with Akismet.com for spam detection\n\nCredit to https://joinmobilizon.org for the original code.","title":"Bonfire.Common.AntiSpam.Akismet","ref":"Bonfire.Common.AntiSpam.Akismet.html"},{"type":"module","doc":"Integration with Bumblebee model(s) for anti-spam detection.","title":"Bonfire.Common.AntiSpam.BumblebeeAdapter","ref":"Bonfire.Common.AntiSpam.BumblebeeAdapter.html"},{"type":"module","doc":"Mock for Anti-spam Provider implementations.\n\nCredit to https://joinmobilizon.org for the original code.","title":"Bonfire.Common.AntiSpam.Mock","ref":"Bonfire.Common.AntiSpam.Mock.html"},{"type":"behaviour","doc":"Provider Behaviour for anti-spam detection.","title":"Bonfire.Common.AntiSpam.Provider","ref":"Bonfire.Common.AntiSpam.Provider.html"},{"type":"behaviour","doc":"* `Bonfire.Common.AntiSpam.Akismet` [🔗](https://akismet.com/)\n\nCredit to https://joinmobilizon.org for the original code.","title":"Supported backends - Bonfire.Common.AntiSpam.Provider","ref":"Bonfire.Common.AntiSpam.Provider.html#module-supported-backends"},{"type":"callback","doc":"Check a comment (or microblog) details","title":"Bonfire.Common.AntiSpam.Provider.check_comment/3","ref":"Bonfire.Common.AntiSpam.Provider.html#c:check_comment/3"},{"type":"callback","doc":"Check an user/account's details","title":"Bonfire.Common.AntiSpam.Provider.check_current_user/1","ref":"Bonfire.Common.AntiSpam.Provider.html#c:check_current_user/1"},{"type":"callback","doc":"Check an object details (such as a blog post)","title":"Bonfire.Common.AntiSpam.Provider.check_object/2","ref":"Bonfire.Common.AntiSpam.Provider.html#c:check_object/2"},{"type":"callback","doc":"Check profile info","title":"Bonfire.Common.AntiSpam.Provider.check_profile/2","ref":"Bonfire.Common.AntiSpam.Provider.html#c:check_profile/2"},{"type":"callback","doc":"Make sure the provider is ready","title":"Bonfire.Common.AntiSpam.Provider.ready?/0","ref":"Bonfire.Common.AntiSpam.Provider.html#c:ready?/0"},{"type":"callback","doc":"","title":"Bonfire.Common.AntiSpam.Provider.report_ham/2","ref":"Bonfire.Common.AntiSpam.Provider.html#c:report_ham/2"},{"type":"callback","doc":"","title":"Bonfire.Common.AntiSpam.Provider.report_spam/2","ref":"Bonfire.Common.AntiSpam.Provider.html#c:report_spam/2"},{"type":"type","doc":"","title":"Bonfire.Common.AntiSpam.Provider.result/0","ref":"Bonfire.Common.AntiSpam.Provider.html#t:result/0"},{"type":"type","doc":"","title":"Bonfire.Common.AntiSpam.Provider.spam_result/0","ref":"Bonfire.Common.AntiSpam.Provider.html#t:spam_result/0"},{"type":"module","doc":"Simple way to measure the execution time of functions. It is preferred to use `@decorate` from `Untangle` instead.","title":"Bonfire.Common.Benchmark","ref":"Bonfire.Common.Benchmark.html"},{"type":"function","doc":"","title":"Bonfire.Common.Benchmark.apply_timed/1","ref":"Bonfire.Common.Benchmark.html#apply_timed/1"},{"type":"function","doc":"","title":"Bonfire.Common.Benchmark.apply_timed/2","ref":"Bonfire.Common.Benchmark.html#apply_timed/2"},{"type":"function","doc":"","title":"Bonfire.Common.Benchmark.apply_timed/3","ref":"Bonfire.Common.Benchmark.html#apply_timed/3"},{"type":"module","doc":"Helpers for caching data and operations","title":"Bonfire.Common.Cache","ref":"Bonfire.Common.Cache.html"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.cache_store/1","ref":"Bonfire.Common.Cache.html#cache_store/1"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.cached_preloads_for_objects/3","ref":"Bonfire.Common.Cache.html#cached_preloads_for_objects/3"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.get/2","ref":"Bonfire.Common.Cache.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.get!/2","ref":"Bonfire.Common.Cache.html#get!/2"},{"type":"function","doc":"Takes a function (or module and function names) and a set of arguments for that function, and tries to fetch the previous result of running that function from the in-memory cache, using the MFA (module name/function name/arguments used) to generate the cache key. If it's not in the cache, it executes the function, and caches and returns the result.","title":"Bonfire.Common.Cache.maybe_apply_cached/3","ref":"Bonfire.Common.Cache.html#maybe_apply_cached/3"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.put/3","ref":"Bonfire.Common.Cache.html#put/3"},{"type":"function","doc":"It removes the entry associated with a key from the cache.","title":"Bonfire.Common.Cache.remove/2","ref":"Bonfire.Common.Cache.html#remove/2"},{"type":"function","doc":"","title":"Bonfire.Common.Cache.remove_all/1","ref":"Bonfire.Common.Cache.html#remove_all/1"},{"type":"function","doc":"It removes the result of a given function from the cache.","title":"Bonfire.Common.Cache.reset/3","ref":"Bonfire.Common.Cache.html#reset/3"},{"type":"module","doc":"","title":"Bonfire.Common.Cache.DiskCache","ref":"Bonfire.Common.Cache.DiskCache.html"},{"type":"module","doc":"Datagrabber for changelog generation, `Versioce.Config.Changelog.datagrabber/0`\n\nUses repository history to obtain and format data.","title":"Bonfire.Common.Changelog.Github.DataGrabber","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html"},{"type":"function","doc":"","title":"Bonfire.Common.Changelog.Github.DataGrabber.fetch_issues/1","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#fetch_issues/1"},{"type":"function","doc":"","title":"Bonfire.Common.Changelog.Github.DataGrabber.format_issue/1","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#format_issue/1"},{"type":"function","doc":"","title":"Bonfire.Common.Changelog.Github.DataGrabber.prepare_data/2","ref":"Bonfire.Common.Changelog.Github.DataGrabber.html#prepare_data/2"},{"type":"module","doc":"Helpers to get app/extension OTP config, or to override a config key. Basically a wrapper of `Application.get_env/3` and `Application.put_env/3`.","title":"Bonfire.Common.Config","ref":"Bonfire.Common.Config.html"},{"type":"macro","doc":"","title":"Bonfire.Common.Config.compilation_error/1","ref":"Bonfire.Common.Config.html#compilation_error/1"},{"type":"function","doc":"Deletes the configuration value for a key in a specific OTP app or extension.\n\nThis function removes the configuration value for the given key from the specified OTP app or extension.","title":"Bonfire.Common.Config.delete/2","ref":"Bonfire.Common.Config.html#delete/2"},{"type":"function","doc":"iex> delete(:key)\n    :ok\n\n    iex> delete([:nested, :key], :my_app)\n    :ok","title":"Examples - Bonfire.Common.Config.delete/2","ref":"Bonfire.Common.Config.html#delete/2-examples"},{"type":"function","doc":"Retrieves the Phoenix endpoint module for the application.\n\nThis function first attempts to fetch the Phoenix endpoint module from the `:phoenix_endpoint_module` key in the process dictionary. If not found, it retrieves the value from the application configuration, defaulting to `Bonfire.Web.Endpoint` if not configured.","title":"Bonfire.Common.Config.endpoint_module/0","ref":"Bonfire.Common.Config.html#endpoint_module/0"},{"type":"function","doc":"iex> endpoint_module()\n    Bonfire.Web.Endpoint","title":"Examples - Bonfire.Common.Config.endpoint_module/0","ref":"Bonfire.Common.Config.html#endpoint_module/0-examples"},{"type":"function","doc":"Retrieves the environment configuration for the application.\n\nThis function returns the value of the `:env` configuration key for the application.","title":"Bonfire.Common.Config.env/0","ref":"Bonfire.Common.Config.html#env/0"},{"type":"function","doc":"iex> env()\n    :test","title":"Examples - Bonfire.Common.Config.env/0","ref":"Bonfire.Common.Config.html#env/0-examples"},{"type":"function","doc":"Retrieves a configuration value for a key, optionally from a specific OTP app or extension.\n\nThis function can handle single keys or nested key trees and returns the configuration value associated with the key(s). It falls back to a default value if the key is not found.","title":"Bonfire.Common.Config.get/3","ref":"Bonfire.Common.Config.html#get/3"},{"type":"function","doc":"iex> get(:test_key, \"default\")\n    \"test_value\"\n\n    iex> get([:nested, :key], \"default\", :bonfire)\n    \"default\"\n\n    iex> get(:missing_key, \"default\")\n    \"default\"","title":"Examples - Bonfire.Common.Config.get/3","ref":"Bonfire.Common.Config.html#get/3-examples"},{"type":"function","doc":"Retrieves the configuration value for a key and raises an error if the value is not found.","title":"Bonfire.Common.Config.get!/2","ref":"Bonfire.Common.Config.html#get!/2"},{"type":"function","doc":"iex> get!(:test_key)\n    \"test_value\"\n\n    iex> get!(:missing_key, :bonfire_common)\n    ** (Bonfire.Common.Config.Error) Missing configuration value: [:bonfire_common, :missing_key]","title":"Examples - Bonfire.Common.Config.get!/2","ref":"Bonfire.Common.Config.html#get!/2-examples"},{"type":"function","doc":"Retrieves all configuration keys and values for a specific Bonfire extension or OTP app.","title":"Bonfire.Common.Config.get_ext/1","ref":"Bonfire.Common.Config.html#get_ext/1"},{"type":"function","doc":"> get_ext(:my_extension)\n    [key1: \"value1\", key2: \"value2\"]\n\n    > get_ext(:another_extension)\n    []","title":"Examples - Bonfire.Common.Config.get_ext/1","ref":"Bonfire.Common.Config.html#get_ext/1-examples"},{"type":"function","doc":"Retrieves a configuration value for a specific Bonfire extension or OTP app key.\n\nThis function attempts to get the configuration value for the given key from the specified extension or OTP app. If the key is not found, it falls back to checking the top-level Bonfire app configuration.","title":"Bonfire.Common.Config.get_ext/3","ref":"Bonfire.Common.Config.html#get_ext/3"},{"type":"function","doc":"iex> get_ext(:bonfire_common, :test_key, \"default\")\n    \"test_value\"\n\n    iex> get_ext(:my_extension, :missing_key, \"default\")\n    \"default\"","title":"Examples - Bonfire.Common.Config.get_ext/3","ref":"Bonfire.Common.Config.html#get_ext/3-examples"},{"type":"function","doc":"Retrieves all configuration keys and values for a specific Bonfire extension or OTP app and raises an error if no configuration is found.","title":"Bonfire.Common.Config.get_ext!/1","ref":"Bonfire.Common.Config.html#get_ext!/1"},{"type":"function","doc":"iex> config = get_ext!(:bonfire_common)\n    iex> is_list(config) and config !=[]\n    true\n\n    iex> get_ext!(:non_existent_extension)\n    ** (Bonfire.Common.Config.Error) Empty configuration for extension: non_existent_extension","title":"Examples - Bonfire.Common.Config.get_ext!/1","ref":"Bonfire.Common.Config.html#get_ext!/1-examples"},{"type":"function","doc":"Retrieves the configuration value for a specific Bonfire extension or OTP app key and raises an error if the value is not found.\n\nThis function attempts to get the configuration value for the given key from the specified extension or OTP app. If the key is not present or the value is nil, it raises a compilation error.","title":"Bonfire.Common.Config.get_ext!/2","ref":"Bonfire.Common.Config.html#get_ext!/2"},{"type":"function","doc":"iex> get_ext!(:bonfire_common, :test_key)\n    \"test_value\"\n\n    iex> get_ext!(:my_extension, :missing_key)\n    ** (Bonfire.Common.Config.Error) Missing configuration value: [:my_extension, :missing_key]","title":"Examples - Bonfire.Common.Config.get_ext!/2","ref":"Bonfire.Common.Config.html#get_ext!/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Config.get_for_process/1","ref":"Bonfire.Common.Config.html#get_for_process/1"},{"type":"function","doc":"Constructs a key path for configuration settings, which always starts with an app or extension name. It starts with the main OTP app or extension and includes additional keys as specified.\n\n    > keys_tree([:bonfire_me, Bonfire.Me.Users])\n    [:bonfire_me, Bonfire.Me.Users]\n\n    > keys_tree(Bonfire.Me.Users)\n    [:bonfire_me, Bonfire.Me.Users]\n\n    > keys_tree(:bonfire_me)\n    [:bonfire_me]\n\n    > keys_tree(:random_atom)\n    [:bonfire_common, :random_atom]\n\n    >keys_tree([:random_atom, :sub_key])\n    [:bonfire_common, :random_atom, :sub_key]","title":"Bonfire.Common.Config.keys_tree/1","ref":"Bonfire.Common.Config.html#keys_tree/1"},{"type":"function","doc":"","title":"Bonfire.Common.Config.module_enabled?/1","ref":"Bonfire.Common.Config.html#module_enabled?/1"},{"type":"function","doc":"","title":"Bonfire.Common.Config.put/1","ref":"Bonfire.Common.Config.html#put/1"},{"type":"function","doc":"Sets the configuration value for a key or key tree in a specific OTP app or extension.\n\nThis function allows you to set the configuration value for the specified key(s) in the given OTP app or extension. It supports nested configurations.","title":"Bonfire.Common.Config.put/3","ref":"Bonfire.Common.Config.html#put/3"},{"type":"function","doc":"iex> put(:test_key, \"test_value\")\n    :ok\n\n    iex> put([:nested, :key], \"test_value\", :my_app)\n    :ok","title":"Examples - Bonfire.Common.Config.put/3","ref":"Bonfire.Common.Config.html#put/3-examples"},{"type":"function","doc":"Retrieves the Ecto repository module for the application.\n\nThis function first attempts to fetch the Ecto repository module from the `:ecto_repo_module` key in the process dictionary. If not found, it retrieves the value from the application configuration, and defaults to `Bonfire.Common.Repo` if not configured.","title":"Bonfire.Common.Config.repo/0","ref":"Bonfire.Common.Config.html#repo/0"},{"type":"function","doc":"iex> repo()\n    Bonfire.Common.Repo","title":"Examples - Bonfire.Common.Config.repo/0","ref":"Bonfire.Common.Config.html#repo/0-examples"},{"type":"function","doc":"Raises an error if the specified Bonfire extension is not configured.\n\nThis function checks whether the configuration for a given Bonfire extension exists. If the configuration is missing, it raises a compilation error with a message indicating how to set up the configuration file.","title":"Bonfire.Common.Config.require_extension_config!/1","ref":"Bonfire.Common.Config.html#require_extension_config!/1"},{"type":"function","doc":"iex> require_extension_config!(:some_extension)\n    ** (Bonfire.Common.Config.Error) You have not configured the `some_extension` Bonfire extension, please `cp ./deps/some_extension/config/some_extension.exs ./config/some_extension.exs` in your Bonfire app repository and then customise the copied config as necessary","title":"Examples - Bonfire.Common.Config.require_extension_config!/1","ref":"Bonfire.Common.Config.html#require_extension_config!/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Config.top_level_otp_app/0","ref":"Bonfire.Common.Config.html#top_level_otp_app/0"},{"type":"exception","doc":"","title":"Bonfire.Common.Config.Error","ref":"Bonfire.Common.Config.Error.html"},{"type":"module","doc":"Loads instance Settings from DB into Elixir's Config\n\nWhile this module is a GenServer, it is only responsible for querying the settings, putting them in Config, and then exits with :ignore having done so.","title":"Bonfire.Common.Config.LoadExtensionsConfig","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Config.LoadExtensionsConfig.child_spec/1","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Config.LoadExtensionsConfig.load_configs/1","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#load_configs/1"},{"type":"function","doc":"Populates the global cache with table data via introspection.","title":"Bonfire.Common.Config.LoadExtensionsConfig.start_link/1","ref":"Bonfire.Common.Config.LoadExtensionsConfig.html#start_link/1"},{"type":"behaviour","doc":"A global cache of runtime config modules to be loaded at app startup.","title":"Bonfire.Common.ConfigModule","ref":"Bonfire.Common.ConfigModule.html"},{"type":"callback","doc":"Set runtime config","title":"Bonfire.Common.ConfigModule.config/0","ref":"Bonfire.Common.ConfigModule.html#c:config/0"},{"type":"callback","doc":"Declares a config module","title":"Bonfire.Common.ConfigModule.config_module/0","ref":"Bonfire.Common.ConfigModule.html#c:config_module/0"},{"type":"function","doc":"","title":"Bonfire.Common.ConfigModule.modules/0","ref":"Bonfire.Common.ConfigModule.html#modules/0"},{"type":"behaviour","doc":"Find a context or query module via its schema, backed by a global cache of known modules.","title":"Bonfire.Common.ContextModule","ref":"Bonfire.Common.ContextModule.html"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.apply_error/2","ref":"Bonfire.Common.ContextModule.html#apply_error/2"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.context_function_error/2","ref":"Bonfire.Common.ContextModule.html#context_function_error/2"},{"type":"callback","doc":"Declares a context module","title":"Bonfire.Common.ContextModule.context_module/0","ref":"Bonfire.Common.ContextModule.html#c:context_module/0"},{"type":"function","doc":"Get a context identified by schema","title":"Bonfire.Common.ContextModule.context_module/1","ref":"Bonfire.Common.ContextModule.html#context_module/1"},{"type":"function","doc":"Look up a context, throw :not_found if not found.","title":"Bonfire.Common.ContextModule.context_module!/1","ref":"Bonfire.Common.ContextModule.html#context_module!/1"},{"type":"function","doc":"Look up many contexts at once, throw :not_found if any of them are not found","title":"Bonfire.Common.ContextModule.context_modules/1","ref":"Bonfire.Common.ContextModule.html#context_modules/1"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.linked_query_modules/0","ref":"Bonfire.Common.ContextModule.html#linked_query_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.linked_schema_modules/0","ref":"Bonfire.Common.ContextModule.html#linked_schema_modules/0"},{"type":"function","doc":"Given an object or schema module name, run a function on the associated context module.\nTODO: refactor to re-use Utils.maybe_apply?","title":"Bonfire.Common.ContextModule.maybe_apply/4","ref":"Bonfire.Common.ContextModule.html#maybe_apply/4"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.maybe_context_module/1","ref":"Bonfire.Common.ContextModule.html#maybe_context_module/1"},{"type":"function","doc":"","title":"Bonfire.Common.ContextModule.modules/0","ref":"Bonfire.Common.ContextModule.html#modules/0"},{"type":"callback","doc":"Points to the related queries module","title":"Bonfire.Common.ContextModule.query_module/0","ref":"Bonfire.Common.ContextModule.html#c:query_module/0"},{"type":"callback","doc":"Points to the related schema module","title":"Bonfire.Common.ContextModule.schema_module/0","ref":"Bonfire.Common.ContextModule.html#c:schema_module/0"},{"type":"module","doc":"","title":"Bonfire.Common.Crypto","ref":"Bonfire.Common.Crypto.html"},{"type":"function","doc":"","title":"Bonfire.Common.Crypto.decrypt_with_auth_key/3","ref":"Bonfire.Common.Crypto.html#decrypt_with_auth_key/3"},{"type":"function","doc":"","title":"Bonfire.Common.Crypto.encrypt_with_auth_key/2","ref":"Bonfire.Common.Crypto.html#encrypt_with_auth_key/2"},{"type":"function","doc":"","title":"Bonfire.Common.Crypto.encrypt_with_auth_key/3","ref":"Bonfire.Common.Crypto.html#encrypt_with_auth_key/3"},{"type":"module","doc":"Date/time helpers","title":"Bonfire.Common.DatesTimes","ref":"Bonfire.Common.DatesTimes.html"},{"type":"function","doc":"Returns a list of available format keys for the given locale.","title":"Bonfire.Common.DatesTimes.available_format_keys/2","ref":"Bonfire.Common.DatesTimes.html#available_format_keys/2"},{"type":"function","doc":"> available_format_keys()\n    [:short, :medium, :long, :full]  # Example output","title":"Examples - Bonfire.Common.DatesTimes.available_format_keys/2","ref":"Bonfire.Common.DatesTimes.html#available_format_keys/2-examples"},{"type":"function","doc":"Returns a keyword list of available date/time formats for the given locale.","title":"Bonfire.Common.DatesTimes.available_formats/2","ref":"Bonfire.Common.DatesTimes.html#available_formats/2"},{"type":"function","doc":"> available_formats()\n    [short: \"Short\", medium: \"Medium\", long: \"Long\", full: \"Full\"]  # Example output","title":"Examples - Bonfire.Common.DatesTimes.available_formats/2","ref":"Bonfire.Common.DatesTimes.html#available_formats/2-examples"},{"type":"function","doc":"Takes a ULID ID (or an object with one) or a `DateTime` struct, and turns the date into a relative phrase, e.g. `2 days ago`.","title":"Bonfire.Common.DatesTimes.date_from_now/2","ref":"Bonfire.Common.DatesTimes.html#date_from_now/2"},{"type":"function","doc":"> date_from_now(%{id: \"01FJ6G6V9E7Y3A6HZ5F2M3K4RY\"})\n    \"25 days ago\"  # Example output\n\n    > date_from_now(\"01FJ6G6V9E7Y3A6HZ5F2M3K4RY\")\n    \"25 days ago\"  # Example output","title":"Examples - Bonfire.Common.DatesTimes.date_from_now/2","ref":"Bonfire.Common.DatesTimes.html#date_from_now/2-examples"},{"type":"function","doc":"Takes an object (or string with an ULID) and converts the ULID ID to a `DateTime` struct.","title":"Bonfire.Common.DatesTimes.date_from_pointer/1","ref":"Bonfire.Common.DatesTimes.html#date_from_pointer/1"},{"type":"function","doc":"> date_from_pointer(\"01FJ6G6V9E7Y3A6HZ5F2M3K4RY\")\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output","title":"Examples - Bonfire.Common.DatesTimes.date_from_pointer/1","ref":"Bonfire.Common.DatesTimes.html#date_from_pointer/1-examples"},{"type":"function","doc":"Formats a `DateTime` struct or date into a string using `Cldr.DateTime.to_string/2`.","title":"Bonfire.Common.DatesTimes.format/2","ref":"Bonfire.Common.DatesTimes.html#format/2"},{"type":"function","doc":"> format(DateTime.now!(\"Etc/UTC\"))\n    \"Jul 25, 2024, 11:08:21 AM\"","title":"Examples - Bonfire.Common.DatesTimes.format/2","ref":"Bonfire.Common.DatesTimes.html#format/2-examples"},{"type":"function","doc":"Formats a `Date` struct or date into a string using `Cldr.Date.to_string/2`.","title":"Bonfire.Common.DatesTimes.format_date/2","ref":"Bonfire.Common.DatesTimes.html#format_date/2"},{"type":"function","doc":"> format(DateTime.now!(\"Etc/UTC\"))\n    \"Jul 25, 2024\"\n\n    iex> format(\"2024-07-25\")\n    \"Jul 25, 2024\"\n\n    iex> format(\"2024-7-25\")\n    \"Jul 25, 2024\"\n\n    iex> format(\"2024-7\")\n    \"Jul, 2024\" # TODO","title":"Examples - Bonfire.Common.DatesTimes.format_date/2","ref":"Bonfire.Common.DatesTimes.html#format_date/2-examples"},{"type":"function","doc":"Checks if a `DateTime` is in the future relative to the current time.","title":"Bonfire.Common.DatesTimes.future?/1","ref":"Bonfire.Common.DatesTimes.html#future?/1"},{"type":"function","doc":"iex> future?(%Date{year: 3020, month: 7, day: 25})\n    true  # Example output\n\n    iex> future?(%Date{year: 2023, month: 7, day: 25})\n    false  # Example output","title":"Examples - Bonfire.Common.DatesTimes.future?/1","ref":"Bonfire.Common.DatesTimes.html#future?/1-examples"},{"type":"function","doc":"Generates a ULID based on a `DateTime` or a string representation of a date/time, but only if the date/time is in the past.","title":"Bonfire.Common.DatesTimes.maybe_generate_ulid/1","ref":"Bonfire.Common.DatesTimes.html#maybe_generate_ulid/1"},{"type":"function","doc":"> maybe_generate_ulid(%Date{year: 2024, month: 7, day: 25})\n    \"01J3KJZZ00X1EXD6TZYD3PPDR6\"  # Example output\n\n    > maybe_generate_ulid(\"2024-07-25\")\n    \"01J3KJZZ00X1EXD6TZYD3PPDR6\"  # Example output","title":"Examples - Bonfire.Common.DatesTimes.maybe_generate_ulid/1","ref":"Bonfire.Common.DatesTimes.html#maybe_generate_ulid/1-examples"},{"type":"function","doc":"Returns the current UTC `DateTime`.","title":"Bonfire.Common.DatesTimes.now/0","ref":"Bonfire.Common.DatesTimes.html#now/0"},{"type":"function","doc":"> now()\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output","title":"Examples - Bonfire.Common.DatesTimes.now/0","ref":"Bonfire.Common.DatesTimes.html#now/0-examples"},{"type":"function","doc":"Returns a `DateTime` in the past, relative to the current time, by subtracting a specified amount of time.","title":"Bonfire.Common.DatesTimes.past/2","ref":"Bonfire.Common.DatesTimes.html#past/2"},{"type":"function","doc":"> past(10, :day)\n    %DateTime{year: 2024, month: 7, day: 15, ...}  # Example output","title":"Examples - Bonfire.Common.DatesTimes.past/2","ref":"Bonfire.Common.DatesTimes.html#past/2-examples"},{"type":"function","doc":"Checks if a `DateTime` is in the past relative to the current time.","title":"Bonfire.Common.DatesTimes.past?/1","ref":"Bonfire.Common.DatesTimes.html#past?/1"},{"type":"function","doc":"iex> past?(%Date{year: 3020, month: 7, day: 25})\n    false  # Example output\n\n    iex> past?(%Date{year: 2023, month: 7, day: 24})\n    true   # Example output","title":"Examples - Bonfire.Common.DatesTimes.past?/1","ref":"Bonfire.Common.DatesTimes.html#past?/1-examples"},{"type":"function","doc":"Converts a `DateTime` struct to a relative date string. Uses `Cldr.DateTime` or `Timex` libraries.","title":"Bonfire.Common.DatesTimes.relative_date/2","ref":"Bonfire.Common.DatesTimes.html#relative_date/2"},{"type":"function","doc":"iex> relative_date(DateTime.now!(\"Etc/UTC\"))\n    \"now\"  # Example output","title":"Examples - Bonfire.Common.DatesTimes.relative_date/2","ref":"Bonfire.Common.DatesTimes.html#relative_date/2-examples"},{"type":"function","doc":"Removes a specified amount of time from a `DateTime`.","title":"Bonfire.Common.DatesTimes.remove/3","ref":"Bonfire.Common.DatesTimes.html#remove/3"},{"type":"function","doc":"> remove(%Date{year: 2024, month: 7, day: 25}, 10, :day)\n    %DateTime{year: 2024, month: 7, day: 15, ...}  # Example output","title":"Examples - Bonfire.Common.DatesTimes.remove/3","ref":"Bonfire.Common.DatesTimes.html#remove/3-examples"},{"type":"function","doc":"Converts various formats into a `DateTime` struct.","title":"Bonfire.Common.DatesTimes.to_date/1","ref":"Bonfire.Common.DatesTimes.html#to_date/1"},{"type":"function","doc":"iex> to_date(%Date{year: 2024, month: 7, day: 25})\n    %Date{year: 2024, month: 7, day: 25} \n\n    iex> to_date(\"2024-07-25\")\n    %Date{year: 2024, month: 7, day: 25}\n\n    iex> to_date(1656115200000)\n    %Date{year: 2022, month: 6, day: 25}  \n\n    iex> to_date(%{\"day\" => 25, \"month\" => 7, \"year\" => 2024})\n    %Date{year: 2024, month: 7, day: 25}","title":"Examples - Bonfire.Common.DatesTimes.to_date/1","ref":"Bonfire.Common.DatesTimes.html#to_date/1-examples"},{"type":"function","doc":"Converts various formats into a `DateTime` struct.","title":"Bonfire.Common.DatesTimes.to_date_time/1","ref":"Bonfire.Common.DatesTimes.html#to_date_time/1"},{"type":"function","doc":"> to_date_time(%Date{year: 2024, month: 7, day: 25})\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output\n\n    > to_date_time(\"2024-07-25\")\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output\n\n    > to_date_time(1656115200000)\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output\n\n    > to_date_time(%{\"day\" => 25, \"month\" => 7, \"year\" => 2024})\n    %DateTime{year: 2024, month: 7, day: 25, ...}  # Example output","title":"Examples - Bonfire.Common.DatesTimes.to_date_time/1","ref":"Bonfire.Common.DatesTimes.html#to_date_time/1-examples"},{"type":"module","doc":"Helper to extract data nested in an object","title":"Bonfire.Common.E","ref":"Bonfire.Common.E.html"},{"type":"function","doc":"","title":"Bonfire.Common.E.e/2","ref":"Bonfire.Common.E.html#e/2"},{"type":"macro","doc":"Extracts a value from a map or other data structure, or returns a fallback if not present or empty.\nIf additional arguments are provided, it searches for nested data structures, with the last argument always being the fallback.","title":"Bonfire.Common.E.e/3","ref":"Bonfire.Common.E.html#e/3"},{"type":"macro","doc":"iex> e(%{key: \"value\"}, :key, \"fallback\")\n    \"value\"\n\n    iex> e(%{key: nil}, :key, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{key: \"value\"}, :missing_key, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{key: %Ecto.Association.NotLoaded{}}, :key, \"fallback\")\n    \"fallback\"\n\n    iex> e({:ok, %{key: \"value\"}}, :key, \"fallback\") # FIXME\n    \"value\"\n\n    iex> e(%{__context__: %{key: \"context_value\"}}, :key, \"fallback\") # FIXME\n    \"context_value\"\n\n    iex> e(%{a: %{b: \"value\"}}, :a, :b, \"fallback\")\n    \"value\"\n\n    iex> e(%{a: %{b: %Ecto.Association.NotLoaded{}}}, :a, :b, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{a: %{b: nil}}, :a, :b, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{a: %{b: %{c: \"value\"}}}, :a, :b, :c, \"fallback\")\n    \"value\"\n\n    iex> e(%{a: %{b: %{c: \"value\"}}}, :a, :b, :c, :d, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{a: %{b: %{c: %{d: \"value\"}}}}, :a, :b, :c, :d, \"fallback\")\n    \"value\"\n\n    iex> e(%{a: %{b: %{c: %{d: \"value\"}}}}, :a, :b, :c, :d, :ed, \"fallback\")\n    \"fallback\"\n\n    iex> e(%{a: %{b: %{c: %{d: %{e: \"value\"}}}}}, :a, :b, :c, :d, :e, \"fallback\")\n    \"value\"","title":"Examples - Bonfire.Common.E.e/3","ref":"Bonfire.Common.E.html#e/3-examples"},{"type":"macro","doc":"","title":"Bonfire.Common.E.e/4","ref":"Bonfire.Common.E.html#e/4"},{"type":"macro","doc":"","title":"Bonfire.Common.E.e/5","ref":"Bonfire.Common.E.html#e/5"},{"type":"macro","doc":"","title":"Bonfire.Common.E.e/6","ref":"Bonfire.Common.E.html#e/6"},{"type":"macro","doc":"","title":"Bonfire.Common.E.e/7","ref":"Bonfire.Common.E.html#e/7"},{"type":"macro","doc":"","title":"Bonfire.Common.E.e/8","ref":"Bonfire.Common.E.html#e/8"},{"type":"function","doc":"Returns a value if it is not empty, or a fallback value if it is empty.\n\nThis function delegates to `Bonfire.Common.Enums.filter_empty/2` to determine if `val` is empty and returns `fallback` if so.","title":"Bonfire.Common.E.ed/2","ref":"Bonfire.Common.E.html#ed/2"},{"type":"function","doc":"iex> ed(\"non-empty value\", \"fallback\")\n    \"non-empty value\"\n\n    iex> ed(\"\", \"fallback\")\n    \"fallback\"\n\n    iex> ed(nil, \"fallback\")\n    \"fallback\"","title":"Examples - Bonfire.Common.E.ed/2","ref":"Bonfire.Common.E.html#ed/2-examples"},{"type":"function","doc":"Extracts a value from a map or other data structure, or returns a fallback if not present or empty.\nIf additional arguments are provided, it searches for nested data structures, with the last argument always being the fallback.","title":"Bonfire.Common.E.ed/3","ref":"Bonfire.Common.E.html#ed/3"},{"type":"function","doc":"iex> ed(%{key: \"value\"}, :key, \"fallback\")\n    \"value\"\n\n    iex> ed(%{key: nil}, :key, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{key: \"value\"}, :missing_key, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{key: %Ecto.Association.NotLoaded{}}, :key, \"fallback\")\n    \"fallback\"\n\n    iex> ed({:ok, %{key: \"value\"}}, :key, \"fallback\")\n    \"value\"\n\n    iex> ed(%{__context__: %{key: \"context_value\"}}, :key, \"fallback\")\n    \"context_value\"\n\n    iex> ed(%{a: %{b: \"value\"}}, :a, :b, \"fallback\")\n    \"value\"\n\n    iex> ed(%{a: %{b: %Ecto.Association.NotLoaded{}}}, :a, :b, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{a: %{b: \"value\"}}, [:a, :b], \"fallback\")\n    \"value\"\n\n    iex> ed(%{a: %{b: nil}}, :a, :b, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{a: %{b: %{c: \"value\"}}}, :a, :b, :c, \"fallback\")\n    \"value\"\n\n    iex> ed(%{a: %{b: %{c: \"value\"}}}, :a, :b, :c, :d, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{a: %{b: %{c: %{d: \"value\"}}}}, :a, :b, :c, :d, \"fallback\")\n    \"value\"\n\n    iex> ed(%{a: %{b: %{c: %{d: \"value\"}}}}, :a, :b, :c, :d, :ed, \"fallback\")\n    \"fallback\"\n\n    iex> ed(%{a: %{b: %{c: %{d: %{e: \"value\"}}}}}, :a, :b, :c, :d, :e, \"fallback\")\n    \"value\"","title":"Examples - Bonfire.Common.E.ed/3","ref":"Bonfire.Common.E.html#ed/3-examples"},{"type":"function","doc":"Returns a value from a nested map, or a fallback if not present","title":"Bonfire.Common.E.ed/4","ref":"Bonfire.Common.E.html#ed/4"},{"type":"function","doc":"","title":"Bonfire.Common.E.ed/5","ref":"Bonfire.Common.E.html#ed/5"},{"type":"function","doc":"","title":"Bonfire.Common.E.ed/6","ref":"Bonfire.Common.E.html#ed/6"},{"type":"function","doc":"","title":"Bonfire.Common.E.ed/7","ref":"Bonfire.Common.E.html#ed/7"},{"type":"function","doc":"","title":"Bonfire.Common.E.ed/8","ref":"Bonfire.Common.E.html#ed/8"},{"type":"function","doc":"","title":"Bonfire.Common.E.pathex_fallback/3","ref":"Bonfire.Common.E.html#pathex_fallback/3"},{"type":"module","doc":"Extra functions to manipulate enumerables, basically an extension of `Enum`","title":"Bonfire.Common.Enums","ref":"Bonfire.Common.Enums.html"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.access_keys/2","ref":"Bonfire.Common.Enums.html#access_keys/2"},{"type":"function","doc":"Checks if all tuples in the enumerable are `:ok`.","title":"Bonfire.Common.Enums.all_ok?/1","ref":"Bonfire.Common.Enums.html#all_ok?/1"},{"type":"function","doc":"iex> Bonfire.Common.Enums.all_ok?([{:ok, 1}, {:ok, 2}])\n    true\n\n    iex> Bonfire.Common.Enums.all_ok?([{:ok, 1}, {:error, \"failed\"}])\n    false","title":"Examples - Bonfire.Common.Enums.all_ok?/1","ref":"Bonfire.Common.Enums.html#all_ok?/1-examples"},{"type":"function","doc":"Filters the given value or enumerable and if it contains any `:error` tuple, return an `:error` tuple with a list of error values, other return an `:ok` tuple with a list of values.","title":"Bonfire.Common.Enums.all_oks_or_error/1","ref":"Bonfire.Common.Enums.html#all_oks_or_error/1"},{"type":"function","doc":"iex> Bonfire.Common.Enums.all_oks_or_error([{:ok, 1}, {:error, \"failed\"}])\n    {:error, [\"failed\"]}\n\n    iex> Bonfire.Common.Enums.all_oks_or_error([{:ok, 2}, {:ok, 3}])\n    {:ok, [2, 3]}\n\n    iex> Bonfire.Common.Enums.all_oks_or_error({:error, \"failed\"})\n    {:error, [\"failed\"]}\n\n    iex> Bonfire.Common.Enums.all_oks_or_error({:ok, 1})\n    {:ok, [1]}","title":"Examples - Bonfire.Common.Enums.all_oks_or_error/1","ref":"Bonfire.Common.Enums.html#all_oks_or_error/1-examples"},{"type":"function","doc":"Gets the value of a key in a map and returns the ID of that value (i.e. either the :id field of that association, or the value itself).","title":"Bonfire.Common.Enums.attr_get_id/2","ref":"Bonfire.Common.Enums.html#attr_get_id/2"},{"type":"function","doc":"Counts the number of items in an enumerable that satisfy the given function.","title":"Bonfire.Common.Enums.count_where/2","ref":"Bonfire.Common.Enums.html#count_where/2"},{"type":"function","doc":"iex> Bonfire.Common.Enums.count_where([1, 2, 3, 4, 5], fn x -> rem(x, 2) == 0 end)\n    2\n\n    iex> Bonfire.Common.Enums.count_where([:ok, :error, :ok], &(&1 == :ok))\n    2","title":"Examples - Bonfire.Common.Enums.count_where/2","ref":"Bonfire.Common.Enums.html#count_where/2-examples"},{"type":"function","doc":"Recursively merges two data structures (`left` and `right`), which can be structs, maps or lists.\nIf `left` and `right` are `Ecto.Changeset`s, `merge_changesets/2` is called on them.\nIf `left` is a struct, a similar struct is returned with the merged values.\nIf `left` and `right` are lists, they are concatenated unless `:replace_lists` option is set to `true`.","title":"Bonfire.Common.Enums.deep_merge/3","ref":"Bonfire.Common.Enums.html#deep_merge/3"},{"type":"function","doc":"Deep merges a list of maps into a single map.","title":"Bonfire.Common.Enums.deep_merge_reduce/2","ref":"Bonfire.Common.Enums.html#deep_merge_reduce/2"},{"type":"function","doc":"Attempt getting a value out of a map by atom key, or try with string key, or return a fallback","title":"Bonfire.Common.Enums.enum_get/3","ref":"Bonfire.Common.Enums.html#enum_get/3"},{"type":"function","doc":"Takes a value and a fallback value. If the value is empty (e.g. an empty map, a non-loaded association, an empty list, an empty string, or nil), the fallback value is returned.","title":"Bonfire.Common.Enums.filter_empty/2","ref":"Bonfire.Common.Enums.html#filter_empty/2"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.filter_empty/3","ref":"Bonfire.Common.Enums.html#filter_empty/3"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.first!/1","ref":"Bonfire.Common.Enums.html#first!/1"},{"type":"function","doc":"Takes a list and recursively flattens it by recursively flattening the head and tail of the list","title":"Bonfire.Common.Enums.flatter/1","ref":"Bonfire.Common.Enums.html#flatter/1"},{"type":"function","doc":"Applies a function from one of Elixir's `Map`, `Keyword`, `List`, `Tuple` modules depending on the type of the given enumerable, or using a function in `Enum` if no specific one is defined.","title":"Bonfire.Common.Enums.fun/3","ref":"Bonfire.Common.Enums.html#fun/3"},{"type":"function","doc":"> Bonfire.Common.Enums.fun(%{a: 1, b: 2}, :values)\n    # runs `Map.values/1`\n    [2, 1]\n\n    iex> Bonfire.Common.Enums.fun([a: 1, b: 2], :values)\n    # runs `Keyword.values/1`\n    [1, 2]\n\n    iex> Bonfire.Common.Enums.fun([1, 2, 3], :first)\n    # runs `List.first/1`\n    1\n\n    iex> Bonfire.Common.Enums.fun({1, 2}, :sum)\n    # runs `Tuple.sum/1`\n    3\n\n    iex> Bonfire.Common.Enums.fun({1, 2}, :last)\n    # runs `List.last/1` after converting the tuple to a list\n    2\n    \n    iex> Bonfire.Common.Enums.fun([1, 2, 3], :sum)\n    # runs `Enum.sum/1` because there's no `List.sum/1`\n    6","title":"Examples - Bonfire.Common.Enums.fun/3","ref":"Bonfire.Common.Enums.html#fun/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.get_in_access_keys/3","ref":"Bonfire.Common.Enums.html#get_in_access_keys/3"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.get_in_access_keys!/3","ref":"Bonfire.Common.Enums.html#get_in_access_keys!/3"},{"type":"function","doc":"Like `Enum.group_by/3`, except children are required to be unique (will throw otherwise!) and the resulting map does not wrap each item in a list.","title":"Bonfire.Common.Enums.group/2","ref":"Bonfire.Common.Enums.html#group/2"},{"type":"function","doc":"iex> Bonfire.Common.Enums.group([1, 2, 3], fn x -> x end)\n    %{1 => 1, 2 => 2, 3 => 3}\n\n    > Bonfire.Common.Enums.group([:a, :b, :b, :c], fn x -> x end)\n    ** (throw) \"Expected a unique value\"","title":"Examples - Bonfire.Common.Enums.group/2","ref":"Bonfire.Common.Enums.html#group/2-examples"},{"type":"function","doc":"Groups an enumerable by a function that returns key-value pairs, ensuring that keys are unique.","title":"Bonfire.Common.Enums.group_map/2","ref":"Bonfire.Common.Enums.html#group_map/2"},{"type":"function","doc":"iex> Bonfire.Common.Enums.group_map([:a, :b, :c], fn x -> {x, to_string(x)} end)\n    %{a: \"a\", b: \"b\", c: \"c\"}\n\n    > Bonfire.Common.Enums.group_map([1, 2, 2, 3], fn x -> {x, x * 2} end)\n    ** (throw) \"Expected a unique value\"","title":"Examples - Bonfire.Common.Enums.group_map/2","ref":"Bonfire.Common.Enums.html#group_map/2-examples"},{"type":"function","doc":"Checks if the given list contains any duplicates. Takes an optional function that can be used to extract and/or compute the value to compare for each element in the list.","title":"Bonfire.Common.Enums.has_duplicates?/2","ref":"Bonfire.Common.Enums.html#has_duplicates?/2"},{"type":"function","doc":"Checks if there are any `:error` tuples in the enumerable.","title":"Bonfire.Common.Enums.has_error?/1","ref":"Bonfire.Common.Enums.html#has_error?/1"},{"type":"function","doc":"iex> Bonfire.Common.Enums.has_error?([{:ok, 1}, {:error, \"failed\"}])\n    true\n\n    iex> Bonfire.Common.Enums.has_error?([{:ok, 1}])\n    false","title":"Examples - Bonfire.Common.Enums.has_error?/1","ref":"Bonfire.Common.Enums.html#has_error?/1-examples"},{"type":"function","doc":"Checks if there are any `:ok` tuples in the enumerable.","title":"Bonfire.Common.Enums.has_ok?/1","ref":"Bonfire.Common.Enums.html#has_ok?/1"},{"type":"function","doc":"iex> Bonfire.Common.Enums.has_ok?([{:ok, 1}, {:error, \"failed\"}])\n    true\n\n    iex> Bonfire.Common.Enums.has_ok?([{:error, \"failed\"}])\n    false","title":"Examples - Bonfire.Common.Enums.has_ok?/1","ref":"Bonfire.Common.Enums.html#has_ok?/1-examples"},{"type":"function","doc":"Checks if there are any tuples with the given key in the enumerable.","title":"Bonfire.Common.Enums.has_tuple_key?/2","ref":"Bonfire.Common.Enums.html#has_tuple_key?/2"},{"type":"function","doc":"iex> Bonfire.Common.Enums.has_tuple_key?([{:ok, 1}, {:error, \"failed\"}], :ok)\n    true\n\n    iex> Bonfire.Common.Enums.has_tuple_key?([{:ok, 1}], :error)\n    false","title":"Examples - Bonfire.Common.Enums.has_tuple_key?/2","ref":"Bonfire.Common.Enums.html#has_tuple_key?/2-examples"},{"type":"function","doc":"Extracts a binary ID from various data structures, such as a map containing the key :id or \"id\", a changeset, or a tuple containing the atom :id.","title":"Bonfire.Common.Enums.id/1","ref":"Bonfire.Common.Enums.html#id/1"},{"type":"function","doc":"Extracts the IDs from a list of maps, changesets, or other data structures and returns a list of these IDs.\n\n      iex> ids([%{id: 1, name: \"Alice\"}, %{id: 2, name: \"Bob\"}])\n      [1, 2]\n\n      iex> ids(%{id: 3})\n      [3]","title":"Bonfire.Common.Enums.ids/1","ref":"Bonfire.Common.Enums.html#ids/1"},{"type":"function","doc":"Takes a data structure and converts any keys in maps to (previously defined) atoms, recursively. By default any unknown string keys will be discarded. It can optionally also convert string values to known atoms as well.","title":"Bonfire.Common.Enums.input_to_atoms/2","ref":"Bonfire.Common.Enums.html#input_to_atoms/2"},{"type":"function","doc":"Converts input to value based on the provided options.","title":"Bonfire.Common.Enums.input_to_value/7","ref":"Bonfire.Common.Enums.html#input_to_value/7"},{"type":"function","doc":"iex> input_to_value(\"42\", false, true, nil, true, nil, true)\n    42\n\n    iex> input_to_value(\"Bonfire.Common\", false, true, nil, true, nil, false)\n    Bonfire.Common\n\n    iex> input_to_value(\"bonfire_common\", false, true, nil, true, nil, false)\n    :bonfire_common\n\n    iex> input_to_value(\"unknown_example_string\", false, true, nil, true, nil, false)\n    \"unknown_example_string\"","title":"Examples - Bonfire.Common.Enums.input_to_value/7","ref":"Bonfire.Common.Enums.html#input_to_value/7-examples"},{"type":"function","doc":"Recursively filters nil values from a map","title":"Bonfire.Common.Enums.map_filter_empty/1","ref":"Bonfire.Common.Enums.html#map_filter_empty/1"},{"type":"function","doc":"Renames a key in a map. Optionally changes the value as well.","title":"Bonfire.Common.Enums.map_key_replace/4","ref":"Bonfire.Common.Enums.html#map_key_replace/4"},{"type":"function","doc":"Renames a key in a `map`, only if the key exists in the `map`. Optionally changes the value as well.","title":"Bonfire.Common.Enums.map_key_replace_existing/4","ref":"Bonfire.Common.Enums.html#map_key_replace_existing/4"},{"type":"function","doc":"Takes an enumerable object and converts it to a map. If it is not an enumerable, a map is created with the data under a fallback key (`:data` by default).","title":"Bonfire.Common.Enums.map_new/2","ref":"Bonfire.Common.Enums.html#map_new/2"},{"type":"function","doc":"Checks a map for a value with provided key. If it already exists, the existing value is retained, but if not set or nil, then it is set to the provided default.","title":"Bonfire.Common.Enums.map_put_default/3","ref":"Bonfire.Common.Enums.html#map_put_default/3"},{"type":"function","doc":"Updates a nested map using a list of keys and a value to set. It returns a new map with the updated value at the specified location.","title":"Bonfire.Common.Enums.map_put_in/3","ref":"Bonfire.Common.Enums.html#map_put_in/3"},{"type":"function","doc":"iex> map_put_in(%{}, [:a, :b, :c], 3)\n    %{a: %{b: %{c: 3}}}","title":"Examples - Bonfire.Common.Enums.map_put_in/3","ref":"Bonfire.Common.Enums.html#map_put_in/3-examples"},{"type":"function","doc":"* `root` - The initial map (can be an empty map or a populated one).\n  * `keys` - A list of keys specifying the path to the value.\n  * `value` - The value to set at the specified location.","title":"Parameters - Bonfire.Common.Enums.map_put_in/3","ref":"Bonfire.Common.Enums.html#map_put_in/3-parameters"},{"type":"function","doc":"Appends a value to a list, but only if the value is not nil or an empty list.","title":"Bonfire.Common.Enums.maybe_append/2","ref":"Bonfire.Common.Enums.html#maybe_append/2"},{"type":"function","doc":"Takes any element, an index and a fallback value. If the element is a Tuple it returns either the tuple value at that index, otherwise it returns the fallback. If the tuple doesn't contain such an index, it raises `ArgumentError`.","title":"Bonfire.Common.Enums.maybe_elem/3","ref":"Bonfire.Common.Enums.html#maybe_elem/3"},{"type":"function","doc":"Flattens the list if provided a list, otherwise just return the input","title":"Bonfire.Common.Enums.maybe_flatten/1","ref":"Bonfire.Common.Enums.html#maybe_flatten/1"},{"type":"function","doc":"Attempts to retrieve a value from a map by its key, and otherwise returns the provided fallback value.","title":"Bonfire.Common.Enums.maybe_get/3","ref":"Bonfire.Common.Enums.html#maybe_get/3"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.maybe_list/2","ref":"Bonfire.Common.Enums.html#maybe_list/2"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.maybe_merge_to_struct/2","ref":"Bonfire.Common.Enums.html#maybe_merge_to_struct/2"},{"type":"function","doc":"Updates a `Map` or `Keyword` with the given `key` and `value`, but only if the `value` is not `nil`, an empty list or an empty string.","title":"Bonfire.Common.Enums.maybe_put/3","ref":"Bonfire.Common.Enums.html#maybe_put/3"},{"type":"function","doc":"Returns a keyword list representation of the input object. If the second argument is `true`, the function will recursively convert nested data structures to keyword lists as well.\nNote: make sure that all keys are atoms, i.e. using `input_to_atoms` first, otherwise the enumerable(s) containing a string key won't be converted.","title":"Bonfire.Common.Enums.maybe_to_keyword_list/3","ref":"Bonfire.Common.Enums.html#maybe_to_keyword_list/3"},{"type":"function","doc":"Returns a map representation of the input object. If the second argument is `true`, the function will recursively convert nested data structures to maps as well.","title":"Bonfire.Common.Enums.maybe_to_map/2","ref":"Bonfire.Common.Enums.html#maybe_to_map/2"},{"type":"function","doc":"Takes a data structure and tries to convert it to a struct, using the optional type provided or some hints in the data (eg. `__type` or `index_type` fields).\n\nNOTE: you may want to call `input_to_atoms/2` on the data first if it contains string keys instead of atoms.","title":"Bonfire.Common.Enums.maybe_to_struct/2","ref":"Bonfire.Common.Enums.html#maybe_to_struct/2"},{"type":"function","doc":"iex> # Convert map with `index_type` to struct (and leave nested map alone, hint: use `maybe_to_structs/1` to also process nested data)\n    iex> maybe_to_struct(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n\n    iex> # Map to a specific struct (ignores hints in data)\n    iex> maybe_to_struct(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\"\n    ...> }, Bonfire.Data.Identity.Character)\n    %Bonfire.Data.Identity.Character{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\"\n    }\n\n    iex> # Struct to a different struct\n    iex> maybe_to_struct(%Bonfire.Data.Identity.User{\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\"\n    ...> }, Bonfire.Data.Identity.Character)\n    %Bonfire.Data.Identity.Character{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\"\n    }","title":"Examples - Bonfire.Common.Enums.maybe_to_struct/2","ref":"Bonfire.Common.Enums.html#maybe_to_struct/2-examples"},{"type":"function","doc":"Takes a data structure and recursively converts any known keys to atoms and then tries to \nrecursively convert any maps to structs, using hints in the data (eg. `__type` or `index_type` fields) or related schemas (eg. mixins).\n\nNOTE: you may want to call `input_to_atoms/2` on the data first if it contains string keys instead of atoms.","title":"Bonfire.Common.Enums.maybe_to_structs/3","ref":"Bonfire.Common.Enums.html#maybe_to_structs/3"},{"type":"function","doc":"iex> # Nested maps with `index_type` or `__typename`\n    iex> maybe_to_structs(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     __typename: Bonfire.Data.Identity.Character,\n    ...>     id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n    iex> # Nested maps with `index_type` on top-level and nested mixin with no hint of type (gets inferred from the parent schema)\n    iex> maybe_to_structs(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n\n    iex> # Nested maps with `index_type` on top-level and nested mixin with no ID (gets inferred from the parent schema)\n    iex> maybe_to_structs(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     __typename: Bonfire.Data.Identity.Character,\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n\n    iex> # Nested maps with `index_type` on top-level and nested mixin with no hint of type or ID (both get inferred from the parent schema)\n    iex> maybe_to_structs(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n\n    iex> # Nested maps with type override for the top level \n    iex> maybe_to_structs(%{\n    ...>   index_type: \"Bonfire.Data.Identity.User\",\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     __typename: Bonfire.Data.Identity.Character,\n    ...>     id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>     username: \"test\"\n    ...>   }\n    ...> }, Needle.Pointer)\n    %Needle.Pointer{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }\n\n    iex> # Struct with nested map with `__typename`\n    iex> maybe_to_structs(%Bonfire.Data.Identity.User{\n    ...>   id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>   character: %{\n    ...>     __typename: Bonfire.Data.Identity.Character,\n    ...>     id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n    ...>     username: \"test\"\n    ...>   }\n    ...> })\n    %Bonfire.Data.Identity.User{\n      id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n      character: %Bonfire.Data.Identity.Character{\n        id: \"01JB4E8T1H928QC6E1MP1XDZD8\",\n        username: \"test\"\n      }\n    }","title":"Examples - Bonfire.Common.Enums.maybe_to_structs/3","ref":"Bonfire.Common.Enums.html#maybe_to_structs/3-examples"},{"type":"function","doc":"Merges two maps or lists into a single map","title":"Bonfire.Common.Enums.merge_as_map/3","ref":"Bonfire.Common.Enums.html#merge_as_map/3"},{"type":"function","doc":"Merges two `Ecto` changesets. If both changesets have a prepare field, the function concatenates the values of the prepare fields. Either way it also calls `Ecto.Changeset.merge/2` operation.","title":"Bonfire.Common.Enums.merge_changesets/2","ref":"Bonfire.Common.Enums.html#merge_changesets/2"},{"type":"function","doc":"Merges two maps while keeping only the keys that exist in the first map.","title":"Bonfire.Common.Enums.merge_keeping_only_first_keys/2","ref":"Bonfire.Common.Enums.html#merge_keeping_only_first_keys/2"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.merge_structs_as_map/2","ref":"Bonfire.Common.Enums.html#merge_structs_as_map/2"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.merge_to_struct/3","ref":"Bonfire.Common.Enums.html#merge_to_struct/3"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.merge_uniq/2","ref":"Bonfire.Common.Enums.html#merge_uniq/2"},{"type":"function","doc":"","title":"Bonfire.Common.Enums.naughty_to_atoms!/2","ref":"Bonfire.Common.Enums.html#naughty_to_atoms!/2"},{"type":"function","doc":"Recursively converts all nested structs to maps.","title":"Bonfire.Common.Enums.nested_structs_to_maps/1","ref":"Bonfire.Common.Enums.html#nested_structs_to_maps/1"},{"type":"function","doc":"This function is used to insert a new value into a nested map data structure, where the path to the location of the value is specified as a list of keys.\n\nWhen the path is a single-element list, if the key already exists in the map, it returns the original map; otherwise, it inserts the key-value pair.\n\nWhen the path is a list of more than one key, the first element of the list (key) represents the key for the current level of the nested map, and the remaining elements (path) represent the keys for the nested map at the next level. The function starts by retrieving the value at the current level of the map (if it exists) and updates the map with the new value.","title":"Bonfire.Common.Enums.put_new_in/3","ref":"Bonfire.Common.Enums.html#put_new_in/3"},{"type":"function","doc":"Infer the struct or schema type from a map","title":"Bonfire.Common.Enums.schema_type/1","ref":"Bonfire.Common.Enums.html#schema_type/1"},{"type":"function","doc":"Takes a map or keyword list, and returns a map with any atom keys converted to string keys. It can optionally do so recursively.","title":"Bonfire.Common.Enums.stringify_keys/2","ref":"Bonfire.Common.Enums.html#stringify_keys/2"},{"type":"function","doc":"If given a struct, returns a map representation of it","title":"Bonfire.Common.Enums.struct_to_map/2","ref":"Bonfire.Common.Enums.html#struct_to_map/2"},{"type":"function","doc":"Takes a list of maps that have an id field and returns a list with only the unique maps. Uniqueness is determined based on the id field and not the full contents of the maps.","title":"Bonfire.Common.Enums.uniq_by_id/1","ref":"Bonfire.Common.Enums.html#uniq_by_id/1"},{"type":"function","doc":"Unwraps tuples from a list of responses based on the specified key.","title":"Bonfire.Common.Enums.unwrap_tuples/2","ref":"Bonfire.Common.Enums.html#unwrap_tuples/2"},{"type":"function","doc":"iex> Bonfire.Common.Enums.unwrap_tuples([{:ok, 1}, {:error, \"failed\"}, {:ok, 2}], :ok)\n    [1, 2]\n\n    iex> Bonfire.Common.Enums.unwrap_tuples([{:ok, 1}, {:error, \"failed\"}], :error)\n    [\"failed\"]","title":"Examples - Bonfire.Common.Enums.unwrap_tuples/2","ref":"Bonfire.Common.Enums.html#unwrap_tuples/2-examples"},{"type":"module","doc":"A Want type that reads environment variables and returns them as keyword lists or map(s).","title":"Bonfire.Common.EnvConfig","ref":"Bonfire.Common.EnvConfig.html"},{"type":"module","doc":"- Collects environment variables with a specified prefix.\n  - Allows key transformation via `:transform_keys`.\n  - Supports type casting via `:want_values` using the `Want` library.\n  - Supports both single (e.g. `MYAPP_DB_HOST`) and a list of configuration groups (e.g. `MYAPP_DB_1_HOST`, `MYAPP_DB_2_HOST`, etc).\n  - Returns keyword lists if all keys are atoms, otherwise returns maps.","title":"Features - Bonfire.Common.EnvConfig","ref":"Bonfire.Common.EnvConfig.html#module-features"},{"type":"function","doc":"Casts environment variables into keyword list(s) or map(s).","title":"Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2"},{"type":"function","doc":"- `prefix` (required): Prefix for environment variable matching.\n  - `transform_keys` (optional): Function to transform keys (e.g., `&String.to_existing_atom/1`).\n  - `want_values` (optional): Map of key type casts with optional defaults.\n  - `want_unknown_keys` (optional): Whether to also include unknown keys when using `want_values`.\n  - `indexed_list` (optional): Looks for an indexed list of env vars. Default: `false`.\n  - `max_index` (optional): Maximum index for indexed configs. Default: `1000`.\n  - `max_empty_streak` (optional): Stops after this many consecutive missing indices. Default: `10`.","title":"Options - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-options"},{"type":"function","doc":"","title":"Examples - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-examples"},{"type":"function","doc":"iex> System.put_env(\"TESTA_DB_HOST\", \"localhost\")\n    iex> EnvConfig.cast(System.get_env(), prefix: \"TESTA_DB\") \n    {:ok, %{\"host\"=> \"localhost\"}}\n    # iex> Want.cast(System.get_env(), EnvConfig, prefix: \"TESTA_DB\") # FIXME: Want doesn't currently have a way to cast with a custom type at the top-level, only for data within a map or keyword list\n    # {:ok, %{\"host\"=> \"localhost\"}}","title":"Basic usage (usage as a `Want` custom type) - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-basic-usage-usage-as-a-want-custom-type"},{"type":"function","doc":"iex> System.put_env(\"TESTA_DB_HOST\", \"localhost\")\n    iex> EnvConfig.parse(System.get_env(), prefix: \"TESTA_DB\") \n    %{\"host\"=> \"localhost\"}","title":"Basic usage with prefix only (direct usage) - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-basic-usage-with-prefix-only-direct-usage"},{"type":"function","doc":"iex> System.put_env(\"TESTA_DB_HOST\", \"localhost\")\n    iex> EnvConfig.parse(prefix: \"TESTA_DB\") \n    %{\"host\"=> \"localhost\"}","title":"Basic usage with prefix only (direct usage, uses env from `System.get_env()` by default) - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-basic-usage-with-prefix-only-direct-usage-uses-env-from-system-get_env-by-default"},{"type":"function","doc":"iex> System.put_env(\"TESTB_DB_HOST\", \"localhost\")\n    iex> System.put_env(\"TESTB_DB_PORT\", \"5432\")\n    iex> EnvConfig.parse(\n    ...>   prefix: \"TESTB_DB\",\n    ...>   transform_keys: &String.to_existing_atom/1,\n    ...> ) \n    ...> |> Enum.sort() # just to make the test assertion easier\n    [host: \"localhost\", port: \"5432\"]","title":"With key transformation - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-with-key-transformation"},{"type":"function","doc":"iex> System.put_env(\"TESTC_DB_PORT\", \"5432\")\n    iex> System.put_env(\"TESTC_DB_MAX_CONNECTIONS\", \"100\")\n    iex> System.put_env(\"TESTC_DB_SSL\", \"true\")\n    iex> EnvConfig.parse(\n    ...>   prefix: \"TESTC_DB\",\n    ...>   want_values: %{\n    ...>     port: :integer,\n    ...>     max_connections: {:integer, default: 3},\n    ...>     ssl: :boolean\n    ...>   }\n    ...> ) \n    ...> |> Enum.sort() # just to make the test assertion easier\n    [max_connections: 100, port: 5432, ssl: true]","title":"With type casting for specific keys - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-with-type-casting-for-specific-keys"},{"type":"function","doc":"iex> System.put_env(\"TESTU_DB_PORT\", \"5432\")\n    iex> System.put_env(\"TESTU_DB_MAX_CONNECTIONS\", \"100\")\n    iex> %{\"max_connections\"=> \"100\", port: 5432} = EnvConfig.parse(\n    ...>   prefix: \"TESTU_DB\",\n    ...>   want_unknown_keys: true,\n    ...>   want_values: %{\n    ...>     port: :integer\n    ...>   }\n    ...> )","title":"With type casting for only some keys, including unknown keys as well (returns a map with mixed keys) - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-with-type-casting-for-only-some-keys-including-unknown-keys-as-well-returns-a-map-with-mixed-keys"},{"type":"function","doc":"iex> System.put_env(\"TESTD_DB_HOST_\", \"localhost\")\n    iex> EnvConfig.parse(\n    ...>   prefix: \"TESTD_DB\",\n    ...>   transform_keys: &String.trim(&1, \"_\"),\n    ...>   want_values: %{\n    ...>     host: :string\n    ...>   }\n    ...> )\n    [host: \"localhost\"]","title":"With both transformation and type casting - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-with-both-transformation-and-type-casting"},{"type":"function","doc":"iex> System.put_env(\"TESTE_DB_0_HOST\", \"localhost\")\n    iex> System.put_env(\"TESTE_DB_1_HOST\", \"remote\")\n    iex> EnvConfig.parse(\n    ...>   prefix: \"TESTE_DB\",\n    ...>   want_values: %{\n    ...>     host: :string\n    ...>   },\n    ...>   indexed_list: true\n    ...> )\n    [[host: \"localhost\"], [host: \"remote\"]]","title":"Indexed list of configs - Bonfire.Common.EnvConfig.cast/2","ref":"Bonfire.Common.EnvConfig.html#cast/2-indexed-list-of-configs"},{"type":"function","doc":"","title":"Bonfire.Common.EnvConfig.maybe_want/3","ref":"Bonfire.Common.EnvConfig.html#maybe_want/3"},{"type":"function","doc":"","title":"Bonfire.Common.EnvConfig.parse/2","ref":"Bonfire.Common.EnvConfig.html#parse/2"},{"type":"module","doc":"Helpers for handling error messages and exceptions","title":"Bonfire.Common.Errors","ref":"Bonfire.Common.Errors.html"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.debug_banner_with_trace/4","ref":"Bonfire.Common.Errors.html#debug_banner_with_trace/4"},{"type":"function","doc":"Logs a debug message with exception and stacktrace information.","title":"Bonfire.Common.Errors.debug_exception/5","ref":"Bonfire.Common.Errors.html#debug_exception/5"},{"type":"function","doc":"iex> debug_exception(\"An error occurred\", %RuntimeError{message: \"error\"}, nil, :error, [])\n    # Output: An error occurred: %RuntimeError{message: \"error\"}\n    {:error, \"An error occurred\"}","title":"Examples - Bonfire.Common.Errors.debug_exception/5","ref":"Bonfire.Common.Errors.html#debug_exception/5-examples"},{"type":"function","doc":"Logs a debug message with optional exception and stacktrace information.","title":"Bonfire.Common.Errors.debug_log/5","ref":"Bonfire.Common.Errors.html#debug_log/5"},{"type":"function","doc":"> debug_log(\"A debug message\", %RuntimeError{message: \"error\"}, nil, :error)\n    # Output: A debug message: %RuntimeError{message: \"error\"}\n\n    > debug_log(\"A debug message\", nil, nil, :info)\n    # Output: A debug message: nil","title":"Examples - Bonfire.Common.Errors.debug_log/5","ref":"Bonfire.Common.Errors.html#debug_log/5-examples"},{"type":"function","doc":"Turns various kinds of errors into an error message string. Used to format errors in a way that can be easily read by the user.","title":"Bonfire.Common.Errors.error_msg/1","ref":"Bonfire.Common.Errors.html#error_msg/1"},{"type":"function","doc":"iex> error_msg([{:error, \"something went wrong\"}])\n    [\"something went wrong\"]\n\n    iex> error_msg(%{message: \"custom error\"})\n    \"custom error\"\n\n    iex> error_msg(:some_other_error)\n    \":some_other_error\"","title":"Examples - Bonfire.Common.Errors.error_msg/1","ref":"Bonfire.Common.Errors.html#error_msg/1-examples"},{"type":"function","doc":"Normalizes and formats any throw/error/exit. The message is formatted and displayed in the same format as used by Elixir's CLI.\n\nThe third argument is the stacktrace which is used to enrich a normalized error with more information. It is only used when the kind is an error.","title":"Bonfire.Common.Errors.format_banner/4","ref":"Bonfire.Common.Errors.html#format_banner/4"},{"type":"function","doc":"iex> format_banner(:error, %RuntimeError{message: \"error\"})\n    \"** Elixir.RuntimeError: error\"\n\n    iex> format_banner(:throw, :some_reason)\n    \"** (throw) :some_reason\"\n\n    iex> format_banner(:exit, :some_reason)\n    \"** (exit) :some_reason\"\n\n    > format_banner({:EXIT, self()}, :some_reason)\n    \"** (EXIT from #PID<0.780.0>) :some_reason\"","title":"Examples - Bonfire.Common.Errors.format_banner/4","ref":"Bonfire.Common.Errors.html#format_banner/4-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.format_location/1","ref":"Bonfire.Common.Errors.html#format_location/1"},{"type":"function","doc":"Receives a module, function, and arity and formats it as shown in stacktraces. The arity may also be a list of arguments.\n\nAnonymous functions are reported as -func/arity-anonfn-count-, where func is the name of the enclosing function. Convert to \"anonymous fn in func/arity\"","title":"Bonfire.Common.Errors.format_mfa/3","ref":"Bonfire.Common.Errors.html#format_mfa/3"},{"type":"function","doc":"iex> format_mfa(Foo, :bar, 1)\n    {\"Foo\", \"bar\", \"Foo.bar/1\"}\n\n    iex> format_mfa(Foo, :bar, [])\n    {\"Foo\", \"bar\", \"Foo.bar()\"}\n\n    iex> Exception.format_mfa(nil, :bar, [])\n    \"nil.bar()\"","title":"Examples - Bonfire.Common.Errors.format_mfa/3","ref":"Bonfire.Common.Errors.html#format_mfa/3-examples"},{"type":"function","doc":"Formats the stacktrace. A stacktrace must be given as an argument. If not, the stacktrace is retrieved from `Process.info/2`.\n\n# TODO: consolidate/reuse with similar function in `Untangle`?","title":"Bonfire.Common.Errors.format_stacktrace/2","ref":"Bonfire.Common.Errors.html#format_stacktrace/2"},{"type":"function","doc":"> format_stacktrace([{MyModule, :my_fun, 1, [file: 'my_file.ex', line: 42]}], [])\n    \"my_file.ex:42: MyModule.my_fun/1\"\n\n    > format_stacktrace(nil, [])\n    \"stacktrace here...\"","title":"Examples - Bonfire.Common.Errors.format_stacktrace/2","ref":"Bonfire.Common.Errors.html#format_stacktrace/2-examples"},{"type":"function","doc":"Receives a stacktrace entry and formats it into a string.","title":"Bonfire.Common.Errors.format_stacktrace_entry/2","ref":"Bonfire.Common.Errors.html#format_stacktrace_entry/2"},{"type":"function","doc":"iex> format_stacktrace_entry({MyModule, :my_fun, 1, [file: 'my_file.ex', line: 42]}, [])\n    \"my_file.ex:42: MyModule.my_fun/1\"\n\n    > format_stacktrace_entry({fn -> :ok end, 0, [file: 'another_file.ex', line: 7]}, [])\n    \"another_file.ex:7: some_fun/2\"","title":"Examples - Bonfire.Common.Errors.format_stacktrace_entry/2","ref":"Bonfire.Common.Errors.html#format_stacktrace_entry/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.format_stacktrace_entry_sliced/2","ref":"Bonfire.Common.Errors.html#format_stacktrace_entry_sliced/2"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.last_stacktrace/0","ref":"Bonfire.Common.Errors.html#last_stacktrace/0"},{"type":"function","doc":"Maps an error tuple to a new value using the provided function.","title":"Bonfire.Common.Errors.map_error/2","ref":"Bonfire.Common.Errors.html#map_error/2"},{"type":"function","doc":"iex> map_error({:error, :some_error}, &(&1 |> to_string()))\n    \"some_error\"\n\n    iex> map_error(42, &(&1 * 2))\n    42","title":"Examples - Bonfire.Common.Errors.map_error/2","ref":"Bonfire.Common.Errors.html#map_error/2-examples"},{"type":"function","doc":"Applies `change_fn` if the first parameter is an `{:ok, val}` tuple, else returns the value.","title":"Bonfire.Common.Errors.maybe_ok_error/2","ref":"Bonfire.Common.Errors.html#maybe_ok_error/2"},{"type":"function","doc":"iex> maybe_ok_error({:ok, 42}, &(&1 * 2))\n    {:ok, 84}\n\n    iex> maybe_ok_error({:error, :some_error}, &(&1 * 2))\n    {:error, :some_error}\n\n    iex> maybe_ok_error(42, &(&1 * 2))\n    42","title":"Examples - Bonfire.Common.Errors.maybe_ok_error/2","ref":"Bonfire.Common.Errors.html#maybe_ok_error/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.mf_maybe_link_to_code/4","ref":"Bonfire.Common.Errors.html#mf_maybe_link_to_code/4"},{"type":"function","doc":"","title":"Bonfire.Common.Errors.module_maybe_link_to_code/3","ref":"Bonfire.Common.Errors.html#module_maybe_link_to_code/3"},{"type":"function","doc":"Replaces the error value in an error tuple with a new value.","title":"Bonfire.Common.Errors.replace_error/2","ref":"Bonfire.Common.Errors.html#replace_error/2"},{"type":"function","doc":"iex> replace_error({:error, :old_value}, :new_value)\n    {:error, :new_value}\n\n    iex> replace_error(42, :new_value)\n    42","title":"Examples - Bonfire.Common.Errors.replace_error/2","ref":"Bonfire.Common.Errors.html#replace_error/2-examples"},{"type":"module","doc":"Helpers for using and managing the extensibility of Bonfire, such as checking if a module or extension is enabled or hot-swapped, or loading code or docs. See also `Bonfire.Common.Extensions`.","title":"Bonfire.Common.Extend","ref":"Bonfire.Common.Extend.html"},{"type":"function","doc":"Retrieves the OTP application associated with a given module.","title":"Bonfire.Common.Extend.application_for_module/1","ref":"Bonfire.Common.Extend.html#application_for_module/1"},{"type":"function","doc":"iex> application_for_module(Bonfire.Common)\n    :bonfire_common\n\n    iex> application_for_module(SomeUnknownModule)\n    nil","title":"Examples - Bonfire.Common.Extend.application_for_module/1","ref":"Bonfire.Common.Extend.html#application_for_module/1-examples"},{"type":"function","doc":"Retrieves the beam file path from the object code of a module.","title":"Bonfire.Common.Extend.beam_file_from_object_code/1","ref":"Bonfire.Common.Extend.html#beam_file_from_object_code/1"},{"type":"function","doc":"> beam_file_from_object_code(Bonfire.Common)\n    \"/path/ebin/Elixir.Bonfire.Common.beam\"","title":"Examples - Bonfire.Common.Extend.beam_file_from_object_code/1","ref":"Bonfire.Common.Extend.html#beam_file_from_object_code/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.deps_tree/0","ref":"Bonfire.Common.Extend.html#deps_tree/0"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.deps_tree_flat/1","ref":"Bonfire.Common.Extend.html#deps_tree_flat/1"},{"type":"function","doc":"Checks if a value indicates that a module or extension is disabled.","title":"Bonfire.Common.Extend.disabled_value?/1","ref":"Bonfire.Common.Extend.html#disabled_value?/1"},{"type":"function","doc":"iex> disabled_value?(:disabled)\n    true\n\n    iex> disabled_value?(false)\n    false\n\n    iex> disabled_value?(disabled: true)\n    true","title":"Examples - Bonfire.Common.Extend.disabled_value?/1","ref":"Bonfire.Common.Extend.html#disabled_value?/1-examples"},{"type":"macro","doc":"Extend a module by defining `defdelegate` and `defoverridable` for all functions from the source module in the current module.","title":"Bonfire.Common.Extend.extend_module/1","ref":"Bonfire.Common.Extend.html#extend_module/1"},{"type":"macro","doc":"> import Bonfire.Common.Extend\n    > extend_module Common.Text","title":"Examples - Bonfire.Common.Extend.extend_module/1","ref":"Bonfire.Common.Extend.html#extend_module/1-examples"},{"type":"function","doc":"Checks if an Elixir module or extension/OTP app is present and not disabled.\n\nFor modules, checks also that the extension/OTP app it belongs is not disabled.","title":"Bonfire.Common.Extend.extension_enabled?/2","ref":"Bonfire.Common.Extend.html#extension_enabled?/2"},{"type":"function","doc":"iex> extension_enabled?(Bonfire.Common)\n    true\n\n    iex> extension_enabled?(:bonfire_common)\n    true\n\n    iex> extension_enabled?(SomeOtherModule)\n    false\n\n    iex> extension_enabled?(:non_existent_extension)\n    false","title":"Examples - Bonfire.Common.Extend.extension_enabled?/2","ref":"Bonfire.Common.Extend.html#extension_enabled?/2-examples"},{"type":"function","doc":"Whether an Elixir module or extension / OTP app is present","title":"Bonfire.Common.Extend.extension_loaded?/1","ref":"Bonfire.Common.Extend.html#extension_loaded?/1"},{"type":"function","doc":"Fetches the `@moduledoc` of a module as a markdown string.","title":"Bonfire.Common.Extend.fetch_docs_as_markdown/1","ref":"Bonfire.Common.Extend.html#fetch_docs_as_markdown/1"},{"type":"function","doc":"> fetch_docs_as_markdown(SomeModule)\n    \"This is the moduledoc for SomeModule\"","title":"Examples - Bonfire.Common.Extend.fetch_docs_as_markdown/1","ref":"Bonfire.Common.Extend.html#fetch_docs_as_markdown/1-examples"},{"type":"function","doc":"Fetches `module`.`function`'s @doc as a markdown string","title":"Bonfire.Common.Extend.fetch_docs_as_markdown/2","ref":"Bonfire.Common.Extend.html#fetch_docs_as_markdown/2"},{"type":"function","doc":"Retrieves the content of a code file.","title":"Bonfire.Common.Extend.file_code/1","ref":"Bonfire.Common.Extend.html#file_code/1"},{"type":"function","doc":"> file_code(\"mix.ex\")\n    \"defmodule ... end\"","title":"Examples - Bonfire.Common.Extend.file_code/1","ref":"Bonfire.Common.Extend.html#file_code/1-examples"},{"type":"function","doc":"Retrieves the AST of a specific function from a module.","title":"Bonfire.Common.Extend.function_ast/3","ref":"Bonfire.Common.Extend.html#function_ast/3"},{"type":"function","doc":"> function_ast(Bonfire.Common, :some_function)\n    [{:def, [...], [...]}, ...]","title":"Examples - Bonfire.Common.Extend.function_ast/3","ref":"Bonfire.Common.Extend.html#function_ast/3-examples"},{"type":"function","doc":"Retrieves the code of a specific function from a module.","title":"Bonfire.Common.Extend.function_code/3","ref":"Bonfire.Common.Extend.html#function_code/3"},{"type":"function","doc":"> function_code(Bonfire.Common, :some_function)\n    \"def some_function do ... end\"","title":"Examples - Bonfire.Common.Extend.function_code/3","ref":"Bonfire.Common.Extend.html#function_code/3-examples"},{"type":"function","doc":"Returns the line number of the first line where a function is defined in a module.","title":"Bonfire.Common.Extend.function_line_number/3","ref":"Bonfire.Common.Extend.html#function_line_number/3"},{"type":"function","doc":"> function_line_number(Bonfire.Common, :some_function)\n    10","title":"Examples - Bonfire.Common.Extend.function_line_number/3","ref":"Bonfire.Common.Extend.html#function_line_number/3-examples"},{"type":"function","doc":"Return the numbers (as a tuple) of the first and last lines of a function's definition in a module","title":"Bonfire.Common.Extend.function_line_numbers/3","ref":"Bonfire.Common.Extend.html#function_line_numbers/3"},{"type":"function","doc":"> function_line_numbers(Bonfire.Common, :some_function)\n    {10, 20}","title":"Examples - Bonfire.Common.Extend.function_line_numbers/3","ref":"Bonfire.Common.Extend.html#function_line_numbers/3-examples"},{"type":"function","doc":"Generates an updated reverse router based on enabled/disabled extensions.","title":"Bonfire.Common.Extend.generate_reverse_router!/0","ref":"Bonfire.Common.Extend.html#generate_reverse_router!/0"},{"type":"function","doc":"> generate_reverse_router!()\n    :ok","title":"Examples - Bonfire.Common.Extend.generate_reverse_router!/0","ref":"Bonfire.Common.Extend.html#generate_reverse_router!/0-examples"},{"type":"function","doc":"Checks whether an Elixir module or extension / OTP app has any configuration available.","title":"Bonfire.Common.Extend.has_extension_config?/1","ref":"Bonfire.Common.Extend.html#has_extension_config?/1"},{"type":"macro","doc":"Conditionally imports a module if it's enabled, with an optional fallback.","title":"Bonfire.Common.Extend.import_if_enabled/3","ref":"Bonfire.Common.Extend.html#import_if_enabled/3"},{"type":"macro","doc":"defmodule MyModule do\n      import_if_enabled SomeExtension\n      # or\n      import_if_enabled SomeExtension, [], FallbackModule\n    end","title":"Examples - Bonfire.Common.Extend.import_if_enabled/3","ref":"Bonfire.Common.Extend.html#import_if_enabled/3-examples"},{"type":"function","doc":"Copies the code defining a function from its original module to a target module.\n\nThe target module can be specified, otherwise, the function will be injected into a default extension module.","title":"Bonfire.Common.Extend.inject_function/3","ref":"Bonfire.Common.Extend.html#inject_function/3"},{"type":"function","doc":"iex> inject_function(Common.TextExtended, :blank?)","title":"Examples - Bonfire.Common.Extend.inject_function/3","ref":"Bonfire.Common.Extend.html#inject_function/3-examples"},{"type":"function","doc":"Returns a map of loaded applications with their versions and descriptions.","title":"Bonfire.Common.Extend.loaded_applications_map/1","ref":"Bonfire.Common.Extend.html#loaded_applications_map/1"},{"type":"function","doc":"iex> %{bonfire_common: {_version, _description} } = loaded_applications_map()","title":"Examples - Bonfire.Common.Extend.loaded_applications_map/1","ref":"Bonfire.Common.Extend.html#loaded_applications_map/1-examples"},{"type":"function","doc":"Returns a map of loaded applications names as keys.","title":"Bonfire.Common.Extend.loaded_applications_names/1","ref":"Bonfire.Common.Extend.html#loaded_applications_names/1"},{"type":"function","doc":"iex> %{bonfire_common: _} = loaded_applications_names()","title":"Examples - Bonfire.Common.Extend.loaded_applications_names/1","ref":"Bonfire.Common.Extend.html#loaded_applications_names/1-examples"},{"type":"function","doc":"Inspects a macro by expanding it and converting it to a string.","title":"Bonfire.Common.Extend.macro_inspect/1","ref":"Bonfire.Common.Extend.html#macro_inspect/1"},{"type":"function","doc":"iex> macro_inspect(fn -> quote do: 1 + 1 end)\n    \"1 + 1\"","title":"Examples - Bonfire.Common.Extend.macro_inspect/1","ref":"Bonfire.Common.Extend.html#macro_inspect/1-examples"},{"type":"function","doc":"Returns the OTP app name for a module or extension.","title":"Bonfire.Common.Extend.maybe_extension_loaded/1","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded/1"},{"type":"function","doc":"iex> maybe_extension_loaded(Bonfire.Common)\n    :bonfire_common\n\n    iex> maybe_extension_loaded(:bonfire_common)\n    :bonfire_common\n\n    iex> maybe_extension_loaded(:non_existent_app)\n    :non_existent_app","title":"Examples - Bonfire.Common.Extend.maybe_extension_loaded/1","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded/1-examples"},{"type":"function","doc":"Returns the OTP app name for a module or extension if available, and nil otherwise.","title":"Bonfire.Common.Extend.maybe_extension_loaded!/1","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded!/1"},{"type":"function","doc":"iex> maybe_extension_loaded!(Bonfire.Common)\n    :bonfire_common\n\n    iex> maybe_extension_loaded!(:non_existent_app)\n    nil","title":"Examples - Bonfire.Common.Extend.maybe_extension_loaded!/1","ref":"Bonfire.Common.Extend.html#maybe_extension_loaded!/1-examples"},{"type":"function","doc":"Given an Elixir module, returns the module if available and not disabled, or its replacement if configured.\n\nChecks both that module and the extension / OTP app it belongs to are available *and* not disabled (eg. by configuring something like `config :bonfire_common, Bonfire.Common.Text, modularity: :disabled`)\n\nImportant note: you should make sure to use the returned module after calling this function, as it can be different from the one you intended to call, as this allows for swapping out modules in config or user settings (eg. by configuring something like `config :bonfire_common, Bonfire.Common.Text, modularity: MyCustomExtension.Text`)","title":"Bonfire.Common.Extend.maybe_module/2","ref":"Bonfire.Common.Extend.html#maybe_module/2"},{"type":"function","doc":"iex> maybe_module(Bonfire.Common)\n    Bonfire.Common\n\n    iex> Config.put(DisabledModule, modularity: :disabled)\n    iex> maybe_module(DisabledModule)\n    nil\n\n    iex> Config.put([Bonfire.Common.Text], modularity: Bonfire.Common.TextExtended)\n    iex> maybe_module(Bonfire.Common.Text)\n    Bonfire.Common.TextExtended\n    iex> Config.put([Bonfire.Common.Text], modularity: Bonfire.Common.Text)\n    iex> maybe_module(Bonfire.Common.Text)\n    Bonfire.Common.Text","title":"Examples - Bonfire.Common.Extend.maybe_module/2","ref":"Bonfire.Common.Extend.html#maybe_module/2-examples"},{"type":"function","doc":"Returns the module if it is present and not disabled; raises an error if the module is disabled and no replacement is configured.","title":"Bonfire.Common.Extend.maybe_module!/2","ref":"Bonfire.Common.Extend.html#maybe_module!/2"},{"type":"function","doc":"iex> maybe_module!(Bonfire.Common)\n    Bonfire.Common\n\n    iex> maybe_module!(SomeDisabledModule)\n    ** (RuntimeError) Module Elixir.SomeDisabledModule is disabled and no replacement was configured","title":"Examples - Bonfire.Common.Extend.maybe_module!/2","ref":"Bonfire.Common.Extend.html#maybe_module!/2-examples"},{"type":"function","doc":"Checks if a module exists and returns it, otherwise returns nil.","title":"Bonfire.Common.Extend.maybe_module_loaded/1","ref":"Bonfire.Common.Extend.html#maybe_module_loaded/1"},{"type":"function","doc":"iex> maybe_module_loaded(Bonfire.Common)\n    Bonfire.Common\n\n    iex> maybe_module_loaded(NonExistentModule)\n    nil","title":"Examples - Bonfire.Common.Extend.maybe_module_loaded/1","ref":"Bonfire.Common.Extend.html#maybe_module_loaded/1-examples"},{"type":"function","doc":"Returns the given schema module if it exists, otherwise returns `Needle.Pointer`.","title":"Bonfire.Common.Extend.maybe_schema_or_pointer/1","ref":"Bonfire.Common.Extend.html#maybe_schema_or_pointer/1"},{"type":"function","doc":"> maybe_schema_or_pointer(SomeSchema)\n    SomeSchema\n\n    iex> maybe_schema_or_pointer(NonExistentSchema)\n    Needle.Pointer","title":"Examples - Bonfire.Common.Extend.maybe_schema_or_pointer/1","ref":"Bonfire.Common.Extend.html#maybe_schema_or_pointer/1-examples"},{"type":"function","doc":"Normalizes the AST of a module for use.","title":"Bonfire.Common.Extend.module_ast_normalize/3","ref":"Bonfire.Common.Extend.html#module_ast_normalize/3"},{"type":"function","doc":"> module_ast_normalize(Bonfire.Common, ast)","title":"Examples - Bonfire.Common.Extend.module_ast_normalize/3","ref":"Bonfire.Common.Extend.html#module_ast_normalize/3-examples"},{"type":"function","doc":"Checks if an Elixir module exists and is loaded and that it (or the extension/OTP app it belongs to) is not disabled.","title":"Bonfire.Common.Extend.module_available?/1","ref":"Bonfire.Common.Extend.html#module_available?/1"},{"type":"function","doc":"iex> module_available?(Bonfire.Common)\n    true\n\n    iex> module_available?(SomeOtherModule)\n    false","title":"Examples - Bonfire.Common.Extend.module_available?/1","ref":"Bonfire.Common.Extend.html#module_available?/1-examples"},{"type":"function","doc":"Re-creates a module's code from compiled Beam artifacts.","title":"Bonfire.Common.Extend.module_beam_code/2","ref":"Bonfire.Common.Extend.html#module_beam_code/2"},{"type":"function","doc":"iex> {:ok, _} = module_beam_code(Bonfire.Common)","title":"Examples - Bonfire.Common.Extend.module_beam_code/2","ref":"Bonfire.Common.Extend.html#module_beam_code/2-examples"},{"type":"function","doc":"Checks if a module implements a specific behaviour.","title":"Bonfire.Common.Extend.module_behaviour?/2","ref":"Bonfire.Common.Extend.html#module_behaviour?/2"},{"type":"function","doc":"> module_behaviour?(MyModule, SomeBehaviour)\n    true","title":"Examples - Bonfire.Common.Extend.module_behaviour?/2","ref":"Bonfire.Common.Extend.html#module_behaviour?/2-examples"},{"type":"function","doc":"Returns a list of behaviours implemented by a module.","title":"Bonfire.Common.Extend.module_behaviours/1","ref":"Bonfire.Common.Extend.html#module_behaviours/1"},{"type":"function","doc":"> module_behaviours(MyModule)\n    [SomeBehaviour, AnotherBehaviour]","title":"Examples - Bonfire.Common.Extend.module_behaviours/1","ref":"Bonfire.Common.Extend.html#module_behaviours/1-examples"},{"type":"function","doc":"Retrieves the code of a module from the source.","title":"Bonfire.Common.Extend.module_code/2","ref":"Bonfire.Common.Extend.html#module_code/2"},{"type":"function","doc":"> module_code(Bonfire.Common)\n    \"defmodule Bonfire.Common do ... end\"","title":"Examples - Bonfire.Common.Extend.module_code/2","ref":"Bonfire.Common.Extend.html#module_code/2-examples"},{"type":"function","doc":"Retrieves the code of a module from its AST (Abstract Syntax Tree).","title":"Bonfire.Common.Extend.module_code_from_ast/3","ref":"Bonfire.Common.Extend.html#module_code_from_ast/3"},{"type":"function","doc":"> module_code_from_ast(Bonfire.Common, ast)\n    \"defmodule Bonfire.Common do ... end\"","title":"Examples - Bonfire.Common.Extend.module_code_from_ast/3","ref":"Bonfire.Common.Extend.html#module_code_from_ast/3-examples"},{"type":"function","doc":"Retrieves the code of a module from its object code.","title":"Bonfire.Common.Extend.module_code_from_object_code/1","ref":"Bonfire.Common.Extend.html#module_code_from_object_code/1"},{"type":"function","doc":"> module_code_from_object_code(Bonfire.Common)\n    \"defmodule Bonfire.Common do ... end\"","title":"Examples - Bonfire.Common.Extend.module_code_from_object_code/1","ref":"Bonfire.Common.Extend.html#module_code_from_object_code/1-examples"},{"type":"function","doc":"Checks if an Elixir module or the extension/OTP app it belongs to is available and not disabled.","title":"Bonfire.Common.Extend.module_enabled?/2","ref":"Bonfire.Common.Extend.html#module_enabled?/2"},{"type":"function","doc":"iex> module_enabled?(Bonfire.Common)\n    true\n\n    iex> module_enabled?(SomeDisabledModule)\n    false","title":"Examples - Bonfire.Common.Extend.module_enabled?/2","ref":"Bonfire.Common.Extend.html#module_enabled?/2-examples"},{"type":"function","doc":"Checks if an Elixir module exists and can be loaded.","title":"Bonfire.Common.Extend.module_exists?/1","ref":"Bonfire.Common.Extend.html#module_exists?/1"},{"type":"function","doc":"iex> module_exists?(Bonfire.Common)\n    true\n\n    iex> module_exists?(SomeOtherModule)\n    false","title":"Examples - Bonfire.Common.Extend.module_exists?/1","ref":"Bonfire.Common.Extend.html#module_exists?/1-examples"},{"type":"function","doc":"Retrieves the file path of the module's source file.","title":"Bonfire.Common.Extend.module_file/1","ref":"Bonfire.Common.Extend.html#module_file/1"},{"type":"function","doc":"> module_file(Bonfire.Common)\n    \"/path/lib/common.ex\"","title":"Examples - Bonfire.Common.Extend.module_file/1","ref":"Bonfire.Common.Extend.html#module_file/1-examples"},{"type":"function","doc":"Retrieves the source code of a module.","title":"Bonfire.Common.Extend.module_file_code/2","ref":"Bonfire.Common.Extend.html#module_file_code/2"},{"type":"function","doc":"> module_file_code(Bonfire.Common)\n    \"defmodule Bonfire.Common do ... end\"","title":"Examples - Bonfire.Common.Extend.module_file_code/2","ref":"Bonfire.Common.Extend.html#module_file_code/2-examples"},{"type":"function","doc":"Retrieves the file path of a module from its object code.","title":"Bonfire.Common.Extend.module_file_from_object_code/1","ref":"Bonfire.Common.Extend.html#module_file_from_object_code/1"},{"type":"function","doc":"> module_file_from_object_code(Bonfire.Common)","title":"Examples - Bonfire.Common.Extend.module_file_from_object_code/1","ref":"Bonfire.Common.Extend.html#module_file_from_object_code/1-examples"},{"type":"function","doc":"Checks if an Elixir module exists and that it (or the extension/OTP app it belongs to) is not disabled.","title":"Bonfire.Common.Extend.module_not_disabled?/2","ref":"Bonfire.Common.Extend.html#module_not_disabled?/2"},{"type":"function","doc":"iex> module_enabled?(Bonfire.Common)\n    true\n\n    iex> module_enabled?(SomeDisabledModule)\n    false","title":"Examples - Bonfire.Common.Extend.module_not_disabled?/2","ref":"Bonfire.Common.Extend.html#module_not_disabled?/2-examples"},{"type":"function","doc":"Retrieves the bytecode of a module's object code.","title":"Bonfire.Common.Extend.module_object_byte_code/1","ref":"Bonfire.Common.Extend.html#module_object_byte_code/1"},{"type":"function","doc":"> module_object_byte_code(Bonfire.Common)\n    <<...>>","title":"Examples - Bonfire.Common.Extend.module_object_byte_code/1","ref":"Bonfire.Common.Extend.html#module_object_byte_code/1-examples"},{"type":"function","doc":"Retrieves the object code tuple for a module.","title":"Bonfire.Common.Extend.module_object_code_tuple/1","ref":"Bonfire.Common.Extend.html#module_object_code_tuple/1"},{"type":"function","doc":"iex> {Bonfire.Common, _bytecode, _path} = module_object_code_tuple(Bonfire.Common)","title":"Examples - Bonfire.Common.Extend.module_object_code_tuple/1","ref":"Bonfire.Common.Extend.html#module_object_code_tuple/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.quoted_import_if_enabled/4","ref":"Bonfire.Common.Extend.html#quoted_import_if_enabled/4"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.quoted_require_if_enabled/4","ref":"Bonfire.Common.Extend.html#quoted_require_if_enabled/4"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.quoted_use_if_enabled/4","ref":"Bonfire.Common.Extend.html#quoted_use_if_enabled/4"},{"type":"function","doc":"","title":"Bonfire.Common.Extend.quoted_use_many_if_enabled/1","ref":"Bonfire.Common.Extend.html#quoted_use_many_if_enabled/1"},{"type":"macro","doc":"Conditionally requires a module if it's enabled, with an optional fallback.","title":"Bonfire.Common.Extend.require_if_enabled/3","ref":"Bonfire.Common.Extend.html#require_if_enabled/3"},{"type":"macro","doc":"defmodule MyModule do\n      require_if_enabled SomeExtension\n      # or\n      require_if_enabled SomeExtension, [], FallbackModule\n    end","title":"Examples - Bonfire.Common.Extend.require_if_enabled/3","ref":"Bonfire.Common.Extend.html#require_if_enabled/3-examples"},{"type":"function","doc":"Returns a string given raw code data.","title":"Bonfire.Common.Extend.return_file/1","ref":"Bonfire.Common.Extend.html#return_file/1"},{"type":"function","doc":"Retrieves the content of a code file within the source code tar file (available in Bonfire prod releases).","title":"Bonfire.Common.Extend.tar_file_code/1","ref":"Bonfire.Common.Extend.html#tar_file_code/1"},{"type":"function","doc":"> tar_file_code(\"/mix.exs\")\n    \"defmodule ... end\"","title":"Examples - Bonfire.Common.Extend.tar_file_code/1","ref":"Bonfire.Common.Extend.html#tar_file_code/1-examples"},{"type":"macro","doc":"Conditionally uses a module if it's enabled, with an optional fallback.","title":"Bonfire.Common.Extend.use_if_enabled/3","ref":"Bonfire.Common.Extend.html#use_if_enabled/3"},{"type":"macro","doc":"defmodule MyModule do\n      use_if_enabled SomeExtension\n      # or\n      use_if_enabled SomeExtension, [], FallbackModule\n    end","title":"Examples - Bonfire.Common.Extend.use_if_enabled/3","ref":"Bonfire.Common.Extend.html#use_if_enabled/3-examples"},{"type":"macro","doc":"","title":"Bonfire.Common.Extend.use_many_if_enabled/1","ref":"Bonfire.Common.Extend.html#use_many_if_enabled/1"},{"type":"behaviour","doc":"A Global cache of known Behaviours in Bonfire\n\nUse of the ExtensionBehaviour Service requires declaring `@behaviour Bonfire.Common.ExtensionBehaviour` in your behaviour module. This module will then index those behaviours *and* all the modules that implement those behaviours at app startup.\n\nWhile this module is a GenServer, it is only responsible for setup\nof the cache and then exits with :ignore having done so. It is not\nrecommended to restart the service as this will lead to a stop the\nworld garbage collection of all processes and the copying of the\nentire cache to each process that has queried it since its last\nlocal garbage collection.","title":"Bonfire.Common.ExtensionBehaviour","ref":"Bonfire.Common.ExtensionBehaviour.html"},{"type":"function","doc":"Given a behaviour module, filters app modules to only those that implement that behaviour","title":"Bonfire.Common.ExtensionBehaviour.adopters_of_behaviour/2","ref":"Bonfire.Common.ExtensionBehaviour.html#adopters_of_behaviour/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.app_modules_to_scan/1","ref":"Bonfire.Common.ExtensionBehaviour.html#app_modules_to_scan/1"},{"type":"function","doc":"Note: use `apply_modules_cached/2` instead, as it caches the result.","title":"Bonfire.Common.ExtensionBehaviour.apply_modules/2","ref":"Bonfire.Common.ExtensionBehaviour.html#apply_modules/2"},{"type":"function","doc":"Runs/applies a given function name on each of a list of given modules, returning a map (listing the modules with their result as value) and vice versa (listing the results as key with their calling module as value). It also caches the result on first run.","title":"Bonfire.Common.ExtensionBehaviour.apply_modules_cached/2","ref":"Bonfire.Common.ExtensionBehaviour.html#apply_modules_cached/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.apps_to_scan/1","ref":"Bonfire.Common.ExtensionBehaviour.html#apps_to_scan/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.behaviour_app_modules/2","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviour_app_modules/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.behaviour_modules/2","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviour_modules/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.behaviours/0","ref":"Bonfire.Common.ExtensionBehaviour.html#behaviours/0"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.cached_behaviours/0","ref":"Bonfire.Common.ExtensionBehaviour.html#cached_behaviours/0"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.ExtensionBehaviour.child_spec/1","ref":"Bonfire.Common.ExtensionBehaviour.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.find_adopters_of_behaviours/2","ref":"Bonfire.Common.ExtensionBehaviour.html#find_adopters_of_behaviours/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.find_extension_behaviours/1","ref":"Bonfire.Common.ExtensionBehaviour.html#find_extension_behaviours/1"},{"type":"callback","doc":"List modules that implement a behaviour","title":"Bonfire.Common.ExtensionBehaviour.modules/0","ref":"Bonfire.Common.ExtensionBehaviour.html#c:modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionBehaviour.populate/0","ref":"Bonfire.Common.ExtensionBehaviour.html#populate/0"},{"type":"function","doc":"Populates the global cache with config_module data via introspection.","title":"Bonfire.Common.ExtensionBehaviour.start_link/1","ref":"Bonfire.Common.ExtensionBehaviour.html#start_link/1"},{"type":"behaviour","doc":"A global cache of known Bonfire extensions and their metadata.","title":"Bonfire.Common.ExtensionModule","ref":"Bonfire.Common.ExtensionModule.html"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.app_modules/0","ref":"Bonfire.Common.ExtensionModule.html#app_modules/0"},{"type":"callback","doc":"Declares a Bonfire extensions","title":"Bonfire.Common.ExtensionModule.declared_extension/0","ref":"Bonfire.Common.ExtensionModule.html#c:declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.declared_extension/1","ref":"Bonfire.Common.ExtensionModule.html#declared_extension/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.declared_extensions/1","ref":"Bonfire.Common.ExtensionModule.html#declared_extensions/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.default_nav/0","ref":"Bonfire.Common.ExtensionModule.html#default_nav/0"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.default_nav/1","ref":"Bonfire.Common.ExtensionModule.html#default_nav/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.default_nav_apps/0","ref":"Bonfire.Common.ExtensionModule.html#default_nav_apps/0"},{"type":"function","doc":"Get a extension identified by schema","title":"Bonfire.Common.ExtensionModule.extension/1","ref":"Bonfire.Common.ExtensionModule.html#extension/1"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.extension_function_error/2","ref":"Bonfire.Common.ExtensionModule.html#extension_function_error/2"},{"type":"function","doc":"","title":"Bonfire.Common.ExtensionModule.modules/0","ref":"Bonfire.Common.ExtensionModule.html#modules/0"},{"type":"module","doc":"Helpers for managing Bonfire extensions, e.g., enabling/disabling a module or extension,\nor listing available extensions and their metadata.","title":"Bonfire.Common.Extensions","ref":"Bonfire.Common.Extensions.html"},{"type":"function","doc":"Retrieves a list of all dependencies.","title":"Bonfire.Common.Extensions.all_deps/0","ref":"Bonfire.Common.Extensions.html#all_deps/0"},{"type":"function","doc":"> Bonfire.Common.Extensions.all_deps()\n    [%Mix.Dep{...}, %Mix.Dep{...}]","title":"Examples - Bonfire.Common.Extensions.all_deps/0","ref":"Bonfire.Common.Extensions.html#all_deps/0-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.data/0","ref":"Bonfire.Common.Extensions.html#data/0"},{"type":"function","doc":"Extracts the dependency name from a `Mix.Dep` struct or similar data.","title":"Bonfire.Common.Extensions.dep_name/1","ref":"Bonfire.Common.Extensions.html#dep_name/1"},{"type":"function","doc":"- `dep`: The dependency from which to extract the name.","title":"Parameters - Bonfire.Common.Extensions.dep_name/1","ref":"Bonfire.Common.Extensions.html#dep_name/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.dep_name(%Mix.Dep{app: :my_app})\n    :my_app\n\n    iex> Bonfire.Common.Extensions.dep_name(:my_app)\n    :my_app\n\n    iex> Bonfire.Common.Extensions.dep_name(\"my_app\")\n    \"my_app\"","title":"Examples - Bonfire.Common.Extensions.dep_name/1","ref":"Bonfire.Common.Extensions.html#dep_name/1-examples"},{"type":"function","doc":"Retrieves the branch name for a dependency.","title":"Bonfire.Common.Extensions.get_branch/1","ref":"Bonfire.Common.Extensions.html#get_branch/1"},{"type":"function","doc":"- `dep`: The dependency from which to get the branch.","title":"Parameters - Bonfire.Common.Extensions.get_branch/1","ref":"Bonfire.Common.Extensions.html#get_branch/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.get_branch(%{git: nil, branch: \"main\"})\n    \"main\"\n\n    iex> Bonfire.Common.Extensions.get_branch(%{lock: {:git, nil, nil, [branch: \"feature\"]}})\n    \"feature\"","title":"Examples - Bonfire.Common.Extensions.get_branch/1","ref":"Bonfire.Common.Extensions.html#get_branch/1-examples"},{"type":"function","doc":"Constructs a link to the code of a dependency.","title":"Bonfire.Common.Extensions.get_code_link/1","ref":"Bonfire.Common.Extensions.html#get_code_link/1"},{"type":"function","doc":"- `dep`: The dependency from which to generate the link.","title":"Parameters - Bonfire.Common.Extensions.get_code_link/1","ref":"Bonfire.Common.Extensions.html#get_code_link/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.get_code_link(%{app: \"my_app\"})\n    \"/settings/extensions/code/my_app\"","title":"Examples - Bonfire.Common.Extensions.get_code_link/1","ref":"Bonfire.Common.Extensions.html#get_code_link/1-examples"},{"type":"function","doc":"Returns a link to the package or repository of a dependency.","title":"Bonfire.Common.Extensions.get_link/1","ref":"Bonfire.Common.Extensions.html#get_link/1"},{"type":"function","doc":"- `dep`: The dependency from which to generate the link.","title":"Parameters - Bonfire.Common.Extensions.get_link/1","ref":"Bonfire.Common.Extensions.html#get_link/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.get_link(%{hex: \"example_package\"})\n    \"https://hex.pm/packages/example_package\"\n\n    iex> Bonfire.Common.Extensions.get_link(%{git: \"https://github.com/user/repo\", branch: \"main\"})\n    \"https://github.com/user/repo/tree/main\"","title":"Examples - Bonfire.Common.Extensions.get_link/1","ref":"Bonfire.Common.Extensions.html#get_link/1-examples"},{"type":"function","doc":"Outputs the current version string for a dependency.","title":"Bonfire.Common.Extensions.get_version/1","ref":"Bonfire.Common.Extensions.html#get_version/1"},{"type":"function","doc":"- `dep`: The dependency from which to get the version.","title":"Parameters - Bonfire.Common.Extensions.get_version/1","ref":"Bonfire.Common.Extensions.html#get_version/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.get_version(%{status: {:ok, \"1.0.0\"}})\n    \"1.0.0\"\n\n    iex> Bonfire.Common.Extensions.get_version(%{requirement: \">= 1.0.0\"})\n    \">= 1.0.0\"","title":"Examples - Bonfire.Common.Extensions.get_version/1","ref":"Bonfire.Common.Extensions.html#get_version/1-examples"},{"type":"function","doc":"Constructs a link to the version of a dependency.","title":"Bonfire.Common.Extensions.get_version_link/1","ref":"Bonfire.Common.Extensions.html#get_version_link/1"},{"type":"function","doc":"- `dep`: The dependency from which to generate the version link.","title":"Parameters - Bonfire.Common.Extensions.get_version_link/1","ref":"Bonfire.Common.Extensions.html#get_version_link/1-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Extensions.get_version_link(%{app: \"my_app\", path: \"file.ex\"})\n    \"/settings/extensions/diff?app=my_app&local=file.ex\"\n\n    iex> Bonfire.Common.Extensions.get_version_link(%{lock: {:git, \"https://github.com/user/repo\", \"abc123\", [branch: \"main\"]}})\n    \"https://github.com/user/repo/compare/abc123...main\"","title":"Examples - Bonfire.Common.Extensions.get_version_link/1","ref":"Bonfire.Common.Extensions.html#get_version_link/1-examples"},{"type":"function","doc":"Disables a given extension globally.","title":"Bonfire.Common.Extensions.global_disable/1","ref":"Bonfire.Common.Extensions.html#global_disable/1"},{"type":"function","doc":"- `extension`: The name of the extension to disable.","title":"Parameters - Bonfire.Common.Extensions.global_disable/1","ref":"Bonfire.Common.Extensions.html#global_disable/1-parameters"},{"type":"function","doc":"> {:ok, %Bonfire.Data.Identity.Settings{json: %{bonfire: %{my_test_extension: %{modularity: :disabled}}}}} =  Bonfire.Common.Extensions.global_disable(:my_test_extension)","title":"Examples - Bonfire.Common.Extensions.global_disable/1","ref":"Bonfire.Common.Extensions.html#global_disable/1-examples"},{"type":"function","doc":"Enables a given extension globally.","title":"Bonfire.Common.Extensions.global_enable/1","ref":"Bonfire.Common.Extensions.html#global_enable/1"},{"type":"function","doc":"- `extension`: The name of the extension to enable.","title":"Parameters - Bonfire.Common.Extensions.global_enable/1","ref":"Bonfire.Common.Extensions.html#global_enable/1-parameters"},{"type":"function","doc":"> {:ok, %Bonfire.Data.Identity.Settings{json: %{bonfire: %{my_test_extension: %{modularity: nil}}}}} = Bonfire.Common.Extensions.global_enable(:my_test_extension)","title":"Examples - Bonfire.Common.Extensions.global_enable/1","ref":"Bonfire.Common.Extensions.html#global_enable/1-examples"},{"type":"function","doc":"Retrieves a list of all dependencies in a specific format based on the options provided.","title":"Bonfire.Common.Extensions.loaded_deps/1","ref":"Bonfire.Common.Extensions.html#loaded_deps/1"},{"type":"function","doc":"- `opts`: Options to determine the format, e.g., `:flat`, `:tree_flat`, `:nested`.","title":"Parameters - Bonfire.Common.Extensions.loaded_deps/1","ref":"Bonfire.Common.Extensions.html#loaded_deps/1-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.loaded_deps(:flat)\n    [%Mix.Dep{}, %Mix.Dep{}, ...]\n\n    > Bonfire.Common.Extensions.loaded_deps(:tree_flat)\n    [%Mix.Dep{}, %Mix.Dep{}, ...]","title":"Examples - Bonfire.Common.Extensions.loaded_deps/1","ref":"Bonfire.Common.Extensions.html#loaded_deps/1-examples"},{"type":"function","doc":"Retrieves a list of all dependency names in a specific format based on the options provided.","title":"Bonfire.Common.Extensions.loaded_deps_names/1","ref":"Bonfire.Common.Extensions.html#loaded_deps_names/1"},{"type":"function","doc":"- `opts`: Options to determine the format, e.g., `:flat`, `:tree_flat`, `:nested`.","title":"Parameters - Bonfire.Common.Extensions.loaded_deps_names/1","ref":"Bonfire.Common.Extensions.html#loaded_deps_names/1-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.loaded_deps_names()\n    [:dep1, :dep2]","title":"Examples - Bonfire.Common.Extensions.loaded_deps_names/1","ref":"Bonfire.Common.Extensions.html#loaded_deps_names/1-examples"},{"type":"module","doc":"Provides functionality to generate and parse diffs from git repositories.","title":"Bonfire.Common.Extensions.Diff","ref":"Bonfire.Common.Extensions.Diff.html"},{"type":"function","doc":"Analyzes the diff stream from the specified path.\n\nThis function streams the diff data and processes it as it becomes available. See `GitDiff.stream_patch/1` for details on the expected output.","title":"Bonfire.Common.Extensions.Diff.analyse_repo_latest_diff_stream/1","ref":"Bonfire.Common.Extensions.Diff.html#analyse_repo_latest_diff_stream/1"},{"type":"function","doc":"- `path_diff`: The path to the file containing the diff.","title":"Parameters - Bonfire.Common.Extensions.Diff.analyse_repo_latest_diff_stream/1","ref":"Bonfire.Common.Extensions.Diff.html#analyse_repo_latest_diff_stream/1-parameters"},{"type":"function","doc":"> {:ok, stream} = Bonfire.Common.Extensions.Diff.analyse_repo_latest_diff_stream(\"./path/to/diff.patch\")","title":"Examples - Bonfire.Common.Extensions.Diff.analyse_repo_latest_diff_stream/1","ref":"Bonfire.Common.Extensions.Diff.html#analyse_repo_latest_diff_stream/1-examples"},{"type":"function","doc":"Generates a diff between the specified reference or branch and the latest commit in the repository.","title":"Bonfire.Common.Extensions.Diff.generate_diff/2","ref":"Bonfire.Common.Extensions.Diff.html#generate_diff/2"},{"type":"function","doc":"- `ref_or_branch`: The reference or branch to compare against.\n  - `repo_path`: The path to the repository.","title":"Parameters - Bonfire.Common.Extensions.Diff.generate_diff/2","ref":"Bonfire.Common.Extensions.Diff.html#generate_diff/2-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.Diff.generate_diff(\"main\", \"./\")\n    {:ok, \"Diff generated successfully\", \"...diff content...\"}\n\n    > Bonfire.Common.Extensions.Diff.generate_diff(\"test_fake_branch\", \"./\")\n    {:error, \"Could not generate latest diff.\"}","title":"Examples - Bonfire.Common.Extensions.Diff.generate_diff/2","ref":"Bonfire.Common.Extensions.Diff.html#generate_diff/2-examples"},{"type":"function","doc":"Executes a git command with the specified arguments.","title":"Bonfire.Common.Extensions.Diff.git!/4","ref":"Bonfire.Common.Extensions.Diff.html#git!/4"},{"type":"function","doc":"- `args`: The list of arguments for the git command.\n  - `repo_path`: The path to the repository.\n  - `into`: Optional destination for command output (defaults to standard output)\n  - `original_cwd`: The original working directory.","title":"Parameters - Bonfire.Common.Extensions.Diff.git!/4","ref":"Bonfire.Common.Extensions.Diff.html#git!/4-parameters"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.Diff.git_add_all/1","ref":"Bonfire.Common.Extensions.Diff.html#git_add_all/1"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.Diff.git_fetch/1","ref":"Bonfire.Common.Extensions.Diff.html#git_fetch/1"},{"type":"function","doc":"Generates a diff and saves it to the specified output path.","title":"Bonfire.Common.Extensions.Diff.git_generate_diff/4","ref":"Bonfire.Common.Extensions.Diff.html#git_generate_diff/4"},{"type":"function","doc":"- `ref_or_branch`: The reference or branch to compare against.\n  - `repo_path`: The path to the repository.\n  - `path_output`: The path where the diff output will be saved.\n  - `extra_opt`: Optional extra options for git diff command.","title":"Parameters - Bonfire.Common.Extensions.Diff.git_generate_diff/4","ref":"Bonfire.Common.Extensions.Diff.html#git_generate_diff/4-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.Diff.git_generate_diff(\"main\", \"./\", \"./data/test_output.patch\")","title":"Examples - Bonfire.Common.Extensions.Diff.git_generate_diff/4","ref":"Bonfire.Common.Extensions.Diff.html#git_generate_diff/4-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.Diff.git_pre_configure/1","ref":"Bonfire.Common.Extensions.Diff.html#git_pre_configure/1"},{"type":"function","doc":"Parses the latest diff from the specified path. See `GitDiff.parse_patch/1` for details about what it outputs.","title":"Bonfire.Common.Extensions.Diff.parse_repo_latest_diff/1","ref":"Bonfire.Common.Extensions.Diff.html#parse_repo_latest_diff/1"},{"type":"function","doc":"- `path_diff`: The path to the file containing the diff.","title":"Parameters - Bonfire.Common.Extensions.Diff.parse_repo_latest_diff/1","ref":"Bonfire.Common.Extensions.Diff.html#parse_repo_latest_diff/1-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.Diff.parse_repo_latest_diff(\"./path/to/diff.patch\")\n    {:ok, ...}\n\n    > Bonfire.Common.Extensions.Diff.parse_repo_latest_diff(\"./path/to/empty.patch\")\n    {:error, :no_diff}","title":"Examples - Bonfire.Common.Extensions.Diff.parse_repo_latest_diff/1","ref":"Bonfire.Common.Extensions.Diff.html#parse_repo_latest_diff/1-examples"},{"type":"function","doc":"Fetches the latest diff from the specified reference or branch in the repository.","title":"Bonfire.Common.Extensions.Diff.repo_latest_diff/3","ref":"Bonfire.Common.Extensions.Diff.html#repo_latest_diff/3"},{"type":"function","doc":"- `ref_or_branch`: The reference or branch to compare against.\n  - `repo_path`: The path to the repository.\n  - `msg`: Optional message to include with the diff.","title":"Parameters - Bonfire.Common.Extensions.Diff.repo_latest_diff/3","ref":"Bonfire.Common.Extensions.Diff.html#repo_latest_diff/3-parameters"},{"type":"function","doc":"> Bonfire.Common.Extensions.Diff.repo_latest_diff(\"main\", \"./\")\n    {:ok, \"Diff message\", \"...diff content...\"}\n\n    > Bonfire.Common.Extensions.Diff.repo_latest_diff(\"test_fake_branch\", \"./\")\n    {:error, :no_diff}","title":"Examples - Bonfire.Common.Extensions.Diff.repo_latest_diff/3","ref":"Bonfire.Common.Extensions.Diff.html#repo_latest_diff/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.Diff.root/0","ref":"Bonfire.Common.Extensions.Diff.html#root/0"},{"type":"function","doc":"","title":"Bonfire.Common.Extensions.Diff.tmp_path/1","ref":"Bonfire.Common.Extensions.Diff.html#tmp_path/1"},{"type":"module","doc":"Module for building and performing HTTP requests.","title":"Bonfire.Common.HTTP","ref":"Bonfire.Common.HTTP.html"},{"type":"function","doc":"Makes a DELETE request\n\nsee `request/5`","title":"Bonfire.Common.HTTP.delete/4","ref":"Bonfire.Common.HTTP.html#delete/4"},{"type":"function","doc":"Makes a GET request\n\nsee `request/5`","title":"Bonfire.Common.HTTP.get/3","ref":"Bonfire.Common.HTTP.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.get_cached/1","ref":"Bonfire.Common.HTTP.html#get_cached/1"},{"type":"function","doc":"Makes a PATCH request\n\nsee `request/5`","title":"Bonfire.Common.HTTP.patch/4","ref":"Bonfire.Common.HTTP.html#patch/4"},{"type":"function","doc":"Makes a POST request\n\nsee `request/5`","title":"Bonfire.Common.HTTP.post/4","ref":"Bonfire.Common.HTTP.html#post/4"},{"type":"function","doc":"Makes a PUT request\n\nsee `request/5`","title":"Bonfire.Common.HTTP.put/4","ref":"Bonfire.Common.HTTP.html#put/4"},{"type":"function","doc":"Builds and perform http request.\n\n# Arguments:\n`method` - :get, :post, :put, :delete\n`url`\n`body`\n`headers` - a keyworld list of headers, e.g. `[{\"content-type\", \"text/plain\"}]`\n`options` - custom, per-request middleware or adapter options\n\n# Returns:\n`{:ok, %Tesla.Env{}}` or `{:error, error}`","title":"Bonfire.Common.HTTP.request/5","ref":"Bonfire.Common.HTTP.html#request/5"},{"type":"type","doc":"","title":"Bonfire.Common.HTTP.t/0","ref":"Bonfire.Common.HTTP.html#t:t/0"},{"type":"module","doc":"Specifies connection options for HTTP requests","title":"Bonfire.Common.HTTP.Connection","ref":"Bonfire.Common.HTTP.Connection.html"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.Connection.adapter_options/2","ref":"Bonfire.Common.HTTP.Connection.html#adapter_options/2"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.Connection.new/1","ref":"Bonfire.Common.HTTP.Connection.html#new/1"},{"type":"module","doc":"Helper functions for building HTTP requests","title":"Bonfire.Common.HTTP.RequestBuilder","ref":"Bonfire.Common.HTTP.RequestBuilder.html"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.RequestBuilder.add_param/4","ref":"Bonfire.Common.HTTP.RequestBuilder.html#add_param/4"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.RequestBuilder.headers/2","ref":"Bonfire.Common.HTTP.RequestBuilder.html#headers/2"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.RequestBuilder.method/2","ref":"Bonfire.Common.HTTP.RequestBuilder.html#method/2"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.RequestBuilder.opts/2","ref":"Bonfire.Common.HTTP.RequestBuilder.html#opts/2"},{"type":"function","doc":"","title":"Bonfire.Common.HTTP.RequestBuilder.url/2","ref":"Bonfire.Common.HTTP.RequestBuilder.html#url/2"},{"type":"module","doc":"Various helpers for localisation","title":"Bonfire.Common.Localise","ref":"Bonfire.Common.Localise.html"},{"type":"function","doc":"Gets the default locale from the configuration or returns \"en\".","title":"Bonfire.Common.Localise.default_locale/0","ref":"Bonfire.Common.Localise.html#default_locale/0"},{"type":"function","doc":"iex> default_locale()\n    \"en\"","title":"Examples - Bonfire.Common.Localise.default_locale/0","ref":"Bonfire.Common.Localise.html#default_locale/0-examples"},{"type":"function","doc":"Gets the current locale from the Cldr module.","title":"Bonfire.Common.Localise.get_locale/0","ref":"Bonfire.Common.Localise.html#get_locale/0"},{"type":"function","doc":"iex> get_locale()\n    Bonfire.Common.Localise.Cldr.Locale.new!(\"en\")","title":"Examples - Bonfire.Common.Localise.get_locale/0","ref":"Bonfire.Common.Localise.html#get_locale/0-examples"},{"type":"function","doc":"Gets the current locale ID.","title":"Bonfire.Common.Localise.get_locale_id/0","ref":"Bonfire.Common.Localise.html#get_locale_id/0"},{"type":"function","doc":"iex> get_locale_id()\n    :en","title":"Examples - Bonfire.Common.Localise.get_locale_id/0","ref":"Bonfire.Common.Localise.html#get_locale_id/0-examples"},{"type":"function","doc":"Gets the known locales from the Cldr module.","title":"Bonfire.Common.Localise.known_locales/0","ref":"Bonfire.Common.Localise.html#known_locales/0"},{"type":"function","doc":"> known_locales()\n    [:en, :es, :fr]","title":"Examples - Bonfire.Common.Localise.known_locales/0","ref":"Bonfire.Common.Localise.html#known_locales/0-examples"},{"type":"function","doc":"Converts a locale atom to its string representation.","title":"Bonfire.Common.Localise.locale_name/1","ref":"Bonfire.Common.Localise.html#locale_name/1"},{"type":"function","doc":"iex> locale_name(:en)\n    \"English\"\n    iex> locale_name(\"fr\")\n    \"French\"","title":"Examples - Bonfire.Common.Localise.locale_name/1","ref":"Bonfire.Common.Localise.html#locale_name/1-examples"},{"type":"function","doc":"Sets the given locale for both Cldr and Gettext.","title":"Bonfire.Common.Localise.put_locale/1","ref":"Bonfire.Common.Localise.html#put_locale/1"},{"type":"function","doc":"iex> put_locale(\"es\")\n    nil","title":"Examples - Bonfire.Common.Localise.put_locale/1","ref":"Bonfire.Common.Localise.html#put_locale/1-examples"},{"type":"function","doc":"Config for the `Cldr.Plug.SetLocale` plug","title":"Bonfire.Common.Localise.set_locale_config/0","ref":"Bonfire.Common.Localise.html#set_locale_config/0"},{"type":"module","doc":"Provides the core functions to retrieve and manage\nthe CLDR data that supports formatting and localisation.\n\nIt provides the core functions to access formatted\nCLDR data, set and retrieve a current locale and validate\ncertain core data types such as locales, currencies and\nterritories.","title":"Bonfire.Common.Localise.Cldr","ref":"Bonfire.Common.Localise.Cldr.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.available_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#available_locale_name?/1"},{"type":"function","doc":"Returns the default `locale`.","title":"Bonfire.Common.Localise.Cldr.default_locale/0","ref":"Bonfire.Common.Localise.Cldr.html#default_locale/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.default_locale()\n    %Cldr.LanguageTag{\n      backend: Bonfire.Common.Localise.Cldr,\n      canonical_locale_name: \"en-001\",\n      cldr_locale_name: :\"en-001\",\n      language_subtags: [],\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en-001\",\n      script: :Latn,\n      territory: :\"001\",\n      transform: %{},\n      language_variants: []\n    }","title":"Example - Bonfire.Common.Localise.Cldr.default_locale/0","ref":"Bonfire.Common.Localise.Cldr.html#default_locale/0-example"},{"type":"function","doc":"Returns the default territory when a locale\ndoes not specify one and none can be inferred.","title":"Bonfire.Common.Localise.Cldr.default_territory/0","ref":"Bonfire.Common.Localise.Cldr.html#default_territory/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.default_territory()\n    :\"001\"","title":"Example - Bonfire.Common.Localise.Cldr.default_territory/0","ref":"Bonfire.Common.Localise.Cldr.html#default_territory/0-example"},{"type":"function","doc":"Add locale-specific ellipsis to a string.","title":"Bonfire.Common.Localise.Cldr.ellipsis/2","ref":"Bonfire.Common.Localise.Cldr.html#ellipsis/2"},{"type":"function","doc":"* `string` is any `String.t` or a 2-element list\n  of `String.t` between which the ellipsis is inserted.\n\n* `backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module.  The default is `Cldr.default_backend!/0`.\n  Note that `Cldr.default_backend!/0` will raise an exception if\n  no `:default_backend` is configured under the `:ex_cldr` key in\n  `config.exs`.\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.ellipsis/2","ref":"Bonfire.Common.Localise.Cldr.html#ellipsis/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`.\n\n* `:location` determines where to place the ellipsis. The options are\n  `:after` (the default for a single string argument), `:between`\n  (the default and only valid location for an argument that is a list\n  of two strings) and `:before`.\n\n* `:format` formats based upon whether the ellipsis\n  is inserted between words or sentences. The valid options are\n  `:word` or `:sentence`. The default is `:sentence`.","title":"Options - Bonfire.Common.Localise.Cldr.ellipsis/2","ref":"Bonfire.Common.Localise.Cldr.html#ellipsis/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.ellipsis(\"And furthermore\")\n    \"And furthermore…\"\n\n    iex> Bonfire.Common.Localise.Cldr.ellipsis([\"And furthermore\", \"there is much to be done\"], locale: :ja)\n    \"And furthermore…there is much to be done\"\n\n    iex> Bonfire.Common.Localise.Cldr.ellipsis(\"And furthermore\", format: :word)\n    \"And furthermore …\"\n\n    iex> Bonfire.Common.Localise.Cldr.ellipsis([\"And furthermore\", \"there is much to be done\"], locale: :ja, format: :word)\n    \"And furthermore … there is much to be done\"","title":"Examples - Bonfire.Common.Localise.Cldr.ellipsis/2","ref":"Bonfire.Common.Localise.Cldr.html#ellipsis/2-examples"},{"type":"function","doc":"Return the current locale to be used for `Cldr` functions that\ntake an optional locale parameter for which a locale is not supplied.","title":"Bonfire.Common.Localise.Cldr.get_locale/0","ref":"Bonfire.Common.Localise.Cldr.html#get_locale/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.put_locale(\"pl\")\n    iex> Bonfire.Common.Localise.Cldr.get_locale()\n    %Cldr.LanguageTag{\n       backend: Elixir.Bonfire.Common.Localise.Cldr,\n       canonical_locale_name: \"pl\",\n       cldr_locale_name: :pl,\n       extensions: %{},\n       language: \"pl\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :pl,\n       territory: :PL,\n       requested_locale_name: \"pl\",\n       script: :Latn,\n       transform: %{},\n       language_variants: []\n     }","title":"Example - Bonfire.Common.Localise.Cldr.get_locale/0","ref":"Bonfire.Common.Localise.Cldr.html#get_locale/0-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.known_calendars/0","ref":"Bonfire.Common.Localise.Cldr.html#known_calendars/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.known_currencies/0","ref":"Bonfire.Common.Localise.Cldr.html#known_currencies/0"},{"type":"function","doc":"Returns either the Gettext `locale_name` in Cldr format or\n`false` based upon whether the locale name is configured in\n`Gettext`.","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_gettext_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_gettext_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_gettext_locale_name(\"en\")\n    \"en\"\n\n    iex> Bonfire.Common.Localise.Cldr.known_gettext_locale_name(\"en-SA\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_gettext_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name/1-examples"},{"type":"function","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Gettext.","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name?/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_gettext_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name?/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_gettext_locale_name?(\"en\")\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.known_gettext_locale_name?(\"!!\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_gettext_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_name?/1-examples"},{"type":"function","doc":"Returns a list of Gettext locale names but in CLDR format with\nunderscore replaced by hyphen in order to facilitate comparisons\nwith `Cldr` locale names.","title":"Bonfire.Common.Localise.Cldr.known_gettext_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.html#known_gettext_locale_names/0"},{"type":"function","doc":"Returns either the `locale_name` or `false` based upon\nwhether the locale name is configured in `Cldr`.\n\nThis is helpful when building a list of `or` expressions\nto return the first known locale name from a list.","title":"Bonfire.Common.Localise.Cldr.known_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_locale_name(:\"en-AU\")\n    :\"en-AU\"\n\n    iex> Bonfire.Common.Localise.Cldr.known_locale_name(:\"en-SA\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name/1-examples"},{"type":"function","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Cldr.","title":"Bonfire.Common.Localise.Cldr.known_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name?/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name?/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_locale_name?(:en)\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.known_locale_name?(:\"!!\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_name?/1-examples"},{"type":"function","doc":"Returns a list of the known locale names.\n\nKnown locales are those locales which\nare the subset of all CLDR locales that\nhave been configured for use either\nin this module or in `Gettext`.","title":"Bonfire.Common.Localise.Cldr.known_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.html#known_locale_names/0"},{"type":"function","doc":"Returns a list of atoms representing the number systems types known to `Cldr`.","title":"Bonfire.Common.Localise.Cldr.known_number_system_types/0","ref":"Bonfire.Common.Localise.Cldr.html#known_number_system_types/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_number_system_types()\n    [:default, :finance, :native, :traditional]","title":"Example - Bonfire.Common.Localise.Cldr.known_number_system_types/0","ref":"Bonfire.Common.Localise.Cldr.html#known_number_system_types/0-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.known_number_systems/0","ref":"Bonfire.Common.Localise.Cldr.html#known_number_systems/0"},{"type":"function","doc":"Returns either the RBNF `locale_name` or `false` based upon\nwhether the locale name is configured in `Cldr`\nand has RBNF rules defined.","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_rbnf_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_rbnf_locale_name(:en)\n    :en\n\n    iex> Bonfire.Common.Localise.Cldr.known_rbnf_locale_name(:\"en-SA\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_rbnf_locale_name/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name/1-examples"},{"type":"function","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Cldr and supports\nrules based number formats (RBNF).","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name?/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name?/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?(:en)\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?(:\"!!\")\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.known_rbnf_locale_name?/1","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_name?/1-examples"},{"type":"function","doc":"Returns a list of locale names which have rules-based number\nformats (RBNF).","title":"Bonfire.Common.Localise.Cldr.known_rbnf_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.html#known_rbnf_locale_names/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.known_territories/0","ref":"Bonfire.Common.Localise.Cldr.html#known_territories/0"},{"type":"function","doc":"Normalizes a string by applying transliteration\nof common symbols in numbers, currencies and dates","title":"Bonfire.Common.Localise.Cldr.normalize_lenient_parse/3","ref":"Bonfire.Common.Localise.Cldr.html#normalize_lenient_parse/3"},{"type":"function","doc":"Set the current process's Gettext locale from a\n`t:Cldr.LanguageTag`.","title":"Bonfire.Common.Localise.Cldr.put_gettext_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_gettext_locale/1"},{"type":"function","doc":"* `locale` is a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`.","title":"Arguments - Bonfire.Common.Localise.Cldr.put_gettext_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_gettext_locale/1-arguments"},{"type":"function","doc":"* `{:ok, gettext_locale_name}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.put_gettext_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_gettext_locale/1-returns"},{"type":"function","doc":"1. If the `locale.gettext_locale_name` is `nil` then an error\n   is returned.\n\n2. The `gettext` locale for the `gettext_backend` configured for the\n   CLDR backend defined by the `t:Cldr.LanguageTag` is set.","title":"Behaviour - Bonfire.Common.Localise.Cldr.put_gettext_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_gettext_locale/1-behaviour"},{"type":"function","doc":"iex> import Cldr.LanguageTag.Sigil\n    iex> Bonfire.Common.Localise.Cldr.put_gettext_locale(~l\"en\")\n    {:ok, \"en\"}\n\n    iex> import Cldr.LanguageTag.Sigil\n    iex> Bonfire.Common.Localise.Cldr.put_gettext_locale(~l\"de\")\n    {\n      :error,\n      {\n        Cldr.UnknownLocaleError,\n        \"Locale TestBackend.Cldr.Locale.new!(\\\"de-DE\\\") does not map to a known gettext locale name\"\n      }\n    }","title":"Examples - Bonfire.Common.Localise.Cldr.put_gettext_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_gettext_locale/1-examples"},{"type":"function","doc":"Set the current locale to be used for `Cldr` functions that\ntake an optional locale parameter for which a locale is not supplied.","title":"Bonfire.Common.Localise.Cldr.put_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_locale/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1`\n\nSee [rfc5646](https://tools.ietf.org/html/rfc5646) for the specification\nof a language tag.","title":"Arguments - Bonfire.Common.Localise.Cldr.put_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_locale/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.put_locale(\"en\")\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: Bonfire.Common.Localise.Cldr,\n       canonical_locale_name: \"en\",\n       cldr_locale_name: :en,\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: \"en\",\n       language: \"en\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :en,\n       requested_locale_name: \"en\",\n       script: :Latn,\n       territory: :US,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Bonfire.Common.Localise.Cldr.put_locale(\"invalid-locale!\")\n    {:error, {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"!\\\" starting at position 15\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.put_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#put_locale/1-examples"},{"type":"function","doc":"Add locale-specific quotation marks around a string.","title":"Bonfire.Common.Localise.Cldr.quote/2","ref":"Bonfire.Common.Localise.Cldr.html#quote/2"},{"type":"function","doc":"* `string` is any valid Elixir string\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.quote/2","ref":"Bonfire.Common.Localise.Cldr.html#quote/2-arguments"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`","title":"Options - Bonfire.Common.Localise.Cldr.quote/2","ref":"Bonfire.Common.Localise.Cldr.html#quote/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.quote(\"Quoted String\")\n    \"“Quoted String”\"\n\n    iex> Bonfire.Common.Localise.Cldr.quote(\"Quoted String\", locale: :ja)\n    \"「Quoted String」\"","title":"Examples - Bonfire.Common.Localise.Cldr.quote/2","ref":"Bonfire.Common.Localise.Cldr.html#quote/2-examples"},{"type":"function","doc":"Returns a list of the locales names that are configured,\nbut not known in CLDR.\n\nSince there is a compile-time exception raised if there are\nany unknown locales this function should always\nreturn an empty list.","title":"Bonfire.Common.Localise.Cldr.unknown_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.html#unknown_locale_names/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.validate_calendar/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_calendar/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.validate_currency/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_currency/1"},{"type":"function","doc":"Normalise and validate a locale name.","title":"Bonfire.Common.Localise.Cldr.validate_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.validate_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1-arguments"},{"type":"function","doc":"* `{:ok, language_tag}`\n\n* `{:error, reason}`","title":"Returns - Bonfire.Common.Localise.Cldr.validate_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1-returns"},{"type":"function","doc":"See [rfc5646](https://tools.ietf.org/html/rfc5646) for the specification\nof a language tag.","title":"Notes - Bonfire.Common.Localise.Cldr.validate_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.validate_locale(:en)\n    {:ok,\n    %Cldr.LanguageTag{\n      backend: Bonfire.Common.Localise.Cldr,\n      canonical_locale_name: \"en\",\n      cldr_locale_name: :en,\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en\",\n      script: :Latn,\n      territory: :US,\n      transform: %{},\n      language_variants: []\n    }}\n\n\n    iex> Bonfire.Common.Localise.Cldr.validate_locale Bonfire.Common.Localise.Cldr.default_locale()\n    {:ok,\n    %Cldr.LanguageTag{\n      backend: Bonfire.Common.Localise.Cldr,\n      canonical_locale_name: \"en-001\",\n      cldr_locale_name: :\"en-001\",\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en-001\",\n      script: :Latn,\n      territory: :\"001\",\n      transform: %{},\n      language_variants: []\n    }}\n\n    iex> Bonfire.Common.Localise.Cldr.validate_locale(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.validate_locale/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_locale/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.validate_number_system/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system/1"},{"type":"function","doc":"Normalise and validate a number system type.","title":"Bonfire.Common.Localise.Cldr.validate_number_system_type/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system_type/1"},{"type":"function","doc":"* `number_system_type` is any number system type returned by\n  `Cldr.known_number_system_types/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.validate_number_system_type/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system_type/1-arguments"},{"type":"function","doc":"* `{:ok, normalized_number_system_type}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.validate_number_system_type/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system_type/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.validate_number_system_type(:default)\n    {:ok, :default}\n\n    iex> Bonfire.Common.Localise.Cldr.validate_number_system_type(:traditional)\n    {:ok, :traditional}\n\n    iex> Bonfire.Common.Localise.Cldr.validate_number_system_type(:latn)\n    {\n      :error,\n      {Cldr.UnknownNumberSystemTypeError, \"The number system type :latn is unknown\"}\n    }\n\n    iex> Bonfire.Common.Localise.Cldr.validate_number_system_type(\"bork\")\n    {\n      :error,\n      {Cldr.UnknownNumberSystemTypeError, \"The number system type \\\"bork\\\" is invalid\"}\n    }","title":"Examples - Bonfire.Common.Localise.Cldr.validate_number_system_type/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_number_system_type/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.validate_territory/1","ref":"Bonfire.Common.Localise.Cldr.html#validate_territory/1"},{"type":"function","doc":"Execute a function with a locale ensuring that the\ncurrent locale is restored after the function.","title":"Bonfire.Common.Localise.Cldr.with_locale/2","ref":"Bonfire.Common.Localise.Cldr.html#with_locale/2"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n\n* `fun` is any 0-arity function or function capture.","title":"Arguments - Bonfire.Common.Localise.Cldr.with_locale/2","ref":"Bonfire.Common.Localise.Cldr.html#with_locale/2-arguments"},{"type":"function","doc":"* The value returned by the function `fun/0` or\n\n* `{:error, {exception, reason}}` if the locale is invalid or\n\n* raises an exception if the current locale cannot be\n  identified.","title":"Returns - Bonfire.Common.Localise.Cldr.with_locale/2","ref":"Bonfire.Common.Localise.Cldr.html#with_locale/2-returns"},{"type":"module","doc":"Parses HTTP `Accept-Language` header values as defined in\n[rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4).\n\nThe Accept-Language request-header field is similar to Accept, but restricts\nthe set of natural languages that are preferred as a response to the request.\nLanguage tags function are provided in `Cldr.LanguageTag`.\n\nThe format of an `Accept-Language` header is as follows in `ABNF` format:\n\n       Accept-Language = \"Accept-Language\" \":\"\n                         1#( language-range [ \";\" \"q\" \"=\" qvalue ] )\n       language-range  = ( ( 1*8ALPHA *( \"-\" 1*8ALPHA ) ) | \"*\" )\n\nEach language-range MAY be given an associated quality value which represents an\nestimate of the user's preference for the languages specified by that range. The\nquality value defaults to \"q=1\". For example,\n\n       Accept-Language: da, en-gb;q=0.8, en;q=0.7\n\nwould mean: \"I prefer Danish, but will accept British English and other types of English.\"","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html"},{"type":"function","doc":"Parse an `Accept-Language` string and return the best match for\na configured `Cldr` locale.","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#best_match/1"},{"type":"function","doc":"* `accept_language` is a string representing an accept language header","title":"Arguments - Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#best_match/1-arguments"},{"type":"function","doc":"* `{:ok, language_tag}` or\n\n* `{:error, reason}`","title":"Returns - Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#best_match/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match(\"da;q=0.1,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: TestBackend.Cldr,\n       canonical_locale_name: \"zh-TW\",\n       cldr_locale_name: :\"zh-Hant\",\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: nil,\n       language: \"zh\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :\"zh-Hant\",\n       requested_locale_name: \"zh-TW\",\n       script: :Hant,\n       territory: :TW,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match(\"da;q=0.1,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: TestBackend.Cldr,\n       canonical_locale_name: \"zh-TW\",\n       cldr_locale_name: :\"zh-Hant\",\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: nil,\n       language: \"zh\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :\"zh-Hant\",\n       requested_locale_name: \"zh-TW\",\n       script: :Hant,\n       territory: :TW,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match(\"xx,yy;q=0.3\")\n    {:error,\n     {Cldr.NoMatchingLocale,\n      \"No configured locale could be matched to \\\"xx,yy;q=0.3\\\"\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match(\"invalid_tag\")\n    {:error, {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.AcceptLanguage.best_match/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#best_match/1-examples"},{"type":"function","doc":"Parses an `Accept-Language` header value in its string\nor tokenized form to return a tuple of the form\n`{:ok, [{quality, %Cldr.LanguageTag{}}, ...]}` sorted by quality.","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.parse/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse/1"},{"type":"function","doc":"* `accept-language` is any string in the format defined by\n  [rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)\n\n* `backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module","title":"Arguments - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse/1-arguments"},{"type":"function","doc":"* `{:ok, [{quality, language_tag}, ...]}` or\n\n* `{:error, {Cldr.AcceptLanguageError, String.t}}`\n\nIf at least one valid language tag is found but errors are also\ndetected on one more more tags, an `{ok, list}` tuple is returned\nwith an error tuple for each invalid tag added at the end of the list.","title":"Returns - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse/1-returns"},{"type":"function","doc":"iex> Cldr.AcceptLanguage.parse(\"da,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     [\n       {1.0,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"da\",\n          cldr_locale_name: :da,\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"da\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :da,\n          requested_locale_name: \"da\",\n          script: :Latn,\n          territory: :DK,\n          transform: %{},\n          language_variants: []\n        }},\n       {0.3,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"zh-TW\",\n          cldr_locale_name: :\"zh-Hant\",\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"zh\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :\"zh-Hant\",\n          requested_locale_name: \"zh-TW\",\n          script: :Hant,\n          territory: :TW,\n          transform: %{},\n          language_variants: []\n        }}\n     ]}\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.parse(\"invalid_tag\")\n    {:error,\n     {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.parse(\"da,zh-TW;q=0.3,invalid_tag\")\n    {:ok,\n     [\n       {1.0,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"da\",\n          cldr_locale_name: :da,\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"da\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :da,\n          requested_locale_name: \"da\",\n          script: :Latn,\n          territory: :DK,\n          transform: %{},\n          language_variants: []\n        }},\n       {0.3,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"zh-TW\",\n          cldr_locale_name: :\"zh-Hant\",\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"zh\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :\"zh-Hant\",\n          requested_locale_name: \"zh-TW\",\n          script: :Hant,\n          territory: :TW,\n          transform: %{},\n          language_variants: []\n        }},\n       {:error,\n        {Cldr.LanguageTag.ParseError,\n         \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n     ]}","title":"Example - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse/1-example"},{"type":"function","doc":"Parses an `Accept-Language` header value in its string\nor tokenized form to produce a list of tuples of the form\n`[{quality, %Cldr.LanguageTag{}}, ...]` sorted by quality\nin descending order.","title":"Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse!/1"},{"type":"function","doc":"* `accept-language` is any string in the format defined by [rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)","title":"Arguments - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse!/1-arguments"},{"type":"function","doc":"* `{:ok, [{quality, language_tag}, ...]}` or\n\n* raises a `Cldr.AcceptLanguageError` exception\n\nIf at least one valid language tag is found but errors are also\ndetected on one more more tags, an `{ok, list}` tuple is returned\nwith an error tuple for each invalid tag added at the end of the list.","title":"Returns - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse!/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!(\"da,zh-TW;q=0.3\")\n    [\n      {1.0,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"da\",\n         cldr_locale_name: :da,\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"da\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :da,\n         requested_locale_name: \"da\",\n         script: :Latn,\n         territory: :DK,\n         transform: %{},\n         language_variants: []\n       }},\n      {0.3,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"zh-TW\",\n         cldr_locale_name: :\"zh-Hant\",\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"zh\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :\"zh-Hant\",\n         requested_locale_name: \"zh-TW\",\n         script: :Hant,\n         territory: :TW,\n         transform: %{},\n         language_variants: []\n       }}\n    ]\n\n    Bonfire.Common.Localise.Cldr.AcceptLanguage.parse! \"invalid_tag\"\n    ** (Cldr.AcceptLanguageError) \"Expected a BCP47 language tag. Could not parse the remaining \"g\" starting at position 11\n        (ex_cldr) lib/cldr/accept_language.ex:304: Cldr.AcceptLanguage.parse!/1\n\n    iex> Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!(\"da,zh-TW;q=0.3,invalid_tag\")\n    [\n      {1.0,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"da\",\n         cldr_locale_name: :da,\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"da\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :da,\n         requested_locale_name: \"da\",\n         script: :Latn,\n         territory: :DK,\n         transform: %{},\n         language_variants: []\n       }},\n      {0.3,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"zh-TW\",\n         cldr_locale_name: :\"zh-Hant\",\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"zh\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :\"zh-Hant\",\n         requested_locale_name: \"zh-TW\",\n         script: :Hant,\n         territory: :TW,\n         transform: %{},\n         language_variants: []\n       }},\n      {:error,\n       {Cldr.LanguageTag.ParseError,\n        \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n    ]","title":"Example - Bonfire.Common.Localise.Cldr.AcceptLanguage.parse!/1","ref":"Bonfire.Common.Localise.Cldr.AcceptLanguage.html#parse!/1-example"},{"type":"module","doc":"Data functions to retrieve localised calendar\ninformation.\n\n`Cldr` defines formats for several calendars, the names of which\nare returned by `Cldr.known_calendars/0`.\n\nCurrently this implementation only supports the `:gregorian`,\n`:persian`, `:coptic` and `ethiopic` calendars.\n\nThe `:gregorian` calendar aligns with the proleptic Gregorian calendar\ndefined by Elixir, `Calendar.ISO`.","title":"Bonfire.Common.Localise.Cldr.Calendar","ref":"Bonfire.Common.Localise.Cldr.Calendar.html"},{"type":"function","doc":"Return the calendar module for a locale.","title":"Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_locale/1"},{"type":"function","doc":"* `:locale` is any locale or locale name validated\n  by `Cldr.validate_locale/2`.  The default is\n  `Cldr.get_locale()` which returns the locale\n  set for the current process","title":"Arguments - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_locale/1-arguments"},{"type":"function","doc":"* `{:ok, calendar_module}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_locale/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale \"en-GB\"\n    {:ok, Cldr.Calendar.GB}\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale \"en-GB-u-ca-gregory\"\n    {:ok, Cldr.Calendar.Gregorian}\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale \"en\"\n    {:ok, Cldr.Calendar.US}\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale \"fa-IR\"\n    {:ok, Cldr.Calendar.Persian}","title":"Examples - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_locale/1-examples"},{"type":"function","doc":"Returns the calendar module preferred for\na territory.","title":"Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1"},{"type":"function","doc":"* `territory` is any valid ISO3166-2 code as\n  an `String.t` or upcased `atom()`","title":"Arguments - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1-arguments"},{"type":"function","doc":"* `{:ok, calendar_module}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory(:US)\n    {:ok, Cldr.Calendar.US}\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory :XX\n    {:error, {Cldr.UnknownTerritoryError, \"The territory :XX is unknown\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1-examples"},{"type":"function","doc":"The overwhelming majority of territories have\n`:gregorian` as their first preferred calendar\nand therefore `Cldr.Calendar.Gregorian`\nwill be returned for most territories.\n\nReturning any other calendar module would require:\n\n1. That another calendar is preferred over `:gregorian`\n   for a territory\n\n2. That a calendar module is available to support\n   that calendar.\n\nAs an example, Iran (territory `:IR`) prefers the\n`:persian` calendar. If the optional library\n[ex_cldr_calendars_persian](https://hex.pm/packages/ex_cldr_calendars_persian)\nis installed, the calendar module `Cldr.Calendar.Persian` will\nbe returned. If it is not installed, `Cldr.Calendar.Gregorian`\nwill be returned as `:gregorian` is the second preference\nfor `:IR`.","title":"Notes - Bonfire.Common.Localise.Cldr.Calendar.calendar_from_territory/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#calendar_from_territory/1-notes"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.cyclic_years/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#cyclic_years/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.day_periods/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#day_periods/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.days/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#days/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.eras/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#eras/2"},{"type":"function","doc":"Localize a date by converting it to calendar\nintrospected from the provided or default locale.","title":"Bonfire.Common.Localise.Cldr.Calendar.localize/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/1"},{"type":"function","doc":"* `date` is any `t:Date.t/0`.\n\n* `options` is a `t:Keyword.t/0` list of options. The default is\n  `[]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Calendar.localize/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/1-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name in the list returned by\n  `Cldr.known_locale_names/1` or a `Cldr.LanguageTag` struct\n  returned by `Cldr.Locale.new!/2`. The default is `Cldr.get_locale()`.","title":"Options - Bonfire.Common.Localise.Cldr.Calendar.localize/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/1-options"},{"type":"function","doc":"* `{:ok, date}` where `date` is converted into the calendar\n  associated with the current or provided locale.","title":"Returns - Bonfire.Common.Localise.Cldr.Calendar.localize/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2022-06-09], locale: \"fr\"\n    {:ok, %Date{year: 2022, month: 6, day: 9, calendar: Cldr.Calendar.FR}}","title":"Examples - Bonfire.Common.Localise.Cldr.Calendar.localize/1","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.localize/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/2"},{"type":"function","doc":"Returns a localized string for a part of\na `t:Date.t/0`.","title":"Bonfire.Common.Localise.Cldr.Calendar.localize/3","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/3"},{"type":"function","doc":"* `date` is any `t:Date.t/0`.\n\n* `part` is one of `:era`, `:quarter`, `:month`,\n  `:day_of_week` or `:days_of_week`.\n\n* `options` is a `t:Keyword.t/0` list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Calendar.localize/3","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/3-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name in the list returned by\n  `Cldr.known_locale_names/1` or a `Cldr.LanguageTag` struct\n  returned by `Cldr.Locale.new!/2`. The default is `Cldr.get_locale()`.\n\n* `:format` is one of `:wide`, `:abbreviated` or `:narrow`. The\n  default is `:abbreviated`.\n\n* `:era` will, if set to `:variant` will localize the era using\n  the variant data. In the `:en` locale, this will produce `CE` and\n  `BCE` rather than the default `AD` and `BC`.","title":"Options - Bonfire.Common.Localise.Cldr.Calendar.localize/3","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/3-options"},{"type":"function","doc":"* A string representing the localized date part, or\n\n* A list of strings representing the days of the week for\n  when `part` is `:days_of_week`. The days are in week order for\n  the given date's calendar, or\n\n* `{error, {exception, reason}}` if an error is detected","title":"Returns - Bonfire.Common.Localise.Cldr.Calendar.localize/3","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/3-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-01-01], :era\n    \"AD\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-01-01], :era, era: :variant\n    \"CE\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-01-01], :day_of_week\n    \"Tue\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[0001-01-01], :day_of_week\n    \"Mon\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-01-01], :days_of_week\n    [{1, \"Mon\"}, {2, \"Tue\"}, {3, \"Wed\"}, {4, \"Thu\"}, {5, \"Fri\"}, {6, \"Sat\"}, {7, \"Sun\"}]\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :era\n    \"AD\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :quarter\n    \"Q2\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :month\n    \"Jun\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :day_of_week\n    \"Sat\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :day_of_week, format: :wide\n    \"Saturday\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :day_of_week, format: :narrow\n    \"S\"\n\n    iex> Bonfire.Common.Localise.Cldr.Calendar.localize ~D[2019-06-01], :day_of_week, locale: \"ar\"\n    \"السبت\"","title":"Examples - Bonfire.Common.Localise.Cldr.Calendar.localize/3","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#localize/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.month_patterns/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#month_patterns/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.months/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#months/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Calendar.quarters/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#quarters/2"},{"type":"function","doc":"Returns a keyword list of options than can be applied to\n`NimbleStrftime.format/3`.\n\nThe hex package [nimble_strftime](https://hex.pm/packages/nimble_strftime)\nprovides a `format/3` function to format dates, times and datetimes.\nIt takes a set of options that can return day, month and am/pm names.\n\n`strftime_options!` returns a keyword list than can be used as these\noptions to return localised names for days, months and am/pm.","title":"Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2"},{"type":"function","doc":"* `locale` is any locale returned by `MyApp.Cldr.known_locale_names/0`. The\n  default is `MyApp.Cldr.get_locale/0`\n\n* `options` is a set of keyword options. The default is `[]`","title":"Arguments - Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2-arguments"},{"type":"function","doc":"* `:calendar` is the name of any known CLDR calendar. The default\n  is `:gregorian`.","title":"Options - Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2-options"},{"type":"function","doc":"iex: MyApp.Cldr.Calendar.strftime_options!()\n    [\n      am_pm_names: #Function<0.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      month_names: #Function<1.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      abbreviated_month_names: #Function<2.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      day_of_week_names: #Function<3.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      abbreviated_day_of_week_names: #Function<4.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>\n    ]","title":"Example - Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2-example"},{"type":"function","doc":"iex: NimbleStrftime.format(Date.utc_today(), MyApp.Cldr.Calendar.strftime_options!())","title":"Typical usage - Bonfire.Common.Localise.Cldr.Calendar.strftime_options!/2","ref":"Bonfire.Common.Localise.Cldr.Calendar.html#strftime_options!/2-typical-usage"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Currency","ref":"Bonfire.Common.Localise.Cldr.Currency.html"},{"type":"function","doc":"Returns a map of the metadata for all currencies for\na given locale.","title":"Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale/3"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale/3-arguments"},{"type":"function","doc":"* `{:ok, currency_map}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale/3-returns"},{"type":"function","doc":"MyApp.Cldr.Currency.currencies_for_locale(\"en\")\n  => {:ok,\n   %{\n     FJD: %Cldr.Currency{\n       cash_digits: 2,\n       cash_rounding: 0,\n       code: \"FJD\",\n       count: %{one: \"Fijian dollar\", other: \"Fijian dollars\"},\n       digits: 2,\n       from: nil,\n       iso_digits: 2,\n       name: \"Fijian Dollar\",\n       narrow_symbol: \"$\",\n       rounding: 0,\n       symbol: \"FJD\",\n       tender: true,\n       to: nil\n     },\n     SUR: %Cldr.Currency{\n       cash_digits: 2,\n       cash_rounding: 0,\n       code: \"SUR\",\n       count: %{one: \"Soviet rouble\", other: \"Soviet roubles\"},\n       digits: 2,\n       from: nil,\n       iso_digits: nil,\n       name: \"Soviet Rouble\",\n       narrow_symbol: nil,\n       rounding: 0,\n       symbol: \"SUR\",\n       tender: true,\n       to: nil\n     },\n     ...\n    }}","title":"Example - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale/3-example"},{"type":"function","doc":"Returns a map of the metadata for all currencies for\na given locale and raises on error.","title":"Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale!/3"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale!/3-arguments"},{"type":"function","doc":"* `{:ok, currency_map}` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale!/3-returns"},{"type":"function","doc":"MyApp.Cldr.Currency.currencies_for_locale!(\"en\")\n  => %{\n    FJD: %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"FJD\",\n      count: %{one: \"Fijian dollar\", other: \"Fijian dollars\"},\n      digits: 2,\n      from: nil,\n      iso_digits: 2,\n      name: \"Fijian Dollar\",\n      narrow_symbol: \"$\",\n      rounding: 0,\n      symbol: \"FJD\",\n      tender: true,\n      to: nil\n    },\n    SUR: %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"SUR\",\n      count: %{one: \"Soviet rouble\", other: \"Soviet roubles\"},\n      digits: 2,\n      from: nil,\n      iso_digits: nil,\n      name: \"Soviet Rouble\",\n      narrow_symbol: nil,\n      rounding: 0,\n      symbol: \"SUR\",\n      tender: true,\n      to: nil\n    },\n    ...\n   }","title":"Example - Bonfire.Common.Localise.Cldr.Currency.currencies_for_locale!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currencies_for_locale!/3-example"},{"type":"function","doc":"Returns the currency metadata for the requested currency code.","title":"Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2"},{"type":"function","doc":"* `currency_or_currency_code` is a `binary` or `atom` representation\n   of an ISO 4217 currency code, or a `%Cldr.Currency{}` struct.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`","title":"Options - Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2-options"},{"type":"function","doc":"* A `{:ok, currency}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.currency_for_code(\"AUD\")\n    {:ok,\n      %Cldr.Currency{\n        cash_digits: 2,\n        cash_rounding: 0,\n        code: \"AUD\",\n        count: %{one: \"Australian dollar\", other: \"Australian dollars\"},\n        digits: 2,\n        iso_digits: 2,\n        name: \"Australian Dollar\",\n        narrow_symbol: \"$\",\n        rounding: 0,\n        symbol: \"A$\",\n        tender: true\n    }}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.currency_for_code(\"THB\")\n    {:ok,\n      %Cldr.Currency{\n        cash_digits: 2,\n        cash_rounding: 0,\n        code: \"THB\",\n        count: %{one: \"Thai baht\", other: \"Thai baht\"},\n        digits: 2,\n        iso_digits: 2,\n        name: \"Thai Baht\",\n        narrow_symbol: \"฿\",\n        rounding: 0,\n        symbol: \"THB\",\n        tender: true\n    }}","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.currency_for_code/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code/2-examples"},{"type":"function","doc":"Returns the currency metadata for the requested currency code.","title":"Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2"},{"type":"function","doc":"* `currency_or_currency_code` is a `binary` or `atom` representation\n   of an ISO 4217 currency code, or a `%Cldr.Currency{}` struct.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`","title":"Options - Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2-options"},{"type":"function","doc":"* A `t:Cldr.Current.t/0` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.currency_for_code!(\"AUD\")\n    %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"AUD\",\n      count: %{one: \"Australian dollar\", other: \"Australian dollars\"},\n      digits: 2,\n      iso_digits: 2,\n      name: \"Australian Dollar\",\n      narrow_symbol: \"$\",\n      rounding: 0,\n      symbol: \"A$\",\n      tender: true\n    }\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.currency_for_code!(\"THB\")\n    %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"THB\",\n      count: %{one: \"Thai baht\", other: \"Thai baht\"},\n      digits: 2,\n      iso_digits: 2,\n      name: \"Thai Baht\",\n      narrow_symbol: \"฿\",\n      rounding: 0,\n      symbol: \"THB\",\n      tender: true\n    }","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.currency_for_code!/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_for_code!/2-examples"},{"type":"function","doc":"Returns the effective currency for a given locale","title":"Bonfire.Common.Localise.Cldr.Currency.currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_from_locale/1"},{"type":"function","doc":"* `locale` is a `Cldr.LanguageTag` struct returned by\n  `Cldr.Locale.new!/2`","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_from_locale/1-arguments"},{"type":"function","doc":"* A ISO 4217 currency code as an upcased atom","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_from_locale/1-returns"},{"type":"function","doc":"iex> {:ok, locale} = Bonfire.Common.Localise.Cldr.validate_locale(\"en\")\n    iex> Bonfire.Common.Localise.Cldr.Currency.currency_from_locale locale\n    :USD\n\n    iex> {:ok, locale} = Bonfire.Common.Localise.Cldr.validate_locale(\"en-AU\")\n    iex> Bonfire.Common.Localise.Cldr.Currency.currency_from_locale locale\n    :AUD\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.currency_from_locale(\"en-GB\")\n    :GBP","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_from_locale/1-examples"},{"type":"function","doc":"Returns a list of historic and the current\ncurrency for a given locale.","title":"Bonfire.Common.Localise.Cldr.Currency.currency_history_for_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_history_for_locale/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_history_for_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_history_for_locale/1-arguments"},{"type":"function","doc":"iex> MyApp.Cldr.Currency.currency_history_for_locale(\"en\")\n    {:ok,\n        %{\n        USD: %{from: ~D[1792-01-01], to: nil},\n        USN: %{tender: false},\n        USS: %{from: nil, tender: false, to: ~D[2014-03-01]}\n      }\n    }","title":"Example - Bonfire.Common.Localise.Cldr.Currency.currency_history_for_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_history_for_locale/1-example"},{"type":"function","doc":"Returns a map that matches a currency string to a\ncurrency code.\n\nA currency string is a localised name or symbol\nrepresenting a currency in a locale-specific manner.","title":"Bonfire.Common.Localise.Cldr.Currency.currency_strings/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings/3"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_strings/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings/3-arguments"},{"type":"function","doc":"* `{:ok, currency_string_map}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currency_strings/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings/3-returns"},{"type":"function","doc":"MyApp.Cldr.Currency.currency_strings(\"en\")\n    => {:ok,\n     %{\n       \"mexican silver pesos\" => :MXP,\n       \"sudanese dinar\" => :SDD,\n       \"bad\" => :BAD,\n       \"rsd\" => :RSD,\n       \"swazi lilangeni\" => :SZL,\n       \"zairean new zaire\" => :ZRN,\n       \"guyanaese dollars\" => :GYD,\n       \"equatorial guinean ekwele\" => :GQE,\n       ...\n      }}","title":"Example - Bonfire.Common.Localise.Cldr.Currency.currency_strings/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings/3-example"},{"type":"function","doc":"Returns a map that matches a currency string to a\ncurrency code or raises an exception.\n\nA currency string is a localised name or symbol\nrepresenting a currency in a locale-specific manner.","title":"Bonfire.Common.Localise.Cldr.Currency.currency_strings!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings!/3"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.currency_strings!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings!/3-arguments"},{"type":"function","doc":"* `{:ok, currency_string_map}` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.currency_strings!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings!/3-returns"},{"type":"function","doc":"MyApp.Cldr.Currency.currency_strings!(\"en\")\n    => %{\n      \"mexican silver pesos\" => :MXP,\n      \"sudanese dinar\" => :SDD,\n      \"bad\" => :BAD,\n      \"rsd\" => :RSD,\n      \"swazi lilangeni\" => :SZL,\n      \"zairean new zaire\" => :ZRN,\n      \"guyanaese dollars\" => :GYD,\n      \"equatorial guinean ekwele\" => :GQE,\n      ...\n     }","title":"Example - Bonfire.Common.Localise.Cldr.Currency.currency_strings!/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#currency_strings!/3-example"},{"type":"function","doc":"Returns the current currency for a given locale.\n\nThis function does not consider the `U` extenion\nparameters `cu` or `rg`. It is recommended to us\n`Cldr.Currency.currency_from_locale/1` in most\ncircumstances.","title":"Bonfire.Common.Localise.Cldr.Currency.current_currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_currency_from_locale/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.current_currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_currency_from_locale/1-arguments"},{"type":"function","doc":"iex> MyApp.Cldr.Currency.current_currency_from_locale(\"en\")\n    :USD\n\n    iex> MyApp.Cldr.Currency.current_currency_from_locale(\"en-AU\")\n    :AUD","title":"Example - Bonfire.Common.Localise.Cldr.Currency.current_currency_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_currency_from_locale/1-example"},{"type":"function","doc":"Returns a mapping from a territory code to its\ncurrent currency code.\n\nIf a territory has no current currency (like\nAntartica, territory code `:AQ`) then no\nmapping is returned for that territory.","title":"Bonfire.Common.Localise.Cldr.Currency.current_territory_currencies/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_territory_currencies/0"},{"type":"function","doc":"* A map of `{territory_code => Cldr.Currency.t}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.current_territory_currencies/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_territory_currencies/0-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.current_territory_currencies()","title":"Example - Bonfire.Common.Localise.Cldr.Currency.current_territory_currencies/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#current_territory_currencies/0-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Currency.known_currencies/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currencies/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency?/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency?/1"},{"type":"function","doc":"Returns a 2-tuple indicating if the supplied currency code is known.","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_code/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code/1"},{"type":"function","doc":"* `currency_code` is a `binary` or `atom` representing an ISO4217\n  currency code","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.known_currency_code/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code/1-arguments"},{"type":"function","doc":"* `{:ok, currency_code}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.known_currency_code/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_code(\"AUD\")\n    {:ok, :AUD}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_code(\"GGG\")\n    {:error, {Cldr.UnknownCurrencyError, \"The currency \\\"GGG\\\" is invalid\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.known_currency_code/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code/1-examples"},{"type":"function","doc":"Returns a boolean indicating if the supplied currency code is known.","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code?/1"},{"type":"function","doc":"* `currency_code` is a `binary` or `atom` representing an ISO4217\n  currency code","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code?/1-arguments"},{"type":"function","doc":"* `true` or `false`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code?/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_code?(\"AUD\")\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_code?(\"GGG\")\n    false\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_code?(:XCV)\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.known_currency_code?/1","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_code?/1-examples"},{"type":"function","doc":"Returns a list of all known currency codes.","title":"Bonfire.Common.Localise.Cldr.Currency.known_currency_codes/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_codes/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.known_currency_codes()","title":"Example - Bonfire.Common.Localise.Cldr.Currency.known_currency_codes/0","ref":"Bonfire.Common.Localise.Cldr.Currency.html#known_currency_codes/0-example"},{"type":"function","doc":"Returns a `Currency` struct created from the arguments.","title":"Bonfire.Common.Localise.Cldr.Currency.new/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2"},{"type":"function","doc":"* `currency` is a private use currency code in a format defined by\n  [ISO4217](https://en.wikipedia.org/wiki/ISO_4217)\n  which is `X` followed by two alphanumeric characters.\n\n* `options` is a map of options representing the optional elements of\n  the `Cldr.Currency.t` struct.","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.new/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2-arguments"},{"type":"function","doc":"* `:name` is the name of the currency. Required.\n* `:digits` is the precision of the currency. Required.\n* `:symbol` is the currency symbol. Optional.\n* `:narrow_symbol` is an alternative narrow symbol. Optional.\n* `:round_nearest` is the rounding precision such as `0.05`. Optional.\n* `:alt_code` is an alternative currency code for application use.\n* `:cash_digits` is the precision of the currency when used as cash. Optional.\n* `:cash_rounding_nearest` is the rounding precision when used as cash\n  such as `0.05`. Optional.","title":"Options - Bonfire.Common.Localise.Cldr.Currency.new/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2-options"},{"type":"function","doc":"* `{:ok, Cldr.Currency.t}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.new/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.new(:XAE, name: \"Custom Name\", digits: 0)\n    {:ok,\n     %Cldr.Currency{\n       alt_code: :XAE,\n       cash_digits: 0,\n       cash_rounding: nil,\n       code: :XAE,\n       count: %{other: \"Custom Name\"},\n       digits: 0,\n       from: nil,\n       iso_digits: 0,\n       name: \"Custom Name\",\n       narrow_symbol: nil,\n       rounding: 0,\n       symbol: \"XAE\",\n       tender: false,\n       to: nil\n     }}\n    iex> MyApp.Cldr.Currency.new(:XAH, name: \"Custom Name\")\n    {:error, \"Required options are missing. Required options are [:name, :digits]\"}\n    iex> Bonfire.Common.Localise.Cldr.Currency.new(:XAE, name: \"XAE\", digits: 0)\n    {:error, {Cldr.CurrencyAlreadyDefined, \"Currency :XAE is already defined.\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Currency.new/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#new/2-example"},{"type":"function","doc":"Returns the appropriate currency display name for the `currency`, based\non the plural rules in effect for the `locale`.","title":"Bonfire.Common.Localise.Cldr.Currency.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3"},{"type":"function","doc":"* `number` is an integer, float or `Decimal`\n\n* `currency` is any currency returned by `Cldr.Currency.known_currencies/0`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3-arguments"},{"type":"function","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`. The\n  default is `Bonfire.Common.Localise.Cldr.get_locale/0`","title":"Options - Bonfire.Common.Localise.Cldr.Currency.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3-options"},{"type":"function","doc":"* `{:ok, plural_string}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Currency.pluralize(1, :USD)\n    {:ok, \"US dollar\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.pluralize(3, :USD)\n    {:ok, \"US dollars\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.pluralize(12, :USD, locale: \"zh\")\n    {:ok, \"美元\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.pluralize(12, :USD, locale: \"fr\")\n    {:ok, \"dollars des États-Unis\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Currency.pluralize(1, :USD, locale: \"fr\")\n    {:ok, \"dollar des États-Unis\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Currency.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Currency.html#pluralize/3-examples"},{"type":"function","doc":"Returns the strings associated with a currency\nin a given locale.","title":"Bonfire.Common.Localise.Cldr.Currency.strings_for_currency/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#strings_for_currency/2"},{"type":"function","doc":"* `currency` is an ISO4217 currency code\n\n* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.Currency.strings_for_currency/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#strings_for_currency/2-arguments"},{"type":"function","doc":"* A list of strings or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Currency.strings_for_currency/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#strings_for_currency/2-returns"},{"type":"function","doc":"iex> MyApp.Cldr.Currency.strings_for_currency(:AUD, \"en\")\n    ...> |> Enum.sort()\n    [\"a$\", \"aud\", \"australian dollar\", \"australian dollars\"]","title":"Example - Bonfire.Common.Localise.Cldr.Currency.strings_for_currency/2","ref":"Bonfire.Common.Localise.Cldr.Currency.html#strings_for_currency/2-example"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Date","ref":"Bonfire.Common.Localise.Cldr.Date.html"},{"type":"function","doc":"Formats a date according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html).","title":"Bonfire.Common.Localise.Cldr.Date.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2"},{"type":"function","doc":"* `date` is a `t:Date.t/0` struct or any map that contains one or more\n  of the keys `:year`, `:month`, `:day` and optionally `:calendar`.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.Date.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full`, or a format id\n  or a format string. The default is `:medium` for full dates (that is,\n  dates having `:year`, `:month`, `:day` and `:calendar` fields). The\n  default for partial dates is to derive a candidate format id from the date and\n  find the best match from the formats returned by\n  `Cldr.Date.available_formats/3`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:locale` any locale returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted date digits\n  should be transliterated.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.Date.available_formats/3`\n  to see which formats have these variants. Currently no date-specific\n  formats have such variants but they may in the future.\n\n* `:era` which, if set to `:variant`, will use a variant for the era if one\n  is available in the requested locale. In the `:en` locale, for example, `era: :variant`\n  will return `CE` instead of `AD` and `BCE` instead of `BC`.","title":"Options - Bonfire.Common.Localise.Cldr.Date.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2-options"},{"type":"function","doc":"* `{:ok, formatted_string}` or\n\n* `{:error, reason}`","title":"Returns - Bonfire.Common.Localise.Cldr.Date.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2-returns"},{"type":"function","doc":"# Full dates have the default format `:medium`\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(~D[2017-07-10], locale: :en)\n    {:ok, \"Jul 10, 2017\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(~D[2017-07-10], format: :medium, locale: :en)\n    {:ok, \"Jul 10, 2017\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(~D[2017-07-10], format: :full, locale: :en)\n    {:ok, \"Monday, July 10, 2017\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(~D[2017-07-10], format: :short, locale: :en)\n    {:ok, \"7/10/17\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(~D[2017-07-10], format: :short, locale: \"fr\")\n    {:ok, \"10/07/2017\"}\n\n    # A partial date with a derived \"best match\" format\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(%{year: 2024, month: 6}, locale: \"fr\")\n    {:ok, \"06/2024\"}\n\n    # A partial date with a best match CLDR-defined format\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(%{year: 2024, month: 6}, format: :yMMM, locale: \"fr\")\n    {:ok, \"juin 2024\"}\n\n    # Sometimes the available date fields can't be mapped to an available\n    # CLDR defined format.\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string(%{year: 2024, day: 3}, locale: \"fr\")\n    {:error,\n     {Cldr.DateTime.UnresolvedFormat, \"No available format resolved for :dy\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Date.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string/2-examples"},{"type":"function","doc":"Formats a date according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)\nor raises an exception.","title":"Bonfire.Common.Localise.Cldr.Date.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2"},{"type":"function","doc":"* `date` is a `t:Date.t/0` struct or any map that contains one or more\n  of the keys `:year`, `:month`, `:day` and optionally `:calendar`.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.Date.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full`, or a format id\n  or a format string. The default is `:medium` for full dates (that is,\n  dates having `:year`, `:month`, `:day` and `:calendar` fields). The\n  default for partial dates is to derive a candidate format id from the date and\n  find the best match from the formats returned by\n  `Cldr.Date.available_formats/3`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:locale` any locale returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted date digits\n  should be transliterated.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.Date.available_formats/3`\n  to see which formats have these variants. Currently no date-specific\n  formats have such variants but they may in the future.\n\n* `:era` which, if set to `:variant`, will use a variant for the era if one\n  is available in the requested locale. In the `:en` locale, for example, `era: :variant`\n  will return `CE` instead of `AD` and `BCE` instead of `BC`.","title":"Options - Bonfire.Common.Localise.Cldr.Date.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2-options"},{"type":"function","doc":"* `formatted_date` or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.Date.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Date.to_string!(~D[2017-07-10], locale: :en)\n    \"Jul 10, 2017\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(~D[2017-07-10], format: :medium, locale: :en)\n    \"Jul 10, 2017\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(~D[2017-07-10], format: :full, locale: :en)\n    \"Monday, July 10, 2017\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(~D[2017-07-10], format: :short, locale: :en)\n    \"7/10/17\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(~D[2017-07-10], format: :short, locale: \"fr\")\n    \"10/07/2017\"\n\n    # A partial date with a derived \"best match\" format\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(%{year: 2024, month: 6}, locale: \"fr\")\n    \"06/2024\"\n\n    # A partial date with a best match CLDR-defined format\n    iex> Bonfire.Common.Localise.Cldr.Date.to_string!(%{year: 2024, month: 6}, format: :yMMM, locale: \"fr\")\n    \"juin 2024\"","title":"Examples - Bonfire.Common.Localise.Cldr.Date.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Date.html#to_string!/2-examples"},{"type":"module","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3` and `Bonfire.Common.Localise.Cldr.Interval.to_string/3`","title":"Bonfire.Common.Localise.Cldr.Date.Interval","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Date.Interval.do_to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#do_to_string!/3"},{"type":"function","doc":"Returns a interval formed from two dates as\na localised string.","title":"Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.date` type.\n\n* `to` is any map that conforms to the\n  `Calendar.date` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone date.","title":"Arguments - Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The\n  alternatives are `:date`, `:month_and_day`, `:month`\n  and `:year_and_month`. The default is `:date`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","title":"Options - Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3-options"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3-returns"},{"type":"function","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","title":"Notes - Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-12-31]\n    {:ok, \"Jan 1 – Dec 31, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12]\n    {:ok, \"Jan 1 – 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month\n    {:ok, \"January – December 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :short\n    {:ok, \"1/1/2020 – 1/12/2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long, locale: \"fr\"\n    {:ok, \"mer. 1 – dim. 12 janv. 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long, locale: \"th\", number_system: :thai\n    {:ok, \"พ. ๑ ม.ค. – อา. ๑๒ ม.ค. ๒๐๒๐\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Date.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string/3-examples"},{"type":"function","doc":"Returns a interval formed from two dates as\na localised string.","title":"Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.date` type.\n\n* `to` is any map that conforms to the\n  `Calendar.date` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone date.","title":"Arguments - Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The\n  alternatives are `:date`, `:month_and_day`, `:month`\n  and `:year_and_month`. The default is `:date`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3-options"},{"type":"function","doc":"* `string` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3-returns"},{"type":"function","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","title":"Notes - Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-12-31])\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12])\n    \"Jan 1 – 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :long\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-12-01]),\n    ...> format: :long, style: :year_and_month\n    \"January – December 2020\"\n\n    iex> use CalendarInterval\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! ~I\"2020-01/12\"\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :short\n    \"1/1/2020 – 1/12/2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :long, locale: \"fr\"\n    \"mer. 1 – dim. 12 janv. 2020\"","title":"Examples - Bonfire.Common.Localise.Cldr.Date.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Date.Interval.html#to_string!/3-examples"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime","ref":"Bonfire.Common.Localise.Cldr.DateTime.html"},{"type":"function","doc":"Formats a DateTime according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)","title":"Bonfire.Common.Localise.Cldr.DateTime.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2"},{"type":"function","doc":"* `datetime` is a `t:DateTime.t/0` `or t:NaiveDateTime.t/0`struct or any map that contains\n  one or more of the keys `:year`, `:month`, `:day`, `:hour`, `:minute` and `:second` or\n  `:microsecond` with optional `:time_zone`, `:zone_abbr`, `:utc_offset`, `:std_offset`\n  and `:calendar` fields.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full` or a format string or\n  any of the keys in the map returned by `Cldr.DateTime.date_time_formats/3`.\n  The default is `:medium`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:date_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n  this option is used to format the date part of the date time. This option is\n  only acceptable if the `:format` option is not specified, or is specified as either\n  `:short`, `:medium`, `:long`, `:full`. If `:date_format` is not specified\n  then the date format is defined by the `:format` option.\n\n* `:time_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n  this option is used to format the time part of the date time. This option is\n  only acceptable if the `:format` option is not specified, or is specified as either\n  `:short`, `:medium`, `:long`, `:full`. If `:time_format` is not specified\n  then the time format is defined by the `:format` option.\n\n* `:style` is either `:at` or `:default`. When set to `:at` the datetime may\n  be formatted with a localised string representing `  at  ` if such\n  a format exists. See `Cldr.DateTime.Format.date_time_at_formats/2`.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.DateTime.available_formats/3`\n  to see which formats have these variants.\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted datetime digits should\n  be transliterated.\n\n* `:era` which, if set to `:variant`, will use a variant for the era if one\n  is available in the requested locale. In the `:en` locale, for example, `era: :variant`\n  will return `CE` instead of `AD` and `BCE` instead of `BC`.\n\n* `period: :variant` will use a variant for the time period and flexible time period if\n  one is available in the locale.  For example, in the `:en` locale `period: :variant` will\n  return \"pm\" instead of \"PM\".","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2-options"},{"type":"function","doc":"* `{:ok, formatted_datetime}` or\n\n* `{:error, reason}`","title":"Returns - Bonfire.Common.Localise.Cldr.DateTime.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2-returns"},{"type":"function","doc":"iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime\n    {:ok, \"Jan 1, 2000, 11:59:59 PM\"}\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime, locale: \"en\"\n    {:ok, \"Jan 1, 2000, 11:59:59 PM\"}\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime, format: :long, locale: \"en\"\n    {:ok, \"January 1, 2000, 11:59:59 PM UTC\"}\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime, format: :hms, locale: \"en\"\n    {:ok, \"11:59:59 PM\"}\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime, format: :full, locale: \"en\"\n    {:ok, \"Saturday, January 1, 2000, 11:59:59 PM GMT\"}\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string datetime, format: :full, locale: \"fr\"\n    {:ok, \"samedi 1 janvier 2000, 23:59:59 UTC\"}","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string/2-examples"},{"type":"function","doc":"Formats a DateTime according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)\nreturning a formatted string or raising on error.","title":"Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2"},{"type":"function","doc":"* `datetime` is a `t:DateTime.t/0` `or t:NaiveDateTime.t/0`struct or any map that contains\n  one or more of the keys `:year`, `:month`, `:day`, `:hour`, `:minute` and `:second` or\n  `:microsecond` with optional `:time_zone`, `:zone_abbr`, `:utc_offset`, `:std_offset`\n  and `:calendar` fields.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full` or a format string or\n  any of the keys in the map returned by `Cldr.DateTime.date_time_formats/3`.\n  The default is `:medium`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:date_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n  this option is used to format the date part of the date time. This option is\n  only acceptable if the `:format` option is not specified, or is specified as either\n  `:short`, `:medium`, `:long`, `:full`. If `:date_format` is not specified\n  then the date format is defined by the `:format` option.\n\n* `:time_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n  this option is used to format the time part of the date time. This option is\n  only acceptable if the `:format` option is not specified, or is specified as either\n  `:short`, `:medium`, `:long`, `:full`. If `:time_format` is not specified\n  then the time format is defined by the `:format` option.\n\n* `:style` is either `:at` or `:default`. When set to `:at` the datetime may\n  be formatted with a localised string representing `  at  ` if such\n  a format exists. See `Cldr.DateTime.Format.date_time_at_formats/2`.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.DateTime.available_formats/3`\n  to see which formats have these variants.\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted datetime digits should\n  be transliterated.\n\n* `:era` which, if set to `:variant`, will use a variant for the era if one\n  is available in the requested locale. In the `:en` locale, for example, `era: :variant`\n  will return `CE` instead of `AD` and `BCE` instead of `BC`.\n\n* `period: :variant` will use a variant for the time period and flexible time period if\n  one is available in the locale.  For example, in the `:en` locale `period: :variant` will\n  return \"pm\" instead of \"PM\".","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2-options"},{"type":"function","doc":"* `formatted_datetime` or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2-returns"},{"type":"function","doc":"iex> {:ok, date_time} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string!(date_time, locale: :en)\n    \"Jan 1, 2000, 11:59:59 PM\"\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string!(date_time, format: :long, locale: :en)\n    \"January 1, 2000, 11:59:59 PM UTC\"\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string!(date_time, format: :full, locale: :en)\n    \"Saturday, January 1, 2000, 11:59:59 PM GMT\"\n    iex> Bonfire.Common.Localise.Cldr.DateTime.to_string!(date_time, format: :full, locale: :fr)\n    \"samedi 1 janvier 2000, 23:59:59 UTC\"","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.html#to_string!/2-examples"},{"type":"module","doc":"Manages the Date, TIme and DateTime formats\ndefined by CLDR.\n\nThe functions in `Cldr.DateTime.Format` are\nprimarily concerned with encapsulating the\ndata from CLDR in functions that are used\nduring the formatting process.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html"},{"type":"function","doc":"Returns a list of calendars defined for a given locale.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.calendars_for/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#calendars_for/1"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.calendars_for/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#calendars_for/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.calendars_for(:en)\n    {:ok, [:buddhist, :chinese, :coptic, :dangi, :ethiopic, :ethiopic_amete_alem,\n     :generic, :gregorian, :hebrew, :indian, :islamic, :islamic_civil,\n     :islamic_rgsa, :islamic_tbla, :islamic_umalqura, :japanese, :persian, :roc]}","title":"Example - Bonfire.Common.Localise.Cldr.DateTime.Format.calendars_for/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#calendars_for/1-example"},{"type":"function","doc":"Returns a list of the date_time format IDs that are\navailable in all known locales.\n\nThe format IDs returned by `common_date_time_format_names/0`\nare guaranteed to be available in all known locales,","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.common_date_time_format_names/0","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#common_date_time_format_names/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.common_date_time_format_names()\n    [:Bh, :Bhm, :Bhms, :E, :EBhm, :EBhms, :EHm, :EHms, :Ed, :Ehm, :Ehms, :Gy,\n     :GyMMM, :GyMMMEd, :GyMMMd, :GyMd, :H, :Hm, :Hms, :Hmsv, :Hmv, :M, :MEd, :MMM,\n     :MMMEd, :MMMMW, :MMMMd, :MMMd, :Md, :d, :h, :hm, :hms, :hmsv, :hmv, :ms, :y,\n     :yM, :yMEd, :yMMM, :yMMMEd, :yMMMM, :yMMMd, :yMd, :yQQQ, :yQQQQ, :yw]","title":"Example: - Bonfire.Common.Localise.Cldr.DateTime.Format.common_date_time_format_names/0","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#common_date_time_format_names/0-example"},{"type":"function","doc":"Returns a map of the available date formats for a\ngiven locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_available_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_available_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_available_formats \"en\"","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_available_formats/2-examples"},{"type":"function","doc":"Returns a map of the standard date formats for a given locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats(:en)\n    {:ok, %Cldr.Date.Formats{\n      full: \"EEEE, MMMM d, y\",\n      long: \"MMMM d, y\",\n      medium: \"MMM d, y\",\n      short: \"M/d/yy\"\n    }}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats(:en, :buddhist)\n    {:ok, %Cldr.Date.Formats{\n      full: \"EEEE, MMMM d, y G\",\n      long: \"MMMM d, y G\",\n      medium: \"MMM d, y G\",\n      short: \"M/d/y GGGGG\"\n    }}","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_formats/2-examples"},{"type":"function","doc":"Returns a map of the standard datetime \"at\" formats for a given\nlocale and calendar.\n\nAn \"at\" format is one where the datetime is formatted with the\ndate part separated from the time part by a localized version\nof \"at\".","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_at_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_at_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`,","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_at_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_at_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_at_formats(:en)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1} 'at' {0}\",\n      long: \"{1} 'at' {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"}\n    }\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_at_formats(:en, :buddhist)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1} 'at' {0}\",\n      long: \"{1} 'at' {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"}\n    }","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_at_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_at_formats/2-examples"},{"type":"function","doc":"Returns a map of the available datetime formats for a\ngiven locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_available_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_available_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_available_formats \"en\"\n    {:ok,\n     %{\n       yw: %{\n         other: \"'week' w 'of' Y\",\n         one: \"'week' w 'of' Y\",\n         pluralize: :week_of_year\n       },\n       GyMMMEd: \"E, MMM d, y G\",\n       Hms: \"HH:mm:ss\",\n       MMMMW: %{\n         other: \"'week' W 'of' MMMM\",\n         one: \"'week' W 'of' MMMM\",\n         pluralize: :week_of_month\n       },\n       E: \"ccc\",\n       MMMd: \"MMM d\",\n       yMEd: \"E, M/d/y\",\n       yQQQ: \"QQQ y\",\n       Ehm: %{unicode: \"E h:mm a\", ascii: \"E h:mm a\"},\n       M: \"L\",\n       hm: %{unicode: \"h:mm a\", ascii: \"h:mm a\"},\n       yM: \"M/y\",\n       GyMMMd: \"MMM d, y G\",\n       GyMd: \"M/d/y G\",\n       Gy: \"y G\",\n       Hm: \"HH:mm\",\n       EBhms: \"E h:mm:ss B\",\n       d: \"d\",\n       hms: %{unicode: \"h:mm:ss a\", ascii: \"h:mm:ss a\"},\n       Ed: \"d E\",\n       Ehms: %{unicode: \"E h:mm:ss a\", ascii: \"E h:mm:ss a\"},\n       EHms: \"E HH:mm:ss\",\n       Bh: \"h B\",\n       h: %{unicode: \"h a\", ascii: \"h a\"},\n       Bhms: \"h:mm:ss B\",\n       Hmv: \"HH:mm v\",\n       hmv: %{unicode: \"h:mm a v\", ascii: \"h:mm a v\"},\n       yMd: \"M/d/y\",\n       ms: \"mm:ss\",\n       MMM: \"LLL\",\n       y: \"y\",\n       Bhm: \"h:mm B\",\n       yMMM: \"MMM y\",\n       yQQQQ: \"QQQQ y\",\n       yMMMEd: \"E, MMM d, y\",\n       yMMMM: \"MMMM y\",\n       EBhm: \"E h:mm B\",\n       Hmsv: \"HH:mm:ss v\",\n       yMMMd: \"MMM d, y\",\n       MEd: \"E, M/d\",\n       EHm: \"E HH:mm\",\n       GyMMM: \"MMM y G\",\n       hmsv: %{unicode: \"h:mm:ss a v\", ascii: \"h:mm:ss a v\"},\n       H: \"HH\",\n       Md: \"M/d\",\n       MMMEd: \"E, MMM d\",\n       MMMMd: \"MMMM d\"\n     }}","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_available_formats/2-examples"},{"type":"function","doc":"Returns a map of the standard datetime formats for a given locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats(:en)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1}, {0}\",\n      long: \"{1}, {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"\n    }}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats(:en, :buddhist)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1}, {0}\",\n      long: \"{1}, {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"\n    }}","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_formats/2-examples"},{"type":"function","doc":"Returns the fallback format for a given\nlocale and calendar type","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_fallback/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_fallback/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_fallback/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_fallback/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_fallback(:en, :gregorian)\n    [0, \" – \", 1]","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_fallback/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_fallback/2-examples"},{"type":"function","doc":"Returns a map of the interval formats for a\ngiven locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_formats(:en, :gregorian)\n    {:ok,\n     %{\n       h: %{a: [\"h a – \", \"h a\"], h: [\"h – \", \"h a\"]},\n       d: %{d: [\"d – \", \"d\"]},\n       y: %{y: [\"y – \", \"y\"]},\n       M: %{M: [\"M – \", \"M\"]},\n       Bh: %{h: [\"h – \", \"h B\"], B: [\"h B – \", \"h B\"]},\n       Bhm: %{\n         m: [\"h:mm – \", \"h:mm B\"],\n         h: [\"h:mm – \", \"h:mm B\"],\n         B: [\"h:mm B – \", \"h:mm B\"]\n       },\n       Gy: %{y: [\"y – \", \"y G\"], G: [\"y G – \", \"y G\"]},\n       GyMMM: %{\n         y: [\"MMM y – \", \"MMM y G\"],\n         M: [\"MMM – \", \"MMM y G\"],\n         G: [\"MMM y G – \", \"MMM y G\"]\n       },\n       GyMMMEd: %{\n         d: [\"E, MMM d – \", \"E, MMM d, y G\"],\n         y: [\"E, MMM d, y – \", \"E, MMM d, y G\"],\n         M: [\"E, MMM d – \", \"E, MMM d, y G\"],\n         G: [\"E, MMM d, y G – \", \"E, MMM d, y G\"]\n       },\n       GyMMMd: %{\n         d: [\"MMM d – \", \"d, y G\"],\n         y: [\"MMM d, y – \", \"MMM d, y G\"],\n         M: [\"MMM d – \", \"MMM d, y G\"],\n         G: [\"MMM d, y G – \", \"MMM d, y G\"]\n       },\n       GyMd: %{\n         d: [\"M/d/y – \", \"M/d/y G\"],\n         y: [\"M/d/y – \", \"M/d/y G\"],\n         M: [\"M/d/y – \", \"M/d/y G\"],\n         G: [\"M/d/y G – \", \"M/d/y G\"]\n       },\n       H: %{H: [\"HH – \", \"HH\"]},\n       Hm: %{m: [\"HH:mm – \", \"HH:mm\"], H: [\"HH:mm – \", \"HH:mm\"]},\n       Hmv: %{m: [\"HH:mm – \", \"HH:mm v\"], H: [\"HH:mm – \", \"HH:mm v\"]},\n       MEd: %{d: [\"E, M/d – \", \"E, M/d\"], M: [\"E, M/d – \", \"E, M/d\"]},\n       MMM: %{M: [\"MMM – \", \"MMM\"]},\n       MMMEd: %{\n         d: [\"E, MMM d – \", \"E, MMM d\"],\n         M: [\"E, MMM d – \", \"E, MMM d\"]\n       },\n       MMMd: %{d: [\"MMM d – \", \"d\"], M: [\"MMM d – \", \"MMM d\"]},\n       Md: %{d: [\"M/d – \", \"M/d\"], M: [\"M/d – \", \"M/d\"]},\n       hm: %{\n         m: [\"h:mm – \", \"h:mm a\"],\n         a: [\"h:mm a – \", \"h:mm a\"],\n         h: [\"h:mm – \", \"h:mm a\"]\n       },\n       hmv: %{\n         m: [\"h:mm – \", \"h:mm a v\"],\n         a: [\"h:mm a – \", \"h:mm a v\"],\n         h: [\"h:mm – \", \"h:mm a v\"]\n       },\n       yM: %{y: [\"M/y – \", \"M/y\"], M: [\"M/y – \", \"M/y\"]},\n       yMEd: %{\n         d: [\"E, M/d/y – \", \"E, M/d/y\"],\n         y: [\"E, M/d/y – \", \"E, M/d/y\"],\n         M: [\"E, M/d/y – \", \"E, M/d/y\"]\n       },\n       yMMM: %{y: [\"MMM y – \", \"MMM y\"], M: [\"MMM – \", \"MMM y\"]},\n       yMMMEd: %{\n         d: [\"E, MMM d – \", \"E, MMM d, y\"],\n         y: [\"E, MMM d, y – \", \"E, MMM d, y\"],\n         M: [\"E, MMM d – \", \"E, MMM d, y\"]\n       },\n       yMMMM: %{y: [\"MMMM y – \", \"MMMM y\"], M: [\"MMMM – \", \"MMMM y\"]},\n       yMMMd: %{\n         d: [\"MMM d – \", \"d, y\"],\n         y: [\"MMM d, y – \", \"MMM d, y\"],\n         M: [\"MMM d – \", \"MMM d, y\"]\n       },\n       yMd: %{\n         d: [\"M/d/y – \", \"M/d/y\"],\n         y: [\"M/d/y – \", \"M/d/y\"],\n         M: [\"M/d/y – \", \"M/d/y\"]\n       },\n       GyM: %{\n         y: [\"M/y – \", \"M/y G\"],\n         M: [\"M/y – \", \"M/y G\"],\n         G: [\"M/y G – \", \"M/y G\"]\n       },\n       GyMEd: %{\n         d: [\"E, M/d/y – \", \"E, M/d/y G\"],\n         y: [\"E, M/d/y – \", \"E, M/d/y G\"],\n         M: [\"E, M/d/y – \", \"E, M/d/y G\"],\n         G: [\"E, M/d/y G – \", \"E, M/d/y G\"]\n       },\n       Hv: %{H: [\"HH – \", \"HH v\"]},\n       hv: %{a: [\"h a – \", \"h a v\"], h: [\"h – \", \"h a v\"]}\n     }}","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.date_time_interval_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#date_time_interval_formats/2-examples"},{"type":"function","doc":"Returns the time period for a given time of day.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#day_period_for/2"},{"type":"function","doc":"* `time` is any `Time.t` or a map with at least `:hour`,\n  `:minute` and `:second` keys\n\n* `language` is a binary representation of a valid and\n  configured language in `Cldr`\n\nThe time period is a locale-specific key that is used\nto localise a time into a textual representation of \"am\",\n\"pm\", \"noon\", \"midnight\", \"evening\", \"morning\" and so on\nas defined in the CLDR day period rules.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#day_period_for/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for ~T[06:05:54.515228], :en\n    :morning1\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for ~T[13:05:54.515228], :en\n    :afternoon1\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for ~T[21:05:54.515228], :en\n    :night1\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for ~T[21:05:54.515228], :fr\n    :evening1","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Format.day_period_for/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#day_period_for/2-examples"},{"type":"function","doc":"Returns the GMT offset format list for a\nfor a timezone offset for a given locale.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_format/1"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_format/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_format(:en)\n    {:ok, [\"GMT\", 0]}","title":"Example - Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_format/1-example"},{"type":"function","doc":"Returns the GMT format string for a\nfor a timezone with an offset of zero for\na given locale.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_zero_format/1"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_zero_format/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format(:en)\n    {:ok, \"GMT\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format(:fr)\n    {:ok, \"UTC\"}","title":"Example - Bonfire.Common.Localise.Cldr.DateTime.Format.gmt_zero_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#gmt_zero_format/1-example"},{"type":"function","doc":"Returns the positive and negative hour format\nfor a timezone offset for a given locale.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.hour_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#hour_format/1"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.hour_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#hour_format/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.hour_format(\"en\")\n    {:ok, {\"+HH:mm\", \"-HH:mm\"}}","title":"Example - Bonfire.Common.Localise.Cldr.DateTime.Format.hour_format/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#hour_format/1-example"},{"type":"function","doc":"Returns a boolean indicating is a given language defines the\nnotion of \"noon\" and \"midnight\"","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1"},{"type":"function","doc":"* `language` is a binary representation of a valid and\n  configured language in `Cldr`","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight? :fr\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight? :en\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight? :af\n    false","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1-examples"},{"type":"function","doc":"Returns a map of the available time formats for a\ngiven locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_available_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_available_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.time_available_formats :en","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.time_available_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_available_formats/2-examples"},{"type":"function","doc":"Returns a map of the standard time formats for a given locale and calendar.","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_formats/2"},{"type":"function","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`. The default is `Cldr.get_locale/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_formats/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats(:en)\n    {:ok, %Cldr.Time.Formats{\n      full: \"h:mm:ss a zzzz\",\n      long: \"h:mm:ss a z\",\n      medium: \"h:mm:ss a\",\n      short: \"h:mm a\"\n    }}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats(:en, :buddhist)\n    {:ok, %Cldr.Time.Formats{\n      full: \"h:mm:ss a zzzz\",\n      long: \"h:mm:ss a z\",\n      medium: \"h:mm:ss a\",\n      short: \"h:mm a\"\n    }}","title":"Examples: - Bonfire.Common.Localise.Cldr.DateTime.Format.time_formats/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#time_formats/2-examples"},{"type":"type","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.calendar/0","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#t:calendar/0"},{"type":"type","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Format.formats/0","ref":"Bonfire.Common.Localise.Cldr.DateTime.Format.html#t:formats/0"},{"type":"module","doc":"Implements the compilation and execution of\ndate, time and datetime formats.","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html"},{"type":"function","doc":"Returns the formatted and localised date, time or datetime\nfor a given `Date`, `Time`, `DateTime` or struct with the\nappropriate fields.","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.format/4","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#format/4"},{"type":"function","doc":"* `date` is a `Date`, `Time`, `DateTime` or other struct that\ncontains the required date and time fields.\n\n* `format` is a valid format string, for example `yy/MM/dd hh:MM`\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct. The default is `Cldr.get_locale/0`\n\n* `options` is a keyword list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Formatter.format/4","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#format/4-arguments"},{"type":"function","doc":"* `:number_system`.  The resulting formatted and localised date/time\nstring will be transliterated into this number system. Number system\nis anything returned from `Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1`\n\n*NOTE* This function is called by `Cldr.Date.to_string/2`, `Cldr.Time.to_string/2`\nand `Cldr.DateTime.to_string/2` which is the preferred API.","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.Formatter.format/4","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#format/4-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Formatter.format ~U[2017-09-03 10:23:00.0Z], \"yy/MM/dd hh:MM\", \"en\"\n    {:ok, \"17/09/03 10:09\"}","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Formatter.format/4","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#format/4-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.gmt_tz_format/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Formatter.html#gmt_tz_format/3"},{"type":"module","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Cldr.Interval.to_string/3` and `Cldr.DateTime.Interval.to_string/3`","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.do_to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#do_to_string/3"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.do_to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#do_to_string!/3"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two dates.","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.datetime` type.\n\n* `to` is any map that conforms to the\n  `Calendar.datetime` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone datetime.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3-options"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3-returns"},{"type":"function","doc":"* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","title":"Notes - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string ~U[2020-01-01 00:00:00.0Z],\n    ...> ~U[2020-12-31 10:00:00.0Z]\n    {:ok, \"Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string ~U[2020-01-01 00:00:00.0Z], nil\n    {:ok, \"Jan 1, 2020, 12:00:00 AM –\"}","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string/3-examples"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two dates or raises an\nexception.","title":"Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.datetime` type.\n\n* `to` is any map that conforms to the\n  `Calendar.datetime` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone datetime.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3-options"},{"type":"function","doc":"* `string` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3-returns"},{"type":"function","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval.","title":"Notes - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string! ~U[2020-01-01 00:00:00.0Z],\n    ...> ~U[2020-12-31 10:00:00.0Z]\n    \"Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM\"","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.DateTime.Interval.html#to_string!/3-examples"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html"},{"type":"function","doc":"Returns a `{:ok, string}` representing a relative time (ago, in) for a given\nnumber, `t:Date.t/0` or `t:Datetime.t/0`.  Returns `{:error, reason}` when errors\nare detected.\n\n* `relative` is a number or Date/Datetime representing the time distance from `now` or from\n  options[:relative_to]\n\n* `options` is a `Keyword` list of options which are:","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string/2"},{"type":"function","doc":"* `:locale` is the locale in which the binary is formatted.\n  The default is `Cldr.get_locale/0`\n\n* `:format` is the format of the binary.  Style may be `:default`, `:narrow` or `:short`\n\n* `:unit` is the time unit for the formatting.  The allowable units are `:second`, `:minute`,\n  `:hour`, `:day`, `:week`, `:month`, `:year`, `:mon`, `:tue`, `:wed`, `:thu`, `:fri`, `:sat`,\n  `:sun`, `:quarter`\n\n* `:relative_to` is the baseline Date or Datetime from which the difference from `relative` is\n  calculated when `relative` is a Date or a DateTime. The default for a Date is `Date.utc_today`,\n  for a DateTime it is `DateTime.utc_now`","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string/2-options"},{"type":"function","doc":"When `options[:unit]` is not specified, `MyApp.Cldr.DateTime.Relative.to_string/2`\nattempts to identify the appropriate unit based upon the magnitude of `relative`.\nFor example, given a parameter of less than `60`, then `to_string/2` will\nassume `:seconds` as the unit.  See `unit_from_relative_time/1`.","title":"Notes - Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(-1)\n    {:ok, \"1 second ago\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1)\n    {:ok, \"in 1 second\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1, unit: :day)\n    {:ok, \"tomorrow\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1, unit: :day, locale: \"fr\")\n    {:ok, \"demain\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1, unit: :day, format: :narrow)\n    {:ok, \"tomorrow\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1234, unit: :year)\n    {:ok, \"in 1,234 years\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(1234, unit: :year, locale: \"fr\")\n    {:ok, \"dans 1 234 ans\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(31)\n    {:ok, \"in 31 seconds\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(~D[2017-04-29], relative_to: ~D[2017-04-26])\n    {:ok, \"in 3 days\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(310, format: :short, locale: \"fr\")\n    {:ok, \"dans 5 min\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(310, format: :narrow, locale: \"fr\")\n    {:ok, \"+5 min\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string 2, unit: :wed, format: :short, locale: \"en\"\n    {:ok, \"in 2 Wed.\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string 1, unit: :wed, format: :short\n    {:ok, \"next Wed.\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string -1, unit: :wed, format: :short\n    {:ok, \"last Wed.\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string -1, unit: :wed\n    {:ok, \"last Wednesday\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string -1, unit: :quarter\n    {:ok, \"last quarter\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string -1, unit: :mon, locale: \"fr\"\n    {:ok, \"lundi dernier\"}\n\n    iex> Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string(~D[2017-04-29], unit: :ziggeraut)\n    {:error, {Cldr.DateTime.UnknownTimeUnit,\n     \"Unknown time unit :ziggeraut.  Valid time units are [:day, :fri, :hour, :minute, :mon, :month, :quarter, :sat, :second, :sun, :thu, :tue, :wed, :week, :year]\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string/2-examples"},{"type":"function","doc":"Returns a `{:ok, string}` representing a relative time (ago, in) for a given\nnumber, Date or Datetime or raises an exception on error.","title":"Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string!/2"},{"type":"function","doc":"* `relative` is a number or Date/Datetime representing the time distance from `now` or from\n  options[:relative_to].\n\n* `options` is a `Keyword` list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string!/2-arguments"},{"type":"function","doc":"* `:locale` is the locale in which the binary is formatted.\n  The default is `Cldr.get_locale/0`\n\n* `:format` is the format of the binary.  Style may be `:default`, `:narrow` or `:short`.\n  The default is `:default`\n\n* `:unit` is the time unit for the formatting.  The allowable units are `:second`, `:minute`,\n  `:hour`, `:day`, `:week`, `:month`, `:year`, `:mon`, `:tue`, `:wed`, `:thu`, `:fri`, `:sat`,\n  `:sun`, `:quarter`\n\n* `:relative_to` is the baseline Date or Datetime from which the difference from `relative` is\n  calculated when `relative` is a Date or a DateTime. The default for a Date is `Date.utc_today`,\n  for a DateTime it is `DateTime.utc_now`\n\nSee `to_string/2`","title":"Options - Bonfire.Common.Localise.Cldr.DateTime.Relative.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.DateTime.Relative.html#to_string!/2-options"},{"type":"module","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nThe interval functions in this library will determine the calendar\nfield with the greatest difference between the two datetimes before using the\nformat pattern.\n\nFor example, the greatest difference in \"Jan 10-12, 2008\" is the day field, while\nthe greatest difference in \"Jan 10 - Feb 12, 2008\" is the month field. This is used to\npick the exact pattern to be used.\n\nSee `Cldr.Interval` for further detail.","title":"Bonfire.Common.Localise.Cldr.Interval","ref":"Bonfire.Common.Localise.Cldr.Interval.html"},{"type":"function","doc":"Returns a `Date.Range` or `CalendarInterval` as\na localised string.","title":"Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2"},{"type":"function","doc":"* `range` is either a `Date.Range.t` returned from `Date.range/2`\n  or a `CalendarInterval.t`\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If a style is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","title":"Options - Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2-options"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2-returns"},{"type":"function","doc":"* `to_string/2` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval","title":"Notes - Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2-notes"},{"type":"function","doc":"iex> use CalendarInterval\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string ~I\"2020-01-01/12\",\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string Date.range(~D[2020-01-01], ~D[2020-12-31]),\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Thu, Dec 31, 2020\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Interval.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/2-examples"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two dates.","title":"Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  any one of the `Calendar` types.\n\n* `to` is any map that conforms to the\n  any one of the `Calendar` types. `to` must\n  occur on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If styling is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3-options"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3-returns"},{"type":"function","doc":"* `to_string/2` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval.","title":"Notes - Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~D[2020-01-01], ~D[2020-12-31])\n    {:ok, \"Jan 1 – Dec 31, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~D[2020-01-01], ~D[2020-01-12])\n    {:ok, \"Jan 1 – 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long)\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month)\n    {:ok, \"January – December 2020\"}\n\n    iex> use CalendarInterval\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~I\"2020-01-01/12\",\n    ...> format: :long)\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~U[2020-01-01 00:00:00.0Z], ~U[2020-12-01 10:05:00.0Z],\n    ...> format: :long)\n    {:ok, \"January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string(~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:05:00.0Z],\n    ...> format: :long)\n    {:ok, \"January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string/3-examples"},{"type":"function","doc":"Returns a `Date.Range` or `CalendarInterval` as\na localised string or raises an exception.","title":"Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2"},{"type":"function","doc":"* `range` is either a `Date.Range.t` returned from `Date.range/2`\n  or a `CalendarInterval.t`\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If a style is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`.\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2-options"},{"type":"function","doc":"* `string` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2-returns"},{"type":"function","doc":"* `to_string/3` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Otherwise\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval","title":"Notes - Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2-notes"},{"type":"function","doc":"iex> use CalendarInterval\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~I\"2020-01-01/12\",\n    ...> format: :long)\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(Date.range(~D[2020-01-01], ~D[2020-12-31]),\n    ...> format: :long)\n    \"Wed, Jan 1 – Thu, Dec 31, 2020\"","title":"Examples - Bonfire.Common.Localise.Cldr.Interval.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/2-examples"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two date or raises an\nexception.","title":"Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  any one of the `Calendar` types.\n\n* `to` is any map that conforms to the\n  any one of the `Calendar` types. `to` must\n  occur on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If styling is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`.\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3-options"},{"type":"function","doc":"* `string` or\n\n* raises and exception","title":"Returns - Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3-returns"},{"type":"function","doc":"* `to_string/3` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval.","title":"Notes - Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~D[2020-01-01], ~D[2020-12-31])\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~D[2020-01-01], ~D[2020-01-12])\n    \"Jan 1 – 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long)\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month)\n    \"January – December 2020\"\n\n    iex> use CalendarInterval\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~I\"2020-01-01/12\",\n    ...> format: :long)\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~U[2020-01-01 00:00:00.0Z], ~U[2020-12-01 10:05:00.0Z],\n    ...> format: :long)\n    \"January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC\"\n\n    iex> Bonfire.Common.Localise.Cldr.Interval.to_string!(~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:05:00.0Z],\n    ...> format: :long)\n    \"January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC\"","title":"Examples - Bonfire.Common.Localise.Cldr.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Interval.html#to_string!/3-examples"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Language","ref":"Bonfire.Common.Localise.Cldr.Language.html"},{"type":"function","doc":"Return all the languages' iso-codes available for a given locale.\nDefaults to the current locale.","title":"Bonfire.Common.Localise.Cldr.Language.available_languages/1","ref":"Bonfire.Common.Localise.Cldr.Language.html#available_languages/1"},{"type":"function","doc":"> Bonfire.Common.Localise.Cldr.Language.Language.available_languages(:en)\n    [\"aa\", \"ab\", \"ace\", \"ach\", \"ada\", \"ady\", \"ae\", \"aeb\", \"af\", \"afh\", \"agq\", \"ain\",\n    \"ak\", \"akk\", \"akz\", \"ale\", \"aln\", \"alt\", \"am\", \"an\", \"ang\", \"anp\", \"ar\",\n    \"ar-001\", \"arc\", \"arn\", \"aro\", \"arp\", \"arq\", \"ars\", \"arw\", \"ary\", \"arz\", \"as\",\n    \"asa\", \"ase\", \"ast\", \"av\", \"avk\", \"awa\", \"ay\", \"az\", \"ba\", \"bal\", \"ban\", \"bar\",\n    \"bas\", \"bax\", \"bbc\", \"bbj\", ...]","title":"Example - Bonfire.Common.Localise.Cldr.Language.available_languages/1","ref":"Bonfire.Common.Localise.Cldr.Language.html#available_languages/1-example"},{"type":"function","doc":"Return a map of iso-code keyed maps of language names in any available\nformats for the given locale.\nDefaults to the current locale.","title":"Bonfire.Common.Localise.Cldr.Language.known_languages/1","ref":"Bonfire.Common.Localise.Cldr.Language.html#known_languages/1"},{"type":"function","doc":"> Bonfire.Common.Localise.Cldr.Language.Language.known_languages(:en)\n    %{\"bez\" => %{standard: \"Bena\"}, \"lo\" => %{standard: \"Lao\"},\n    \"kha\" => %{standard: \"Khasi\"}, \"eo\" => %{standard: \"Esperanto\"},\n    \"rm\" => %{standard: \"Romansh\"}, \"ja\" => %{standard: \"Japanese\"},\n    \"sw-CD\" => %{standard: \"Congo Swahili\"},\n    \"pdc\" => %{standard: \"Pennsylvania German\"}, \"om\" => %{standard: \"Oromo\"},\n    \"jut\" => %{standard: \"Jutish\"}, \"lij\" => %{standard: \"Ligurian\"},\n    \"kut\" => %{standard: \"Kutenai\"}, \"vep\" => %{standard: \"Veps\"},\n    \"yao\" => %{standard: \"Yao\"}, \"gez\" => %{standard: \"Geez\"},\n    \"cr\" => %{standard: \"Cree\"}, \"ne\" => %{standard: \"Nepali\"},\n    \"zbl\" => %{standard: \"Blissymbols\"}, \"ae\" => %{standard: \"Avestan\"},\n    \"rof\" => %{standard: \"Rombo\"}, \"tkl\" => %{standard: \"Tokelau\"},\n    \"rgn\" => %{standard: \"Romagnol\"}, \"el\" => %{standard: \"Greek\"},\n    \"myv\" => %{standard: \"Erzya\"}, \"smj\" => %{standard: \"Lule Sami\"},\n    \"fo\" => %{standard: \"Faroese\"}, \"ii\" => %{standard: \"Sichuan Yi\"},\n    \"bum\" => %{standard: \"Bulu\"}, \"za\" => %{standard: \"Zhuang\"},\n    \"raj\" => %{standard: \"Rajasthani\"}, \"mrj\" => %{standard: \"Western Mari\"},\n    \"stq\" => %{standard: \"Saterland Frisian\"}, \"hu\" => %{standard: \"Hungarian\"},\n    \"mga\" => %{standard: \"Middle Irish\"}, \"bej\" => %{standard: \"Beja\"},\n    \"yue\" => %{standard: \"Cantonese\"}, \"xog\" => %{standard: \"Soga\"},\n    \"ttt\" => %{standard: \"Muslim Tat\"}, \"uga\" => %{standard: \"Ugaritic\"},\n    \"rup\" => %{standard: \"Aromanian\"},\n    \"crs\" => %{standard: \"Seselwa Creole French\"}, \"oc\" => %{standard: \"Occitan\"},\n    \"chp\" => %{standard: \"Chipewyan\"}, \"zen\" => %{standard: \"Zenaga\"},\n    \"kmb\" => %{standard: \"Kimbundu\"}, \"nr\" => %{standard: \"South Ndebele\"},\n    \"tiv\" => %{standard: \"Tiv\"}, \"aln\" => %{standard: \"Gheg Albanian\"},\n    \"sh\" => %{standard: \"Serbo-Croatian\"}, \"fil\" => %{...}, ...}","title":"Example - Bonfire.Common.Localise.Cldr.Language.known_languages/1","ref":"Bonfire.Common.Localise.Cldr.Language.html#known_languages/1-example"},{"type":"function","doc":"Try to translate the given language iso code or language tag.","title":"Bonfire.Common.Localise.Cldr.Language.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Language.html#to_string/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Language.Language.to_string(\"eo\")\n    {:ok, \"Esperanto\"}","title":"Example - Bonfire.Common.Localise.Cldr.Language.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Language.html#to_string/2-example"},{"type":"type","doc":"","title":"Bonfire.Common.Localise.Cldr.Language.styles/0","ref":"Bonfire.Common.Localise.Cldr.Language.html#t:styles/0"},{"type":"module","doc":"Cldr backend module that formats lists.\n\nIf we have a list of days like `[\"Monday\", \"Tuesday\", \"Wednesday\"]`\nthen we can format that list for a given locale by:\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([\"Monday\", \"Tuesday\", \"Wednesday\"], locale: \"en\")\n    {:ok, \"Monday, Tuesday, and Wednesday\"}","title":"Bonfire.Common.Localise.Cldr.List","ref":"Bonfire.Common.Localise.Cldr.List.html"},{"type":"function","doc":"Intersperces a list elements into a list format according to the list\npattern rules for a locale.\n\nThis function can be helpful when creating a list from `Phoenix`\nsafe strings which are of the format `{:safe, \"some string\"}`","title":"Bonfire.Common.Localise.Cldr.List.intersperse/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse/2"},{"type":"function","doc":"* `list` is any list of of terms that can be passed through `Kernel.to_string/1`\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.List.intersperse/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse/2-arguments"},{"type":"function","doc":"* `:locale` is any configured locale. See . The default\n  is `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n\n* `:format` is any of those returned by\n  `Cldr.List.known_list_formats/0` or by `Cldr.List.Pattern.new/1`.\n  The default is `format: :standard`.","title":"Options - Bonfire.Common.Localise.Cldr.List.intersperse/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"en\")\n    {:ok, [\"a\", \", \", \"b\", \", and \", \"c\"]}\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    {:ok, [\"a\", \" \", \"b\", \" \", \"c\"]}\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"fr\")\n    {:ok, [\"a\", \", \", \"b\", \" et \", \"c\"]}\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse([1,2,3,4,5,6])\n    {:ok, [1, \", \", 2, \", \", 3, \", \", 4, \", \", 5, \", and \", 6]}\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse([\"a\"])\n    {:ok, [\"a\"]}\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse([1,2])\n    {:ok, [1, \" and \", 2]}","title":"Examples - Bonfire.Common.Localise.Cldr.List.intersperse/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.List.intersperse/3","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse/3"},{"type":"function","doc":"Formats a list using `intersperse/2` but raises if there is\nan error.","title":"Bonfire.Common.Localise.Cldr.List.intersperse!/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.intersperse!([\"a\", \"b\", \"c\"], locale: \"en\")\n    [\"a\", \", \", \"b\", \", and \", \"c\"]\n\n    iex> Bonfire.Common.Localise.Cldr.List.intersperse!([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    [\"a\", \" \", \"b\", \" \", \"c\"]","title":"Examples - Bonfire.Common.Localise.Cldr.List.intersperse!/2","ref":"Bonfire.Common.Localise.Cldr.List.html#intersperse!/2-examples"},{"type":"function","doc":"Returns the styles of list patterns available for a locale.\n\nReturns a list of `atom`s of of the list formats that are\navailable in CLDR for a locale.","title":"Bonfire.Common.Localise.Cldr.List.list_formats_for/1","ref":"Bonfire.Common.Localise.Cldr.List.html#list_formats_for/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.list_formats_for(:en)\n    [:or, :or_narrow, :or_short, :standard, :standard_narrow, :standard_short,\n     :unit, :unit_narrow, :unit_short]","title":"Example - Bonfire.Common.Localise.Cldr.List.list_formats_for/1","ref":"Bonfire.Common.Localise.Cldr.List.html#list_formats_for/1-example"},{"type":"function","doc":"Returns the list patterns for a locale.\n\nList patterns provide rules for combining multiple\nitems into a language format appropriate for a locale.","title":"Bonfire.Common.Localise.Cldr.List.list_patterns_for/1","ref":"Bonfire.Common.Localise.Cldr.List.html#list_patterns_for/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.list_patterns_for(:en)\n    %{\n      or: %Cldr.List.Pattern{\n        two: [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      or_narrow: %Cldr.List.Pattern{\n        two: [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      or_short: %Cldr.List.Pattern{\n        two: [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard: %Cldr.List.Pattern{\n        two: [0, \" and \", 1],\n        end: [0, \", and \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard_narrow: %Cldr.List.Pattern{\n        two: [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard_short: %Cldr.List.Pattern{\n        two: [0, \" & \", 1],\n        end: [0, \", & \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      unit: %Cldr.List.Pattern{\n        two: [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      unit_narrow: %Cldr.List.Pattern{\n        two: [0, \" \", 1],\n        end: [0, \" \", 1],\n        middle: [0, \" \", 1],\n        start: [0, \" \", 1]\n      },\n      unit_short: %Cldr.List.Pattern{\n        two: [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      }\n    }","title":"Example - Bonfire.Common.Localise.Cldr.List.list_patterns_for/1","ref":"Bonfire.Common.Localise.Cldr.List.html#list_patterns_for/1-example"},{"type":"function","doc":"Formats a list into a string according to the list pattern rules for a locale.","title":"Bonfire.Common.Localise.Cldr.List.to_string/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string/2"},{"type":"function","doc":"* `list` is any list of of terms that can be passed through `Kernel.to_string/1`\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.List.to_string/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string/2-arguments"},{"type":"function","doc":"* `:locale` is any configured locale. See . The default\n  is `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n\n* `:format` is any of those returned by\n  `Cldr.List.known_list_formats/0` or by `Cldr.List.Pattern.new/1`.\n  The default is `format: :standard`.","title":"Options - Bonfire.Common.Localise.Cldr.List.to_string/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"en\")\n    {:ok, \"a, b, and c\"}\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    {:ok, \"a b c\"}\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"fr\")\n    {:ok, \"a, b et c\"}\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([1,2,3,4,5,6])\n    {:ok, \"1, 2, 3, 4, 5, and 6\"}\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([\"a\"])\n    {:ok, \"a\"}\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string([1,2])\n    {:ok, \"1 and 2\"}","title":"Examples - Bonfire.Common.Localise.Cldr.List.to_string/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string/2-examples"},{"type":"function","doc":"Formats a list using `to_string/2` but raises if there is\nan error.","title":"Bonfire.Common.Localise.Cldr.List.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.List.to_string!([\"a\", \"b\", \"c\"], locale: \"en\")\n    \"a, b, and c\"\n\n    iex> Bonfire.Common.Localise.Cldr.List.to_string!([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    \"a b c\"","title":"Examples - Bonfire.Common.Localise.Cldr.List.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.List.html#to_string!/2-examples"},{"type":"module","doc":"Backend module that provides functions\nto define new locales and display human-readable\nlocale names for presentation purposes.","title":"Bonfire.Common.Localise.Cldr.Locale","ref":"Bonfire.Common.Localise.Cldr.Locale.html"},{"type":"function","doc":"Returns the list of fallback locale names, starting\nwith the provided locale name.\n\nFallbacks are a list of locate names which can\nbe used to resolve translation or other localization\ndata if such localised data does not exist for\nthis specific locale..","title":"Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locale_names/1"},{"type":"function","doc":"* `locale_name` is any locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locale_names/1-arguments"},{"type":"function","doc":"* `{:ok, list_of_locale_names}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locale_names/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names(:\"fr-CA\")\n    {:ok, [:\"fr-CA\", :fr, :und]}\n\n    # Fallbacks are typically formed by progressively\n    # stripping variant, territory and script from the\n    # given locale name. But not always - there are\n    # certain fallbacks that take a different path.\n\n    iex> Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names(:nb)\n    {:ok, [:nb, :no, :und]}","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.fallback_locale_names/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locale_names/1-examples"},{"type":"function","doc":"Returns the list of fallback locales, starting\nwith the provided locale name.\n\nFallbacks are a list of locate names which can\nbe used to resolve translation or other localization\ndata if such localised data does not exist for\nthis specific locale.","title":"Bonfire.Common.Localise.Cldr.Locale.fallback_locales/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locales/1"},{"type":"function","doc":"* `locale_name` is any locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.fallback_locales/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locales/1-arguments"},{"type":"function","doc":"* `{:ok, list_of_locales}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.fallback_locales/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locales/1-returns"},{"type":"function","doc":"Bonfire.Common.Localise.Cldr.Locale.fallback_locales(:\"fr-CA\")\n    => {:ok,\n         [#Cldr.LanguageTag , #Cldr.LanguageTag ,\n          #Cldr.LanguageTag ]}\n\n    # Fallbacks are typically formed by progressively\n    # stripping variant, territory and script from the\n    # given locale name. But not always - there are\n    # certain fallbacks that take a different path.\n\n    Bonfire.Common.Localise.Cldr.Locale.fallback_locales(:nb))\n    => {:ok,\n         [#Cldr.LanguageTag , #Cldr.LanguageTag ,\n          #Cldr.LanguageTag ]}","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.fallback_locales/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#fallback_locales/1-examples"},{"type":"function","doc":"Returns the \"best fit\" locale for a given territory.\n\nUsing the population percentage data from CLDR, the\nlanguage most commonly spoken in the given territory\nis used to form a locale name which is then validated\nagainst the given backend.\n\nFirst a territory-specific locale is validated and if\nthat fails, the base language only is validate.\n\nFor example, if the territory is `AU` then then the\nlanguage most spoken is \"en\". First, the locale \"en-AU\"\nis validated and if that fails, \"en\" is validated.","title":"Bonfire.Common.Localise.Cldr.Locale.locale_for_territory/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_for_territory/1"},{"type":"function","doc":"* `territory` is any ISO 3166 Alpha-2 territory\n  code that can be validated by `Cldr.validate_territory/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.locale_for_territory/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_for_territory/1-arguments"},{"type":"function","doc":"* `{:ok, language_tag}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.locale_for_territory/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_for_territory/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:AU)\n  Elixir.Bonfire.Common.Localise.Cldr.validate_locale(:\"en-AU\")\n\n  iex> Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:US)\n  Elixir.Bonfire.Common.Localise.Cldr.validate_locale(:\"en-US\")\n\n  iex> Bonfire.Common.Localise.Cldr.Locale.locale_for_territory(:ZZ)\n  {:error, {Cldr.UnknownTerritoryError, \"The territory :ZZ is unknown\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.locale_for_territory/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_for_territory/1-examples"},{"type":"function","doc":"Returns a \"best fit\" locale for a host name.","title":"Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2"},{"type":"function","doc":"* `host` is any valid host name\n\n* `options` is a keyword list of options. The default\n  is `[]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2-arguments"},{"type":"function","doc":"* `:tlds` is a list of territory codes as upper-cased\n  atoms that are to be considered as top-level domains.\n  See `Cldr.Locale.locale_from_host/2` for the default\n  list.","title":"Options - Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2-options"},{"type":"function","doc":"* `{:ok, langauge_tag}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2-returns"},{"type":"function","doc":"Certain top-level domains have become associated with content\nunderlated to the territory for who the domain is registered.\nTherefore Google (and perhaps others) do not associate these\nTLDs as belonging to the territory but rather are considered\ngeneric top-level domain names.","title":"Notes - Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.locale_from_host \"a.b.com.au\"\n    Elixir.Bonfire.Common.Localise.Cldr.validate_locale(:\"en-AU\")\n\n    iex> Bonfire.Common.Localise.Cldr.Locale.locale_from_host(\"a.b.com.tv\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"tv\\\"\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Locale.locale_from_host(\"a.b.com\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"com\\\"\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.locale_from_host/2","ref":"Bonfire.Common.Localise.Cldr.Locale.html#locale_from_host/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Locale.new/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#new/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Locale.new!/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#new!/1"},{"type":"function","doc":"Returns the script direction for a locale.","title":"Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#script_direction_from_locale/1"},{"type":"function","doc":"* `language_tag` is any language tag returned by `Cldr.Locale.new/2`\n  or any `locale_name` returned by `Cldr.known_locale_names/1`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#script_direction_from_locale/1-arguments"},{"type":"function","doc":"* The script direction which is either `:ltr` (for left-to-right\n  scripts) or `:rtl` (for right-to-left scripts).","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#script_direction_from_locale/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale \"en-US\"\n    :ltr\n\n    iex> Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale :ar\n    :rtl","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.script_direction_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#script_direction_from_locale/1-examples"},{"type":"function","doc":"Returns the last segment of a host that might\nbe a territory.","title":"Bonfire.Common.Localise.Cldr.Locale.territory_from_host/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_host/1"},{"type":"function","doc":"* `host` is any valid host name","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.territory_from_host/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_host/1-arguments"},{"type":"function","doc":"* `{:ok, territory}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.territory_from_host/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_host/1-returns"},{"type":"function","doc":"iex> Cldr.Locale.territory_from_host(\"a.b.com.au\")\n    {:ok, :AU}\n\n    iex> Cldr.Locale.territory_from_host(\"a.b.com\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"com\\\"\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.territory_from_host/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_host/1-examples"},{"type":"function","doc":"Returns the territory from a language tag or\nlocale name.","title":"Bonfire.Common.Localise.Cldr.Locale.territory_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_locale/1"},{"type":"function","doc":"* `locale` is any language tag returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new/1`\n  or a locale name in the list returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.territory_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_locale/1-arguments"},{"type":"function","doc":"* A territory code as an atom","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.territory_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_locale/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.territory_from_locale \"en-US\"\n    :US\n\n    iex> Bonfire.Common.Localise.Cldr.Locale.territory_from_locale \"en-US-u-rg-GBzzzz\"\n    :GB","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.territory_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#territory_from_locale/1-examples"},{"type":"function","doc":"Returns the time zone from a language tag or\nlocale name.","title":"Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#timezone_from_locale/1"},{"type":"function","doc":"* `locale` is any language tag returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new/1`\n  or a locale name in the list returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#timezone_from_locale/1-arguments"},{"type":"function","doc":"* A time zone ID as a string or\n\n* `:error` if no time zone can be determined","title":"Returns - Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#timezone_from_locale/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale \"en-US-u-tz-ausyd\"\n    \"Australia/Sydney\"","title":"Examples - Bonfire.Common.Localise.Cldr.Locale.timezone_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Locale.html#timezone_from_locale/1-examples"},{"type":"module","doc":"Manages the display name data for language tags\nand presents a public API for rendering\ndisplay names for locales.","title":"Bonfire.Common.Localise.Cldr.LocaleDisplay","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html"},{"type":"function","doc":"Returns a localised display name for a\nlocale.\n\nUI applications often have a requirement\nto present locale choices to an end user.\n\nThis function takes a `t.Cldr.LanguageTag`\nand using the [CLDR locale display name algorithm](https://unicode-org.github.io/cldr/ldml/tr35-general.html#locale_display_name_algorithm)\nproduces a string suitable for presentation.","title":"Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name/2"},{"type":"function","doc":"* `language_tag` is any `t:Cldr.LanguageTag` or\n  a binary locale name.\n\n* `options` is a keyword list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name/2-arguments"},{"type":"function","doc":"* `:compound_locale` is a boolean indicating\n  if the combination of language, script and territory\n  should be used to resolve a language name.\n  The default is `true`.\n\n* `:prefer` signals the preferred name for\n  a subtag when there are alternatives.\n  The default is `:default`. Few subtags\n  provide alternative renderings. Some of\n  the alternative preferences are`:short`,\n  `:long`, `:menu` and `:variant`.\n\n* `:locale` is a `t:Cldr.LanguageTag` or any valid\n  locale name returned by `Cldr.known_locale_names/1`.","title":"Options - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name/2-options"},{"type":"function","doc":"* `{:ok, string}` representing a name\n  suitable for presentation purposes or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"en\"\n    {:ok, \"English\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"en-US\"\n    {:ok, \"American English\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"en-US\", compound_locale: false\n    {:ok, \"English (United States)\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"en-US-u-ca-gregory-cu-aud\"\n    {:ok, \"American English (Gregorian Calendar, Currency: A$)\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"en-US-u-ca-gregory-cu-aud\", locale: \"fr\"\n    {:ok, \"anglais américain (calendrier grégorien, devise : A$)\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"nl-BE\"\n    {:ok, \"Flemish\"}\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name \"nl-BE\", compound_locale: false\n    {:ok, \"Dutch (Belgium)\"}","title":"Examples - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name/2-examples"},{"type":"function","doc":"Returns a localised display name for a\nlocale.\n\nUI applications often have a requirement\nto present locale choices to an end user.\n\nThis function takes a `t.Cldr.LanguageTag`\nand using the [CLDR locale display name algorithm](https://unicode-org.github.io/cldr/ldml/tr35-general.html#locale_display_name_algorithm)\nproduces a string suitable for presentation.","title":"Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name!/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name!/2"},{"type":"function","doc":"* `language_tag` is any `t:Cldr.LanguageTag` or\n  a binary locale name.\n\n* `options` is a keyword list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name!/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name!/2-arguments"},{"type":"function","doc":"* `:compound_locale` is a boolean indicating\n  if the combination of language, script and territory\n  should be used to resolve a language name.\n  The default is `true`.\n\n* `:prefer` signals the preferred name for\n  a subtag when there are alternatives.\n  The default is `:default`. Few subtags\n  provide alternative renderings. Some of\n  the alternative preferences are`:short`,\n  `:long`, `:menu` and `:variant`.\n\n* `:locale` is a `t:Cldr.LanguageTag` or any valid\n  locale name returned by `Cldr.known_locale_names/1`.\n\n* `:backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module. The default is `Cldr.default_backend!/0`.","title":"Options - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name!/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name!/2-options"},{"type":"function","doc":"* a string representation of the language tag\n  suitable for presentation purposes or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name!/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name! \"en\"\n    \"English\"\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name! \"en-US\"\n    \"American English\"\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name! \"en-US\", compound_locale: false\n    \"English (United States)\"\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name! \"en-US-u-ca-gregory-cu-aud\"\n    \"American English (Gregorian Calendar, Currency: A$)\"\n\n    iex> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name! \"en-US-u-ca-gregory-cu-aud\", locale: \"fr\"\n    \"anglais américain (calendrier grégorien, devise : A$)\"","title":"Examples - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_name!/2","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_name!/2-examples"},{"type":"function","doc":"Returns the localised display names data\nfor a locale name.","title":"Bonfire.Common.Localise.Cldr.LocaleDisplay.display_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_names/1"},{"type":"function","doc":"* `locale` is any language tag returned by\n  `Bonfire.Common.Localise.Cldr.LocaleDisplay.new/1`\n  or a locale name in the list returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_names/1-arguments"},{"type":"function","doc":"* A map of locale display names","title":"Returns - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_names/1-returns"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.LocaleDisplay.display_names(\"en\")","title":"Examples - Bonfire.Common.Localise.Cldr.LocaleDisplay.display_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#display_names/1-examples"},{"type":"function","doc":"Returns the localised time zone names data\nfor a locale name.","title":"Bonfire.Common.Localise.Cldr.LocaleDisplay.time_zone_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#time_zone_names/1"},{"type":"function","doc":"* `locale` is any language tag returned by\n  `Bonfire.Common.Localise.Cldr.LocaleDisplay.new/1`\n  or a locale name in the list returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.LocaleDisplay.time_zone_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#time_zone_names/1-arguments"},{"type":"function","doc":"* A map of locale time zone names","title":"Returns - Bonfire.Common.Localise.Cldr.LocaleDisplay.time_zone_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#time_zone_names/1-returns"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.LocaleDisplay.time_zone_names(\"en\")","title":"Examples - Bonfire.Common.Localise.Cldr.LocaleDisplay.time_zone_names/1","ref":"Bonfire.Common.Localise.Cldr.LocaleDisplay.html#time_zone_names/1-examples"},{"type":"module","doc":"Formats numbers and currencies based upon CLDR's decimal formats specification.\n\nThe format specification is documentated in [Unicode TR35](http://unicode.org/reports/tr35/tr35-numbers.html#Number_Formats).\nThere are several classes of formatting including non-scientific, scientific,\nrules based (for spelling and ordinal formats), compact formats that display `1k`\nrather than `1,000` and so on.  See `Cldr.Number.to_string/2` for specific formatting\noptions.","title":"Bonfire.Common.Localise.Cldr.Number","ref":"Bonfire.Common.Localise.Cldr.Number.html"},{"type":"module","doc":"The following description applies to formats that do not use scientific\nnotation or significant digits:\n\n* If the number of actual integer digits exceeds the maximum integer digits,\n  then only the least significant digits are shown. For example, 1997 is\n  formatted as \"97\" if the maximum integer digits is set to 2.\n\n* If the number of actual integer digits is less than the minimum integer\n  digits, then leading zeros are added. For example, 1997 is formatted as\n  \"01997\" if the minimum integer digits is set to 5.\n\n* If the number of actual fraction digits exceeds the maximum fraction\n  digits, then half-even rounding it performed to the maximum fraction\n  digits. For example, 0.125 is formatted as \"0.12\" if the maximum fraction\n  digits is 2. This behavior can be changed by specifying a rounding\n  increment and a rounding mode.\n\n* If the number of actual fraction digits is less than the minimum fraction\n  digits, then trailing zeros are added. For example, 0.125 is formatted as\n  \"0.1250\" if the minimum fraction digits is set to 4.\n\n* Trailing fractional zeros are not displayed if they occur j positions after\n  the decimal, where j is less than the maximum fraction digits. For example,\n  0.10004 is formatted as \"0.1\" if the maximum fraction digits is four or\n  less.","title":"Non-Scientific Notation Formatting - Bonfire.Common.Localise.Cldr.Number","ref":"Bonfire.Common.Localise.Cldr.Number.html#module-non-scientific-notation-formatting"},{"type":"module","doc":"Numbers in scientific notation are expressed as the product of a mantissa and\na power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The\nmantissa is typically in the half-open interval [1.0, 10.0) or sometimes\n[0.0, 1.0), but it need not be. In a pattern, the exponent character\nimmediately followed by one or more digit characters indicates scientific\nnotation. Example: \"0.###E0\" formats the number 1234 as \"1.234E3\".\n\n* The number of digit characters after the exponent character gives the\n  minimum exponent digit count. There is no maximum. Negative exponents are\n  formatted using the localized minus sign, not the prefix and suffix from\n  the pattern. This allows patterns such as \"0.###E0 m/s\". To prefix positive\n  exponents with a localized plus sign, specify '+' between the exponent and\n  the digits: \"0.###E+0\" will produce formats \"1E+1\", \"1E+0\", \"1E-1\", and so\n  on. (In localized patterns, use the localized plus sign rather than '+'.)\n\n* The minimum number of integer digits is achieved by adjusting the exponent.\n  Example: 0.00123 formatted with \"00.###E0\" yields \"12.3E-4\". This only\n  happens if there is no maximum number of integer digits. If there is a\n  maximum, then the minimum number of integer digits is fixed at one.\n\n* The maximum number of integer digits, if present, specifies the exponent\n  grouping. The most common use of this is to generate engineering notation,\n  in which the exponent is a multiple of three, for example, \"##0.###E0\". The\n  number 12345 is formatted using \"##0.####E0\" as \"12.345E3\".\n\n* When using scientific notation, the formatter controls the digit counts\n  using significant digits logic. The maximum number of significant digits\n  limits the total number of integer and fraction digits that will be shown\n  in the mantissa; it does not affect parsing. For example, 12345 formatted\n  with \"##0.##E0\" is \"12.3E3\". Exponential patterns may not contain grouping\n  separators.","title":"Scientific Notation Formatting - Bonfire.Common.Localise.Cldr.Number","ref":"Bonfire.Common.Localise.Cldr.Number.html#module-scientific-notation-formatting"},{"type":"module","doc":"There are two ways of controlling how many digits are shows: (a)\nsignificant digits counts, or (b) integer and fraction digit counts. Integer\nand fraction digit counts are described above. When a formatter is using\nsignificant digits counts, it uses however many integer and fraction digits\nare required to display the specified number of significant digits. It may\nignore min/max integer/fraction digits, or it may use them to the extent\npossible.","title":"Significant Digits - Bonfire.Common.Localise.Cldr.Number","ref":"Bonfire.Common.Localise.Cldr.Number.html#module-significant-digits"},{"type":"function","doc":"Parse a string locale-aware manner and return\na number.","title":"Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2"},{"type":"function","doc":"* `string` is any `String.t`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2-arguments"},{"type":"function","doc":"* `:number` is one of `:integer`, `:float`,\n  `:decimal` or `nil`. The default is `nil`\n  meaning that the type auto-detected as either\n  an `integer` or a `float`.\n\n* `:locale` is any locale returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag.t`. The default is\n  `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Options - Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2-options"},{"type":"function","doc":"* A number of the requested or default type or\n\n* `{:error, {exception, error}}` if no number could be determined","title":"Returns - Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2-returns"},{"type":"function","doc":"This function parses a string to return a number but\nin a locale-aware manner. It will normalise grouping\ncharacters and decimal separators, different forms of\nthe `+` and `-` symbols that appear in Unicode and\nstrips any `_` characters that might be used for\nformatting in a string. It then parses the number\nusing the Elixir standard library functions.","title":"Notes - Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.parse(\"＋1.000,34\", locale: \"de\")\n    {:ok, 1000.34}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.parse(\"-1_000_000.34\")\n    {:ok, -1000000.34}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.parse(\"1.000\", locale: \"de\", number: :integer)\n    {:ok, 1000}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.parse(\"＋1.000,34\", locale: \"de\", number: :integer)\n    {:error,\n      {Cldr.Number.ParseError,\n       \"The string \\\"＋1.000,34\\\" could not be parsed as a number\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.parse/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#parse/2-examples"},{"type":"function","doc":"Resolve curencies from strings within\na list.","title":"Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2"},{"type":"function","doc":"* `list` is any list in which currency\n  names and symbols are expected\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `Bonfire.Common.Localise.Cldr.get_locale()`\n\n* `:only` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be considered for a match.\n  The equates to a list of acceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:except` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be not considered for a match.\n  This equates to a list of unacceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:fuzzy` is a float greater than `0.0` and less than or\n  equal to `1.0` which is used as input to\n  `String.jaro_distance/2` to determine is the provided\n  currency string is *close enough* to a known currency\n  string for it to identify definitively a currency code.\n  It is recommended to use numbers greater than `0.8` in\n  order to reduce false positives.","title":"Options - Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2-options"},{"type":"function","doc":"The `:only` and `:except` options accept a list of\ncurrency codes and/or currency types.  The following\ntypes are recognised.\n\nIf both `:only` and `:except` are specified,\nthe `:except` entries take priority - that means\nany entries in `:except` are removed from the `:only`\nentries.\n\n  * `:all`, the default, considers all currencies\n\n  * `:current` considers those currencies that have a `:to`\n    date of nil and which also is a known ISO4217 currency\n\n  * `:historic` is the opposite of `:current`\n\n  * `:tender` considers currencies that are legal tender\n\n  * `:unannotated` considers currencies that don't have\n    \"(some string)\" in their names.  These are usually\n    financial instruments.","title":"Notes - Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.scan(\"100 US dollars\")\n    ...> |> Bonfire.Common.Localise.Cldr.Number.resolve_currencies\n    [100, :USD]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"100 eurosports\")\n    ...> |> Bonfire.Common.Localise.Cldr.Number.resolve_currencies(fuzzy: 0.75)\n    [100, :EUR]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"100 dollars des États-Unis\")\n    ...> |> Bonfire.Common.Localise.Cldr.Number.resolve_currencies(locale: \"fr\")\n    [100, :USD]","title":"Examples - Bonfire.Common.Localise.Cldr.Number.resolve_currencies/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currencies/2-examples"},{"type":"function","doc":"Resolve a currency from a string","title":"Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2"},{"type":"function","doc":"* `list` is any list in which currency\n  names and symbols are expected\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `Bonfire.Common.Localise.Cldr.get_locale()`\n\n* `:only` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be considered for a match.\n  The equates to a list of acceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:except` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be not considered for a match.\n  This equates to a list of unacceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:fuzzy` is a float greater than `0.0` and less than or\n  equal to `1.0` which is used as input to\n  `String.jaro_distance/2` to determine is the provided\n  currency string is *close enough* to a known currency\n  string for it to identify definitively a currency code.\n  It is recommended to use numbers greater than `0.8` in\n  order to reduce false positives.","title":"Options - Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2-options"},{"type":"function","doc":"* An ISO4217 currency code as an atom or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2-returns"},{"type":"function","doc":"The `:only` and `:except` options accept a list of\ncurrency codes and/or currency types.  The following\ntypes are recognised.\n\nIf both `:only` and `:except` are specified,\nthe `:except` entries take priority - that means\nany entries in `:except` are removed from the `:only`\nentries.\n\n  * `:all`, the default, considers all currencies\n\n  * `:current` considers those currencies that have a `:to`\n    date of nil and which also is a known ISO4217 currency\n\n  * `:historic` is the opposite of `:current`\n\n  * `:tender` considers currencies that are legal tender\n\n  * `:unannotated` considers currencies that don't have\n    \"(some string)\" in their names.  These are usually\n    financial instruments.","title":"Notes - Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.resolve_currency(\"US dollars\")\n    [:USD]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.resolve_currency(\"100 eurosports\", fuzzy: 0.75)\n    [:EUR]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.resolve_currency(\"dollars des États-Unis\", locale: \"fr\")\n    [:USD]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.resolve_currency(\"not a known currency\", locale: \"fr\")\n    {:error,\n     {Cldr.UnknownCurrencyError,\n      \"The currency \\\"not a known currency\\\" is unknown or not supported\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.resolve_currency/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_currency/2-examples"},{"type":"function","doc":"Resolve and tokenize percent or permille\nfrom the beginning and/or the end of a string","title":"Bonfire.Common.Localise.Cldr.Number.resolve_per/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2"},{"type":"function","doc":"* `list` is any list in which percent\n  and permille symbols are expected\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.resolve_per/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `options[:backend].get_locale()`","title":"Options - Bonfire.Common.Localise.Cldr.Number.resolve_per/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2-options"},{"type":"function","doc":"* An `:percent` or `permille` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.resolve_per/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.resolve_per \"11%\"\n    [\"11\", :percent]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.resolve_per \"% of linguists\"\n    [:percent, \" of linguists\"]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.resolve_per \"% of linguists %\"\n    [:percent, \" of linguists \", :percent]","title":"Examples - Bonfire.Common.Localise.Cldr.Number.resolve_per/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_per/2-examples"},{"type":"function","doc":"Resolve and tokenize percent and permille\nsybols from strings within a list.\n\nPercent and permille symbols can be identified\nat the beginning and/or the end of a string.","title":"Bonfire.Common.Localise.Cldr.Number.resolve_pers/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_pers/2"},{"type":"function","doc":"* `list` is any list in which percent and\n  permille symbols are expected\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.resolve_pers/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_pers/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `t:Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `options[:backend].get_locale()`","title":"Options - Bonfire.Common.Localise.Cldr.Number.resolve_pers/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_pers/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.scan(\"100%\")\n    ...> |> Bonfire.Common.Localise.Cldr.Number.resolve_pers()\n    [100, :percent]","title":"Examples - Bonfire.Common.Localise.Cldr.Number.resolve_pers/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#resolve_pers/2-examples"},{"type":"function","doc":"Scans a string locale-aware manner and returns\na list of strings and numbers.","title":"Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2"},{"type":"function","doc":"* `string` is any `String.t`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2-arguments"},{"type":"function","doc":"* `:number` is one of `:integer`, `:float`,\n  `:decimal` or `nil`. The default is `nil`\n  meaning that the type auto-detected as either\n  an `integer` or a `float`.\n\n* `:locale` is any locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag.t`. The default is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Options - Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2-options"},{"type":"function","doc":"* A list of strings and numbers","title":"Returns - Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2-returns"},{"type":"function","doc":"Number parsing is performed by `Cldr.Number.Parser.parse/2`\nand any options provided are passed to that function.","title":"Notes - Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.scan(\"£1_000_000.34\")\n    [\"£\", 1000000.34]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"I want £1_000_000 dollars\")\n    [\"I want £\", 1000000, \" dollars\"]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"The prize is 23\")\n    [\"The prize is \", 23]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"The lottery number is 23 for the next draw\")\n    [\"The lottery number is \", 23, \" for the next draw\"]\n\n    iex> Bonfire.Common.Localise.Cldr.Number.scan(\"The loss is -1.000 euros\", locale: \"de\", number: :integer)\n    [\"The loss is \", -1000, \" euros\"]","title":"Examples - Bonfire.Common.Localise.Cldr.Number.scan/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#scan/2-examples"},{"type":"function","doc":"Formats a number and applies the `:approximately` format for\na locale and number system.","title":"Bonfire.Common.Localise.Cldr.Number.to_approx_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_approx_string/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_approx_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_approx_string/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_approx_string 1234\n    {:ok, \"~1,234\"}","title":"Example - Bonfire.Common.Localise.Cldr.Number.to_approx_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_approx_string/2-example"},{"type":"function","doc":"Formats a number and applies the `:at_least` format for\na locale and number system.","title":"Bonfire.Common.Localise.Cldr.Number.to_at_least_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_least_string/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Bonfire.Common.Localise.Cldr.Number.to_string/2` for a description of the available\n  options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_at_least_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_least_string/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_at_least_string 1234\n    {:ok, \"1,234+\"}","title":"Example - Bonfire.Common.Localise.Cldr.Number.to_at_least_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_least_string/2-example"},{"type":"function","doc":"Formats a number and applies the `:at_most` format for\na locale and number system.","title":"Bonfire.Common.Localise.Cldr.Number.to_at_most_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_most_string/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_at_most_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_most_string/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_at_most_string 1234\n    {:ok, \"≤1,234\"}","title":"Example - Bonfire.Common.Localise.Cldr.Number.to_at_most_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_at_most_string/2-example"},{"type":"function","doc":"Formats the first and last numbers of a range and applies\nthe `:range` format for a locale and number system.","title":"Bonfire.Common.Localise.Cldr.Number.to_range_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_range_string/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_range_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_range_string/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_range_string 1234..5678\n    {:ok, \"1,234–5,678\"}","title":"Example - Bonfire.Common.Localise.Cldr.Number.to_range_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_range_string/2-example"},{"type":"function","doc":"Returns a number formatted into a string according to a format pattern and options.","title":"Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-arguments"},{"type":"function","doc":"* `format`: the format style or a format string defining how the number is\n  formatted. See `Cldr.Number.Format` for how format strings can be constructed.\n  See `Cldr.Number.Format.format_styles_for/3` to return available format styles\n  for a locale. The default `format` is `:standard`.\n\n* If `:format` is set to `:long` or `:short` then the formatting depends on\n  whether `:currency` is specified. If not specified then the number is\n  formatted as `:decimal_long` or `:decimal_short`. If `:currency` is\n  specified the number is formatted as `:currency_long` or\n  `:currency_short` and `:fractional_digits` is set to 0 as a default.\n\n* `:format` may also be a format defined by CLDR's Rules Based Number\n  Formats (RBNF).  Further information is found in the module `Cldr.Rbnf`.\n  The most commonly used formats in this category are to spell out the\n  number in a the locales language.  The applicable formats are `:spellout`,\n  `:spellout_year`, `:ordinal`.  A number can also be formatted as roman\n  numbers by using the format `:roman` or `:roman_lower`.\n\n* `currency`: is the currency for which the number is formatted. For\n  available currencies see `Cldr.Currency.known_currencies/0`. This option\n  is required if `:format` is set to `:currency`.  If `currency` is set\n  and no `:format` is set, `:format` will be set to `:currency` as well.\n\n* `currency_symbol`: Allows overriding a currency symbol. The alternatives\n  are:\n  * `:iso` the ISO currency code will be used instead of the default\n    currency symbol.\n  * `:narrow` uses the narrow symbol defined for the locale. The same\n    narrow symbol can be defined for more than one currency and therefore this\n    should be used with care. If no narrow symbol is defined, the standard\n    symbol is used.\n  * `:symbol` uses the standard symbol defined in CLDR. A symbol is unique\n    for each currency and can be safely used.\n  * \"string\" uses `string` as the currency symbol\n  * `:standard` (the default and recommended) uses the CLDR-defined symbol\n    based upon the currency format for the locale.\n\n* `:cash`: a boolean which indicates whether a number being formatted as a\n  `:currency` is to be considered a cash value or not. Currencies can be\n  rounded differently depending on whether `:cash` is `true` or `false`.\n  *This option is deprecated in favour of `currency_digits: :cash`.\n\n* `:currency_digits` indicates which of the rounding and digits should be\n  used. The options are `:accounting` which is the default, `:cash` or\n  `:iso`\n\n* `:rounding_mode`: determines how a number is rounded to meet the precision\n  of the format requested. The available rounding modes are `:down`,\n  :half_up, :half_even, :ceiling, :floor, :half_down, :up. The default is\n  `:half_even`.\n\n* `:number_system`: determines which of the number systems for a locale\n  should be used to define the separators and digits for the formatted\n  number. If `number_system` is an `atom` then `number_system` is\n  interpreted as a number system. If the `:number_system` is\n  `binary` then it is interpreted as a number system name. See\n  `Cldr.Number.System.number_system_names_for/2`. The default is `:default`.\n\n* `:locale`: determines the locale in which the number is formatted. See\n  `Cldr.known_locale_names/0`. The default is`Cldr.get_locale/0` which is the\n  locale currently in affect for this `Process` and which is set by\n  `Cldr.put_locale/1`.\n\n* If `:fractional_digits` is set to a positive integer value then the number\n  will be rounded to that number of digits and displayed accordingly - overriding\n  settings that would be applied by default.  For example, currencies have\n  fractional digits defined reflecting each currencies minor unit.  Setting\n  `:fractional_digits` will override that setting.\n\n* If `:maximum_integer_digits` is set to a positive integer value then the\n  number is left truncated before formatting. For example if the number `1234`\n  is formatted with the option `maximum_integer_digits: 2`, the number is\n  truncated to `34` and formatted.\n\n* If `:round_nearest` is set to a positive integer value then the number\n  will be rounded to nearest increment of that value - overriding\n  settings that would be applied by default.\n\n* `:minimum_grouping_digits` overrides the CLDR definition of minimum grouping\n  digits. For example in the locale `es` the number `1234` is formatted by default\n  as `1345` because the locale defines the `minimium_grouping_digits` as `2`. If\n  `minimum_grouping_digits: 1` is set as an option the number is formatting as\n  `1.345`. The `:minimum_grouping_digits` is added to the grouping defined by\n  the number format.  If the sum of these two digits is greater than the number\n  of digits in the integer (or fractional) part of the number then no grouping\n  is performed.\n\n* `:wrapper` is a 2-arity function that will be called for each number component\n  with parameters `string` and `tag` where `tag` is one of `:number`,\n  `:currency_symbol`, `:currency_space`, `:literal`, `:quote`, `:percent`,\n  `:permille`, `:minus` or `:plus`. The function must return a string. The\n  function can be used to wrap format elements in HTML or other tags.","title":"Options - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-options"},{"type":"function","doc":"A locale identifier can specify options that affect number formatting.\nThese options are:\n\n* `nu`: defines the number system to be used if none is specified by the `:number_system`\n  option to `to_string/2`\n\nThis key is part of the [u extension](https://unicode.org/reports/tr35/#u_Extension) and\nthat document should be consulted for details on how to construct a locale identifier with these\nextensions.","title":"Locale extensions affecting formatting - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-locale-extensions-affecting-formatting"},{"type":"function","doc":"Wrapping elements is particularly useful when formatting a number with a\ncurrency symbol and the requirement is to have different HTML formatting\napplied to the symbol than the number.  For example:\n\n    iex> Cldr.Number.to_string(100, format: :currency, currency: :USD, wrapper: fn\n    ...>   string, :currency_symbol -> \" \" <> string <> \" \"\n    ...>   string, :number -> \" \" <> string <> \" \"\n    ...>   string, :currency_space -> \" \" <> string <> \" \"\n    ...>   string, _other -> string\n    ...> end)\n    {:ok, \" $  100.00 \"}\n\nIt is also possible and recommended to use the `Phoenix.HTML.Tag.content_tag/3`\nfunction if wrapping HTML tags since these will ensure HTML entities are\ncorrectly encoded.  For example:\n\n    iex> Cldr.Number.to_string(100, format: :currency, currency: :USD, wrapper: fn\n    ...>   string, :currency_symbol -> Phoenix.HTML.Tag.content_tag(:span, string, class: \"symbol\")\n    ...>   string, :number -> Phoenix.HTML.Tag.content_tag(:span, string, class: \"number\")\n    ...>   string, :currency_space -> Phoenix.HTML.Tag.content_tag(:span, string)\n    ...>   string, _other -> string\n    ...> end)\n    {:ok, \" $  100.00 \"}\n\nWhen formatting a number the format is parsed into format elements that might include\na currency symbol, a literal string, inserted text between a currency symbol and the\ncurrency amount, a percent sign, the number itself and several other elements.  In\nsome cases it is helpful to be apply specific formatting to each element.\nThis can be achieved by specifying a `:wrapper` option. This option takes a 2-arity\nfunction as an argument. For each element of the format the wrapper function is called\nwith two parameters:  the format element as a string and an atom representing the\nelement type. The wrapper function is required to return a string that is then\ninserted in the final formatted number.","title":"Wrapping format elements - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-wrapping-format-elements"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345\n    {:ok, \"12,345\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, locale: \"fr\"\n    {:ok, \"12 345\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1345.32, currency: :EUR, locale: \"es\", minimum_grouping_digits: 1\n    {:ok, \"1.345,32 €\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1345.32, currency: :EUR, locale: \"es\"\n    {:ok, \"1345,32 €\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, locale: \"fr\", currency: \"USD\"\n    {:ok, \"12 345,00 $US\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, format: \"#E0\"\n    {:ok, \"1.2345E4\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\"\n    {:ok, \"THB 12,345.00\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string -12345, format: :accounting, currency: \"THB\"\n    {:ok, \"(THB 12,345.00)\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\",\n    ...> locale: \"th\"\n    {:ok, \"฿12,345.00\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\",\n    ...> locale: \"th\", number_system: :native\n    {:ok, \"฿๑๒,๓๔๕.๐๐\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1244.30, format: :long\n    {:ok, \"1 thousand\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1244.30, format: :long, currency: \"USD\"\n    {:ok, \"1,244 US dollars\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1244.30, format: :short\n    {:ok, \"1K\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1244.30, format: :short, currency: \"EUR\"\n    {:ok, \"€1K\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1234, format: :spellout\n    {:ok, \"one thousand two hundred thirty-four\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1234, format: :spellout_verbose\n    {:ok, \"one thousand two hundred and thirty-four\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 1989, format: :spellout_year\n    {:ok, \"nineteen eighty-nine\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 123, format: :ordinal\n    {:ok, \"123rd\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 123, format: :roman\n    {:ok, \"CXXIII\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string 123, locale: \"th-u-nu-thai\"\n    {:ok, \"๑๒๓\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-examples"},{"type":"function","doc":"An error tuple `{:error, reason}` will be returned if an error is detected.\nThe two most likely causes of an error return are:\n\n  * A format cannot be compiled. In this case the error tuple will look like:\n\n```\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string(12345, format: \"0#\")\n    {:error, {Cldr.FormatCompileError,\n      \"Decimal format compiler: syntax error before: \\\"#\\\"\"}}\n```\n\n  * The format style requested is not defined for the `locale` and\n    `number_system`. This happens typically when the number system is\n    `:algorithmic` rather than the more common `:numeric`. In this case the error\n    return looks like:\n\n```\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string(1234, locale: \"he\", number_system: \"hebr\", format: :percent)\n    {:error, {Cldr.UnknownFormatError,\n      \"The locale :he with number system :hebr does not define a format :percent\"}}\n```","title":"Errors - Bonfire.Common.Localise.Cldr.Number.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string/2-errors"},{"type":"function","doc":"Same as the execution of `to_string/2` but raises an exception if an error would be\nreturned.","title":"Bonfire.Common.Localise.Cldr.Number.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string!/2"},{"type":"function","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted. See\n  `Bonfire.Common.Localise.Cldr.Number.to_string/2`","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string!/2-arguments"},{"type":"function","doc":"* a formatted number as a string or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Number.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.to_string! 12345\n    \"12,345\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string! 12345, locale: \"fr\"\n    \"12 345\"","title":"Examples - Bonfire.Common.Localise.Cldr.Number.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#to_string!/2-examples"},{"type":"function","doc":"Return a valid number system from a provided locale and number\nsystem name or type.\n\nThe number system or number system type must be valid for the\ngiven locale.  If a number system type is provided, the\nunderlying number system is returned.","title":"Bonfire.Common.Localise.Cldr.Number.validate_number_system/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#validate_number_system/2"},{"type":"function","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.validate_number_system/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#validate_number_system/2-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.validate_number_system \"en\", :latn\n    {:ok, :latn}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.validate_number_system \"en\", :default\n    {:ok, :latn}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.validate_number_system \"en\", :unknown\n    {:error,\n     {Cldr.UnknownNumberSystemError, \"The number system :unknown is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.validate_number_system \"zz\", :default\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.validate_number_system/2","ref":"Bonfire.Common.Localise.Cldr.Number.html#validate_number_system/2-examples"},{"type":"module","doc":"Implements cardinal plural rules for numbers.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html"},{"type":"function","doc":"The locale names for which plural rules are defined.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.available_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#available_locale_names/0"},{"type":"function","doc":"The configured locales for which plural rules are defined.\n\nReturns the intersection of `Bonfire.Common.Localise.Cldr.known_locale_names/0` and\nthe locales for which Cardinal plural rules are defined.\n\nThere are many `Cldr` locales which don't have their own plural\nrules so this list is the intersection of `Cldr`'s configured\nlocales and those that have rules.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.known_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#known_locale_names/0"},{"type":"function","doc":"Return the plural key for a given number in a given locale\n\nReturns which plural key (`:zero`, `:one`, `:two`, `:few`,\n`:many` or `:other`) a given number fits into within the\ncontext of a given locale.\n\nNote that these key names should not be interpreted\nliterally.  For example, the key returned from\n`Cldr.Number.Ordinal.plural_rule(0, \"en\")` is actually\n`:other`, not `:zero`.\n\nThis key can then be used to format a number, date, time, unit,\nlist or other content in a plural-sensitive way.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rule/3"},{"type":"function","doc":"* `number` is any `integer`, `float` or `Decimal`\n\n* `locale` is any locale returned by `Cldr.Locale.new!/2` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\n* `rounding` is one of `[:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down]`.  The\n  default is `:half_even`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rule/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule 0, \"fr\"\n    :one\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule 0, \"en\"\n    :other","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rule/3-examples"},{"type":"function","doc":"Returns all the plural rules defined in CLDR.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rules/0","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rules/0"},{"type":"function","doc":"Return the plural rules for a locale.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rules_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rules_for/1"},{"type":"function","doc":"* `locale` is any locale returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\nThe rules are returned in AST form after parsing.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Cardinal.plural_rules_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#plural_rules_for/1-arguments"},{"type":"function","doc":"Pluralize a number using cardinal plural rules\nand a substitution map.","title":"Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#pluralize/3"},{"type":"function","doc":"* `number` is an integer, float or Decimal\n\n* `locale` is any locale returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\n* `substitutions` is a map that maps plural keys to a string.\n  The valid substitution keys are `:zero`, `:one`, `:two`,\n  `:few`, `:many` and `:other`.\n\nSee also `Bonfire.Common.Localise.Cldr.Number.Cardinal.Cardinal.plural_rule/3`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#pluralize/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 1, \"en\", %{one: \"one\"}\n    \"one\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 2, \"en\", %{one: \"one\"}\n    nil\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 2, \"en\", %{one: \"one\", two: \"two\", other: \"other\"}\n    \"other\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 22, \"en\", %{one: \"one\", two: \"two\", other: \"other\"}\n    \"other\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize Decimal.new(1), \"en\", %{one: \"one\"}\n    \"one\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize Decimal.new(2), \"en\", %{one: \"one\"}\n    nil\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize Decimal.new(2), \"en\", %{one: \"one\", two: \"two\"}\n    nil\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 1..10, \"ar\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"few\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize 1..10, \"en\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Cardinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Cardinal.html#pluralize/3-examples"},{"type":"module","doc":"Functions to manage the collection of number patterns defined in Cldr.\n\nNumber patterns affect how numbers are interpreted in a localized context.\nHere are some examples, based on the French locale. The \".\" shows where the\ndecimal point should go. The \",\" shows where the thousands separator should\ngo. A \"0\" indicates zero-padding: if the number is too short, a zero (in the\nlocale's numeric set) will go there. A \"#\" indicates no padding: if the\nnumber is too short, nothing goes there. A \"¤\" shows where the currency sign\nwill go. The following illustrates the effects of different patterns for the\nFrench locale, with the number \"1234.567\". Notice how the pattern characters\n',' and '.' are replaced by the characters appropriate for the locale.","title":"Bonfire.Common.Localise.Cldr.Number.Format","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html"},{"type":"module","doc":"| Pattern\t      | Currency\t      | Text        |\n| ------------- | :-------------: | ----------: |\n| #,##0.##\t    | n/a\t            | 1 234,57    |\n| #,##0.###\t    | n/a\t            | 1 234,567   |\n| ###0.#####\t  | n/a\t            | 1234,567    |\n| ###0.0000#\t  | n/a\t            | 1234,5670   |\n| 00000.0000\t  | n/a\t            | 01234,5670  |\n| #,##0.00 ¤\t  | EUR\t            | 1 234,57 €  |\n\nThe number of # placeholder characters before the decimal do not matter,\nsince no limit is placed on the maximum number of digits. There should,\nhowever, be at least one zero some place in the pattern. In currency formats,\nthe number of digits after the decimal also do not matter, since the\ninformation in the supplemental data (see Supplemental Currency Data) is used\nto override the number of decimal places — and the rounding — according to\nthe currency that is being formatted. That can be seen in the above chart,\nwith the difference between Yen and Euro formatting.\n\nDetails of the number formats are described in the\n[Unicode documentation](http://unicode.org/reports/tr35/tr35-numbers.html#Number_Format_Patterns)","title":"Number Pattern Examples - Bonfire.Common.Localise.Cldr.Number.Format","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#module-number-pattern-examples"},{"type":"function","doc":"Returns the decimal formats defined for a given locale.","title":"Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for/1-arguments"},{"type":"function","doc":"* `{:ok, map}` where map is a map of decimal formats\n  keyed by number system or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for/1-returns"},{"type":"function","doc":"Returns the decimal formats defined for a given locale.","title":"Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for!/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for!/1-arguments"},{"type":"function","doc":"* `{:ok, map}` where map is a map of decimal formats\n  keyed by number system or\n\n* raises an exception.\n\nSee `Bonfire.Common.Localise.Cldr.Number.Format.Number.Format.all_formats_for/1` for further information.","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.all_formats_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#all_formats_for!/1-returns"},{"type":"function","doc":"Returns the currency space for a given locale and\nnumber system.","title":"Bonfire.Common.Localise.Cldr.Number.Format.currency_spacing/2","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#currency_spacing/2"},{"type":"function","doc":"Returns the list of decimal formats in the configured locales including\nthe list of locales configured for precompilation in `config.exs`.\n\nThis function exists to allow the decimal formatter\nto precompile all the known formats at compile time.","title":"Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list/0","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list/0"},{"type":"function","doc":"#=> Bonfire.Common.Localise.Cldr.Number.Format.Format.decimal_format_list\n    [\"#\", \"#,##,##0%\",\n    \"#,##,##0.###\", \"#,##,##0.00¤\", \"#,##,##0.00¤;(#,##,##0.00¤)\",\n    \"#,##,##0 %\", \"#,##0%\", \"#,##0.###\", \"#,##0.00 ¤\",\n    \"#,##0.00 ¤;(#,##0.00 ¤)\", \"#,##0.00¤\", \"#,##0.00¤;(#,##0.00¤)\",\n    \"#,##0 %\", \"#0%\", \"#0.######\", \"#0.00 ¤\", \"#E0\", \"%#,##0\", \"% #,##0\",\n    \"0\", \"0.000000E+000\", \"0000 M ¤\", \"0000¤\", \"000G ¤\", \"000K ¤\", \"000M ¤\",\n    \"000T ¤\", \"000mM ¤\", \"000m ¤\", \"000 Bio'.' ¤\", \"000 Bln ¤\", \"000 Bn ¤\",\n    \"000 B ¤\", \"000 E ¤\", \"000 K ¤\", \"000 MRD ¤\", \"000 Md ¤\", \"000 Mio'.' ¤\",\n    \"000 Mio ¤\", \"000 Mld ¤\", \"000 Mln ¤\", \"000 Mn ¤\", \"000 Mrd'.' ¤\",\n    \"000 Mrd ¤\", \"000 Mr ¤\", \"000 M ¤\", \"000 NT ¤\", \"000 N ¤\", \"000 Tn ¤\",\n    \"000 Tr ¤\", ...]","title":"Example - Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list/0","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list/0-example"},{"type":"function","doc":"Returns the list of decimal formats for a configured locale.","title":"Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list_for/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.\n\nThis function exists to allow the decimal formatter to precompile all\nthe known formats at compile time. Its use is not otherwise recommended.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list_for/1-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list_for(:en)\n    {:ok, [\"#,##0%\", \"#,##0.###\", \"#,##0.00\", \"#,##0.00;(#,##0.00)\",\"#E0\",\n     \"0 billion\", \"0 million\", \"0 thousand\",\n     \"0 trillion\", \"00 billion\", \"00 million\", \"00 thousand\", \"00 trillion\",\n     \"000 billion\", \"000 million\", \"000 thousand\", \"000 trillion\", \"000B\", \"000K\",\n     \"000M\", \"000T\", \"00B\", \"00K\", \"00M\", \"00T\", \"0B\", \"0K\", \"0M\", \"0T\",\n     \"¤#,##0.00\", \"¤#,##0.00;(¤#,##0.00)\", \"¤000B\", \"¤000K\", \"¤000M\",\n     \"¤000T\", \"¤00B\", \"¤00K\", \"¤00M\", \"¤00T\", \"¤0B\", \"¤0K\", \"¤0M\", \"¤0T\",\n     \"¤ #,##0.00\", \"¤ #,##0.00;(¤ #,##0.00)\", \"¤ 000B\", \"¤ 000K\", \"¤ 000M\",\n     \"¤ 000T\", \"¤ 00B\", \"¤ 00K\", \"¤ 00M\", \"¤ 00T\", \"¤ 0B\", \"¤ 0K\", \"¤ 0M\", \"¤ 0T\"]}","title":"Example - Bonfire.Common.Localise.Cldr.Number.Format.decimal_format_list_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#decimal_format_list_for/1-example"},{"type":"function","doc":"Returns the default grouping for a locale as a map.","title":"Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for/1-arguments"},{"type":"function","doc":"* `{:ok, grouping}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for(:en)\n    {:ok, %{fraction: %{first: 0, rest: 0}, integer: %{first: 3, rest: 3}}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for/1-examples"},{"type":"function","doc":"Returns the default grouping for a locale\nor raises on error.","title":"Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for!/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for!/1-arguments"},{"type":"function","doc":"* `grouping` as a map or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for!/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!(:en)\n    %{fraction: %{first: 0, rest: 0}, integer: %{first: 3, rest: 3}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Format.default_grouping_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#default_grouping_for!/1-examples"},{"type":"function","doc":"Return the predfined formats for a given `locale` and `number_system`.","title":"Bonfire.Common.Localise.Cldr.Number.Format.formats_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for/2"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system` is any valid number system or number system type returned\n  by `Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.formats_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for/2-arguments"},{"type":"function","doc":"Bonfire.Common.Localise.Cldr.Number.Format.formats_for :fr, :native\n    #=> %Cldr.Number.Format{\n      accounting: \"#,##0.00 ¤;(#,##0.00 ¤)\",\n      currency: \"#,##0.00 ¤\",\n      percent: \"#,##0 %\",\n      scientific: \"#E0\",\n      standard: \"#,##0.###\"\n      currency_short: [{\"1000\", [one: \"0 k ¤\", other: \"0 k ¤\"]},\n       {\"10000\", [one: \"00 k ¤\", other: \"00 k ¤\"]},\n       {\"100000\", [one: \"000 k ¤\", other: \"000 k ¤\"]},\n       {\"1000000\", [one: \"0 M ¤\", other: \"0 M ¤\"]},\n       {\"10000000\", [one: \"00 M ¤\", other: \"00 M ¤\"]},\n       {\"100000000\", [one: \"000 M ¤\", other: \"000 M ¤\"]},\n       {\"1000000000\", [one: \"0 Md ¤\", other: \"0 Md ¤\"]},\n       {\"10000000000\", [one: \"00 Md ¤\", other: \"00 Md ¤\"]},\n       {\"100000000000\", [one: \"000 Md ¤\", other: \"000 Md ¤\"]},\n       {\"1000000000000\", [one: \"0 Bn ¤\", other: \"0 Bn ¤\"]},\n       {\"10000000000000\", [one: \"00 Bn ¤\", other: \"00 Bn ¤\"]},\n       {\"100000000000000\", [one: \"000 Bn ¤\", other: \"000 Bn ¤\"]}],\n       ...\n      }","title":"Example - Bonfire.Common.Localise.Cldr.Number.Format.formats_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for/2-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Format.formats_for!/2","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#formats_for!/2"},{"type":"function","doc":"Returns the minimum grouping digits for a locale.","title":"Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for/1-arguments"},{"type":"function","doc":"* `{:ok, minumum_digits}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for(\"en\")\n    {:ok, 1}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for/1-examples"},{"type":"function","doc":"Returns the minimum grouping digits for a locale\nor raises on error.","title":"Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for!/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-arguments"},{"type":"function","doc":"* `minumum_digits` or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!(\"en\")\n    1","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Format.minimum_grouping_digits_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-examples"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.metadata!/1","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html#metadata!/1"},{"type":"function","doc":"Formats a number according to a decimal format string.","title":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html#to_string/3"},{"type":"function","doc":"* `number` is an integer, float or Decimal\n\n* `format` is a format string.  See `Bonfire.Common.Localise.Cldr.Number` for further information.\n\n* `options` is a map of options.  See `Bonfire.Common.Localise.Cldr.Number.to_string/2`\n  for further information.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Number.Formatter.Decimal.html#to_string/3-arguments"},{"type":"module","doc":"Implements ordinal plural rules for numbers.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html"},{"type":"function","doc":"The locale names for which plural rules are defined.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.available_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#available_locale_names/0"},{"type":"function","doc":"The configured locales for which plural rules are defined.\n\nReturns the intersection of `Bonfire.Common.Localise.Cldr.known_locale_names/0` and\nthe locales for which Ordinal plural rules are defined.\n\nThere are many `Cldr` locales which don't have their own plural\nrules so this list is the intersection of `Cldr`'s configured\nlocales and those that have rules.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.known_locale_names/0","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#known_locale_names/0"},{"type":"function","doc":"Return the plural key for a given number in a given locale\n\nReturns which plural key (`:zero`, `:one`, `:two`, `:few`,\n`:many` or `:other`) a given number fits into within the\ncontext of a given locale.\n\nNote that these key names should not be interpreted\nliterally.  For example, the key returned from\n`Cldr.Number.Ordinal.plural_rule(0, \"en\")` is actually\n`:other`, not `:zero`.\n\nThis key can then be used to format a number, date, time, unit,\nlist or other content in a plural-sensitive way.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rule/3"},{"type":"function","doc":"* `number` is any `integer`, `float` or `Decimal`\n\n* `locale` is any locale returned by `Cldr.Locale.new!/2` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\n* `rounding` is one of `[:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down]`.  The\n  default is `:half_even`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rule/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule 0, \"fr\"\n    :other\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule 1, \"en\"\n    :one","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rule/3-examples"},{"type":"function","doc":"Returns all the plural rules defined in CLDR.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rules/0","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rules/0"},{"type":"function","doc":"Return the plural rules for a locale.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rules_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rules_for/1"},{"type":"function","doc":"* `locale` is any locale returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\nThe rules are returned in AST form after parsing.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Ordinal.plural_rules_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#plural_rules_for/1-arguments"},{"type":"function","doc":"Pluralize a number using ordinal plural rules\nand a substitution map.","title":"Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#pluralize/3"},{"type":"function","doc":"* `number` is an integer, float or Decimal or a `Range.t{}`.  When a range, The\n  is that in any usage, the start value is strictly less than the end value,\n  and that no values are negative. Results for any cases that do not meet\n  these criteria are undefined.\n\n* `locale` is any locale returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n\n* `substitutions` is a map that maps plural keys to a string.\n  The valid substitution keys are `:zero`, `:one`, `:two`,\n  `:few`, `:many` and `:other`.\n\nSee also `Bonfire.Common.Localise.Cldr.Number.Ordinal.Ordinal.plural_rule/3`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#pluralize/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 1, :en, %{one: \"one\"}\n    \"one\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 2, :en, %{one: \"one\"}\n    nil\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 2, :en, %{one: \"one\", two: \"two\"}\n    \"two\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 22, :en, %{one: \"one\", two: \"two\", other: \"other\"}\n    \"two\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize Decimal.new(1), :en, %{one: \"one\"}\n    \"one\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize Decimal.new(2), :en, %{one: \"one\"}\n    nil\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize Decimal.new(2), :en, %{one: \"one\", two: \"two\"}\n    \"two\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 1..10, \"ar\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize 1..10, \"en\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Ordinal.pluralize/3","ref":"Bonfire.Common.Localise.Cldr.Number.Ordinal.html#pluralize/3-examples"},{"type":"module","doc":"Implements plural rules for ranges","title":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html"},{"type":"function","doc":"Returns a final plural type for a start-of-range plural\ntype, an end-of-range plural type and a locale.","title":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html#plural_rule/3"},{"type":"function","doc":"* `first` is a plural type for the start of a range\n\n* `last` is a plural type for the end of a range\n\n* `locale` is any `Cldr.LanguageTag.t` or a language name\n  (not locale name)","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html#plural_rule/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.plural_rule :other, :few, \"ar\"\n    :few","title":"Example - Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.plural_rule/3","ref":"Bonfire.Common.Localise.Cldr.Number.PluralRule.Range.html#plural_rule/3-example"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Symbol","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html"},{"type":"function","doc":"Returns a list of all decimal symbols defined\nby the locales configured in this backend as\na list.","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_decimal_symbols/0","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_decimal_symbols/0"},{"type":"function","doc":"Returns a list of all decimal symbols defined\nby the locales configured in this backend as\na string.\n\nThis string can be used as a character class\nwhen builing a regular expression.","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_decimal_symbols_class/0","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_decimal_symbols_class/0"},{"type":"function","doc":"Returns a list of all grouping symbols defined\nby the locales configured in this backend as\na list.","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_grouping_symbols/0","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_grouping_symbols/0"},{"type":"function","doc":"Returns a list of all grouping symbols defined\nby the locales configured in this backend as\na string.\n\nThis string can be used as a character class\nwhen builing a regular expression.","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.all_grouping_symbols_class/0","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#all_grouping_symbols_class/0"},{"type":"function","doc":"Returns a map of `Cldr.Number.Symbol.t` structs of the number symbols for each\nof the number systems of a locale.","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/1"},{"type":"function","doc":"* `locale` is any valid locale name returned by\n  `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Bonfire.Common.Localise.Cldr.Locale.new!/1`. The default\n  is `Bonfire.Common.Localise.Cldr.get_locale/0`.","title":"Options - Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/1-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for(:th)\n    {:ok, %{\n       latn: %Cldr.Number.Symbol{\n         decimal: \".\",\n         exponential: \"E\",\n         group: \",\",\n         infinity: \"∞\",\n         list: \";\",\n         minus_sign: \"-\",\n         nan: \"NaN\",\n         per_mille: \"‰\",\n         percent_sign: \"%\",\n         plus_sign: \"+\",\n         superscripting_exponent: \"×\",\n         time_separator: \":\"\n       },\n       thai: %Cldr.Number.Symbol{\n         decimal: \".\",\n         exponential: \"E\",\n         group: \",\",\n         infinity: \"∞\",\n         list: \";\",\n         minus_sign: \"-\",\n         nan: \"NaN\",\n         per_mille: \"‰\",\n         percent_sign: \"%\",\n         plus_sign: \"+\",\n         superscripting_exponent: \"×\",\n         time_separator: \":\"\n       }\n     }}","title":"Example: - Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/1-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.Symbol.html#number_symbols_for/2"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.System","ref":"Bonfire.Common.Localise.Cldr.Number.System.html"},{"type":"function","doc":"Returns the actual number system from a number system type.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by ``Cldr.Locale.new!/2``\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`\n\nThis function will decode a number system type into the actual\nnumber system.  If the number system provided can't be decoded\nit is returned as is.","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_for/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_for \"th\", :latn\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_for \"en\", :default\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_for \"he\", :traditional\n    {:ok, %{rules: \"hebrew\", type: :algorithmic}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_for \"en\", :native\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_for \"en\", :finance\n    {\n      :error,\n      {Cldr.UnknownNumberSystemError,\n        \"The number system :finance is unknown for the locale named :en. Valid number systems are %{default: :latn, native: :latn}\"}\n    }","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.number_system_for/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_for/2-examples"},{"type":"function","doc":"Returns the number system from a language tag or\nlocale name.","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_from_locale/1"},{"type":"function","doc":"* `locale` is any language tag returned be `Cldr.Locale.new/2`\n  or a locale name in the list returned by `Cldr.known_locale_names/1`","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_from_locale/1-arguments"},{"type":"function","doc":"* A number system name as an atom","title":"Returns - Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_from_locale/1-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale \"en-US-u-nu-thai\"\n    :thai\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale \"en-US\"\n    :latn","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.number_system_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_from_locale/1-examples"},{"type":"function","doc":"Returns the number systems available for a locale\nor `{:error, message}` if the locale is not known.\n\n* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1`","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_names_for/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for \"en\"\n    {:ok, [:latn]}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for \"zz\"\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_names_for/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_names_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_names_for!/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.System.number_system_types_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_system_types_for/1"},{"type":"function","doc":"Returns the number systems available for a locale\nor `{:error, message}` if the locale is not known.\n\n* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1`","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_for/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.number_systems_for \"en\"\n    {:ok, %{default: :latn, native: :latn}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_systems_for \"th\"\n    {:ok, %{default: :latn, native: :thai}}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.number_systems_for \"zz\"\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_for/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_for!/1","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_for!/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.System.number_systems_like/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#number_systems_like/2"},{"type":"function","doc":"Returns a number system name for a given locale and number system reference.\n\n* `system_name` is any number system name returned by\n  `Bonfire.Common.Localise.Cldr.known_number_systems/0` or a number system type\n  returned by `Bonfire.Common.Localise.Cldr.known_number_system_types/0`\n\n* `locale` is any valid locale name returned by `Bonfire.Common.Localise.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Bonfire.Common.Localise.Cldr.Locale.new!/1`\n\nNumber systems can be references in one of two ways:\n\n* As a number system type such as :default, :native, :traditional and\n  :finance. This allows references to a number system for a locale in a\n  consistent fashion for a given use\n\n* WIth the number system name directly, such as :latn, :arab or any of the\n  other 70 or so\n\nThis function dereferences the supplied `system_name` and returns the\nactual system name.","title":"Bonfire.Common.Localise.Cldr.Number.System.system_name_from/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#system_name_from/2"},{"type":"function","doc":"ex> Bonfire.Common.Localise.Cldr.Number.System.system_name_from(:default, \"en\")\n    {:ok, :latn}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.system_name_from(\"latn\", \"en\")\n    {:ok, :latn}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.system_name_from(:native, \"en\")\n    {:ok, :latn}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.system_name_from(:nope, \"en\")\n    {\n      :error,\n      {Cldr.UnknownNumberSystemError, \"The number system :nope is unknown\"}\n    }\n\nNote that return value is not guaranteed to be a valid\nnumber system for the given locale as demonstrated in the third example.","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.system_name_from/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#system_name_from/2-examples"},{"type":"function","doc":"Converts a number into the representation of\na non-latin number system.\n\nThis function converts numbers to a known\nnumber system only, it does not provide number\nformatting.\n\n* `number` is a `float`, `integer` or `Decimal`\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`\n\nThere are two types of number systems in CLDR:\n\n* `:numeric` in which the number system defines\n  a direct mapping between the latin digits `0..9`\n  into a the number system equivalent.  In this case,\n` to_system/2` invokes `Cldr.Number.Transliterate.transliterate_digits/3`\n  for the given number.\n\n* `:algorithmic` in which the number system\n  does not have the same structure as the `:latn`\n  number system and therefore the conversion is\n  done algorithmically.  For CLDR the algorithm\n  is implemented through `Cldr.Rbnf` rulesets.\n  These rulesets are considered by CLDR to be\n  less rigorous than the `:numeric` number systems\n  and caution and testing for a specific use case\n  is recommended.","title":"Bonfire.Common.Localise.Cldr.Number.System.to_system/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.to_system 123456, :hebr\n    {:ok, \"קכ״ג׳תנ״ו\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.to_system 123, :hans\n    {:ok, \"一百二十三\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.to_system 123, :hant\n    {:ok, \"一百二十三\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.to_system 123, :hansfin\n    {:ok, \"壹佰贰拾叁\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.to_system/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system/2-examples"},{"type":"function","doc":"Converts a number into the representation of\na non-latin number system. Returns a converted\nstring or raises on error.\n\n* `number` is a `float`, `integer` or `Decimal`\n\n* `system_name` is any number system name returned by\n  `Bonfire.Common.Localise.Cldr.known_number_systems/0` or a number system type\n  returned by `Bonfire.Common.Localise.Cldr.known_number_system_types/0`\n\nSee `Bonfire.Common.Localise.Cldr.Number.System.to_system/2` for further\ninformation.","title":"Bonfire.Common.Localise.Cldr.Number.System.to_system!/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.System.to_system! 123, :hans\n    \"一百二十三\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.to_system! 123, :hant\n    \"一百二十三\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.System.to_system! 123, :hansfin\n    \"壹佰贰拾叁\"","title":"Examples - Bonfire.Common.Localise.Cldr.Number.System.to_system!/2","ref":"Bonfire.Common.Localise.Cldr.Number.System.html#to_system!/2-examples"},{"type":"module","doc":"Transliteration for digits and separators.\n\nTransliterating a string is an expensive business.  First the string has to\nbe exploded into its component graphemes.  Then for each grapheme we have\nto map to the equivalent in the other `{locale, number_system}`.  Then we\nhave to reassemble the string.\n\nEffort is made to short circuit where possible. Transliteration is not\nrequired for any `{locale, number_system}` that is the same as `{\"en\",\n\"latn\"}` since the implementation uses this combination for the placeholders during\nformatting already. When short circuiting is possible (typically the en-*\nlocales with \"latn\" number_system - the total number of short circuited\nlocales is 211 of the 537 in CLDR) the overall number formatting is twice as\nfast than when formal transliteration is required.","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html"},{"type":"module","doc":"This module includes `Cldr.Number.Transliterate.transliterate_digits/3` which transliterates\ndigits between number systems.  For example from :arabic to :latn.  Since generating a\ntransliteration map is slow, pairs of transliterations can be configured so that the\ntransliteration map is created at compile time and therefore speeding up transliteration at\nrun time.\n\nTo configure these transliteration pairs, add the to the `use Cldr` configuration\nin a backend module:\n\n    defmodule MyApp.Cldr do\n      use Cldr,\n      locale: [\"en\", \"fr\", \"th\"],\n      default_locale: \"en\",\n      precompile_transliterations: [{:latn, :thai}, {:arab, :thai}]\n    end\n\nWhere each tuple in the list configures one transliteration map.  In this example, two maps are\nconfigured: from `:latn` to `:thai` and from `:arab` to `:thai`.\n\nA list of configurable number systems is returned by `Cldr.Number.System.numeric_systems/0`.\n\nIf a transliteration is requested between two number pairs that have not been configured for\nprecompilation, a warning is logged.","title":"Configuring precompilation of digit transliterations - Bonfire.Common.Localise.Cldr.Number.Transliterate","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#module-configuring-precompilation-of-digit-transliterations"},{"type":"function","doc":"Transliterates from latin digits to another number system's digits.\n\nTransliterates the latin digits 0..9 to their equivalents in\nanother number system. Also transliterates the decimal and grouping\nseparators as well as the plus, minus and exponent symbols. Any other character\nin the string will be returned \"as is\".","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate/3"},{"type":"function","doc":"* `sequence` is the string to be transliterated.\n\n* `locale` is any known locale, defaulting to `Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system` is any known number system. If expressed as a `string` it\n  is the actual name of a known number system. If epressed as an `atom` it is\n  used as a key to look up a number system for the locale (the usual keys are\n  `:default` and `:native` but :traditional and :finance are also part of the\n  standard). See `Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1` for a locale to\n  see what number system types are defined. The default is `:default`.\n\nFor available number systems see `Cldr.Number.System.number_systems/0`\nand `Bonfire.Common.Localise.Cldr.Number.System.number_systems_for/1`.  Also see\n`Bonfire.Common.Localise.Cldr.Number.Symbol.number_symbols_for/1`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate/3-arguments"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"123556\")\n    \"123556\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"123,556.000\", \"fr\", :default)\n    \"123 556,000\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", :default)\n    \"123556\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", \"thai\")\n    \"๑๒๓๕๕๖\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", :native)\n    \"๑๒๓๕๕๖\"\n\n    iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate(\"Some number is: 123556\", \"th\", \"thai\")\n    \"Some number is: ๑๒๓๕๕๖\"","title":"Examples - Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate!/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate!/3"},{"type":"function","doc":"Transliterates digits from one number system to another number system\n\n* `digits` is binary representation of a number\n\n* `from_system` and `to_system` are number system names in atom form.  See\n`Cldr.Number.System.numeric_systems/0` for available number systems.","title":"Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate_digits/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate_digits/3"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate_digits \"٠١٢٣٤٥٦٧٨٩\", :arab, :latn\n    \"0123456789\"","title":"Example - Bonfire.Common.Localise.Cldr.Number.Transliterate.transliterate_digits/3","ref":"Bonfire.Common.Localise.Cldr.Number.Transliterate.html#transliterate_digits/3-example"},{"type":"module","doc":"Functions to implement the number system rule-based-number-format rules of CLDR.\n\nThese rules are defined only on the \"und\" locale and represent specialised\nnumber formatting.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.rule_sets(:und)\n    ...> |> Enum.sort()\n    [\n      :armenian_lower,\n      :armenian_upper,\n      :cyrillic_lower,\n      :ethiopic,\n      :georgian,\n      :greek_lower,\n      :greek_upper,\n      :hebrew,\n      :hebrew_item,\n      :roman_lower,\n      :roman_upper,\n      :tamil,\n      :zz_default\n    ]\n\nA rule can then be invoked on an available rule_set.  For example\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_upper(123, :und)\n    \"CXXIII\"\n\nThis particular call is equivalent to the call through the public API of:\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string(123, format: :roman)\n    {:ok, \"CXXIII\"}","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.all_rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#all_rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_lower/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_lower/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_lower/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_lower/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_upper/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_upper/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.armenian_upper/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#armenian_upper/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_1_10/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_1_10/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_final/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_final/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_post/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_post/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.cyrillic_lower_thousands/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_thousands/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p1/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p1/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p2/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p2/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p3/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p3/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.ethiopic_p/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#ethiopic_p/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.georgian/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#georgian/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.georgian/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#georgian/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_lower/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_lower/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_lower/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_lower/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_numeral_majuscules/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_numeral_majuscules/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_numeral_minuscules/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_numeral_minuscules/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_upper/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_upper/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.greek_upper/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#greek_upper/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_0_99/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_0_99/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_item_hundreds/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_item_hundreds/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.hebrew_thousands/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#hebrew_thousands/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_lower/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_lower/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_lower/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_lower/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_upper/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_upper/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.roman_upper/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#roman_upper/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.rule_sets/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#rule_sets/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.tamil_thousands/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#tamil_thousands/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.zz_default/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#zz_default/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.zz_default/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.NumberSystem.html#zz_default/2"},{"type":"module","doc":"Functions to implement the ordinal rule-based-number-format rules of CLDR.\n\nAs CLDR notes, the data is incomplete or non-existent for many languages.  It\nis considered complete for English however.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets(:en)\n    [:digits_ordinal]\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets(\"fr\")\n    ...> |> Enum.sort()\n    [\n      :digits_ordinal,\n      :digits_ordinal_feminine,\n      :digits_ordinal_feminine_plural,\n      :digits_ordinal_masculine,\n      :digits_ordinal_masculine_plural\n    ]\n\nA rule can then be invoked on an available rule_set.  For example\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal(123, :en)\n    \"123rd\"\n\nThis call is equivalent to the call through the public API of:\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string(123, format: :ordinal)\n    {:ok, \"123rd\"}","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.all_rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#all_rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_feminine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_feminine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_feminine_plural/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_feminine_plural/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_indicator_m/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_indicator_m/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine_adjective/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine_adjective/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.digits_ordinal_masculine_plural/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#digits_ordinal_masculine_plural/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.dord_femabbrev/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#dord_femabbrev/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.dord_mascabbrev/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#dord_mascabbrev/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.rule_sets/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Ordinal.html#rule_sets/1"},{"type":"module","doc":"Functions to implement the spellout rule-based-number-format rules of CLDR.\n\nAs CLDR notes, the data is incomplete or non-existent for many languages.  It\nis considered complete for English however.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.Spellout.rule_sets(\"en\")\n    ...> |> Enum.sort()\n    [\n      :spellout_cardinal,\n      :spellout_cardinal_verbose,\n      :spellout_numbering,\n      :spellout_numbering_verbose,\n      :spellout_numbering_year,\n      :spellout_ordinal,\n      :spellout_ordinal_verbose\n    ]\n\nA rule can then be invoked on an available rule_set. For example:\n\n    iex> Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal(123, \"en\")\n    \"one hundred twenty-third\"\n\nThis call is equivalent to the call through the public API of:\n\n    iex> Bonfire.Common.Localise.Cldr.Number.to_string(123, format: :spellout)\n    {:ok, \"one hundred twenty-three\"}","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.after_hundred/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#after_hundred/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.after_thousand_or_more/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#after_thousand_or_more/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.all_rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#all_rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.and/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#and/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.and_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#and_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_f/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_f/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_m/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_m/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.cents_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#cents_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.commas/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#commas/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.commas_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#commas_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_un/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_un/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_une/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_une/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.et_unieme/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#et_unieme/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.fem_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#fem_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.lenient_parse/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#lenient_parse/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.mille_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#mille_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_no_final/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_no_final/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_a_nofinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_a_nofinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_i_nofinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_i_nofinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msc_with_o_nofinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msc_with_o_nofinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.msco_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#msco_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esima_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esima_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esime_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esime_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimi_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimi_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_a/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_a/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_i/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_i/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.ordinal_esimo_with_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#ordinal_esimo_with_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.r2d_year/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#r2d_year/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.rule_sets/0","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#rule_sets/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.rule_sets/1","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#rule_sets/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_feminine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_feminine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_feminine_cents/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_feminine_cents/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_masculine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_masculine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_masculine_cents/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_masculine_cents/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_cardinal_verbose/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_cardinal_verbose/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_leading/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_leading/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_cents/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_cents/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_verbose/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_verbose/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_numbering_year/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_numbering_year/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_cont/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_cont/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_conts/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_conts/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_feminine_plural/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_feminine_plural/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_adjective/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_adjective/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_cont/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_cont/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_conts/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_conts/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_masculine_plural/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_masculine_plural/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.spellout_ordinal_verbose/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#spellout_ordinal_verbose/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_f/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_f/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_m/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_m/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.subcents_o/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#subcents_o/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.teen/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#teen/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.th/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#th/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.tieth/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#tieth/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.x_ty/2","ref":"Bonfire.Common.Localise.Cldr.Rbnf.Spellout.html#x_ty/2"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Territory","ref":"Bonfire.Common.Localise.Cldr.Territory.html"},{"type":"function","doc":"Returns a list of available styles.","title":"Bonfire.Common.Localise.Cldr.Territory.available_styles/0","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_styles/0"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.available_styles()\n    [:short, :standard, :variant]","title":"Example - Bonfire.Common.Localise.Cldr.Territory.available_styles/0","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_styles/0-example"},{"type":"function","doc":"Returns the available territory subdivisions for a given locale.\n\n* `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.available_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_subdivisions/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.available_subdivisions(\"en\")\n    [:ad02, :ad03, :ad04, :ad05, :ad06, :ad07, :ad08, ...]\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.available_subdivisions()\n    []\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.available_subdivisions(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.available_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_subdivisions/1-example"},{"type":"function","doc":"Returns the available territories for a given locale.\n\n* `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.available_territories/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_territories/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.available_territories()\n    [:\"001\", :\"002\", :\"003\", :\"005\", :\"009\", :\"011\", :\"013\", :\"014\", :\"015\", :\"017\",\n    :\"018\", :\"019\", :\"021\", :\"029\", :\"030\", :\"034\", :\"035\", :\"039\", :\"053\", :\"054\",\n    :\"057\", :\"061\", :\"142\", :\"143\", :\"145\", :\"150\", :\"151\", :\"154\", :\"155\", :\"202\",\n    :\"419\", :AC, :AD, :AE, :AF, :AG, :AI, :AL, :AM, :AO, :AQ, :AR, :AS, :AT, :AU,\n    :AW, :AX, :AZ, :BA, :BB, ...]\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.available_territories(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.available_territories/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#available_territories/1-example"},{"type":"function","doc":"Lists children(s) for the given territory code.\nReturns `{:ok, list}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.children/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#children/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.children(:EU)\n    {:ok,\n    [:AT, :BE, :CY, :CZ, :DE, :DK, :EE, :ES, :FI, :FR, :GR, :HR, :HU, :IE,\n      :IT, :LT, :LU, :LV, :MT, :NL, :PL, :PT, :SE, :SI, :SK, :BG, :RO]}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.children(:ZZZ)\n    {:error, {Cldr.UnknownTerritoryError, \"The territory :ZZZ is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.children(:GB)\n    {:error, {Cldr.UnknownParentError, \"The territory :GB has no children\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.children/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#children/2-example"},{"type":"function","doc":"The same as `children/2`, but raises an exception if it fails.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.children!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#children!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.children!(:EU)\n    [:AT, :BE, :CY, :CZ, :DE, :DK, :EE, :ES, :FI, :FR, :GR, :HR, :HU, :IE, :IT,\n    :LT, :LU, :LV, :MT, :NL, :PL, :PT, :SE, :SI, :SK, :BG, :RO]","title":"Example - Bonfire.Common.Localise.Cldr.Territory.children!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#children!/2-example"},{"type":"function","doc":"Checks relationship between two territories, where the first argument is the `parent` and second the `child`.\nReturns `true` if successful, otherwise `false`.","title":"Bonfire.Common.Localise.Cldr.Territory.contains?/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#contains?/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.contains?(:EU, :DK)\n    true\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.contains?(:DK, :EU)\n    false","title":"Example - Bonfire.Common.Localise.Cldr.Territory.contains?/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#contains?/2-example"},{"type":"function","doc":"Returns a list of country codes.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.country_codes/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#country_codes/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.country_codes()\n    [:AD, :AE, :AF, :AG, :AI, :AL, :AM, :AO, :AR, :AS, :AT, :AU, :AW,\n    :AX, :AZ, :BA, :BB, :BD, :BE, :BF, :BG, :BH, :BI, :BJ, :BL, :BM,\n    :BN, :BO, :BQ, :BR, :BS, :BT, :BV, :BW, :BY, :BZ, :CA, :CC, :CD,\n    :CF, :CG, :CH, :CI, :CK, :CL, :CM, :CN, :CO, :CR, :CU, ...]","title":"Example - Bonfire.Common.Localise.Cldr.Territory.country_codes/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#country_codes/1-example"},{"type":"function","doc":"Localized string for the given `LanguageTag.t`.\nReturns `{:ok, String.t}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `style` is one of those returned by `Bonfire.Common.Localise.Cldr.Territory.available_styles/0`.\n    The current styles are `:short`, `:standard` and `:variant`.\n    The default is `:standard`","title":"Bonfire.Common.Localise.Cldr.Territory.from_language_tag/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_language_tag/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_language_tag(Cldr.get_locale())\n    {:ok, \"world\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_language_tag(Cldr.get_locale(), [style: :short])\n    {:error, {Cldr.UnknownStyleError, \"The style :short is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_language_tag(Cldr.get_locale(), [style: :ZZZ])\n    {:error, {Cldr.UnknownStyleError, \"The style :ZZZ is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_language_tag(Cldr.get_locale(), [style: \"ZZZ\"])\n    {:error, {Cldr.UnknownStyleError, \"The style \\\"ZZZ\\\" is unknown\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_language_tag/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_language_tag/2-example"},{"type":"function","doc":"The same as `from_language_tag/2`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.from_language_tag!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_language_tag!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_language_tag!(Cldr.get_locale())\n    \"world\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_language_tag!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_language_tag!/2-example"},{"type":"function","doc":"Localized string for the given subdivision code.\nReturns `{:ok, String.t}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n    The default is `Cldr.get_locale/0`\n\n  * `style` is one of those returned by `Bonfire.Common.Localise.Cldr.Territory.available_styles/0`.\n    The current styles are `:short`, `:standard` and `:variant`.\n    The default is `:standard`","title":"Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_subdivision_code/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"gbcma\", locale: \"en\")\n    {:ok, \"Cumbria\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"gbcma\", locale: \"pl\")\n    {:ok, \"Kumbria\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"gbcma\", locale: \"bs\")\n    {:error, {Cldr.UnknownSubdivisionError, \"No subdivision translation for :gbcma could be found in locale :bs\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"invalid\", locale: \"en\")\n    {:error, {Cldr.UnknownTerritoryError, \"The territory \\\"invalid\\\" is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"gbcma\", [locale: :zzz])\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code(\"gbcma\", [locale: \"zzz\"])\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_subdivision_code/2-example"},{"type":"function","doc":"The same as `from_subdivision_code/2`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_subdivision_code!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code!(\"gbcma\", locale: \"en\")\n    \"Cumbria\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code!(\"gbcma\", locale: \"pl\")\n    \"Kumbria\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_subdivision_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_subdivision_code!/2-example"},{"type":"function","doc":"Localized string for the given territory code.\nReturns `{:ok, String.t}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n    The default is `Cldr.get_locale/0`\n\n  * `style` is one of those returned by `Bonfire.Common.Localise.Cldr.Territory.available_styles/0`.\n    The current styles are `:short`, `:standard` and `:variant`.\n    The default is `:standard`","title":"Bonfire.Common.Localise.Cldr.Territory.from_territory_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_territory_code/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB)\n    {:ok, \"United Kingdom\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [style: :short])\n    {:ok, \"UK\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [style: :ZZZ])\n    {:error, {Cldr.UnknownStyleError, \"The style :ZZZ is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [style: \"ZZZ\"])\n    {:error, {Cldr.UnknownStyleError, \"The style \\\"ZZZ\\\" is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [locale: \"pt\"])\n    {:ok, \"Reino Unido\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [locale: :zzz])\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code(:GB, [locale: \"zzz\"])\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_territory_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_territory_code/2-example"},{"type":"function","doc":"The same as `from_territory_code/2`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.from_territory_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_territory_code!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code!(:GB)\n    \"United Kingdom\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code!(:GB, [style: :short])\n    \"UK\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.from_territory_code!(:GB, [locale: \"pt\"])\n    \"Reino Unido\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.from_territory_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#from_territory_code!/2-example"},{"type":"function","doc":"Maps territory info for the given territory code.\nReturns `{:ok, map}` if successful, otherwise `{:error, reason}`.","title":"Bonfire.Common.Localise.Cldr.Territory.info/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#info/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.info(:GB)\n    {:ok,\n     %{\n       currency: [GBP: %{from: ~D[1694-07-27]}],\n       gdp: 2925000000000,\n       language_population: %{\n        \"ar\" => %{population_percent: 0.3},\n        \"bn\" => %{population_percent: 0.4},\n        \"cy\" => %{official_status: \"official_regional\", population_percent: 1.3},\n        \"de\" => %{population_percent: 9},\n        \"en\" => %{official_status: \"official\", population_percent: 98},\n        \"es\" => %{population_percent: 8},\n        \"fr\" => %{population_percent: 23},\n        \"ga\" => %{official_status: \"official_regional\", population_percent: 0.15},\n        \"gd\" => %{\n          official_status: \"official_regional\",\n          population_percent: 0.11,\n          writing_percent: 5\n        },\n        \"gu\" => %{population_percent: 2.9},\n        \"it\" => %{population_percent: 0.2},\n        \"kw\" => %{population_percent: 0.003},\n        \"lt\" => %{population_percent: 0.2},\n        \"pa\" => %{population_percent: 3.6},\n        \"pl\" => %{population_percent: 4},\n        \"pt\" => %{population_percent: 0.2},\n        \"sco\" => %{population_percent: 2.5, writing_percent: 5},\n        \"so\" => %{population_percent: 0.2},\n        \"ta\" => %{population_percent: 3.2},\n        \"tr\" => %{population_percent: 0.2},\n        \"ur\" => %{population_percent: 3.5},\n        \"zh-Hant\" => %{population_percent: 0.3},\n        \"en-Shaw\" => %{population_percent: 0}\n       },\n       literacy_percent: 99,\n       measurement_system: %{\n         default: :uksystem,\n         paper_size: :a4,\n         temperature: :uksystem\n       },\n       population: 65761100\n     }}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.info/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#info/1-example"},{"type":"function","doc":"The same as `info/1`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.info!/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#info!/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.info!(:GB)\n    %{\n      currency: [GBP: %{from: ~D[1694-07-27]}],\n      gdp: 2925000000000,\n      language_population: %{\n        \"ar\" => %{population_percent: 0.3},\n        \"bn\" => %{population_percent: 0.4},\n        \"cy\" => %{official_status: \"official_regional\", population_percent: 1.3},\n        \"de\" => %{population_percent: 9},\n        \"en\" => %{official_status: \"official\", population_percent: 98},\n        \"es\" => %{population_percent: 8},\n        \"fr\" => %{population_percent: 23},\n        \"ga\" => %{official_status: \"official_regional\", population_percent: 0.15},\n        \"gd\" => %{\n          official_status: \"official_regional\",\n          population_percent: 0.11,\n          writing_percent: 5\n        },\n        \"gu\" => %{population_percent: 2.9},\n        \"it\" => %{population_percent: 0.2},\n        \"kw\" => %{population_percent: 0.003},\n        \"lt\" => %{population_percent: 0.2},\n        \"pa\" => %{population_percent: 3.6},\n        \"pl\" => %{population_percent: 4},\n        \"pt\" => %{population_percent: 0.2},\n        \"sco\" => %{population_percent: 2.5, writing_percent: 5},\n        \"so\" => %{population_percent: 0.2},\n        \"ta\" => %{population_percent: 3.2},\n        \"tr\" => %{population_percent: 0.2},\n        \"ur\" => %{population_percent: 3.5},\n        \"zh-Hant\" => %{population_percent: 0.3},\n        \"en-Shaw\" => %{population_percent: 0}\n      },\n      literacy_percent: 99,\n      measurement_system: %{\n        default: :uksystem,\n        paper_size: :a4,\n        temperature: :uksystem\n      },\n      population: 65761100\n    }","title":"Example - Bonfire.Common.Localise.Cldr.Territory.info!/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#info!/1-example"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Territory.inverted_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#inverted_subdivisions/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Territory.inverted_territories/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#inverted_territories/1"},{"type":"function","doc":"Returns a map of all known territory subdivisions in a given locale.\n\n* `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.known_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_subdivisions/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.known_subdivisions(\"en\")\n    %{\n      \"ad02\" => \"Canillo\",\n      \"ad03\" => \"Encamp\",\n      \"ad04\" => \"La Massana\",\n      \"ad05\" => \"Ordino\",\n      \"ad06\" => \"Sant Julià de Lòria\",\n      \"ad07\" => \"Andorra la Vella\",\n      ...\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.known_subdivisions()\n    %{}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.known_subdivisions(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.known_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_subdivisions/1-example"},{"type":"function","doc":"Returns a map of all known territories in a given locale.\n\n* `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.known_territories/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_territories/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.known_territories()\n    %{SN: %{standard: \"Senegal\"}, \"061\": %{standard: \"Polynesia\"},\n    BH: %{standard: \"Bahrain\"}, TM: %{standard: \"Turkmenistan\"},\n    \"009\": %{standard: \"Oceania\"}, CW: %{standard: \"Curaçao\"},\n    FR: %{standard: \"France\"}, TN: %{standard: \"Tunisia\"},\n    FI: %{standard: \"Finland\"}, BF: %{standard: \"Burkina Faso\"},\n    \"155\": %{standard: \"Western Europe\"}, GL: %{standard: \"Greenland\"},\n    VI: %{standard: \"U.S. Virgin Islands\"}, ZW: %{standard: \"Zimbabwe\"},\n    AR: %{standard: \"Argentina\"}, SG: %{standard: \"Singapore\"},\n    SZ: %{standard: \"Swaziland\"}, ID: %{standard: \"Indonesia\"},\n    NR: %{standard: \"Nauru\"}, RW: %{standard: \"Rwanda\"},\n    TR: %{standard: \"Turkey\"}, IS: %{standard: \"Iceland\"},\n    ME: %{standard: \"Montenegro\"}, AW: %{standard: \"Aruba\"},\n    PY: %{standard: \"Paraguay\"}, \"145\": %{standard: \"Western Asia\"},\n    CG: %{standard: \"Congo - Brazzaville\", variant: \"Congo (Republic)\"},\n    LT: %{standard: \"Lithuania\"}, SA: %{standard: \"Saudi Arabia\"},\n    MZ: %{standard: \"Mozambique\"}, NU: %{standard: \"Niue\"},\n    NG: %{standard: \"Nigeria\"}, CK: %{standard: \"Cook Islands\"},\n    ZM: %{standard: \"Zambia\"}, LK: %{standard: \"Sri Lanka\"},\n    UY: %{standard: \"Uruguay\"}, YE: %{standard: \"Yemen\"},\n    \"011\": %{standard: \"Western Africa\"},\n    CC: %{standard: \"Cocos (Keeling) Islands\"}, BY: %{standard: \"Belarus\"},\n    IL: %{standard: \"Israel\"}, KY: %{standard: \"Cayman Islands\"},\n    GN: %{standard: \"Guinea\"}, VN: %{standard: \"Vietnam\"},\n    PE: %{standard: \"Peru\"}, HU: %{standard: \"Hungary\"},\n    HN: %{standard: \"Honduras\"}, GI: %{standard: \"Gibraltar\"},\n    \"142\": %{standard: \"Asia\"}, \"029\": %{...}, ...}\n\n    => Bonfire.Common.Localise.Cldr.Territory.known_territories(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \"zzz\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.known_territories/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_territories/1-example"},{"type":"function","doc":"Returns a list of subdivisions of a given territory.","title":"Bonfire.Common.Localise.Cldr.Territory.known_territory_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_territory_subdivisions/1"},{"type":"function","doc":"=> Bonfire.Common.Localise.Cldr.Territory.known_territory_subdivisions(:GB)\n    {:ok, [\"gbabc\", \"gbabd\", \"gbabe\", \"gbagb\", \"gbagy\", \"gband\", \"gbann\",\n    \"gbans\", \"gbbas\", \"gbbbd\", \"gbbdf\", \"gbbdg\", \"gbben\", \"gbbex\", \"gbbfs\",\n    \"gbbge\", \"gbbgw\", \"gbbir\", \"gbbkm\", \"gbbmh\", \"gbbne\", \"gbbnh\", \"gbbns\",\n    \"gbbol\", \"gbbpl\", \"gbbrc\", \"gbbrd\", \"gbbry\", \"gbbst\", \"gbbur\", \"gbcam\",\n    \"gbcay\", \"gbcbf\", \"gbccg\", \"gbcgn\", \"gbche\", \"gbchw\", \"gbcld\", \"gbclk\",\n    \"gbcma\", \"gbcmd\", \"gbcmn\", \"gbcon\", \"gbcov\", \"gbcrf\", \"gbcry\", \"gbcwy\",\n    \"gbdal\", \"gbdby\", \"gbden\", ...]}\n\n    => Bonfire.Common.Localise.Cldr.Territory.known_territory_subdivisions(:AI)\n    {:ok, nil}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.known_territory_subdivisions(:ZZZ)\n    {:error, {Cldr.UnknownTerritoryError, \"The territory :ZZZ is unknown\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.known_territory_subdivisions/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#known_territory_subdivisions/1-example"},{"type":"function","doc":"Lists parent(s) for the given territory code.\nReturns `{:ok, list}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.parent/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#parent/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.parent(:GB)\n    {:ok, [:\"154\", :UN]}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.parent(:ZZZ)\n    {:error, {Cldr.UnknownTerritoryError, \"The territory :ZZZ is unknown\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.parent(Cldr.get_locale())\n    {:error, {Cldr.UnknownChildrenError, \"The territory :\\\"001\\\" has no parent(s)\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.parent/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#parent/2-example"},{"type":"function","doc":"The same as `parent/2`, but raises an exception if it fails.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.parent!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#parent!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.parent!(:GB)\n    [:\"154\", :UN]","title":"Example - Bonfire.Common.Localise.Cldr.Territory.parent!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#parent!/2-example"},{"type":"function","doc":"Returns a map of available subdivision aliases.","title":"Bonfire.Common.Localise.Cldr.Territory.subdivision_aliases/0","ref":"Bonfire.Common.Localise.Cldr.Territory.html#subdivision_aliases/0"},{"type":"function","doc":"iex#> Bonfire.Common.Localise.Cldr.Territory.subdivision_aliases()\n    %{:uspr => :PR}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.subdivision_aliases/0","ref":"Bonfire.Common.Localise.Cldr.Territory.html#subdivision_aliases/0-example"},{"type":"function","doc":"A helper method to get a territory's currency code\nif a territory has multiply currencies then the oldest active currency is returned.\nReturns `{:ok, code}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.to_currency_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_code/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code(:US)\n    {:ok, :USD}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code(\"cu\")\n    {:ok, :CUP}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_currency_code/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_code/2-example"},{"type":"function","doc":"The same as `to_currency_code/2`, but raises an exception if it fails.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.to_currency_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_code!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code!(:US)\n    :USD\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code!(:US, as: :charlist)\n    ~c\"USD\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code!(\"PS\")\n    :ILS\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_code!(\"PS\", as: :binary)\n    \"ILS\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_currency_code!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_code!/2-example"},{"type":"function","doc":"A helper method to get a territory's currency codes.\nReturns `{:ok, list}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.to_currency_codes/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_codes/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes(:US)\n    {:ok, [:USD]}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes(\"ht\")\n    {:ok, [:USD, :HTG]}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_currency_codes/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_codes/2-example"},{"type":"function","doc":"The same as `to_currency_codes/2`, but raises an exception if it fails.\n\n* `options` are:\n  * `as: :atom`\n  * `as: :binary`\n  * `as: :charlist`","title":"Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_codes!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!(:US)\n    [:USD]\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!(:US, as: :charlist)\n    [~c\"USD\"]\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!(\"PS\")\n    [:ILS, :JOD]\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!(\"PS\", as: :binary)\n    [\"ILS\", \"JOD\"]","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_currency_codes!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_currency_codes!/2-example"},{"type":"function","doc":"Unicode flag for the given territory code.\nReturns `{:ok, flag}` if successful, otherwise `{:error, reason}`.","title":"Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_unicode_flag/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag(:US)\n    {:ok, \"🇺🇸\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag(:EZ)\n    {:error, {Cldr.UnknownFlagError, \"The territory :EZ has no flag\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_unicode_flag/1-example"},{"type":"function","doc":"The same as `to_unicode_flag/1`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag!/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_unicode_flag!/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag!(:US)\n    \"🇺🇸\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.to_unicode_flag!/1","ref":"Bonfire.Common.Localise.Cldr.Territory.html#to_unicode_flag!/1-example"},{"type":"function","doc":"Translate a LanguageTag.t into a localized string from one locale to another.\nReturns `{:ok, result}` if successful, otherwise `{:error, reason}`.\n\n* `options` are:\n  * `locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n    The default is `Cldr.get_locale/0`\n\n  * `style` is one of those returned by `Bonfire.Common.Localise.Cldr.Territory.available_styles/0`.\n    The current styles are `:short`, `:standard` and `:variant`.\n    The default is `:standard`","title":"Bonfire.Common.Localise.Cldr.Territory.translate_language_tag/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_language_tag/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_language_tag(Cldr.get_locale())\n    {:ok, \"world\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_language_tag(Cldr.get_locale(), [locale: Cldr.Locale.new!(\"pt\", TestBackend.Cldr)])\n    {:ok, \"Mundo\"}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_language_tag/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_language_tag/2-example"},{"type":"function","doc":"The same as `translate_language_tag/2`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.translate_language_tag!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_language_tag!/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_language_tag!(Cldr.get_locale())\n    \"world\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_language_tag!(Cldr.get_locale(), [locale: Cldr.Locale.new!(\"pt\", TestBackend.Cldr)])\n    \"Mundo\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_language_tag!/2","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_language_tag!/2-example"},{"type":"function","doc":"Translate a localized string from one locale to another.\nReturns `{:ok, result}` if successful, otherwise `{:error, reason}`.\n\n* `to_locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.translate_subdivision/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_subdivision/4"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision(\"Cumbria\", \"en\", \"pl\")\n    {:ok, \"Kumbria\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision(\"Cumbria\", \"en\", \"bs\")\n    {:error, {Cldr.UnknownSubdivisionError, \"No subdivision translation for :gbcma could be found in locale :bs\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision(\"Cumbria\", :zzz)\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision(\"Cumbria\", \"en\", \"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_subdivision/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_subdivision/4-example"},{"type":"function","doc":"The same as `translate_subdivision/3`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.translate_subdivision!/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_subdivision!/4"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision!(\"Cumbria\", \"en\", \"pl\")\n    \"Kumbria\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_subdivision!(\"Kumbria\", \"pl\", \"en\")\n    \"Cumbria\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_subdivision!/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_subdivision!/4-example"},{"type":"function","doc":"Translate a localized string from one locale to another.\nReturns `{:ok, String.t}` if successful, otherwise `{:error, reason}`.\n\n* `to_locale` is any configured locale. See `Bonfire.Common.Localise.Cldr.known_locale_names/0`.\n  The default is `Cldr.get_locale/0`","title":"Bonfire.Common.Localise.Cldr.Territory.translate_territory/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_territory/4"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory(\"Reino Unido\", \"pt\")\n    {:ok, \"United Kingdom\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory(\"United Kingdom\", \"en\", \"pt\")\n    {:ok, \"Reino Unido\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory(\"Reino Unido\", :zzz)\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory(\"United Kingdom\", \"en\", \"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory(\"Westworld\", \"en\", \"pt\")\n    {:error, {Cldr.UnknownTerritoryError, \"No territory translation for \\\"Westworld\\\" could be found in locale :en\"}}","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_territory/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_territory/4-example"},{"type":"function","doc":"The same as `translate_territory/3`, but raises an exception if it fails.","title":"Bonfire.Common.Localise.Cldr.Territory.translate_territory!/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_territory!/4"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory!(\"Reino Unido\", \"pt\")\n    \"United Kingdom\"\n\n    iex> Bonfire.Common.Localise.Cldr.Territory.translate_territory!(\"United Kingdom\", \"en\", \"pt\")\n    \"Reino Unido\"\n\n    #=> Bonfire.Common.Localise.Cldr.Territory.translate_territory!(\"Westworld\", \"en\", \"pt\")\n    ** (Cldr.UnknownTerritoryError) No territory translation for \"Westworld\" could be found in locale \"en\"","title":"Example - Bonfire.Common.Localise.Cldr.Territory.translate_territory!/4","ref":"Bonfire.Common.Localise.Cldr.Territory.html#translate_territory!/4-example"},{"type":"module","doc":"","title":"Bonfire.Common.Localise.Cldr.Time","ref":"Bonfire.Common.Localise.Cldr.Time.html"},{"type":"function","doc":"Formats a time according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)","title":"Bonfire.Common.Localise.Cldr.Time.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2"},{"type":"function","doc":"* `{:ok, formatted_time}` or\n\n* `{:error, reason}`.","title":"Returns - Bonfire.Common.Localise.Cldr.Time.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2-returns"},{"type":"function","doc":"* `time` is a `t:Time.t/0` struct or any map that contains\n  one or more of the keys `:hour`, `:minute`, `:second` and optionally `:microsecond`,\n  `:time_zone`, `:zone_abbr`, `:utc_offset` and `:std_offset.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.Time.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full`, or a format id\n  or a format string. The default is `:medium` for full times (that is,\n  times having `:hour`, `:minute` and `:second` fields). The\n  default for partial times is to derive a candidate format from the time and\n  find the best match from the formats returned by\n  `Cldr.Time.available_formats/2`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:locale` any locale returned by `Cldr.known_locale_names/1`.  The default is\n  `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted date digits should\n  be transliterated.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.Time.available_formats/3`\n  to see which formats have these variants.\n\n* `period: :variant` will use a variant for the time period and flexible time period if\n  one is available in the locale.  For example, in the `:en` locale `period: :variant` will\n  return \"pm\" instead of \"PM\".","title":"Options - Bonfire.Common.Localise.Cldr.Time.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Time.to_string(~T[07:35:13.215217])\n    {:ok, \"7:35:13 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(~T[07:35:13.215217], format: :short)\n    {:ok, \"7:35 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(~T[07:35:13.215217], format: :short, period: :variant)\n    {:ok, \"7:35 am\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(~T[07:35:13.215217], format: :medium, locale: :fr)\n    {:ok, \"07:35:13\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(~T[07:35:13.215217], format: :medium)\n    {:ok, \"7:35:13 AM\"}\n\n    iex> {:ok, date_time} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(date_time, format: :long)\n    {:ok, \"11:59:59 PM UTC\"}\n\n    # A partial time with a best match CLDR-defined format\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(%{hour: 23, minute: 11})\n    {:ok, \"11:11 PM\"}\n\n    # Sometimes the available time fields can't be mapped to an available\n    # CLDR defined format.\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string(%{minute: 11})\n    {:error,\n     {Cldr.DateTime.UnresolvedFormat, \"No available format resolved for :m\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Time.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string/2-examples"},{"type":"function","doc":"Formats a time according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)\nor raises an exception.","title":"Bonfire.Common.Localise.Cldr.Time.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2"},{"type":"function","doc":"* `time` is a `t:Time.t/0` struct or any map that contains\n  one or more of the keys `:hour`, `:minute`, `:second` and optionally `:microsecond`,\n  `:time_zone`, `:zone_abbr`, `:utc_offset` and `:std_offset.\n\n* `options` is a keyword list of options for formatting.","title":"Arguments - Bonfire.Common.Localise.Cldr.Time.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium`, `:long`, `:full`, or a format id\n  or a format string. The default is `:medium` for full times (that is,\n  times having `:hour`, `:minute` and `:second` fields). The\n  default for partial times is to derive a candidate format from the time and\n  find the best match from the formats returned by\n  `Cldr.Time.available_formats/2`. See [here](README.md#date-time-and-datetime-localization-formats)\n  for more information about specifying formats.\n\n* `:locale` any locale returned by `Cldr.known_locale_names/1`.  The default is\n  `Cldr.get_locale/0`.\n\n* `:number_system` a number system into which the formatted date digits should\n  be transliterated.\n\n* `:prefer` is either `:unicode` (the default) or `:ascii`. A small number of\n  formats have two variants - one using Unicode spaces (typically non-breaking space) and\n  another using only ASCII whitespace. The `:ascii` format is primarily to support legacy\n  use cases and is not recommended. See `Cldr.Time.available_formats/3`\n  to see which formats have these variants.\n\n* `period: :variant` will use a variant for the time period and flexible time period if\n  one is available in the locale.  For example, in the `:en` locale `period: :variant` will\n  return \"pm\" instead of \"PM\".","title":"Options - Bonfire.Common.Localise.Cldr.Time.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2-options"},{"type":"function","doc":"* `formatted_time_string` or\n\n* raises an exception.","title":"Returns - Bonfire.Common.Localise.Cldr.Time.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Time.to_string!(~T[07:35:13.215217])\n    \"7:35:13 AM\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string!(~T[07:35:13.215217], format: :short)\n    \"7:35 AM\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string!(~T[07:35:13.215217], format: :short, period: :variant)\n    \"7:35 am\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string!(~T[07:35:13.215217], format: :medium, locale: :fr)\n    \"07:35:13\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string!(~T[07:35:13.215217], format: :medium)\n    \"7:35:13 AM\"\n\n    iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string! datetime, format: :long\n    \"11:59:59 PM UTC\"\n\n    # A partial time with a best match CLDR-defined format\n    iex> Bonfire.Common.Localise.Cldr.Time.to_string!(%{hour: 23, minute: 11})\n    \"11:11 PM\"","title":"Examples - Bonfire.Common.Localise.Cldr.Time.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Time.html#to_string!/2-examples"},{"type":"module","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Cldr.Interval.to_string/3` and `Cldr.Time.Interval.to_string/3`.","title":"Bonfire.Common.Localise.Cldr.Time.Interval","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Time.Interval.do_to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#do_to_string/3"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Time.Interval.do_to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#do_to_string!/3"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two times.","title":"Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.time` type.\n\n* `to` is any map that conforms to the\n  `Calendar.time` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :time]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone time.","title":"Arguments - Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The\n  alternatives are `:time`, `:zone`,\n  and `:flex`. The default is `:time`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3-options"},{"type":"function","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3-returns"},{"type":"function","doc":"* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configured locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  time is formatted instead of an interval.","title":"Notes - Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :short\n    {:ok, \"10 – 10 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :medium\n    {:ok, \"10:00 – 10:03 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :long\n    {:ok, \"10:00 – 10:03 AM\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex\n    {:ok, \"10:00 – 10:03 in the morning\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :flex\n    {:ok, \"12:00 – 10:00 in the morning\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :zone\n    {:ok, \"12:00 – 10:00 AM Etc/UTC\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex, locale: \"th\"\n    {:ok, \"10:00 – 10:03 ในตอนเช้า\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string ~T[10:00:00], nil\n    {:ok, \"10:00:00 AM –\"}","title":"Examples - Bonfire.Common.Localise.Cldr.Time.Interval.to_string/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string/3-examples"},{"type":"function","doc":"Returns a string representing the formatted\ninterval formed by two times or raises an\nexception.","title":"Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3"},{"type":"function","doc":"* `from` is any map that conforms to the\n  `Calendar.time` type.\n\n* `to` is any map that conforms to the\n  `Calendar.time` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :time]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone time.","title":"Arguments - Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3-arguments"},{"type":"function","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports different formatting styles. The\n  alternatives are `:time`, `:zone`,\n  and `:flex`. The default is `:time`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0` struct.  The default is `Elixir.Bonfire.Common.Localise.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","title":"Options - Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3-options"},{"type":"function","doc":"* `string` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3-returns"},{"type":"function","doc":"* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configured locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  time is formatted instead of an interval.","title":"Notes - Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :short\n    \"10 – 10 AM\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :medium\n    \"10:00 – 10:03 AM\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :long\n    \"10:00 – 10:03 AM\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex\n    \"10:00 – 10:03 in the morning\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :flex\n    \"12:00 – 10:00 in the morning\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :zone\n    \"12:00 – 10:00 AM Etc/UTC\"\n\n    iex> Bonfire.Common.Localise.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex, locale: \"th\"\n    \"10:00 – 10:03 ในตอนเช้า\"","title":"Examples - Bonfire.Common.Localise.Cldr.Time.Interval.to_string!/3","ref":"Bonfire.Common.Localise.Cldr.Time.Interval.html#to_string!/3-examples"},{"type":"module","doc":"Supports the CLDR Units definitions which provide for the localization of many\nunit types.","title":"Bonfire.Common.Localise.Cldr.Unit","ref":"Bonfire.Common.Localise.Cldr.Unit.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.add/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#add/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.add!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#add!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.compatible?/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#compatible?/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.convert/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#convert/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.convert!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#convert!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.decompose/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#decompose/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.default_gender/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#default_gender/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.default_style/0","ref":"Bonfire.Common.Localise.Cldr.Unit.html#default_style/0"},{"type":"function","doc":"Returns the localized display name\nfor a unit.\n\nThe returned text is generally suitable\nfor including in UI elements such as\nselection boxes.","title":"Bonfire.Common.Localise.Cldr.Unit.display_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#display_name/2"},{"type":"function","doc":"* `unit` is any `t:Cldr.Unit` or any\n  unit name returned by `Cldr.Unit.known_units/0`.\n\n* `options` is a keyword list of options.","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.display_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#display_name/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`.\n\n* `:style` is one of those returned by `Cldr.Unit.available_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`.","title":"Options - Bonfire.Common.Localise.Cldr.Unit.display_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#display_name/2-options"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.display_name :liter\n    \"liters\"\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.display_name :liter, locale: \"fr\"\n    \"litres\"\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.display_name :liter, locale: \"fr\", style: :short\n    \"l\"","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.display_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#display_name/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.div/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#div/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.div!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#div!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.grammatical_features/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#grammatical_features/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.grammatical_gender/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#grammatical_gender/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.known_styles/0","ref":"Bonfire.Common.Localise.Cldr.Unit.html#known_styles/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.known_unit_categories/0","ref":"Bonfire.Common.Localise.Cldr.Unit.html#known_unit_categories/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.known_units/0","ref":"Bonfire.Common.Localise.Cldr.Unit.html#known_units/0"},{"type":"function","doc":"Localizes a unit according to the current\nprocesses locale and backend.\n\nThe current process's locale is set with\n`Cldr.put_locale/1`.\n\nSee `Cldr.Unit.localize/3` for further\ndetails.","title":"Bonfire.Common.Localise.Cldr.Unit.localize/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#localize/1"},{"type":"function","doc":"Localizes a unit according to a territory\n\nA territory can be derived from a `t:Cldr.Locale.locale_name`\nor `t:Cldr.LangaugeTag`.\n\nUse this function if you have a unit which\nshould be presented in a user interface using\nunits relevant to the audience. For example, a\nunit `#Cldr.Unit100, :meter>` might be better\npresented to a US audience as `#Cldr.Unit<328, :foot>`.","title":"Bonfire.Common.Localise.Cldr.Unit.localize/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#localize/2"},{"type":"function","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.localize/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#localize/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `backend.get_locale/0`\n\n* `:territory` is any valid territory code returned by\n  `Cldr.known_territories/0`. The default is the territory defined\n  as part of the `:locale`. The option `:territory` has a precedence\n  over the territory in a locale.\n\n* `:usage` is the way in which the unit is intended\n  to be used.  The available `usage` varyies according\n  to the unit category.  See `Cldr.Unit.preferred_units/3`.","title":"Options - Bonfire.Common.Localise.Cldr.Unit.localize/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#localize/2-options"},{"type":"function","doc":"iex> unit = Cldr.Unit.new!(1.83, :meter)\n    iex> Bonfire.Common.Localise.Cldr.Unit.localize(unit, usage: :person_height, territory: :US)\n    [\n      Cldr.Unit.new!(:foot, 6, usage: :person_height),\n      Cldr.Unit.new!(:inch, \"0.04724409448818897637795275598\", usage: :person_height)\n    ]","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.localize/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#localize/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system?/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system?/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_for/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_for/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_for/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_for/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_for_territory/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_for_territory/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_for_territory/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_for_territory/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_from_locale/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_from_locale/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_from_locale/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_from_locale/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_system_from_locale/3","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_system_from_locale/3"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.measurement_systems_for_unit/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#measurement_systems_for_unit/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.mult/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#mult/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.mult!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#mult!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.new/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#new/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.new!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#new!/2"},{"type":"function","doc":"Parse a string to create a new unit.\n\nThis function attempts to parse a string\ninto a `number` and `unit type`. If successful\nit attempts to create a new unit using\n`Cldr.Unit.new/3`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","title":"Bonfire.Common.Localise.Cldr.Unit.parse/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse/2"},{"type":"function","doc":"* `unit string` is any string to be parsed and if\n  possible used to create a new `t:Cldr.Unit`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.parse/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.parse/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse/2-options"},{"type":"function","doc":"* `{:ok, unit}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.parse/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.parse \"1kg\"\n    Cldr.Unit.new(1, :kilogram)\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse \"1 tages\", locale: \"de\"\n    Cldr.Unit.new(1, :day)\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse \"1 tag\", locale: \"de\"\n    Cldr.Unit.new(1, :day)\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse(\"42 millispangels\")\n    {:error, {Cldr.UnknownUnitError, \"Unknown unit was detected at \\\"spangels\\\"\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.parse/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse/2-examples"},{"type":"function","doc":"Parse a string to create a new unit or\nraises an exception.\n\nThis function attempts to parse a string\ninto a `number` and `unit type`. If successful\nit attempts to create a new unit using\n`Cldr.Unit.new/3`.\n\nThe parsed `unit type` is un-aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","title":"Bonfire.Common.Localise.Cldr.Unit.parse!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse!/2"},{"type":"function","doc":"* `unit string` is any string to be parsed and if\n  possible used to create a new `t:Cldr.Unit`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.parse!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse!/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.parse!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse!/2-options"},{"type":"function","doc":"* `unit` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.parse!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.parse! \"1kg\"\n    Cldr.Unit.new!(1, :kilogram)\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse! \"1 tages\", locale: \"de\"\n    Cldr.Unit.new!(1, :day)\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse!(\"42 candela per lux\")\n    Cldr.Unit.new!(42, \"candela per lux\")\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse!(\"42 millispangels\")\n    ** (Cldr.UnknownUnitError) Unknown unit was detected at \"spangels\"","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.parse!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse!/2-examples"},{"type":"function","doc":"Parse a string to find a matching unit-atom.\n\nThis function attempts to parse a string and\nextract the `unit type`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","title":"Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2"},{"type":"function","doc":"* `unit_name_string` is any string to be parsed and converted into a `unit type`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`\n\n* `:backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module. The default is `Cldr.default_backend!/0`.\n\n* `:only` is a unit category or unit, or a list of unit categories and units.\n  The parsed unit must match one of the categories or units in order to\n  be valid. This is helpful when disambiguating parsed units. For example,\n  parsing \"w\" could be either `:watt` or `:weeks`. Specifying `only: :duration`\n  would return `:weeks`. Specifying `only: :power` would return `:watt`\n\n* `:except` is the oppostte of `:only`. The parsed unit must *not*\n  match the specified unit or category, or unit categories and units.","title":"Options - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2-options"},{"type":"function","doc":"* `{:ok, unit_name}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2-returns"},{"type":"function","doc":"* When both `:only` and `:except` options are passed, both\n  conditions must be true in order to return a parsed result.\n\n* Only units returned by `Cldr.Unit.known_units/0` can be\n  used in the `:only` and `:except` filters.","title":"Notes - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"kg\"\n    {:ok, :kilogram}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"w\"\n    {:ok, :watt}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"w\", only: :duration\n    {:ok, :week}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"m\", only: [:year, :month, :day]\n    {:ok, :month}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"tages\", locale: \"de\"\n    {:ok, :day}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name \"tag\", locale: \"de\"\n    {:ok, :day}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name(\"millispangels\")\n    {:error, {Cldr.UnknownUnitError, \"Unknown unit was detected at \\\"spangels\\\"\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name/2-examples"},{"type":"function","doc":"Parse a string to find a matching unit-atom.\n\nThis function attempts to parse a string and\nextract the `unit type`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","title":"Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2"},{"type":"function","doc":"* `unit_name_string` is any string to be parsed and converted into a `unit type`\n\n* `options` is a keyword list of options","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2-arguments"},{"type":"function","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`\n\n* `:backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module. The default is `Cldr.default_backend!/0`.\n\n* `:only` is a unit category or unit, or a list of unit categories and units.\n  The parsed unit must match one of the categories or units in order to\n  be valid. This is helpful when disambiguating parsed units. For example,\n  parsing \"w\" could be either `watts` or `:week`. Specifying `only: :duration`\n  would return `:week`. Specifying `only: :power` would return `:watts`\n\n* `:except` is the oppostte of `:only`. The parsed unit must *not*\n  match the specified unit or category, or unit categories and units.","title":"Options - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2-options"},{"type":"function","doc":"* `unit_name` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2-returns"},{"type":"function","doc":"* When both `:only` and `:except` options are passed, both\n  conditions must be true in order to return a parsed result.\n\n* Only units returned by `Cldr.Unit.known_units/0` can be\n  used in the `:only` and `:except` filters.","title":"Notes - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2-notes"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"kg\"\n    :kilogram\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"w\"\n    :watt\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"w\", only: :duration\n    :week\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"m\", only: [:year, :month, :day]\n    :month\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"tages\", locale: \"de\"\n    :day\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name! \"tag\", locale: \"de\"\n    :day\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!(\"millispangels\")\n    ** (Cldr.UnknownUnitError) Unknown unit was detected at \"spangels\"","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.parse_unit_name!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#parse_unit_name!/2-examples"},{"type":"function","doc":"Returns a list of the preferred units for a given\nunit, locale, use case and scope.\n\nThe units used to represent length, volume and so on\ndepend on a given territory, measurement system and usage.\n\nFor example, in the US, people height is most commonly\nreferred to in `inches`, or informally as `feet and inches`.\nIn most of the rest of the world it is `centimeters`.","title":"Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2"},{"type":"function","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`.\n\n* `backend` is any Cldr backend module. That is, any module\n  that includes `use Cldr`. The default is `Cldr.default_backend/0`\n\n* `options` is a keyword list of options or a\n  `Cldr.Unit.Conversion.Options` struct. The default\n  is `[]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2-arguments"},{"type":"function","doc":"* `:usage` is the unit usage. for example `;person` for a unit\n  type of length. The available usage for a given unit category can\n  be seen with `Cldr.Unit.unit_category_usage/0`. The default is `nil`\n\n* `:scope` is either `:small` or `nil`. In some usage, the units\n  used are different when the unit size is small. It is up to the\n  developer to determine when `scope: :small` is appropriate.\n\n* `:alt` is either `:informal` or `nil`. Like `:scope`, the units\n  in use depend on whether they are being used in a formal or informal\n  context.\n\n* `:locale` is any locale returned by `Cldr.validate_locale/2`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2-options"},{"type":"function","doc":"* `{:ok, unit_list, formatting_options}` or\n\n* `{:error, {exception, reason}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2-returns"},{"type":"function","doc":"`formatting_options` is a keyword list of options\nthat can be passed to `Cldr.Unit.to_string/3`. Its\nprimary intended usage is for localizing a unit that\ndecomposes into more than one unit (for example when\n2 meters might become 6 feet 6 inches.) In such\ncases, the last unit in the list (in this case the\ninches) is formatted with the `formatting_options`.","title":"Notes - Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2-notes"},{"type":"function","doc":"iex> meter = Cldr.Unit.new!(:meter, 1)\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :person_height\n    {:ok, [:foot, :inch], []}\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :person\n    {:ok, [:inch], []}\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units meter, locale: \"en-AU\", usage: :person\n    {:ok, [:centimeter], []}\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :road\n    {:ok, [:foot], [round_nearest: 1]}\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units meter, locale: \"en-AU\", usage: :road\n    {:ok, [:meter], [round_nearest: 1]}","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.preferred_units/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units/2-examples"},{"type":"function","doc":"Returns a list of the preferred units for a given\nunit, locale, use case and scope.\n\nThe units used to represent length, volume and so on\ndepend on a given territory, measurement system and usage.\n\nFor example, in the US, people height is most commonly\nreferred to in `inches`, or informally as `feet and inches`.\nIn most of the rest of the world it is `centimeters`.","title":"Bonfire.Common.Localise.Cldr.Unit.preferred_units!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units!/2"},{"type":"function","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`.\n\n* `backend` is any Cldr backend module. That is, any module\n  that includes `use Cldr`. The default is `Cldr.default_backend/0`\n\n* `options` is a keyword list of options or a\n  `Cldr.Unit.Conversion.Options` struct. The default\n  is `[]`.","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.preferred_units!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units!/2-arguments"},{"type":"function","doc":"* `:usage` is the unit usage. for example `;person` for a unit\n  type of length. The available usage for a given unit category can\n  be seen with `Cldr.Unit.unit_category_usage/0`. The default is `nil`\n\n* `:scope` is either `:small` or `nil`. In some usage, the units\n  used are different when the unit size is small. It is up to the\n  developer to determine when `scope: :small` is appropriate.\n\n* `:alt` is either `:informal` or `nil`. Like `:scope`, the units\n  in use depend on whether they are being used in a formal or informal\n  context.\n\n* `:locale` is any locale returned by `Cldr.validate_locale/2`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.preferred_units!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units!/2-options"},{"type":"function","doc":"* `unit_list` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.preferred_units!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units!/2-returns"},{"type":"function","doc":"iex> meter = Cldr.Unit.new!(:meter, 2)\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units! meter, locale: \"en-US\", usage: :person_height\n    [:foot, :inch]\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units! meter, locale: \"en-AU\", usage: :person\n    [:centimeter]\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units! meter, locale: \"en-US\", usage: :road\n    [:foot]\n    iex> Bonfire.Common.Localise.Cldr.Unit.preferred_units! meter, locale: \"en-AU\", usage: :road\n    [:meter]","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.preferred_units!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#preferred_units!/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.round/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#round/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.round/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#round/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.round/3","ref":"Bonfire.Common.Localise.Cldr.Unit.html#round/3"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.styles/0","ref":"Bonfire.Common.Localise.Cldr.Unit.html#styles/0"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.sub/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#sub/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.sub!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#sub!/2"},{"type":"function","doc":"Formats a number into an iolist according to a unit definition\nfor a locale.","title":"Bonfire.Common.Localise.Cldr.Unit.to_iolist/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist/2"},{"type":"function","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.to_iolist/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist/2-arguments"},{"type":"function","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Bonfire.Common.Localise.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.to_iolist/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist/2-options"},{"type":"function","doc":"* `{:ok, io_list}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.to_iolist/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.to_iolist Cldr.Unit.new!(:gallon, 123)\n    {:ok, [\"123\", \" gallons\"]}","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.to_iolist/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist/2-examples"},{"type":"function","doc":"Formats a unit using `to_iolist/3` but raises if there is\nan error.","title":"Bonfire.Common.Localise.Cldr.Unit.to_iolist!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist!/2"},{"type":"function","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.to_iolist!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist!/2-arguments"},{"type":"function","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles/0`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`.\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Bonfire.Common.Localise.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.to_iolist!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist!/2-options"},{"type":"function","doc":"* `io_list` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.to_iolist!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.to_iolist! 123, unit: :gallon\n    [\"123\", \" gallons\"]","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.to_iolist!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_iolist!/2-examples"},{"type":"function","doc":"Formats a number into a string according to a unit definition for a locale.","title":"Bonfire.Common.Localise.Cldr.Unit.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string/2"},{"type":"function","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string/2-arguments"},{"type":"function","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Bonfire.Common.Localise.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string/2-options"},{"type":"function","doc":"* `{:ok, formatted_string}` or\n\n* `{:error, {exception, message}}`","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 123)\n    {:ok, \"123 gallons\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1)\n    {:ok, \"1 gallon\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"af\"\n    {:ok, \"1 gelling\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"af-NA\"\n    {:ok, \"1 gelling\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"bs\"\n    {:ok, \"1 galon\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1234), format: :long\n    {:ok, \"1 thousand gallons\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1234), format: :short\n    {:ok, \"1K gallons\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:megahertz, 1234)\n    {:ok, \"1,234 megahertz\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:megahertz, 1234), style: :narrow\n    {:ok, \"1,234Mhz\"}\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string Cldr.Unit.new!(:megabyte, 1234), locale: \"en\", style: :unknown\n    {:error, {Cldr.UnknownFormatError, \"The unit style :unknown is not known.\"}}","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.to_string/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string/2-examples"},{"type":"function","doc":"Formats a list using `to_string/3` but raises if there is\nan error.","title":"Bonfire.Common.Localise.Cldr.Unit.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string!/2"},{"type":"function","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","title":"Arguments - Bonfire.Common.Localise.Cldr.Unit.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string!/2-arguments"},{"type":"function","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Bonfire.Common.Localise.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","title":"Options - Bonfire.Common.Localise.Cldr.Unit.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string!/2-options"},{"type":"function","doc":"* `formatted_string` or\n\n* raises an exception","title":"Returns - Bonfire.Common.Localise.Cldr.Unit.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string!/2-returns"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Cldr.Unit.to_string! 123, unit: :gallon\n    \"123 gallons\"\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string! 1, unit: :gallon\n    \"1 gallon\"\n\n    iex> Bonfire.Common.Localise.Cldr.Unit.to_string! 1, unit: :gallon, locale: \"af\"\n    \"1 gelling\"","title":"Examples - Bonfire.Common.Localise.Cldr.Unit.to_string!/2","ref":"Bonfire.Common.Localise.Cldr.Unit.html#to_string!/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.unit_category/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#unit_category/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.unit_strings_for/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#unit_strings_for/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.validate_style/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#validate_style/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.validate_unit/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#validate_unit/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.value/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#value/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.zero/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#zero/1"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Cldr.Unit.zero?/1","ref":"Bonfire.Common.Localise.Cldr.Unit.html#zero?/1"},{"type":"module","doc":"Default Gettext module\nIt is recommended to use the more convenient macros in `Bonfire.Common.Localise.Gettext.Helpers` instead.","title":"Bonfire.Common.Localise.Gettext","ref":"Bonfire.Common.Localise.Gettext.html"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Gettext.handle_missing_bindings/2","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_bindings/2"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Gettext.handle_missing_plural_translation/7","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_plural_translation/7"},{"type":"function","doc":"","title":"Bonfire.Common.Localise.Gettext.handle_missing_translation/5","ref":"Bonfire.Common.Localise.Gettext.html#handle_missing_translation/5"},{"type":"module","doc":"A module providing Internationalization with a gettext-based API.\n\nBy using [Gettext](https://hexdocs.pm/gettext),\nyour module gains a set of macros for translations, for example:\n\n\n# Simple translation\n\n    iex> l(\"Hello\")\n    \"Hello\"\n    iex> l(\"Hello %{name}\", name: \"Bookchin\")\n    \"Hello Bookchin\"\n    iex> l(\"Hi\", [], \"test context\")\n    \"Hi\"\n\n\n# Plural translation\n\n    iex> lp(\"Hi friend\", \"Hi friends\", 2)\n    \"Hi friends\"\n    iex> lp(\"Hiya %{user_or_users}\", \"Hiyas %{user_or_users}\", 1, [user_or_users: \"Bookchin\"], \"test context\")\n    \"Hiya Bookchin\"\n\nSee the [Gettext Docs](https://hexdocs.pm/gettext) for details.","title":"Bonfire.Common.Localise.Gettext.Helpers","ref":"Bonfire.Common.Localise.Gettext.Helpers.html"},{"type":"macro","doc":"Translates a string with optional bindings, context, and domain.\n\nThis macro provides translation capabilities based on Gettext. It determines the appropriate domain and context for the translation.","title":"Bonfire.Common.Localise.Gettext.Helpers.l/4","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#l/4"},{"type":"macro","doc":"iex> l(\"Hello\")\n    \"Hello\"\n    iex> l(\"Hello %{name}\", name: \"Bookchin\")\n    \"Hello Bookchin\"\n    iex> l(\"Hi\", [], \"test context\")\n    \"Hi\"","title":"Examples - Bonfire.Common.Localise.Gettext.Helpers.l/4","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#l/4-examples"},{"type":"macro","doc":"* `msgid` - The text or message ID to be translated.\n  * `bindings` - (Optional) A list or map of bindings to interpolate in the message.\n  * `context` - (Optional) A context for the translation.\n  * `domain` - (Optional) A domain for the translation.","title":"Parameters - Bonfire.Common.Localise.Gettext.Helpers.l/4","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#l/4-parameters"},{"type":"function","doc":"Dynamically localises a text. This function is useful for localising strings only known at runtime (when you can't use the `l` or `lp` macros).","title":"Bonfire.Common.Localise.Gettext.Helpers.localise_dynamic/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_dynamic/2"},{"type":"function","doc":"iex> localise_dynamic(\"some_message_id\")\n    \"some_message_id\"\n    iex> localise_dynamic(\"some_message_id\", MyApp.MyModule)\n    \"some_message_id\"","title":"Examples - Bonfire.Common.Localise.Gettext.Helpers.localise_dynamic/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_dynamic/2-examples"},{"type":"function","doc":"* `msgid` - The message id to be localized.\n  * `caller_module` - (Optional) The module from which the call originates.","title":"Parameters - Bonfire.Common.Localise.Gettext.Helpers.localise_dynamic/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_dynamic/2-parameters"},{"type":"macro","doc":"Localizes a list of strings at compile time.\n\nThis macro evaluates the list of strings and localizes each string based on the domain derived from the caller module. This is useful if you want to provide a list of strings at compile time that will later be used at runtime by `localise_dynamic/2`.","title":"Bonfire.Common.Localise.Gettext.Helpers.localise_strings/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_strings/2"},{"type":"macro","doc":"iex> localise_strings([\"hello\", \"world\"])\n    [\"hello\", \"world\"]\n    iex> localise_strings([\"hello\", \"world\"], MyApp.MyModule)\n    [\"hello\", \"world\"]","title":"Examples - Bonfire.Common.Localise.Gettext.Helpers.localise_strings/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_strings/2-examples"},{"type":"macro","doc":"* `strings` - A list of strings to be localized.\n  * `caller_module` - (Optional) The module from which the call originates.","title":"Parameters - Bonfire.Common.Localise.Gettext.Helpers.localise_strings/2","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#localise_strings/2-parameters"},{"type":"macro","doc":"Translates a plural text with optional bindings, context, and domain.\n\nThis macro provides plural translation capabilities based on Gettext. It determines the appropriate domain and context for the translation.","title":"Bonfire.Common.Localise.Gettext.Helpers.lp/6","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#lp/6"},{"type":"macro","doc":"iex> lp(\"Hi friend\", \"Hi friends\", 2)\n    \"Hi friends\"\n    iex> lp(\"Hiya %{user_or_users}\", \"Hiyas %{user_or_users}\", 1, [user_or_users: \"Bookchin\"], \"test context\")\n    \"Hiya Bookchin\"","title":"Examples - Bonfire.Common.Localise.Gettext.Helpers.lp/6","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#lp/6-examples"},{"type":"macro","doc":"* `msgid` - The singular message id to be translated.\n  * `msgid_plural` - The plural message id to be translated.\n  * `n` - The number used to determine singular or plural form.\n  * `bindings` - (Optional) A list or map of bindings to interpolate in the message.\n  * `context` - (Optional) A context for the translation.\n  * `domain` - (Optional) A domain for the translation.","title":"Parameters - Bonfire.Common.Localise.Gettext.Helpers.lp/6","ref":"Bonfire.Common.Localise.Gettext.Helpers.html#lp/6-parameters"},{"type":"module","doc":"Defines a plural forms module for Gettext that uses CLDR plural rules\nhttps://cldr.unicode.org/index/cldr-spec/plural-rules","title":"Bonfire.Common.Localise.Gettext.Plural","ref":"Bonfire.Common.Localise.Gettext.Plural.html"},{"type":"function","doc":"Returns the number of plural forms for a given locale.\n\n* `locale` is either a locale name in the list\n  `{:__aliases__, [counter: {Bonfire.Common.Localise.Gettext.Plural, 2}, line: 6, column: 42], [:Bonfire, :Common, :Localise, :Cldr]}.known_locale_names/0` or\n  a `%LanguageTag{}` as returned by `Cldr.Locale.new/2`","title":"Bonfire.Common.Localise.Gettext.Plural.nplurals/1","ref":"Bonfire.Common.Localise.Gettext.Plural.html#nplurals/1"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Gettext.Plural.nplurals(\"pl\")\n    4\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.nplurals(\"en\")\n    2","title":"Examples - Bonfire.Common.Localise.Gettext.Plural.nplurals/1","ref":"Bonfire.Common.Localise.Gettext.Plural.html#nplurals/1-examples"},{"type":"function","doc":"Returns the plural form of a number for a given\nlocale.\n\n* `locale` is either a locale name in the list `{:__aliases__, [counter: {Bonfire.Common.Localise.Gettext.Plural, 2}, line: 6, column: 42], [:Bonfire, :Common, :Localise, :Cldr]}.known_locale_names/0` or\n  a `%LanguageTag{}` as returned by `Cldr.Locale.new/2`","title":"Bonfire.Common.Localise.Gettext.Plural.plural/2","ref":"Bonfire.Common.Localise.Gettext.Plural.html#plural/2"},{"type":"function","doc":"iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"pl\", 1)\n    0\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"pl\", 2)\n    1\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"pl\", 5)\n    2\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"pl\", 112)\n    2\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"en\", 1)\n    0\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"en\", 2)\n    1\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"en\", 112)\n    1\n\n    iex> Bonfire.Common.Localise.Gettext.Plural.plural(\"en_GB\", 112)\n    1","title":"Examples - Bonfire.Common.Localise.Gettext.Plural.plural/2","ref":"Bonfire.Common.Localise.Gettext.Plural.html#plural/2-examples"},{"type":"module","doc":"Helpers for handling images and other media","title":"Bonfire.Common.Media","ref":"Bonfire.Common.Media.html"},{"type":"function","doc":"","title":"Bonfire.Common.Media.avatar_fallback/1","ref":"Bonfire.Common.Media.html#avatar_fallback/1"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns the avatar's URL.","title":"Bonfire.Common.Media.avatar_media/1","ref":"Bonfire.Common.Media.html#avatar_media/1"},{"type":"function","doc":"iex> avatar_media(%{profile: %{icon: \"http://example.com/avatar.png\"}})\n    %Media{...}\n\n    iex> avatar_media(%{icon: \"http://example.com/icon.png\"})\n    %Media{...}\n\n    iex> avatar_media(%{profile: %{icon: %{path: \"http://example.com/path.png\"}}})\n    %Media{...}\n\n    iex> avatar_media(%{nonexistent_key: \"value\"})\n    nil","title":"Examples - Bonfire.Common.Media.avatar_media/1","ref":"Bonfire.Common.Media.html#avatar_media/1-examples"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns the avatar's URL.","title":"Bonfire.Common.Media.avatar_url/1","ref":"Bonfire.Common.Media.html#avatar_url/1"},{"type":"function","doc":"iex> avatar_url(%{profile: %{icon: %{url: \"http://example.com/avatar.png\"}}})\n    \"http://example.com/avatar.png\"\n\n    iex> avatar_url(%{icon: %{path: \"http://example.com/path.png\"}})\n    \"http://example.com/path.png\"\n\n    iex> avatar_url(%{icon_id: \"icon123\"})\n    # Assume Bonfire.Files.IconUploader.remote_url/1 returns \"http://example.com/icon123.png\"\n    \"http://example.com/icon123.png\"\n\n    iex> avatar_url(%{path: \"image.jpg\"})\n    # Assume Bonfire.Files.IconUploader.remote_url/1 returns \"http://example.com/image.jpg\"\n    \"http://example.com/image.jpg\"\n\n    iex> avatar_url(%{icon: \"http://example.com/icon.png\"})\n    \"http://example.com/icon.png\"\n\n    iex> avatar_url(%{image: \"http://example.com/image.png\"})\n    \"http://example.com/image.png\"\n\n    iex> avatar_url(%{id: \"user123\", shared_user: nil})\n    # Assume avatar_fallback/1 returns \"/images/avatar.png\"\n    \"/images/avatar.png\"\n\n    iex> avatar_url(%{id: \"user456\", shared_user: %{id: \"shared123\"}})\n    \"https://picsum.photos/seed/user456/128/128?blur\"\n\n    iex> avatar_url(%{id: \"user789\"})\n    # Assume avatar_fallback/1 returns \"/images/avatar.png\"\n    \"/images/avatar.png\"","title":"Examples - Bonfire.Common.Media.avatar_url/1","ref":"Bonfire.Common.Media.html#avatar_url/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Media.banner_fallback/0","ref":"Bonfire.Common.Media.html#banner_fallback/0"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns the banner's URL.","title":"Bonfire.Common.Media.banner_url/1","ref":"Bonfire.Common.Media.html#banner_url/1"},{"type":"function","doc":"iex> banner_url(%{profile: %{image: %{id: \"banner123\"}}})\n    # Assume Bonfire.Files.BannerUploader.remote_url/1 returns \"http://example.com/banner123.png\"\n    \"http://example.com/banner123.png\"\n\n    iex> banner_url(%{image: %{url: \"http://example.com/banner.png\"}})\n    \"http://example.com/banner.png\"\n\n    iex> banner_url(%{image: %{path: \"http://example.com/banner.png\"}})\n    \"http://example.com/banner.png\"\n\n    iex> banner_url(%{path: \"http://example.com/banner.png\"})\n    \"http://example.com/banner.png\"\n\n    iex> banner_url(%{image_id: \"banner456\"})\n    # Assume Bonfire.Files.BannerUploader.remote_url/1 returns \"http://example.com/banner456.png\"\n    \"http://example.com/banner456.png\"\n\n    iex> banner_url(%{image: \"http://example.com/banner.png\"})\n    \"http://example.com/banner.png\"\n\n    iex> banner_url(%{profile: %{image: %{id: \"banner789\"}}})\n    # Assume Bonfire.Files.BannerUploader.remote_url/1 returns \"http://example.com/banner789.png\"\n    \"http://example.com/banner789.png\"\n\n    iex> banner_url(%{nonexistent_key: \"value\"})\n    # Assume banner_fallback/0 returns \"/images/bonfires.png\"\n    \"/images/bonfires.png\"","title":"Examples - Bonfire.Common.Media.banner_url/1","ref":"Bonfire.Common.Media.html#banner_url/1-examples"},{"type":"function","doc":"Returns a map containing all files and their contents from a tar or compressed tar.gz archive.","title":"Bonfire.Common.Media.extract_tar/2","ref":"Bonfire.Common.Media.html#extract_tar/2"},{"type":"function","doc":"iex> extract_tar(\"path/to/archive.tar.gz\")\n    %{\"file1.txt\" => <<...>> , \"file2.txt\" => <<...>>}\n\n    iex> extract_tar(\"path/to/archive.tar\", [:memory])\n    %{\"file1.txt\" => <<...>> , \"file2.txt\" => <<...>>}\n\n    iex> extract_tar(\"path/to/archive.tar\", [:compressed, :memory])\n    %{\"file1.txt\" => <<...>> , \"file2.txt\" => <<...>>}","title":"Examples - Bonfire.Common.Media.extract_tar/2","ref":"Bonfire.Common.Media.html#extract_tar/2-examples"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns the image's URL.","title":"Bonfire.Common.Media.image_url/1","ref":"Bonfire.Common.Media.html#image_url/1"},{"type":"function","doc":"iex> image_url(\"http://example.com/image.png\")\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{media_type: \"text/plain\"})\n    nil\n\n    iex> image_url(%{profile: %{image: %{url: \"http://example.com/image.png\"}}})\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{image: %{url: \"http://example.com/image.png\"}})\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{icon: %{path: \"http://example.com/image.png\"}})\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{path: \"http://example.com/image.png\"})\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{image_id: \"image123\"})\n    # Assume Bonfire.Files.ImageUploader.remote_url/1 returns \"http://example.com/image123.png\"\n    \"http://example.com/image123.png\"\n\n    iex> image_url(%{image: \"http://example.com/image.png\"})\n    \"http://example.com/image.png\"\n\n    iex> image_url(%{profile: %{image: \"http://example.com/profile_image.png\"}})\n    \"http://example.com/profile_image.png\"\n\n    iex> image_url(%{nonexistent_key: \"value\"})\n    nil","title":"Examples - Bonfire.Common.Media.image_url/1","ref":"Bonfire.Common.Media.html#image_url/1-examples"},{"type":"function","doc":"Determines the dominant color for a given user’s avatar or banner.","title":"Bonfire.Common.Media.maybe_dominant_color/4","ref":"Bonfire.Common.Media.html#maybe_dominant_color/4"},{"type":"function","doc":"iex> maybe_dominant_color(%{profile: %{icon: \"http://example.com/avatar.png\"}})\n    \"#AA4203\" # Example dominant color\n\n    iex> maybe_dominant_color(%{profile: %{icon: \"http://example.com/avatar.png\"}}, nil, \"http://example.com/banner.png\")\n    \"#AA4203\" # Example dominant color\n\n    iex> maybe_dominant_color(%{profile: %{icon: \"http://example.com/avatar.png\"}}, nil, nil, \"/images/bonfires.png\")\n    \"#AA4203\" # Example dominant color\n\n    iex> maybe_dominant_color(%{profile: %{icon: nil}}, \"http://example.com/banner.png\")\n    nil","title":"Examples - Bonfire.Common.Media.maybe_dominant_color/4","ref":"Bonfire.Common.Media.html#maybe_dominant_color/4-examples"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns a URL for the media.","title":"Bonfire.Common.Media.media_url/1","ref":"Bonfire.Common.Media.html#media_url/1"},{"type":"function","doc":"iex> media_url(%{path: \"http://example.com/image.jpg\"})\n    \"http://example.com/image.jpg\"\n\n    iex> media_url(%{path: \"remote.jpg\", metadata: %{\"module\" => \"MyModule\"}})\n    # Assume MyModule.remote_url/1 is defined and returns \"http://example.com/remote.jpg\"\n    \"http://example.com/remote.jpg\"\n\n    iex> media_url(%{media_type: \"image/jpeg\", path: \"image.jpg\"})\n    \"http://image.jpg\"\n\n    iex> media_url(%{media_type: \"text/plain\", path: \"document.txt\"})\n    \"http://document.txt\"\n\n    iex> media_url(%{changes: %{path: \"http://changed.example.com/image.jpg\"}})\n    \"http://changed.example.com/image.jpg\"\n\n    iex> media_url(%{path: \"image.jpg\"})\n    \"http://image.jpg\"\n\n    iex> media_url(%{media: %{path: \"http://nested.example.com/image.jpg\"}})\n    \"http://nested.example.com/image.jpg\"\n\n    iex> media_url(%{nonexistent_key: \"value\"})\n    nil","title":"Examples - Bonfire.Common.Media.media_url/1","ref":"Bonfire.Common.Media.html#media_url/1-examples"},{"type":"function","doc":"Reads specific files from a tar archive and returns their contents.","title":"Bonfire.Common.Media.read_tar_files/3","ref":"Bonfire.Common.Media.html#read_tar_files/3"},{"type":"function","doc":"iex> read_tar_files(\"path/to/archive.tar\", \"file1.txt\")\n    {:ok, \"file1 contents\"}\n\n    iex> read_tar_files(\"path/to/archive.tar\", [\"file1.txt\", \"file2.txt\"])\n    {:ok, [\"file1 contents\", \"file2 contents\"]}\n\n    iex> read_tar_files(\"path/to/nonexistent.tar\", \"file1.txt\")\n    {:error, \"File not found\"}\n\n    iex> read_tar_files(\"path/to/archive.tar\", \"nonexistent_file.txt\")\n    {:error, \"File not found\"}","title":"Examples - Bonfire.Common.Media.read_tar_files/3","ref":"Bonfire.Common.Media.html#read_tar_files/3-examples"},{"type":"function","doc":"Takes a Media map (or an object containing one) and returns the thumbnail's URL.","title":"Bonfire.Common.Media.thumbnail_url/1","ref":"Bonfire.Common.Media.html#thumbnail_url/1"},{"type":"function","doc":"iex> thumbnail_url(%{path: \"thumbnail.jpg\", metadata: %{\"module\" => \"MyModule\"}})\n    # Assume MyModule.remote_url/2 with :thumbnail returns \"http://example.com/thumbnail.jpg\"\n    \"http://example.com/thumbnail.jpg\"\n\n    iex> thumbnail_url(%{media_type: \"image/jpeg\", path: \"thumbnail.jpg\"})\n    \"http://thumbnail.jpg\"\n\n    iex> thumbnail_url(%{media_type: \"video/mp4\", path: \"video.mpeg\"})\n    # Assume Bonfire.Files.VideoUploader.remote_url/2 with :thumbnail returns \"http://video-thumbnail.jpg\"\n    \"http://video-thumbnail.jpg\"\n\n    iex> thumbnail_url(%{path: \"document.pdf\", media_type: \"document\"})\n    # Assume Bonfire.Files.DocumentUploader.remote_url/2 with :thumbnail returns \"http://document-thumbnail.jpg\"\n    \"http://document-thumbnail.jpg\"\n\n    iex> thumbnail_url(%{nonexistent_key: \"value\"})\n    nil","title":"Examples - Bonfire.Common.Media.thumbnail_url/1","ref":"Bonfire.Common.Media.html#thumbnail_url/1-examples"},{"type":"module","doc":"This module implements a GenServer that monitors the memory usage of a process.\nIt periodically checks the memory consumption.","title":"Bonfire.Common.MemoryMonitor","ref":"Bonfire.Common.MemoryMonitor.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.MemoryMonitor.child_spec/1","ref":"Bonfire.Common.MemoryMonitor.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.MemoryMonitor.get_memory_usage/2","ref":"Bonfire.Common.MemoryMonitor.html#get_memory_usage/2"},{"type":"function","doc":"Handles incoming messages to the GenServer.\n  - `:check` - Performs memory usage checks on the monitored process","title":"Bonfire.Common.MemoryMonitor.handle_info/2","ref":"Bonfire.Common.MemoryMonitor.html#handle_info/2"},{"type":"function","doc":"Starts the MemoryMonitor process linked to the caller process with given options.","title":"Bonfire.Common.MemoryMonitor.start_link/2","ref":"Bonfire.Common.MemoryMonitor.html#start_link/2"},{"type":"module","doc":"","title":"Bonfire.Common.Mix.Tasks.Helpers","ref":"Bonfire.Common.Mix.Tasks.Helpers.html"},{"type":"function","doc":"","title":"Bonfire.Common.Mix.Tasks.Helpers.ext_path_for_module/5","ref":"Bonfire.Common.Mix.Tasks.Helpers.html#ext_path_for_module/5"},{"type":"function","doc":"","title":"Bonfire.Common.Mix.Tasks.Helpers.igniter_copy/4","ref":"Bonfire.Common.Mix.Tasks.Helpers.html#igniter_copy/4"},{"type":"function","doc":"","title":"Bonfire.Common.Mix.Tasks.Helpers.igniter_path_for_module/5","ref":"Bonfire.Common.Mix.Tasks.Helpers.html#igniter_path_for_module/5"},{"type":"function","doc":"","title":"Bonfire.Common.Mix.Tasks.Helpers.list_extensions/0","ref":"Bonfire.Common.Mix.Tasks.Helpers.html#list_extensions/0"},{"type":"module","doc":"Helpers for declaring the existence of an extension (i.e., so it gets included in extension settings and nav).","title":"Bonfire.Common.Modularity.DeclareHelpers","ref":"Bonfire.Common.Modularity.DeclareHelpers.html"},{"type":"function","doc":"Gets the OTP app name for a module","title":"Bonfire.Common.Modularity.DeclareHelpers.app/1","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#app/1"},{"type":"macro","doc":"Declares an extension by setting up the module with the given name and options.","title":"Bonfire.Common.Modularity.DeclareHelpers.declare_extension/2","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_extension/2"},{"type":"macro","doc":"iex> defmodule MyExtension do\n    ...>   import Bonfire.Common.Modularity.DeclareHelpers\n    ...>   declare_extension(\"My Extension\", readme: \"MY_README.md\")\n    ...> end","title":"Examples - Bonfire.Common.Modularity.DeclareHelpers.declare_extension/2","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#declare_extension/2-examples"},{"type":"function","doc":"Generates a map representing a link with metadata for the extension with the given name, module, and options.","title":"Bonfire.Common.Modularity.DeclareHelpers.generate_link/3","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#generate_link/3"},{"type":"function","doc":"iex> Bonfire.Common.Modularity.DeclareHelpers.generate_link(:bonfire_common, Bonfire.Common, href: \"/my_extension\")\n    %{\n      name: :bonfire_common,\n      module: Bonfire.Common,\n      app: :bonfire_common,\n      href: \"/my_extension\",\n      type: :link\n    }","title":"Examples - Bonfire.Common.Modularity.DeclareHelpers.generate_link/3","ref":"Bonfire.Common.Modularity.DeclareHelpers.html#generate_link/3-examples"},{"type":"module","doc":"Utility to clone a module under a new name","title":"Bonfire.Common.Module.Override","ref":"Bonfire.Common.Module.Override.html"},{"type":"function","doc":"Clone the existing module under a new name","title":"Bonfire.Common.Module.Override.clone/2","ref":"Bonfire.Common.Module.Override.html#clone/2"},{"type":"function","doc":"","title":"Bonfire.Common.Module.Override.clone_original/2","ref":"Bonfire.Common.Module.Override.html#clone_original/2"},{"type":"function","doc":"","title":"Bonfire.Common.Module.Override.module_name_atom/1","ref":"Bonfire.Common.Module.Override.html#module_name_atom/1"},{"type":"function","doc":"","title":"Bonfire.Common.Module.Override.module_name_string/1","ref":"Bonfire.Common.Module.Override.html#module_name_string/1"},{"type":"function","doc":"","title":"Bonfire.Common.Module.Override.module_original_name_atom/2","ref":"Bonfire.Common.Module.Override.html#module_original_name_atom/2"},{"type":"function","doc":"","title":"Bonfire.Common.Module.Override.module_original_name_str/2","ref":"Bonfire.Common.Module.Override.html#module_original_name_str/2"},{"type":"module","doc":"Helpers for handling `Needle` Pointers","title":"Bonfire.Common.Needles","ref":"Bonfire.Common.Needles.html"},{"type":"function","doc":"Resolves pointers for GraphQL API batch loading.","title":"Bonfire.Common.Needles.dataloader/1","ref":"Bonfire.Common.Needles.html#dataloader/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.dataloader(context)\n    %Dataloader{...}","title":"Examples - Bonfire.Common.Needles.dataloader/1","ref":"Bonfire.Common.Needles.html#dataloader/1-examples"},{"type":"function","doc":"Checks if an object exists based on the given filters.","title":"Bonfire.Common.Needles.exists?/2","ref":"Bonfire.Common.Needles.html#exists?/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.exists?(\"some_id\")\n    true\n\n    iex> Bonfire.Common.Needles.exists?(\"non_existent_id\")\n    false","title":"Examples - Bonfire.Common.Needles.exists?/2","ref":"Bonfire.Common.Needles.html#exists?/2-examples"},{"type":"function","doc":"Filters a single pointer from a query result.","title":"Bonfire.Common.Needles.filter_one/1","ref":"Bonfire.Common.Needles.html#filter_one/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.filter_one(\"http://url\")\n    [canonical_uri: \"http://url\"]","title":"Examples - Bonfire.Common.Needles.filter_one/1","ref":"Bonfire.Common.Needles.html#filter_one/1-examples"},{"type":"function","doc":"Applies filters to a query.","title":"Bonfire.Common.Needles.filters/3","ref":"Bonfire.Common.Needles.html#filters/3"},{"type":"function","doc":"iex> Bonfire.Common.Needles.filters(query, filters)\n    %Ecto.Query{...}","title":"Examples - Bonfire.Common.Needles.filters/3","ref":"Bonfire.Common.Needles.html#filters/3-examples"},{"type":"function","doc":"Follows one or more pointers and returns the schema struct.","title":"Bonfire.Common.Needles.follow!/2","ref":"Bonfire.Common.Needles.html#follow!/2"},{"type":"function","doc":"> Bonfire.Common.Needles.follow!(%Pointer{id: \"some_id\"})\n    %SomeRecord{}\n\n    > Bonfire.Common.Needles.follow!([%Pointer{id: \"some_id\"}])\n    [%SomeRecord{}]","title":"Examples - Bonfire.Common.Needles.follow!/2","ref":"Bonfire.Common.Needles.html#follow!/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.follow_function_error/2","ref":"Bonfire.Common.Needles.html#follow_function_error/2"},{"type":"function","doc":"Forge a pointer from a pointable object.\n\nDoes not hit the database, is safe so long as the provided struct participates in the meta abstraction.","title":"Bonfire.Common.Needles.forge!/1","ref":"Bonfire.Common.Needles.html#forge!/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.forge!(%{__struct__: MySchema, id: \"some_id\"})\n    %Pointer{id: \"some_id\", ...}","title":"Examples - Bonfire.Common.Needles.forge!/1","ref":"Bonfire.Common.Needles.html#forge!/1-examples"},{"type":"function","doc":"Forges a pointer to a participating meta entity\n\nDoes not hit the database, is safe so long as the entry we wish to\nsynthesise a pointer for represents a legitimate entry in the database.","title":"Bonfire.Common.Needles.forge!/2","ref":"Bonfire.Common.Needles.html#forge!/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.forge!(:my_table, \"some_id\")\n    %Pointer{id: \"some_id\", ...}","title":"Examples - Bonfire.Common.Needles.forge!/2","ref":"Bonfire.Common.Needles.html#forge!/2-examples"},{"type":"function","doc":"Retrieves an object by its ID.","title":"Bonfire.Common.Needles.get/2","ref":"Bonfire.Common.Needles.html#get/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.get(\"existing_id\")\n    {:ok, %Pointer{id: \"existing_id\", ...}}\n\n    iex> Bonfire.Common.Needles.get(\"non_existent_id\")\n    {:error, :not_found}","title":"Examples - Bonfire.Common.Needles.get/2","ref":"Bonfire.Common.Needles.html#get/2-examples"},{"type":"function","doc":"Retrieves an object by its ID. Raises `NotFound` if the object cannot be found.","title":"Bonfire.Common.Needles.get!/2","ref":"Bonfire.Common.Needles.html#get!/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.get!(\"existing_id\")\n    %Pointer{id: \"existing_id\", ...}\n\n    iex> Bonfire.Common.Needles.get!(\"non_existent_id\")\n    ** (Needle.NotFound) ...","title":"Examples - Bonfire.Common.Needles.get!/2","ref":"Bonfire.Common.Needles.html#get!/2-examples"},{"type":"function","doc":"Filters an object by its binary ID.","title":"Bonfire.Common.Needles.id_binary/1","ref":"Bonfire.Common.Needles.html#id_binary/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.id_binary(id: \"some_id\")","title":"Examples - Bonfire.Common.Needles.id_binary/1","ref":"Bonfire.Common.Needles.html#id_binary/1-examples"},{"type":"function","doc":"Filters an object by its ID.","title":"Bonfire.Common.Needles.id_filter/2","ref":"Bonfire.Common.Needles.html#id_filter/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.id_filter(query, id: \"some_id\")","title":"Examples - Bonfire.Common.Needles.id_filter/2","ref":"Bonfire.Common.Needles.html#id_filter/2-examples"},{"type":"function","doc":"Retrieves a list of objects based on pointers or IDs.","title":"Bonfire.Common.Needles.list!/2","ref":"Bonfire.Common.Needles.html#list!/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.list!([\"id1\", \"id2\"])\n    [%Pointer{id: \"id1\", ...}, %Pointer{id: \"id2\", ...}]\n\n    iex> Bonfire.Common.Needles.list!([%Pointer{id: \"id1\"}, %Pointer{id: \"id2\"}])\n    [%Pointer{id: \"id1\", ...}, %Pointer{id: \"id2\", ...}]","title":"Examples - Bonfire.Common.Needles.list!/2","ref":"Bonfire.Common.Needles.html#list!/2-examples"},{"type":"function","doc":"Retrieves objects based on type and filters.","title":"Bonfire.Common.Needles.list_by_type!/3","ref":"Bonfire.Common.Needles.html#list_by_type!/3"},{"type":"function","doc":"> Bonfire.Common.Needles.list_by_type!(:my_table, [filter: value])\n    [%Pointer{...}, %Pointer{...}]","title":"Examples - Bonfire.Common.Needles.list_by_type!/3","ref":"Bonfire.Common.Needles.html#list_by_type!/3-examples"},{"type":"function","doc":"Retrieves a list of known IDs","title":"Bonfire.Common.Needles.list_ids/0","ref":"Bonfire.Common.Needles.html#list_ids/0"},{"type":"function","doc":"iex> Bonfire.Common.Needles.list_ids()\n    [\"id1\", \"id2\"]","title":"Examples - Bonfire.Common.Needles.list_ids/0","ref":"Bonfire.Common.Needles.html#list_ids/0-examples"},{"type":"function","doc":"Retrieves many objects based on the provided filters","title":"Bonfire.Common.Needles.many/2","ref":"Bonfire.Common.Needles.html#many/2"},{"type":"function","doc":"> Bonfire.Common.Needles.many([id: \"some_id\"])\n    {:ok, [%Pointer{id: \"some_id\", ...}]}\n\n    > Bonfire.Common.Needles.many([id: \"non_existing_id\"])\n    {:ok, []}","title":"Examples - Bonfire.Common.Needles.many/2","ref":"Bonfire.Common.Needles.html#many/2-examples"},{"type":"function","doc":"Retrieves many objects based on the provided filters\n\n    iex> Bonfire.Common.Needles.many!([id: \"some_id\"])\n    [%Pointer{id: \"some_id\", ...}]","title":"Bonfire.Common.Needles.many!/2","ref":"Bonfire.Common.Needles.html#many!/2"},{"type":"function","doc":"Turns a thing into a pointer if it is not already or returns nil.","title":"Bonfire.Common.Needles.maybe_forge/1","ref":"Bonfire.Common.Needles.html#maybe_forge/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.maybe_forge(%Pointer{id: \"existing_id\"})\n    %Pointer{id: \"existing_id\"}\n\n    iex> Bonfire.Common.Needles.maybe_forge(%{pointer_id: \"existing_id\"})\n    %Pointer{id: \"existing_id\"}\n\n    iex> Bonfire.Common.Needles.maybe_forge(%{id: \"existing_id\"})\n    nil","title":"Examples - Bonfire.Common.Needles.maybe_forge/1","ref":"Bonfire.Common.Needles.html#maybe_forge/1-examples"},{"type":"function","doc":"Turns a thing into a pointer if it is not already. Errors if it cannot be performed.\n\n    iex> Bonfire.Common.Needles.maybe_forge!(%Pointer{id: \"existing_id\"})\n    %Pointer{id: \"existing_id\"}\n\n    iex> Bonfire.Common.Needles.maybe_forge!(%{pointer_id: \"existing_id\"})\n    %Pointer{id: \"existing_id\"}\n\n    iex> Bonfire.Common.Needles.maybe_forge!(%{id: \"non_existing_id\"})\n    ** (RuntimeError) ...","title":"Bonfire.Common.Needles.maybe_forge!/1","ref":"Bonfire.Common.Needles.html#maybe_forge!/1"},{"type":"function","doc":"Resolves associations or fields based on the given parent and context.","title":"Bonfire.Common.Needles.maybe_resolve/4","ref":"Bonfire.Common.Needles.html#maybe_resolve/4"},{"type":"function","doc":"iex> Bonfire.Common.Needles.maybe_resolve(parent, field, args, context)\n    {:ok, resolved_data}","title":"Examples - Bonfire.Common.Needles.maybe_resolve/4","ref":"Bonfire.Common.Needles.html#maybe_resolve/4-examples"},{"type":"function","doc":"Retrieves an object by its ID or pointer.","title":"Bonfire.Common.Needles.one/2","ref":"Bonfire.Common.Needles.html#one/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.get(\"some_id\")\n    {:ok, %Pointer{id: \"some_id\", ...}}\n\n    iex> Bonfire.Common.Needles.get([id: \"some_id\"])\n    {:ok, %Pointer{id: \"existing_id\", ...}}","title":"Examples - Bonfire.Common.Needles.one/2","ref":"Bonfire.Common.Needles.html#one/2-examples"},{"type":"function","doc":"Retrieves a single object based on the provided filters with bang.\n\n    iex> Bonfire.Common.Needles.one!(\"some_id\")\n    %Pointer{id: \"some_id\", ...}\n\n    iex> Bonfire.Common.Needles.one!([id: \"some_id\"])\n    %Pointer{id: \"some_id\", ...}","title":"Bonfire.Common.Needles.one!/2","ref":"Bonfire.Common.Needles.html#one!/2"},{"type":"function","doc":"Preloads associations based on the given preloads option.","title":"Bonfire.Common.Needles.pointer_preloads/2","ref":"Bonfire.Common.Needles.html#pointer_preloads/2"},{"type":"function","doc":"> Bonfire.Common.Needles.pointer_preloads(query, :with_creator)\n    %Ecto.Query{...}\n\n    > Bonfire.Common.Needles.pointer_preloads(query, :tags)\n    %Ecto.Query{...}","title":"Examples - Bonfire.Common.Needles.pointer_preloads/2","ref":"Bonfire.Common.Needles.html#pointer_preloads/2-examples"},{"type":"function","doc":"Prepares a query for pointers.","title":"Bonfire.Common.Needles.pointer_query/2","ref":"Bonfire.Common.Needles.html#pointer_query/2"},{"type":"function","doc":"> Bonfire.Common.Needles.pointer_query(query, opts)\n    %Ecto.Query{...}\n\n    > Bonfire.Common.Needles.pointer_query([id: \"some_id\"], opts)\n    %Ecto.Query{...}","title":"Examples - Bonfire.Common.Needles.pointer_query/2","ref":"Bonfire.Common.Needles.html#pointer_query/2-examples"},{"type":"function","doc":"Follows one or more pointers and adds the pointed records to the `pointed` attrs.\n\n    > Bonfire.Common.Needles.preload!(%Pointer{id: \"some_id\"})\n    %Pointer{id: \"some_id\", pointed: %SomeRecord{}}\n\n    > Bonfire.Common.Needles.preload!([%Pointer{id: \"some_id\"}])\n    [%Pointer{id: \"some_id\", pointed: %SomeRecord{}}]","title":"Bonfire.Common.Needles.preload!/2","ref":"Bonfire.Common.Needles.html#preload!/2"},{"type":"function","doc":"Queries a dataset based on provided filters.","title":"Bonfire.Common.Needles.query/3","ref":"Bonfire.Common.Needles.html#query/3"},{"type":"function","doc":"> Bonfire.Common.Needles.query(filters)\n    %Ecto.Query{...}","title":"Examples - Bonfire.Common.Needles.query/3","ref":"Bonfire.Common.Needles.html#query/3-examples"},{"type":"module","doc":"Queries for `Needle` Pointers","title":"Bonfire.Common.Needles.Pointers.Queries","ref":"Bonfire.Common.Needles.Pointers.Queries.html"},{"type":"function","doc":"Filter the query according to arbitrary criteria","title":"Bonfire.Common.Needles.Pointers.Queries.filter/2","ref":"Bonfire.Common.Needles.Pointers.Queries.html#filter/2"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Pointers.Queries.query/1","ref":"Bonfire.Common.Needles.Pointers.Queries.html#query/1"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Pointers.Queries.query/2","ref":"Bonfire.Common.Needles.Pointers.Queries.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Pointers.Queries.query_incl_deleted/0","ref":"Bonfire.Common.Needles.Pointers.Queries.html#query_incl_deleted/0"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Pointers.Queries.schema_module/0","ref":"Bonfire.Common.Needles.Pointers.Queries.html#schema_module/0"},{"type":"module","doc":"Helpers for preloading `Needle` Pointer associations. See also `Bonfire.Common.Repo.Preload`","title":"Bonfire.Common.Needles.Preload","ref":"Bonfire.Common.Needles.Preload.html"},{"type":"function","doc":"Generates an access function based on a key and default value.","title":"Bonfire.Common.Needles.Preload.access_key/2","ref":"Bonfire.Common.Needles.Preload.html#access_key/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Preload.access_key(:key)","title":"Examples - Bonfire.Common.Needles.Preload.access_key/2","ref":"Bonfire.Common.Needles.Preload.html#access_key/2-examples"},{"type":"function","doc":"Creates a custom access function for nested keys with an optional transformation function.","title":"Bonfire.Common.Needles.Preload.custom_access_key_fun/3","ref":"Bonfire.Common.Needles.Preload.html#custom_access_key_fun/3"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Preload.custom_access_key_fun(:key)\n    #Function<...>","title":"Examples - Bonfire.Common.Needles.Preload.custom_access_key_fun/3","ref":"Bonfire.Common.Needles.Preload.html#custom_access_key_fun/3-examples"},{"type":"function","doc":"Conditionally preloads nested pointers in object(s) based on provided keys and options.\n\nThis function handles various cases including nested keys for preloading. It supports preloading pointers in objects, lists of objects, and nested structures. The function processes lists of keys for deeply nested preloading.","title":"Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_nested_pointers/3"},{"type":"function","doc":"- `object`: The object in which nested pointers may be preloaded. This can be a map, list, or other data structures.\n  - `keys`: A list of nested keys for preloading pointers. The keys can be deeply nested to access and preload pointers at various levels (like in `proload` as opposed to `maybe_preload`)\n  - `opts`: Options for preloading, which may include configuration for how pointers are fetched and handled.","title":"Parameters - Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_nested_pointers/3-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers(%{key: %{nested_key: %Ecto.AssociationNotLoaded{}}}, [key: [:nested_key]], [])\n    %{key: %{nested_key: %LoadedObject{}}}\n\n    iex> Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers(%{edges: []}, [:key], [])\n    %{edges: []}\n\n    iex> Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers([%{key: %Ecto.AssociationNotLoaded{}}], [:key], [])\n    [%{key: %LoadedObject{}}]","title":"Examples - Bonfire.Common.Needles.Preload.maybe_preload_nested_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_nested_pointers/3-examples"},{"type":"function","doc":"Preloads a single pointer if the provided value is a `Needle.Pointer`.","title":"Bonfire.Common.Needles.Preload.maybe_preload_pointer/2","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_pointer/2"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Preload.maybe_preload_pointer(%Needle.Pointer{...}, [])\n    %LoadedObject{}\n\n    iex> Bonfire.Common.Needles.Preload.maybe_preload_pointer(\"not_a_pointer\", [])\n    \"not_a_pointer\"","title":"Examples - Bonfire.Common.Needles.Preload.maybe_preload_pointer/2","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_pointer/2-examples"},{"type":"function","doc":"Conditionally preloads pointers in an object based on provided keys and options.\n\nThis function handles various cases including tuples with `{:ok, obj}`, maps with an `:edges` key, lists of objects, and individual objects. It supports both single and nested keys for preloading.","title":"Bonfire.Common.Needles.Preload.maybe_preload_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_pointers/3"},{"type":"function","doc":"- `object`: The object(s) in which pointers may be preloaded. This can be a map, list, tuple, or other data structures.\n  - `keys`: A list of keys or a single key for preloading pointers. Nested keys can be specified for deeper levels of preloading.\n  - `opts`: Options for preloading, which may include configuration for how pointers are fetched and handled.","title":"Parameters - Bonfire.Common.Needles.Preload.maybe_preload_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_pointers/3-parameters"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Preload.maybe_preload_pointers(%{edges: [...]}, [:key], [])\n    %{edges: [...]}\n\n    iex> Bonfire.Common.Needles.Preload.maybe_preload_pointers(%{key: %Ecto.AssociationNotLoaded{}}, [:key], [])\n    %{key: %LoadedObject{}}\n\n    iex> Bonfire.Common.Needles.Preload.maybe_preload_pointers(%{key: %{nested_key: %Ecto.AssociationNotLoaded{}}}, [:key, :nested_key], [])\n    %{key: %{nested_key: %LoadedObject{}}}","title":"Examples - Bonfire.Common.Needles.Preload.maybe_preload_pointers/3","ref":"Bonfire.Common.Needles.Preload.html#maybe_preload_pointers/3-examples"},{"type":"module","doc":"Helpers for querying `Needle` types/tables","title":"Bonfire.Common.Needles.Tables","ref":"Bonfire.Common.Needles.Tables.html"},{"type":"function","doc":"Checks if a schema represents a mixin by checking if it's listed in the parent schema's mixin associations.","title":"Bonfire.Common.Needles.Tables.assoc_mixin_of?/2","ref":"Bonfire.Common.Needles.Tables.html#assoc_mixin_of?/2"},{"type":"function","doc":"iex> assoc_mixin_of?(:character, Bonfire.Data.Identity.User)\n    true\n\n    iex> assoc_mixin_of?(:non_existing_assoc_name, Bonfire.Data.Identity.User)\n    false","title":"Examples - Bonfire.Common.Needles.Tables.assoc_mixin_of?/2","ref":"Bonfire.Common.Needles.Tables.html#assoc_mixin_of?/2-examples"},{"type":"function","doc":"Lists IDs of all Pointable Tables.","title":"Bonfire.Common.Needles.Tables.list_ids/0","ref":"Bonfire.Common.Needles.Tables.html#list_ids/0"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.list_ids()\n    [\"id1\", \"id2\"]","title":"Examples - Bonfire.Common.Needles.Tables.list_ids/0","ref":"Bonfire.Common.Needles.Tables.html#list_ids/0-examples"},{"type":"function","doc":"Lists schemas of all Pointable Tables.","title":"Bonfire.Common.Needles.Tables.list_schemas/0","ref":"Bonfire.Common.Needles.Tables.html#list_schemas/0"},{"type":"function","doc":"iex> schemas = Bonfire.Common.Needles.Tables.list_schemas()\n    iex> true = Enum.member?(schemas, Needle.Table)","title":"Examples - Bonfire.Common.Needles.Tables.list_schemas/0","ref":"Bonfire.Common.Needles.Tables.html#list_schemas/0-examples"},{"type":"function","doc":"Lists all Pointable Tables.","title":"Bonfire.Common.Needles.Tables.list_tables/1","ref":"Bonfire.Common.Needles.Tables.html#list_tables/1"},{"type":"function","doc":"iex> tables = Bonfire.Common.Needles.Tables.list_tables()\n\n    iex> tables = Bonfire.Common.Needles.Tables.list_tables(:db)","title":"Examples - Bonfire.Common.Needles.Tables.list_tables/1","ref":"Bonfire.Common.Needles.Tables.html#list_tables/1-examples"},{"type":"function","doc":"Lists and debugs all Pointable Tables.","title":"Bonfire.Common.Needles.Tables.list_tables_debug/0","ref":"Bonfire.Common.Needles.Tables.html#list_tables_debug/0"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.list_tables_debug()\n    [{:ok, \"table1\"}, {:error, \"Code and DB have differing IDs for the same table\", \"table2\", \"id2a\", \"id2b\"}, {:error, \"Table present in DB but not in code\", \"table3\"}]","title":"Examples - Bonfire.Common.Needles.Tables.list_tables_debug/0","ref":"Bonfire.Common.Needles.Tables.html#list_tables_debug/0-examples"},{"type":"function","doc":"Retrieves details of multiple tables based on filters.","title":"Bonfire.Common.Needles.Tables.many/1","ref":"Bonfire.Common.Needles.Tables.html#many/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.many(%{field: \"value\"})\n    {:ok, [%Table{}]}","title":"Examples - Bonfire.Common.Needles.Tables.many/1","ref":"Bonfire.Common.Needles.Tables.html#many/1-examples"},{"type":"function","doc":"Returns the module name of an association if it represents a mixin by checking if it's listed in the parent schema's mixin associations.","title":"Bonfire.Common.Needles.Tables.maybe_assoc_mixin_module/2","ref":"Bonfire.Common.Needles.Tables.html#maybe_assoc_mixin_module/2"},{"type":"function","doc":"iex> maybe_assoc_mixin_module(:character, Bonfire.Data.Identity.User)\n    Bonfire.Data.Identity.Character\n\n    iex> maybe_assoc_mixin_module(:non_existing_assoc_name, Bonfire.Data.Identity.User)\n    nil","title":"Examples - Bonfire.Common.Needles.Tables.maybe_assoc_mixin_module/2","ref":"Bonfire.Common.Needles.Tables.html#maybe_assoc_mixin_module/2-examples"},{"type":"function","doc":"Returns the module name of an association","title":"Bonfire.Common.Needles.Tables.maybe_assoc_module/2","ref":"Bonfire.Common.Needles.Tables.html#maybe_assoc_module/2"},{"type":"function","doc":"iex> maybe_assoc_module(:character, Bonfire.Data.Identity.User)\n    Bonfire.Data.Identity.Character\n\n    iex> maybe_assoc_module(:non_existing_assoc_name, Bonfire.Data.Identity.User)\n    nil","title":"Examples - Bonfire.Common.Needles.Tables.maybe_assoc_module/2","ref":"Bonfire.Common.Needles.Tables.html#maybe_assoc_module/2-examples"},{"type":"function","doc":"Checks if a schema represents a mixin by checking if it's listed in the parent schema's mixin associations.","title":"Bonfire.Common.Needles.Tables.module_mixin_of?/2","ref":"Bonfire.Common.Needles.Tables.html#module_mixin_of?/2"},{"type":"function","doc":"iex> module_mixin_of?(Bonfire.Data.Identity.Character, Bonfire.Data.Identity.User)\n    true\n\n    iex> module_mixin_of?(Needle.Table, Bonfire.Data.Identity.User)\n    false","title":"Examples - Bonfire.Common.Needles.Tables.module_mixin_of?/2","ref":"Bonfire.Common.Needles.Tables.html#module_mixin_of?/2-examples"},{"type":"function","doc":"Retrieves a single record by ID or filters.","title":"Bonfire.Common.Needles.Tables.one/1","ref":"Bonfire.Common.Needles.Tables.html#one/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.one(\"valid_ulid\")\n    {:ok, %Table{}}\n\n    > Bonfire.Common.Needles.Tables.one(%{field: \"value\"})\n    %Table{}","title":"Examples - Bonfire.Common.Needles.Tables.one/1","ref":"Bonfire.Common.Needles.Tables.html#one/1-examples"},{"type":"function","doc":"Retrieves a single record by filters, raising an error if not found.","title":"Bonfire.Common.Needles.Tables.one!/1","ref":"Bonfire.Common.Needles.Tables.html#one!/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.one!(%{field: \"value\"})\n    %Table{}","title":"Examples - Bonfire.Common.Needles.Tables.one!/1","ref":"Bonfire.Common.Needles.Tables.html#one!/1-examples"},{"type":"function","doc":"Retrieves schema mixins for a given Ecto struct.","title":"Bonfire.Common.Needles.Tables.schema_mixin_assocs/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixin_assocs/1"},{"type":"function","doc":"iex> schemas = schema_mixin_assocs(Bonfire.Data.Identity.User)\n    iex> true = Enum.member?(schemas, :character)","title":"Examples - Bonfire.Common.Needles.Tables.schema_mixin_assocs/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixin_assocs/1-examples"},{"type":"function","doc":"Retrieves schema mixins for a given Ecto struct.","title":"Bonfire.Common.Needles.Tables.schema_mixin_modules/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixin_modules/1"},{"type":"function","doc":"iex> schemas = schema_mixin_modules(Bonfire.Data.Identity.User)\n    iex> true = Enum.member?(schemas, Bonfire.Data.Identity.Character)","title":"Examples - Bonfire.Common.Needles.Tables.schema_mixin_modules/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixin_modules/1-examples"},{"type":"function","doc":"Retrieves a list of schema mixins that aren't loaded in the given Ecto struct.","title":"Bonfire.Common.Needles.Tables.schema_mixins_not_loaded/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixins_not_loaded/1"},{"type":"function","doc":"> schema_mixins(%Bonfire.Data.Identity.User{})\n    [:account]","title":"Examples - Bonfire.Common.Needles.Tables.schema_mixins_not_loaded/1","ref":"Bonfire.Common.Needles.Tables.html#schema_mixins_not_loaded/1-examples"},{"type":"function","doc":"Retrieves the schema or table name.","title":"Bonfire.Common.Needles.Tables.schema_or_table!/1","ref":"Bonfire.Common.Needles.Tables.html#schema_or_table!/1"},{"type":"function","doc":"iex> Bonfire.Common.Needles.Tables.schema_or_table!(\"5EVSER1S0STENS1B1YHVMAN01D\")\n    Bonfire.Data.Identity.User\n\n    iex> Bonfire.Common.Needles.Tables.schema_or_table!(\"bonfire_data_identity_user\")\n    Bonfire.Data.Identity.User","title":"Examples - Bonfire.Common.Needles.Tables.schema_or_table!/1","ref":"Bonfire.Common.Needles.Tables.html#schema_or_table!/1-examples"},{"type":"function","doc":"Retrieves the Table that a pointer points to.","title":"Bonfire.Common.Needles.Tables.table!/1","ref":"Bonfire.Common.Needles.Tables.html#table!/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.table!(%Pointer{table_id: \"valid_id\"})\n    %Table{}\n\n    > Bonfire.Common.Needles.Tables.table!(\"valid_id\")\n    %Table{}\n\n    > Bonfire.Common.Needles.Tables.table!(\"invalid_id\")\n    # throws error","title":"Examples - Bonfire.Common.Needles.Tables.table!/1","ref":"Bonfire.Common.Needles.Tables.html#table!/1-examples"},{"type":"function","doc":"Retrieves fields of a table given a schema or table name.","title":"Bonfire.Common.Needles.Tables.table_fields/1","ref":"Bonfire.Common.Needles.Tables.html#table_fields/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.table_fields(MySchema)\n    [:field1, :field2]\n\n    > Bonfire.Common.Needles.Tables.table_fields(\"table_name\")\n    [:field1, :field2]","title":"Examples - Bonfire.Common.Needles.Tables.table_fields/1","ref":"Bonfire.Common.Needles.Tables.html#table_fields/1-examples"},{"type":"function","doc":"Retrieves metadata about fields of a table given a schema or table name.","title":"Bonfire.Common.Needles.Tables.table_fields_meta/1","ref":"Bonfire.Common.Needles.Tables.html#table_fields_meta/1"},{"type":"function","doc":"> Bonfire.Common.Needles.Tables.table_fields_meta(MySchema)\n    [%{column_name: \"field1\", data_type: \"type\", column_default: nil, is_nullable: \"NO\"}]\n\n    > Bonfire.Common.Needles.Tables.table_fields_meta(\"table_name\")\n    [%{column_name: \"field1\", data_type: \"type\", column_default: nil, is_nullable: \"NO\"}]","title":"Examples - Bonfire.Common.Needles.Tables.table_fields_meta/1","ref":"Bonfire.Common.Needles.Tables.html#table_fields_meta/1-examples"},{"type":"module","doc":"Queries for `Bonfire.Common.Needles.Tables`","title":"Bonfire.Common.Needles.Tables.Queries","ref":"Bonfire.Common.Needles.Tables.Queries.html"},{"type":"function","doc":"Filter the query according to arbitrary criteria","title":"Bonfire.Common.Needles.Tables.Queries.filter/2","ref":"Bonfire.Common.Needles.Tables.Queries.html#filter/2"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Tables.Queries.query/1","ref":"Bonfire.Common.Needles.Tables.Queries.html#query/1"},{"type":"function","doc":"","title":"Bonfire.Common.Needles.Tables.Queries.query/2","ref":"Bonfire.Common.Needles.Tables.Queries.html#query/2"},{"type":"module","doc":"Helpers to handle functions' `opts` parameter (usually a `Keyword` list)","title":"Bonfire.Common.Opts","ref":"Bonfire.Common.Opts.html"},{"type":"function","doc":"Retrieves the value associated with a key from options (list or map), or returns a fallback if the key is not present or if the value is empty.\n\nThis function looks for the key in the options and returns its value if present. If the key is not found or the value is empty, it returns the provided fallback value.","title":"Bonfire.Common.Opts.maybe_from_opts/3","ref":"Bonfire.Common.Opts.html#maybe_from_opts/3"},{"type":"function","doc":"iex> maybe_from_opts([key: \"value\"], :key, \"default\")\n    \"value\"\n\n    iex> maybe_from_opts([key: nil], :key, \"default\")\n    \"default\"\n\n    iex> maybe_from_opts(%{key: \"value\"}, :key, \"default\")\n    \"value\"\n\n    iex> maybe_from_opts(%{missing_key: \"value\"}, :key, \"default\")\n    \"default\"\n\n    iex> maybe_from_opts([context: %{key: \"value\"}], :key, \"default\")\n    \"value\"\n\n    iex> maybe_from_opts([context: %{key: \"value\"}], :key, \"default\")\n    \"value\"\n\n    iex> maybe_from_opts(%{context: %{key: \"value\"}}, :key, \"default\")\n    \"value\"\n\n    iex> maybe_from_opts(%{context: %{key: \"value\"}}, :key, \"default\")\n    \"value\"","title":"Examples - Bonfire.Common.Opts.maybe_from_opts/3","ref":"Bonfire.Common.Opts.html#maybe_from_opts/3-examples"},{"type":"function","doc":"Converts various types of input (e.g. map, user, socket, tuple) into a standardized keyword list for use as function options.\n\nThis function handles different types of inputs and converts them to keyword lists. The conversion logic includes:\n\n- Extracting assigns from Phoenix socket maps, dropping specific keys.\n- Wrapping user structs into a keyword list with the key `:current_user`.\n- Wrapping other structs into a keyword list with the key `:context`.\n- Converting tuples, maps, and lists into keyword lists or wrapping them as context.","title":"Bonfire.Common.Opts.to_options/1","ref":"Bonfire.Common.Opts.html#to_options/1"},{"type":"function","doc":"iex> to_options(%{assigns: %{user: \"user_data\"}})\n    [user: \"user_data\"]\n\n    iex> to_options(%Bonfire.Data.Identity.User{})\n    [current_user: %Bonfire.Data.Identity.User{}]\n\n    iex> to_options(%{key: \"value\"})\n    [key: \"value\"]\n\n    iex> to_options({:key, \"value\"})\n    [key: \"value\"]\n\n    iex> to_options([{:key, \"value\"}])\n    [{:key, \"value\"}]\n\n    iex> to_options(%{other: \"data\"})\n    [other: \"data\"]\n    \n    iex> to_options(%{\"non_existing_other\"=> \"data\"})\n    [__item_discarded__: true]","title":"Examples - Bonfire.Common.Opts.to_options/1","ref":"Bonfire.Common.Opts.html#to_options/1-examples"},{"type":"module","doc":"Pub/sub helpers for subscribing and broadcasting to topics","title":"Bonfire.Common.PubSub","ref":"Bonfire.Common.PubSub.html"},{"type":"function","doc":"Broadcast some data for realtime updates, for example to a feed or thread","title":"Bonfire.Common.PubSub.broadcast/2","ref":"Bonfire.Common.PubSub.html#broadcast/2"},{"type":"macro","doc":"Broadcast while attaching telemetry info. The receiving module must `use Bonfire.Common.PubSub` to correctly unwrap the Event","title":"Bonfire.Common.PubSub.broadcast_with_telemetry/2","ref":"Bonfire.Common.PubSub.html#broadcast_with_telemetry/2"},{"type":"function","doc":"","title":"Bonfire.Common.PubSub.broadcast_with_telemetry/3","ref":"Bonfire.Common.PubSub.html#broadcast_with_telemetry/3"},{"type":"function","doc":"","title":"Bonfire.Common.PubSub.current_function/1","ref":"Bonfire.Common.PubSub.html#current_function/1"},{"type":"function","doc":"Subscribe to something for realtime updates, like a feed or thread","title":"Bonfire.Common.PubSub.subscribe/2","ref":"Bonfire.Common.PubSub.html#subscribe/2"},{"type":"module","doc":"","title":"Bonfire.Common.PubSub.Event","ref":"Bonfire.Common.PubSub.Event.html"},{"type":"behaviour","doc":"Properly query some data using the appropriate module depending on its schema.\nBack by a global cache of known query_modules to be queried by their schema, or vice versa.","title":"Bonfire.Common.QueryModule","ref":"Bonfire.Common.QueryModule.html"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.app_modules/0","ref":"Bonfire.Common.QueryModule.html#app_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.apply_error/2","ref":"Bonfire.Common.QueryModule.html#apply_error/2"},{"type":"callback","doc":"Points to the related context module","title":"Bonfire.Common.QueryModule.context_module/0","ref":"Bonfire.Common.QueryModule.html#c:context_module/0"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.linked_context_modules/0","ref":"Bonfire.Common.QueryModule.html#linked_context_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.linked_schema_modules/0","ref":"Bonfire.Common.QueryModule.html#linked_schema_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.maybe_query/3","ref":"Bonfire.Common.QueryModule.html#maybe_query/3"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.maybe_query_module/1","ref":"Bonfire.Common.QueryModule.html#maybe_query_module/1"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.modules/0","ref":"Bonfire.Common.QueryModule.html#modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.QueryModule.query_function_error/3","ref":"Bonfire.Common.QueryModule.html#query_function_error/3"},{"type":"callback","doc":"Declares a query module","title":"Bonfire.Common.QueryModule.query_module/0","ref":"Bonfire.Common.QueryModule.html#c:query_module/0"},{"type":"function","doc":"Get a Queryable identified by name or id.","title":"Bonfire.Common.QueryModule.query_module/1","ref":"Bonfire.Common.QueryModule.html#query_module/1"},{"type":"function","doc":"Look up a Queryable by name or id, throw :not_found if not found.","title":"Bonfire.Common.QueryModule.query_module!/1","ref":"Bonfire.Common.QueryModule.html#query_module!/1"},{"type":"function","doc":"Look up many ids at once, throw :not_found if any of them are not found","title":"Bonfire.Common.QueryModule.query_modules/1","ref":"Bonfire.Common.QueryModule.html#query_modules/1"},{"type":"callback","doc":"Points to the related schema module","title":"Bonfire.Common.QueryModule.schema_module/0","ref":"Bonfire.Common.QueryModule.html#c:schema_module/0"},{"type":"module","doc":"Main Ecto Repo.\n\nNote: functions are defined in `Bonfire.Common.RepoTemplate`","title":"Bonfire.Common.Repo","ref":"Bonfire.Common.Repo.html"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.aggregate/3","ref":"Bonfire.Common.Repo.html#aggregate/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.aggregate/4","ref":"Bonfire.Common.Repo.html#aggregate/4"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.all/2","ref":"Bonfire.Common.Repo.html#all/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.checked_out?/0","ref":"Bonfire.Common.Repo.html#checked_out?/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.checkout/2","ref":"Bonfire.Common.Repo.html#checkout/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.child_spec/1","ref":"Bonfire.Common.Repo.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.config/0","ref":"Bonfire.Common.Repo.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.custom_preload_fun/1","ref":"Bonfire.Common.Repo.html#custom_preload_fun/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.default_options/1","ref":"Bonfire.Common.Repo.html#default_options/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.default_repo_opts/0","ref":"Bonfire.Common.Repo.html#default_repo_opts/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.delete/2","ref":"Bonfire.Common.Repo.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.delete!/2","ref":"Bonfire.Common.Repo.html#delete!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.delete_all/2","ref":"Bonfire.Common.Repo.html#delete_all/2"},{"type":"function","doc":"Execute a query to delete all matching records.","title":"Bonfire.Common.Repo.delete_many/1","ref":"Bonfire.Common.Repo.html#delete_many/1"},{"type":"function","doc":"iex> delete_many(from u in User, where: u.id < 100)\n    {:ok, _count}","title":"Examples - Bonfire.Common.Repo.delete_many/1","ref":"Bonfire.Common.Repo.html#delete_many/1-examples"},{"type":"function","doc":"A convenience function for SQL-based repositories that forces all connections in the\npool to disconnect within the given interval.\n\nSee `Ecto.Adapters.SQL.disconnect_all/3` for more information.","title":"Bonfire.Common.Repo.disconnect_all/2","ref":"Bonfire.Common.Repo.html#disconnect_all/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.exists?/2","ref":"Bonfire.Common.Repo.html#exists?/2"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar\ndepending on the adapter to obtain statistics for the given query.\n\nSee `Ecto.Adapters.SQL.explain/4` for more information.","title":"Bonfire.Common.Repo.explain/3","ref":"Bonfire.Common.Repo.html#explain/3"},{"type":"function","doc":"Execute a query for one result where the primary key matches the given id, and return either an {:ok, result} tuple or a {:error, :not_found}.","title":"Bonfire.Common.Repo.fetch/2","ref":"Bonfire.Common.Repo.html#fetch/2"},{"type":"function","doc":"iex> fetch(User, 1)\n    {:ok, %User{}}\n\n    iex> fetch(User, 999)\n    {:error, :not_found}","title":"Examples - Bonfire.Common.Repo.fetch/2","ref":"Bonfire.Common.Repo.html#fetch/2-examples"},{"type":"function","doc":"Execute a query for multiple results given one or multiple IDs.","title":"Bonfire.Common.Repo.fetch_all/2","ref":"Bonfire.Common.Repo.html#fetch_all/2"},{"type":"function","doc":"iex> fetch_all(User, [1, 2, 3])\n    [%User{}, %User{}, %User{}]\n\n    iex> fetch_all(User, 999)\n    []","title":"Examples - Bonfire.Common.Repo.fetch_all/2","ref":"Bonfire.Common.Repo.html#fetch_all/2-examples"},{"type":"function","doc":"Execute a query for one result (using a keyword list to specify the key/value to query with), and return either an {:ok, result} tuple or a {:error, :not_found}.","title":"Bonfire.Common.Repo.fetch_by/2","ref":"Bonfire.Common.Repo.html#fetch_by/2"},{"type":"function","doc":"iex> fetch_by(User, name: \"Alice\")\n    {:ok, %User{}}\n\n    iex> fetch_by(User, name: \"Nonexistent\")\n    {:error, :not_found}","title":"Examples - Bonfire.Common.Repo.fetch_by/2","ref":"Bonfire.Common.Repo.html#fetch_by/2-examples"},{"type":"function","doc":"Like `single/1`, except on failure, adds an error to the changeset.","title":"Bonfire.Common.Repo.find/3","ref":"Bonfire.Common.Repo.html#find/3"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{}\n    iex> find(from u in User, where: u.id == 1, changeset)\n    {:ok, %User{}}\n\n    iex> changeset = %Ecto.Changeset{}\n    iex> find(from u in User, where: u.id == 999, changeset)\n    {:error, %Ecto.Changeset{}}","title":"Examples - Bonfire.Common.Repo.find/3","ref":"Bonfire.Common.Repo.html#find/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.get/3","ref":"Bonfire.Common.Repo.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.get!/3","ref":"Bonfire.Common.Repo.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.get_by/3","ref":"Bonfire.Common.Repo.html#get_by/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.get_by!/3","ref":"Bonfire.Common.Repo.html#get_by!/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.get_dynamic_repo/0","ref":"Bonfire.Common.Repo.html#get_dynamic_repo/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.in_transaction?/0","ref":"Bonfire.Common.Repo.html#in_transaction?/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.insert/2","ref":"Bonfire.Common.Repo.html#insert/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.insert!/2","ref":"Bonfire.Common.Repo.html#insert!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.insert_all/3","ref":"Bonfire.Common.Repo.html#insert_all/3"},{"type":"function","doc":"Insert all or ignore a list of maps into a schema.","title":"Bonfire.Common.Repo.insert_all_or_ignore/2","ref":"Bonfire.Common.Repo.html#insert_all_or_ignore/2"},{"type":"function","doc":"iex> insert_all_or_ignore(MySchema, [%{field: \"value1\"}, %{field: \"value2\"}])\n    {:ok, _result}","title":"Examples - Bonfire.Common.Repo.insert_all_or_ignore/2","ref":"Bonfire.Common.Repo.html#insert_all_or_ignore/2-examples"},{"type":"function","doc":"Insert or ignore a changeset or struct into a schema.","title":"Bonfire.Common.Repo.insert_or_ignore/1","ref":"Bonfire.Common.Repo.html#insert_or_ignore/1"},{"type":"function","doc":"iex> insert_or_ignore(%Ecto.Changeset{})\n    {:ok, _result}\n\n    iex> insert_or_ignore(%MySchema{field: \"value\"})\n    {:ok, _result}","title":"Examples - Bonfire.Common.Repo.insert_or_ignore/1","ref":"Bonfire.Common.Repo.html#insert_or_ignore/1-examples"},{"type":"function","doc":"Insert or ignore a map (or iterate over a list of maps) into a schema.","title":"Bonfire.Common.Repo.insert_or_ignore/2","ref":"Bonfire.Common.Repo.html#insert_or_ignore/2"},{"type":"function","doc":"iex> insert_or_ignore(MySchema, %{field: \"value\"})\n    [{:ok, _result}]\n\n    iex> insert_or_ignore(MySchema, [%{field: \"value1\"}, %{field: \"value2\"}])\n    [{:ok, _result}]","title":"Examples - Bonfire.Common.Repo.insert_or_ignore/2","ref":"Bonfire.Common.Repo.html#insert_or_ignore/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.insert_or_update/2","ref":"Bonfire.Common.Repo.html#insert_or_update/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.insert_or_update!/2","ref":"Bonfire.Common.Repo.html#insert_or_update!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.load/2","ref":"Bonfire.Common.Repo.html#load/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.make_subquery/1","ref":"Bonfire.Common.Repo.html#make_subquery/1"},{"type":"function","doc":"Execute a query for multiple results and return the results.","title":"Bonfire.Common.Repo.many/2","ref":"Bonfire.Common.Repo.html#many/2"},{"type":"function","doc":"iex> many(from u in User)\n    [%User{}, %User{}]\n\n    iex> many(from u in User, return: :query)\n    #Ecto.Query<...>","title":"Examples - Bonfire.Common.Repo.many/2","ref":"Bonfire.Common.Repo.html#many/2-examples"},{"type":"function","doc":"Execute a query for multiple results and return one page of results.\nThis uses the main implementation for pagination, which is cursor-based and powered by the `Paginator` library.","title":"Bonfire.Common.Repo.many_paginated/3","ref":"Bonfire.Common.Repo.html#many_paginated/3"},{"type":"function","doc":"iex> many_paginated(User, [limit: 10])\n    %Paginator.Page{}","title":"Examples - Bonfire.Common.Repo.many_paginated/3","ref":"Bonfire.Common.Repo.html#many_paginated/3-examples"},{"type":"function","doc":"Execute a query for one result and return either a result or a fallback value (`nil` by default).","title":"Bonfire.Common.Repo.maybe_one/2","ref":"Bonfire.Common.Repo.html#maybe_one/2"},{"type":"function","doc":"iex> maybe_one(from u in User, where: u.id == 1)\n    %User{}\n\n    iex> maybe_one(from u in User, where: u.id == 999, \"fallback\")\n    \"fallback\"","title":"Examples - Bonfire.Common.Repo.maybe_one/2","ref":"Bonfire.Common.Repo.html#maybe_one/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.maybe_preload/3","ref":"Bonfire.Common.Repo.html#maybe_preload/3"},{"type":"function","doc":"Add an `ilike` clause to a query if the user query is safe.","title":"Bonfire.Common.Repo.maybe_where_ilike/5","ref":"Bonfire.Common.Repo.html#maybe_where_ilike/5"},{"type":"function","doc":"iex> maybe_where_ilike(Needle.Pointer, :id, \"Alice\")\n    #Ecto.Query<...>\n\n    iex> maybe_where_ilike(Needle.Pointer, :id, \"Al%ice\")\n    Needle.Pointer \n    # ^ unchanged due to unsafe query","title":"Examples - Bonfire.Common.Repo.maybe_where_ilike/5","ref":"Bonfire.Common.Repo.html#maybe_where_ilike/5-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.migrate/0","ref":"Bonfire.Common.Repo.html#migrate/0"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.one/2","ref":"Bonfire.Common.Repo.html#one/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.one!/2","ref":"Bonfire.Common.Repo.html#one!/2"},{"type":"function","doc":"Different implementation for pagination using Scrivener (used by eg. rauversion).","title":"Bonfire.Common.Repo.paginate/2","ref":"Bonfire.Common.Repo.html#paginate/2"},{"type":"function","doc":"iex> paginate(User, page: 1, page_size: 10)\n    %Scrivener.Page{}","title":"Examples - Bonfire.Common.Repo.paginate/2","ref":"Bonfire.Common.Repo.html#paginate/2-examples"},{"type":"function","doc":"Select and return only specific fields (specified as an atom or list of atoms)","title":"Bonfire.Common.Repo.pluck/3","ref":"Bonfire.Common.Repo.html#pluck/3"},{"type":"function","doc":"> pluck(:id)\n    [id1, id2]\n\n    > pluck([:id, :inserted_at])\n    [%{id: id1, inserted_at: _}, %{id: id2, inserted_at: _}]","title":"Examples - Bonfire.Common.Repo.pluck/3","ref":"Bonfire.Common.Repo.html#pluck/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.preload/3","ref":"Bonfire.Common.Repo.html#preload/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.preload_all/2","ref":"Bonfire.Common.Repo.html#preload_all/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.preload_mixins/2","ref":"Bonfire.Common.Repo.html#preload_mixins/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.prepare_query/3","ref":"Bonfire.Common.Repo.html#prepare_query/3"},{"type":"function","doc":"Like `insert/1`, but understands remapping changeset errors to attr\nnames from config (and only config, no overrides at present!)","title":"Bonfire.Common.Repo.put/1","ref":"Bonfire.Common.Repo.html#put/1"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{valid?: false}\n    iex> put(changeset)\n    {:error, %Ecto.Changeset{}}","title":"Examples - Bonfire.Common.Repo.put/1","ref":"Bonfire.Common.Repo.html#put/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.put_dynamic_repo/1","ref":"Bonfire.Common.Repo.html#put_dynamic_repo/1"},{"type":"function","doc":"Like `put/1` but for multiple `changesets`","title":"Bonfire.Common.Repo.put_many/1","ref":"Bonfire.Common.Repo.html#put_many/1"},{"type":"function","doc":"iex> changesets = [%{valid?: true}, %{valid?: false}]\n    iex> put_many(changesets)\n    {:error, [%{valid?: false}]}\n\n    iex> changesets = [%{valid?: true}, %{valid?: true}]\n    iex> put_many(changesets)\n    {:ok, _result}","title":"Examples - Bonfire.Common.Repo.put_many/1","ref":"Bonfire.Common.Repo.html#put_many/1-examples"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query/4` for more information.","title":"Bonfire.Common.Repo.query/3","ref":"Bonfire.Common.Repo.html#query/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query!/4` for more information.","title":"Bonfire.Common.Repo.query!/3","ref":"Bonfire.Common.Repo.html#query!/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many/4` for more information.","title":"Bonfire.Common.Repo.query_many/3","ref":"Bonfire.Common.Repo.html#query_many/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many!/4` for more information.","title":"Bonfire.Common.Repo.query_many!/3","ref":"Bonfire.Common.Repo.html#query_many!/3"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.reject_preload_ids/1","ref":"Bonfire.Common.Repo.html#reject_preload_ids/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.reload/2","ref":"Bonfire.Common.Repo.html#reload/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.reload!/2","ref":"Bonfire.Common.Repo.html#reload!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.rollback/1","ref":"Bonfire.Common.Repo.html#rollback/1"},{"type":"function","doc":"Execute a query for one result and return either an `{:ok, result}` or `{:error, :not_found}` tuple.","title":"Bonfire.Common.Repo.single/1","ref":"Bonfire.Common.Repo.html#single/1"},{"type":"function","doc":"iex> single(from u in User, where: u.id == 1)\n    {:ok, %User{}}\n\n    iex> single(from u in User, where: u.id == 999)\n    {:error, :not_found}","title":"Examples - Bonfire.Common.Repo.single/1","ref":"Bonfire.Common.Repo.html#single/1-examples"},{"type":"function","doc":"Executes raw SQL query.","title":"Bonfire.Common.Repo.sql/3","ref":"Bonfire.Common.Repo.html#sql/3"},{"type":"function","doc":"> YourModule.sql(\"SELECT * FROM pointers\")","title":"Examples - Bonfire.Common.Repo.sql/3","ref":"Bonfire.Common.Repo.html#sql/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.start_link/1","ref":"Bonfire.Common.Repo.html#start_link/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.stop/1","ref":"Bonfire.Common.Repo.html#stop/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.stream/2","ref":"Bonfire.Common.Repo.html#stream/2"},{"type":"function","doc":"A convenience function for SQL-based repositories that translates the given query to SQL.\n\nSee `Ecto.Adapters.SQL.to_sql/3` for more information.","title":"Bonfire.Common.Repo.to_sql/2","ref":"Bonfire.Common.Repo.html#to_sql/2"},{"type":"function","doc":"Can be used to log specific queries (by calling function) in production.","title":"Bonfire.Common.Repo.trace/1","ref":"Bonfire.Common.Repo.html#trace/1"},{"type":"function","doc":"iex> trace(fn -> Repo.all(User) end)\n    [%User{}, %User{}]","title":"Examples - Bonfire.Common.Repo.trace/1","ref":"Bonfire.Common.Repo.html#trace/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.transact_many/1","ref":"Bonfire.Common.Repo.html#transact_many/1"},{"type":"function","doc":"Run a transaction, similar to `Repo.transaction/1`, but it expects an ok or error\ntuple. If an error tuple is returned, the transaction is aborted.","title":"Bonfire.Common.Repo.transact_with/2","ref":"Bonfire.Common.Repo.html#transact_with/2"},{"type":"function","doc":"iex> transact_with(fn -> {:ok, \"success\"} end)\n    \"success\"\n\n    iex> transact_with(fn -> {:error, \"failure\"} end)\n    ** (Ecto.RollbackError) Rolling back the DB transaction, error reason: failure","title":"Examples - Bonfire.Common.Repo.transact_with/2","ref":"Bonfire.Common.Repo.html#transact_with/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.transaction/2","ref":"Bonfire.Common.Repo.html#transaction/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.update/2","ref":"Bonfire.Common.Repo.html#update/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.update!/2","ref":"Bonfire.Common.Repo.html#update!/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.update_all/3","ref":"Bonfire.Common.Repo.html#update_all/3"},{"type":"function","doc":"Inserts or updates data in the database with upsert semantics.\n\n* `cs` - The changeset or schema to insert or update.\n* `keys_or_attrs_to_update` - A list of keys or a map of attributes to update.\n* `conflict_target` - The column(s) or constraint to check for conflicts, defaults to `[:id]`.","title":"Bonfire.Common.Repo.upsert/3","ref":"Bonfire.Common.Repo.html#upsert/3"},{"type":"function","doc":"iex> upsert(%Ecto.Changeset{}, [:field1, :field2])\n    {:ok, _result}\n\n    iex> upsert(%Ecto.Changeset{}, %{field1: \"value\"})\n    {:ok, _result}","title":"Examples - Bonfire.Common.Repo.upsert/3","ref":"Bonfire.Common.Repo.html#upsert/3-examples"},{"type":"function","doc":"Insert or update all entries with upsert semantics.\n\n* `schema` - The schema or table name to insert or update.\n* `data` - A list of maps containing the data to insert or update.\n* `conflict_target` - The column(s) or constraint to check for conflicts, defaults to `[:id]`.","title":"Bonfire.Common.Repo.upsert_all/3","ref":"Bonfire.Common.Repo.html#upsert_all/3"},{"type":"function","doc":"iex> upsert_all(User, [%{id: 1, name: \"Alice\"}, %{id: 2, name: \"Bob\"}])\n    {:ok, _result}\n\n    iex> upsert_all(User, [%{id: 1, name: \"Alice Updated\"}], [:id])\n    {:ok, _result}","title":"Examples - Bonfire.Common.Repo.upsert_all/3","ref":"Bonfire.Common.Repo.html#upsert_all/3-examples"},{"type":"module","doc":"Helpers for deleting Ecto data","title":"Bonfire.Common.Repo.Delete","ref":"Bonfire.Common.Repo.Delete.html"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Delete.deletion_result/1","ref":"Bonfire.Common.Repo.Delete.html#deletion_result/1"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Delete.deletion_result!/1","ref":"Bonfire.Common.Repo.Delete.html#deletion_result!/1"},{"type":"function","doc":"Actually deletes an entry from the database.","title":"Bonfire.Common.Repo.Delete.hard_delete/1","ref":"Bonfire.Common.Repo.Delete.html#hard_delete/1"},{"type":"function","doc":"iex> hard_delete(some_entry)\n    {:ok, some_entry}\n\n    iex> hard_delete(non_existent_entry)\n    {:error, :deletion_error}","title":"Examples - Bonfire.Common.Repo.Delete.hard_delete/1","ref":"Bonfire.Common.Repo.Delete.html#hard_delete/1-examples"},{"type":"function","doc":"Actually deletes an entry from the database, or throws an error.","title":"Bonfire.Common.Repo.Delete.hard_delete!/1","ref":"Bonfire.Common.Repo.Delete.html#hard_delete!/1"},{"type":"function","doc":"iex> hard_delete!(some_entry)\n    some_entry\n\n    iex> hard_delete!(non_existent_entry)\n    ** (RuntimeError) :deletion_error","title":"Examples - Bonfire.Common.Repo.Delete.hard_delete!/1","ref":"Bonfire.Common.Repo.Delete.html#hard_delete!/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Delete.schema/1","ref":"Bonfire.Common.Repo.Delete.html#schema/1"},{"type":"function","doc":"Marks an entry as deleted in the database.","title":"Bonfire.Common.Repo.Delete.soft_delete/1","ref":"Bonfire.Common.Repo.Delete.html#soft_delete/1"},{"type":"function","doc":"iex> soft_delete(some_entry)\n    {:ok, some_entry}\n\n    iex> soft_delete(non_existent_entry)\n    {:error, :deletion_error}","title":"Examples - Bonfire.Common.Repo.Delete.soft_delete/1","ref":"Bonfire.Common.Repo.Delete.html#soft_delete/1-examples"},{"type":"function","doc":"Marks an entry as deleted in the database or throws an error.","title":"Bonfire.Common.Repo.Delete.soft_delete!/1","ref":"Bonfire.Common.Repo.Delete.html#soft_delete!/1"},{"type":"function","doc":"iex> soft_delete!(some_entry)\n    some_entry\n\n    iex> soft_delete!(non_existent_entry)\n    ** (RuntimeError) :deletion_error","title":"Examples - Bonfire.Common.Repo.Delete.soft_delete!/1","ref":"Bonfire.Common.Repo.Delete.html#soft_delete!/1-examples"},{"type":"function","doc":"Creates a changeset for marking an entity as deleted.","title":"Bonfire.Common.Repo.Delete.soft_delete_changeset/4","ref":"Bonfire.Common.Repo.Delete.html#soft_delete_changeset/4"},{"type":"function","doc":"iex> soft_delete_changeset(some_entry)\n    %Ecto.Changeset{...}\n\n    iex> soft_delete_changeset({SomeSchema, some_entry}, :deleted_at, nil, \"was already deleted\")\n    %Ecto.Changeset{...}","title":"Examples - Bonfire.Common.Repo.Delete.soft_delete_changeset/4","ref":"Bonfire.Common.Repo.Delete.html#soft_delete_changeset/4-examples"},{"type":"function","doc":"Marks an entry as not deleted.","title":"Bonfire.Common.Repo.Delete.undelete/1","ref":"Bonfire.Common.Repo.Delete.html#undelete/1"},{"type":"function","doc":"iex> undelete(some_entry)\n    {:ok, some_entry}\n\n    iex> undelete(non_existent_entry)\n    {:error, :deletion_error}","title":"Examples - Bonfire.Common.Repo.Delete.undelete/1","ref":"Bonfire.Common.Repo.Delete.html#undelete/1-examples"},{"type":"module","doc":"`query_filter` brings convenience and shortens the boilterplate of ecto queries\n\nCommon filters available include:\n\n- `preload` - Preloads fields onto the query results\n- `start_date` - Query for items inserted after this date\n- `end_date` - Query for items inserted before this date\n- `before` - Get items with IDs before this value\n- `after` - Get items with IDs after this value\n- `ids` - Get items with a list of ids\n- `first` - Gets the first n items\n- `last` - Gets the last n items\n- `limit` - Gets the first n items\n- `offset` - Offsets limit by n items\n- `search` - ***Warning:*** This requires schemas using this to have a `&by_search(query, val)` function\n\nYou are also able to filter on any natural field of a model, as well as use\n\n- gte/gt\n- lte/lt\n- like/ilike\n- is_nil/not(is_nil)\n\n```elixir\nquery_filter(User, %{name: %{ilike: \"steve\"}})\nquery_filter(User, %{name: %{ilike: \"steve\"}}, :last_name, :asc)\nquery_filter(User, %{name: %{age: %{gte: 18, lte: 30}}})\nquery_filter(User, %{name: %{is_banned: %{!=: nil}}})\nquery_filter(User, %{name: %{is_banned: %{==: nil}}})\n\nmy_query = query_filter(User, %{name: \"Billy\"})\nquery_filter(my_query, %{last_name: \"Joe\"})\n```","title":"Bonfire.Common.Repo.Filter","ref":"Bonfire.Common.Repo.Filter.html"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Filter.query_filter/4","ref":"Bonfire.Common.Repo.Filter.html#query_filter/4"},{"type":"module","doc":"Helpers for preloading Ecto struct associations","title":"Bonfire.Common.Repo.Preload","ref":"Bonfire.Common.Repo.Preload.html"},{"type":"function","doc":"Conditionally preloads associations based on provided options.","title":"Bonfire.Common.Repo.Preload.maybe_preload/3","ref":"Bonfire.Common.Repo.Preload.html#maybe_preload/3"},{"type":"function","doc":"iex> maybe_preload(some_struct, [:assoc1, :assoc2])\n    %{...}\n\n    iex> maybe_preload({:ok, some_struct}, [:assoc1, :assoc2])\n    {:ok, %{...}}","title":"Examples - Bonfire.Common.Repo.Preload.maybe_preload/3","ref":"Bonfire.Common.Repo.Preload.html#maybe_preload/3-examples"},{"type":"function","doc":"Conditionally preloads associations for nested schemas.","title":"Bonfire.Common.Repo.Preload.maybe_preloads_per_nested_schema/4","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_nested_schema/4"},{"type":"function","doc":"iex> maybe_preloads_per_nested_schema(objects, path, preloads)\n    [%{...}, %{...}]","title":"Examples - Bonfire.Common.Repo.Preload.maybe_preloads_per_nested_schema/4","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_nested_schema/4-examples"},{"type":"function","doc":"Conditionally preloads associations for a schema.","title":"Bonfire.Common.Repo.Preload.maybe_preloads_per_schema/3","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_schema/3"},{"type":"function","doc":"iex> maybe_preloads_per_schema(some_struct, {Schema, [:assoc1, :assoc2]})\n\n    iex> maybe_preloads_per_schema(pointer_struct, {PointerSchema, [:assoc1, :assoc2]})","title":"Examples - Bonfire.Common.Repo.Preload.maybe_preloads_per_schema/3","ref":"Bonfire.Common.Repo.Preload.html#maybe_preloads_per_schema/3-examples"},{"type":"function","doc":"Preloads all associations for a given Ecto struct.","title":"Bonfire.Common.Repo.Preload.preload_all/2","ref":"Bonfire.Common.Repo.Preload.html#preload_all/2"},{"type":"function","doc":"iex> preload_all(some_struct)","title":"Examples - Bonfire.Common.Repo.Preload.preload_all/2","ref":"Bonfire.Common.Repo.Preload.html#preload_all/2-examples"},{"type":"function","doc":"Preloads mixin associations for a given Ecto struct.","title":"Bonfire.Common.Repo.Preload.preload_mixins/2","ref":"Bonfire.Common.Repo.Preload.html#preload_mixins/2"},{"type":"function","doc":"iex> preload_mixins(some_struct)","title":"Examples - Bonfire.Common.Repo.Preload.preload_mixins/2","ref":"Bonfire.Common.Repo.Preload.html#preload_mixins/2-examples"},{"type":"module","doc":"Helper functions for changesets","title":"Bonfire.Common.Repo.Utils","ref":"Bonfire.Common.Repo.Utils.html"},{"type":"function","doc":"Keeps disabled_at in accord with is_disabled","title":"Bonfire.Common.Repo.Utils.change_disabled/1","ref":"Bonfire.Common.Repo.Utils.html#change_disabled/1"},{"type":"function","doc":"Keeps muted_at in accord with is_muted","title":"Bonfire.Common.Repo.Utils.change_muted/1","ref":"Bonfire.Common.Repo.Utils.html#change_muted/1"},{"type":"function","doc":"Keeps published_at in accord with is_public","title":"Bonfire.Common.Repo.Utils.change_public/1","ref":"Bonfire.Common.Repo.Utils.html#change_public/1"},{"type":"function","doc":"If a changeset includes a change to `bool_field`, we ensure that the\n`timestamp` field is updated if required. In the case of true, this\nmeans setting it to now if it is null and in the case of false, this\nmeans setting it to null if it is not null.","title":"Bonfire.Common.Repo.Utils.change_synced_timestamp/3","ref":"Bonfire.Common.Repo.Utils.html#change_synced_timestamp/3"},{"type":"function","doc":"If a changeset includes a change to `bool_field`, we change two\ntimestamps columns (representing activated and deactivated) so that\nonly one is set to a non-null value at a time.","title":"Bonfire.Common.Repo.Utils.change_synced_timestamps/5","ref":"Bonfire.Common.Repo.Utils.html#change_synced_timestamps/5"},{"type":"macro","doc":"","title":"Bonfire.Common.Repo.Utils.match_admin/0","ref":"Bonfire.Common.Repo.Utils.html#match_admin/0"},{"type":"function","doc":"Validates an email for correctness","title":"Bonfire.Common.Repo.Utils.validate_email/2","ref":"Bonfire.Common.Repo.Utils.html#validate_email/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Utils.validate_email_domain/2","ref":"Bonfire.Common.Repo.Utils.html#validate_email_domain/2"},{"type":"function","doc":"","title":"Bonfire.Common.Repo.Utils.validate_exactly_one/3","ref":"Bonfire.Common.Repo.Utils.html#validate_exactly_one/3"},{"type":"function","doc":"Validates that a URL uses HTTP(S) and has a correct format.","title":"Bonfire.Common.Repo.Utils.validate_http_url/2","ref":"Bonfire.Common.Repo.Utils.html#validate_http_url/2"},{"type":"function","doc":"Validates that the entity has not expired","title":"Bonfire.Common.Repo.Utils.validate_not_expired/4","ref":"Bonfire.Common.Repo.Utils.html#validate_not_expired/4"},{"type":"module","doc":"Common functions useful in Ecto Repos","title":"Bonfire.Common.RepoTemplate","ref":"Bonfire.Common.RepoTemplate.html"},{"type":"module","doc":"Config and helpers for this library","title":"Bonfire.Common.RuntimeConfig","ref":"Bonfire.Common.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Common.RuntimeConfig.config/0","ref":"Bonfire.Common.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Common.RuntimeConfig.config_module/0","ref":"Bonfire.Common.RuntimeConfig.html#config_module/0"},{"type":"function","doc":"","title":"Bonfire.Common.RuntimeConfig.skip_test_tags/1","ref":"Bonfire.Common.RuntimeConfig.html#skip_test_tags/1"},{"type":"function","doc":"","title":"Bonfire.Common.RuntimeConfig.test_formatters/0","ref":"Bonfire.Common.RuntimeConfig.html#test_formatters/0"},{"type":"function","doc":"","title":"Bonfire.Common.RuntimeConfig.test_formatters/1","ref":"Bonfire.Common.RuntimeConfig.html#test_formatters/1"},{"type":"behaviour","doc":"Find a context or query module via its schema, backed by a global cache of known schema modules to be queried by their schema, or vice versa (eg. via ContextModule).","title":"Bonfire.Common.SchemaModule","ref":"Bonfire.Common.SchemaModule.html"},{"type":"function","doc":"","title":"Bonfire.Common.SchemaModule.app_modules/0","ref":"Bonfire.Common.SchemaModule.html#app_modules/0"},{"type":"callback","doc":"Points to the related context module","title":"Bonfire.Common.SchemaModule.context_module/0","ref":"Bonfire.Common.SchemaModule.html#c:context_module/0"},{"type":"function","doc":"","title":"Bonfire.Common.SchemaModule.linked_context_modules/0","ref":"Bonfire.Common.SchemaModule.html#linked_context_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.SchemaModule.linked_query_modules/0","ref":"Bonfire.Common.SchemaModule.html#linked_query_modules/0"},{"type":"function","doc":"","title":"Bonfire.Common.SchemaModule.modules/0","ref":"Bonfire.Common.SchemaModule.html#modules/0"},{"type":"callback","doc":"Points to the related query module","title":"Bonfire.Common.SchemaModule.query_module/0","ref":"Bonfire.Common.SchemaModule.html#c:query_module/0"},{"type":"callback","doc":"Declares a schema module","title":"Bonfire.Common.SchemaModule.schema_module/0","ref":"Bonfire.Common.SchemaModule.html#c:schema_module/0"},{"type":"module","doc":"Helpers to get app/extension settings, or to override a config key.\n\nThis module provides functionality for fetching and updating application and extension settings. The process for fetching settings follows a bottom-up system of overrides:\n\n1. **User-specific settings:** \n  If `opts` contains `current_user`, settings are fetched from the user's settings.\n\n2. **Account-specific settings:** \n  If no settings are found for the user and `opts` contains `current_account`, settings are fetched from the account's settings.\n\n3. **Instance-specific settings:** \n   NOTE: Changes to instance settings are stored both in the database and the OTP app config/application environment, and are loaded from the DB into OTP config at app startup by `Bonfire.Common.Settings.LoadInstanceConfig`.\n\n4. **Default OTP config:** \n  If no settings are found at the user or account level, instance settings are loaded from OTP application configuration via `Bonfire.Common.Config`.\n\n5. **Default value:** \n  If no settings are found in the previous steps, the provided `default` value is returned.","title":"Bonfire.Common.Settings","ref":"Bonfire.Common.Settings.html"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.check_scope/2","ref":"Bonfire.Common.Settings.html#check_scope/2"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.delete/2","ref":"Bonfire.Common.Settings.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.do_get_in/2","ref":"Bonfire.Common.Settings.html#do_get_in/2"},{"type":"function","doc":"Retrieves the setting value for a given config key or nested key path.\n\nAs explained above, this function checks settings in the following order:\n1. **User settings** (if `opts` contains `current_user`).\n2. **Account settings** (if `opts` contains `current_account` and no user settings are found).\n3. **Instance settings**.\n4. **OTP application config (includes compile time and runtime config)**.\n5. **Default value** (if no settings are found).","title":"Bonfire.Common.Settings.get/3","ref":"Bonfire.Common.Settings.html#get/3"},{"type":"function","doc":"iex> get(:test_key)\n    \"test_value\"\n\n    iex> get([:non_existing_extension, :sub_key])\n    nil\n\n    iex> get(:non_existing_key, \"default\")\n    \"default\"\n\n    > get(:otp_app)\n    :bonfire\n\n    > get([:bonfire_common, :otp_app])\n    :bonfire\n    \n    iex> get([Bonfire.Common.Localise.Cldr, :gettext])\n    Bonfire.Common.Localise.Gettext\n\n    > get([:bonfire_common, Bonfire.Common.Localise.Cldr, :gettext])\n    Bonfire.Common.Localise.Gettext","title":"Examples - Bonfire.Common.Settings.get/3","ref":"Bonfire.Common.Settings.html#get/3-examples"},{"type":"function","doc":"* `:otp_app` - Optionally specifies the OTP application for which to fetch settings. If none is specified, it will look at the (first) key and check if it references a known OTP application (i.e. an extension) or a module, in which case it will fetch settings from that application. Otherwise it will look in the configured top-level OTP app (see `Config.top_level_otp_app/0`). \n  * `:scope` - Optionally defines the scope for settings retrieval (e.g., `:user`, `:account`, or `:instance`).","title":"Options - Bonfire.Common.Settings.get/3","ref":"Bonfire.Common.Settings.html#get/3-options"},{"type":"function","doc":"Retrieves the setting value for a given config key like in `get/3`, but raises an exception if the key is not found, ensuring that the setting must be present.","title":"Bonfire.Common.Settings.get!/2","ref":"Bonfire.Common.Settings.html#get!/2"},{"type":"function","doc":"iex> get!(:test_key)\n    \"test_value\"\n\n    iex> get!(:non_existing_key)\n    ** (RuntimeError) Missing setting or configuration value: :non_existing_key","title":"Examples - Bonfire.Common.Settings.get!/2","ref":"Bonfire.Common.Settings.html#get!/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.get_for_process/1","ref":"Bonfire.Common.Settings.html#get_for_process/1"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.get_settings/4","ref":"Bonfire.Common.Settings.html#get_settings/4"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.load_instance_settings/0","ref":"Bonfire.Common.Settings.html#load_instance_settings/0"},{"type":"function","doc":"Sets a value for a specific key or list of nested keys.\n\nThis function updates the configuration with the provided value. You can specify a single key or a list of nested keys.","title":"Bonfire.Common.Settings.put/3","ref":"Bonfire.Common.Settings.html#put/3"},{"type":"function","doc":"# when no scope or current_user are passed in opts:\n    > put(:some_key, \"new_value\")\n    {:error, \"You need to be authenticated to change settings.\"}\n\n    # when the scope is :instance but an admin isn't passed as current_user in opts:\n    > put(:some_key, \"new_value\", scope: :instance)\n    ** (Bonfire.Fail) You do not have permission to change instance settings. Please contact an admin.\n\n    > {:ok, %Bonfire.Data.Identity.Settings{}} = put(:some_key, \"new_value\", skip_boundary_check: true, scope: :instance)\n\n    > {:ok, %Bonfire.Data.Identity.Settings{}} = put([:top_key, :sub_key], \"new_value\", skip_boundary_check: true, scope: \"instance\")","title":"Examples - Bonfire.Common.Settings.put/3","ref":"Bonfire.Common.Settings.html#put/3-examples"},{"type":"function","doc":"* `:otp_app` - Specifies the OTP application for which to set settings. If not specified, it decides where to put it using the same logic as `get/3`.\n  * `:scope` - Defines the scope for settings (e.g., `:user`, `:account`, or `:instance`).","title":"Options - Bonfire.Common.Settings.put/3","ref":"Bonfire.Common.Settings.html#put/3-options"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.put_raw/3","ref":"Bonfire.Common.Settings.html#put_raw/3"},{"type":"function","doc":"Resets all settings.\n\nThis function deletes all settings from the database, including instance-specific settings and user-specific settings for all users. Please be careful!","title":"Bonfire.Common.Settings.reset_all/0","ref":"Bonfire.Common.Settings.html#reset_all/0"},{"type":"function","doc":"> reset_all()\n    {:ok, %{}}","title":"Examples - Bonfire.Common.Settings.reset_all/0","ref":"Bonfire.Common.Settings.html#reset_all/0-examples"},{"type":"function","doc":"Resets settings for the instance scope.\n\nThis function deletes the settings associated with the whole instance and returns the result.","title":"Bonfire.Common.Settings.reset_instance/0","ref":"Bonfire.Common.Settings.html#reset_instance/0"},{"type":"function","doc":"> reset_instance()\n    {:ok, %Bonfire.Data.Identity.Settings{id: \"some_id\"}}","title":"Examples - Bonfire.Common.Settings.reset_instance/0","ref":"Bonfire.Common.Settings.html#reset_instance/0-examples"},{"type":"function","doc":"Sets multiple settings at once.\n\nThis function accepts a map or keyword list of settings to be updated. It determines the appropriate scope and updates the settings accordingly.","title":"Bonfire.Common.Settings.set/2","ref":"Bonfire.Common.Settings.html#set/2"},{"type":"function","doc":"> {:ok, %Bonfire.Data.Identity.Settings{}} = set(%{some_key: \"value\", another_key: \"another_value\"}, skip_boundary_check: true, scope: :instance)\n\n    > {:ok, %Bonfire.Data.Identity.Settings{}} = set([some_key: \"value\", another_key: \"another_value\"], skip_boundary_check: true, scope: \"instance\")","title":"Examples - Bonfire.Common.Settings.set/2","ref":"Bonfire.Common.Settings.html#set/2-examples"},{"type":"function","doc":"* `:otp_app` - Specifies the OTP application for which to set settings.\n  * `:scope` - Defines the scope for settings (e.g., `:user`, `:account`, or `:instance`).","title":"Options - Bonfire.Common.Settings.set/2","ref":"Bonfire.Common.Settings.html#set/2-options"},{"type":"module","doc":"","title":"Bonfire.Common.Settings.LiveHandler","ref":"Bonfire.Common.Settings.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.LiveHandler.handle_event/3","ref":"Bonfire.Common.Settings.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.LiveHandler.input_name/1","ref":"Bonfire.Common.Settings.LiveHandler.html#input_name/1"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.LiveHandler.maybe_assign_input_value_from_keys/1","ref":"Bonfire.Common.Settings.LiveHandler.html#maybe_assign_input_value_from_keys/1"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.LiveHandler.scoped/2","ref":"Bonfire.Common.Settings.LiveHandler.html#scoped/2"},{"type":"macro","doc":"","title":"Bonfire.Common.Settings.LiveHandler.sigil_p/2","ref":"Bonfire.Common.Settings.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Loads instance Settings (see `Bonfire.Common.Settings`) from DB into OTP config / application env (see `Bonfire.Common.Config`)\n\nWhile this module is a GenServer, it is only responsible for querying the settings, putting them in Config, and then exits with :ignore having done so.","title":"Bonfire.Common.Settings.LoadInstanceConfig","ref":"Bonfire.Common.Settings.LoadInstanceConfig.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Settings.LoadInstanceConfig.child_spec/1","ref":"Bonfire.Common.Settings.LoadInstanceConfig.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Settings.LoadInstanceConfig.load_config/0","ref":"Bonfire.Common.Settings.LoadInstanceConfig.html#load_config/0"},{"type":"function","doc":"Populates the global cache with table data via introspection.","title":"Bonfire.Common.Settings.LoadInstanceConfig.start_link/1","ref":"Bonfire.Common.Settings.LoadInstanceConfig.html#start_link/1"},{"type":"module","doc":"Fake data generators","title":"Bonfire.Common.Simulation","ref":"Bonfire.Common.Simulation.html"},{"type":"function","doc":"Picks a unique random url for an ap endpoint","title":"Bonfire.Common.Simulation.ap_url_base/0","ref":"Bonfire.Common.Simulation.html#ap_url_base/0"},{"type":"function","doc":"Generates random base64 text","title":"Bonfire.Common.Simulation.base64/0","ref":"Bonfire.Common.Simulation.html#base64/0"},{"type":"function","doc":"Generates a random boolean","title":"Bonfire.Common.Simulation.bool/0","ref":"Bonfire.Common.Simulation.html#bool/0"},{"type":"function","doc":"Picks a random canonical url and makes it unique","title":"Bonfire.Common.Simulation.canonical_url/0","ref":"Bonfire.Common.Simulation.html#canonical_url/0"},{"type":"function","doc":"Generate a random content type","title":"Bonfire.Common.Simulation.content_type/0","ref":"Bonfire.Common.Simulation.html#content_type/0"},{"type":"function","doc":"Picks a remote url from a set of available ones.","title":"Bonfire.Common.Simulation.content_url/0","ref":"Bonfire.Common.Simulation.html#content_url/0"},{"type":"function","doc":"Generates a random date of birth based on an age range of 18-99","title":"Bonfire.Common.Simulation.date_of_birth/0","ref":"Bonfire.Common.Simulation.html#date_of_birth/0"},{"type":"function","doc":"Generates a random domain name","title":"Bonfire.Common.Simulation.domain/0","ref":"Bonfire.Common.Simulation.html#domain/0"},{"type":"function","doc":"Generates a random unique email","title":"Bonfire.Common.Simulation.email/0","ref":"Bonfire.Common.Simulation.html#email/0"},{"type":"function","doc":"Generates the first half of an email address","title":"Bonfire.Common.Simulation.email_user/0","ref":"Bonfire.Common.Simulation.html#email_user/0"},{"type":"function","doc":"Returns false","title":"Bonfire.Common.Simulation.falsehood/0","ref":"Bonfire.Common.Simulation.html#falsehood/0"},{"type":"function","doc":"Generate a random floating point number","title":"Bonfire.Common.Simulation.float/0","ref":"Bonfire.Common.Simulation.html#float/0"},{"type":"function","doc":"Picks a date up to 300 days in the future, not including today","title":"Bonfire.Common.Simulation.future_date/0","ref":"Bonfire.Common.Simulation.html#future_date/0"},{"type":"function","doc":"Picks a datetime up to 300 days in the future, not including today","title":"Bonfire.Common.Simulation.future_datetime/0","ref":"Bonfire.Common.Simulation.html#future_datetime/0"},{"type":"function","doc":"Same as future_datetime, but as an ISO8601 formatted string.","title":"Bonfire.Common.Simulation.future_datetime_iso/0","ref":"Bonfire.Common.Simulation.html#future_datetime_iso/0"},{"type":"function","doc":"Picks an icon url","title":"Bonfire.Common.Simulation.icon/0","ref":"Bonfire.Common.Simulation.html#icon/0"},{"type":"function","doc":"Picks an image url","title":"Bonfire.Common.Simulation.image/0","ref":"Bonfire.Common.Simulation.html#image/0"},{"type":"function","doc":"Generate a random signed integer","title":"Bonfire.Common.Simulation.integer/0","ref":"Bonfire.Common.Simulation.html#integer/0"},{"type":"function","doc":"A random license for content","title":"Bonfire.Common.Simulation.license/0","ref":"Bonfire.Common.Simulation.html#license/0"},{"type":"function","doc":"Returns a city and country","title":"Bonfire.Common.Simulation.location/0","ref":"Bonfire.Common.Simulation.html#location/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.long_count/0","ref":"Bonfire.Common.Simulation.html#long_count/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.long_list/1","ref":"Bonfire.Common.Simulation.html#long_list/1"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.markdown/0","ref":"Bonfire.Common.Simulation.html#markdown/0"},{"type":"function","doc":"Generate a random boolean that can also be nil","title":"Bonfire.Common.Simulation.maybe_bool/0","ref":"Bonfire.Common.Simulation.html#maybe_bool/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.maybe_one_of/1","ref":"Bonfire.Common.Simulation.html#maybe_one_of/1"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.med_count/0","ref":"Bonfire.Common.Simulation.html#med_count/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.med_list/1","ref":"Bonfire.Common.Simulation.html#med_list/1"},{"type":"function","doc":"Picks a name","title":"Bonfire.Common.Simulation.name/0","ref":"Bonfire.Common.Simulation.html#name/0"},{"type":"function","doc":"Generate a random negative integer","title":"Bonfire.Common.Simulation.neg_integer/0","ref":"Bonfire.Common.Simulation.html#neg_integer/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.one_of/1","ref":"Bonfire.Common.Simulation.html#one_of/1"},{"type":"function","doc":"Generates a random paragraph","title":"Bonfire.Common.Simulation.paragraph/0","ref":"Bonfire.Common.Simulation.html#paragraph/0"},{"type":"function","doc":"Generates a random password string","title":"Bonfire.Common.Simulation.password/0","ref":"Bonfire.Common.Simulation.html#password/0"},{"type":"function","doc":"Picks a date up to 300 days in the past, not including today","title":"Bonfire.Common.Simulation.past_date/0","ref":"Bonfire.Common.Simulation.html#past_date/0"},{"type":"function","doc":"Picks a datetime up to 300 days in the past, not including today","title":"Bonfire.Common.Simulation.past_datetime/0","ref":"Bonfire.Common.Simulation.html#past_datetime/0"},{"type":"function","doc":"Same as past_datetime, but as an ISO8601 formatted string.","title":"Bonfire.Common.Simulation.past_datetime_iso/0","ref":"Bonfire.Common.Simulation.html#past_datetime_iso/0"},{"type":"function","doc":"Picks a path from a set of available files.","title":"Bonfire.Common.Simulation.path/0","ref":"Bonfire.Common.Simulation.html#path/0"},{"type":"function","doc":"Generate a random positive integer","title":"Bonfire.Common.Simulation.pos_integer/0","ref":"Bonfire.Common.Simulation.html#pos_integer/0"},{"type":"function","doc":"Picks a unique preferred_username","title":"Bonfire.Common.Simulation.preferred_username/0","ref":"Bonfire.Common.Simulation.html#preferred_username/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.short_count/0","ref":"Bonfire.Common.Simulation.html#short_count/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.short_list/1","ref":"Bonfire.Common.Simulation.html#short_list/1"},{"type":"function","doc":"Picks a fake signing key","title":"Bonfire.Common.Simulation.signing_key/0","ref":"Bonfire.Common.Simulation.html#signing_key/0"},{"type":"function","doc":"Repeats a function count times if count_or_range is a positive integer.\n\nIf count_or_range is a positive range, a random number from this\nrange is selected and that value used as a count","title":"Bonfire.Common.Simulation.some/2","ref":"Bonfire.Common.Simulation.html#some/2"},{"type":"function","doc":"Picks a summary text paragraph","title":"Bonfire.Common.Simulation.summary/0","ref":"Bonfire.Common.Simulation.html#summary/0"},{"type":"function","doc":"","title":"Bonfire.Common.Simulation.title/0","ref":"Bonfire.Common.Simulation.html#title/0"},{"type":"function","doc":"Returns true","title":"Bonfire.Common.Simulation.truth/0","ref":"Bonfire.Common.Simulation.html#truth/0"},{"type":"function","doc":"Generates a random unique ID, optionally for a specific schema","title":"Bonfire.Common.Simulation.uid/1","ref":"Bonfire.Common.Simulation.html#uid/1"},{"type":"function","doc":"Generates a random unique ULID","title":"Bonfire.Common.Simulation.ulid/0","ref":"Bonfire.Common.Simulation.html#ulid/0"},{"type":"function","doc":"Generates a random url","title":"Bonfire.Common.Simulation.url/0","ref":"Bonfire.Common.Simulation.html#url/0"},{"type":"function","doc":"Generates a random username","title":"Bonfire.Common.Simulation.username/0","ref":"Bonfire.Common.Simulation.html#username/0"},{"type":"function","doc":"Generates a random unique UUID","title":"Bonfire.Common.Simulation.uuid/0","ref":"Bonfire.Common.Simulation.html#uuid/0"},{"type":"function","doc":"A verb to be used for an activity.","title":"Bonfire.Common.Simulation.verb/0","ref":"Bonfire.Common.Simulation.html#verb/0"},{"type":"function","doc":"A website address","title":"Bonfire.Common.Simulation.website/0","ref":"Bonfire.Common.Simulation.html#website/0"},{"type":"module","doc":"Open the console without starting the app: `iex -S mix run --no-start` or `just imix run --no-start`\n\nAnd then run `Bonfire.Common.StartupTimer.run()`","title":"Bonfire.Common.StartupTimer","ref":"Bonfire.Common.StartupTimer.html"},{"type":"function","doc":"","title":"Bonfire.Common.StartupTimer.run/1","ref":"Bonfire.Common.StartupTimer.html#run/1"},{"type":"module","doc":"","title":"Bonfire.Common.Telemetry","ref":"Bonfire.Common.Telemetry.html"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.handle_event/4","ref":"Bonfire.Common.Telemetry.html#handle_event/4"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.setup/2","ref":"Bonfire.Common.Telemetry.html#setup/2"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.setup_oban/0","ref":"Bonfire.Common.Telemetry.html#setup_oban/0"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.setup_opentelemetry/2","ref":"Bonfire.Common.Telemetry.html#setup_opentelemetry/2"},{"type":"module","doc":"","title":"Bonfire.Common.Telemetry.Metrics","ref":"Bonfire.Common.Telemetry.Metrics.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Telemetry.Metrics.child_spec/1","ref":"Bonfire.Common.Telemetry.Metrics.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Metrics.metrics/0","ref":"Bonfire.Common.Telemetry.Metrics.html#metrics/0"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Metrics.oban_worker_memory/0","ref":"Bonfire.Common.Telemetry.Metrics.html#oban_worker_memory/0"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Metrics.start_link/1","ref":"Bonfire.Common.Telemetry.Metrics.html#start_link/1"},{"type":"module","doc":"","title":"Bonfire.Common.Telemetry.Storage","ref":"Bonfire.Common.Telemetry.Storage.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Telemetry.Storage.child_spec/1","ref":"Bonfire.Common.Telemetry.Storage.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Storage.handle_event/4","ref":"Bonfire.Common.Telemetry.Storage.html#handle_event/4"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Storage.metrics_history/1","ref":"Bonfire.Common.Telemetry.Storage.html#metrics_history/1"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.Storage.start_link/1","ref":"Bonfire.Common.Telemetry.Storage.html#start_link/1"},{"type":"module","doc":"","title":"Bonfire.Common.Telemetry.SystemMonitor","ref":"Bonfire.Common.Telemetry.SystemMonitor.html"},{"type":"function","doc":"Formats percent.","title":"Bonfire.Common.Telemetry.SystemMonitor.format_percent/1","ref":"Bonfire.Common.Telemetry.SystemMonitor.html#format_percent/1"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.SystemMonitor.handle_alarm/2","ref":"Bonfire.Common.Telemetry.SystemMonitor.html#handle_alarm/2"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.SystemMonitor.handle_event/2","ref":"Bonfire.Common.Telemetry.SystemMonitor.html#handle_event/2"},{"type":"function","doc":"","title":"Bonfire.Common.Telemetry.SystemMonitor.init/1","ref":"Bonfire.Common.Telemetry.SystemMonitor.html#init/1"},{"type":"module","doc":"This utility allows to get the same effect of using\n`fcwatch | mix test --stale --listen-on-stdin` to watch for\ncode changes and run stale tests, but with more control and\nwithout the starting time penalty.\n\nNote that watching requires fswatch on your system.\nEg on Mac run `brew install fswatch`.\n\nTo use it, in your project's `.iex` file add:\n```\nunless GenServer.whereis(Bonfire.Common.Test.Interactive) do\n  {:ok, pid} = Bonfire.Common.Test.Interactive.start_link()\n  # Process will not exit when the iex goes out\n  Process.unlink(pid)\nend\nimport Bonfire.Common.Test.Interactive.Helpers\n```\nThen to call `iex` and run tests just do:\n```\nMIX_ENV=test iex -S mix\n```\nThe `Bonfire.Common.Test.Interactive.Helpers` allows to call `f` and `s` and `a`\nto run failed, stale and all tests respectively.\nYou can call `w` to watch tests and `uw` to unwatch.\nThere is a really simple throttle mecanism that disallow running the suite concurrently.","title":"Bonfire.Common.Test.Interactive","ref":"Bonfire.Common.Test.Interactive.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Test.Interactive.child_spec/1","ref":"Bonfire.Common.Test.Interactive.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.run_all_tests/1","ref":"Bonfire.Common.Test.Interactive.html#run_all_tests/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.run_failed_tests/1","ref":"Bonfire.Common.Test.Interactive.html#run_failed_tests/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.run_stale_tests/1","ref":"Bonfire.Common.Test.Interactive.html#run_stale_tests/1"},{"type":"function","doc":"Sets up database options for tests\n\nYou can tell a specific test to not wrap in a transaction and rollback with:\n`@tag db_sandbox: false`","title":"Bonfire.Common.Test.Interactive.setup_test_repo/1","ref":"Bonfire.Common.Test.Interactive.html#setup_test_repo/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.start_link/0","ref":"Bonfire.Common.Test.Interactive.html#start_link/0"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.unlock/0","ref":"Bonfire.Common.Test.Interactive.html#unlock/0"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.unwatch_tests/0","ref":"Bonfire.Common.Test.Interactive.html#unwatch_tests/0"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.watch_tests/1","ref":"Bonfire.Common.Test.Interactive.html#watch_tests/1"},{"type":"module","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers","ref":"Bonfire.Common.Test.Interactive.Helpers.html"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.f/1","ref":"Bonfire.Common.Test.Interactive.Helpers.html#f/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.ready/0","ref":"Bonfire.Common.Test.Interactive.Helpers.html#ready/0"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.s/1","ref":"Bonfire.Common.Test.Interactive.Helpers.html#s/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.ta/1","ref":"Bonfire.Common.Test.Interactive.Helpers.html#ta/1"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.uw/0","ref":"Bonfire.Common.Test.Interactive.Helpers.html#uw/0"},{"type":"function","doc":"","title":"Bonfire.Common.Test.Interactive.Helpers.w/1","ref":"Bonfire.Common.Test.Interactive.Helpers.html#w/1"},{"type":"module","doc":"","title":"Bonfire.Common.Test.Interactive.Observer","ref":"Bonfire.Common.Test.Interactive.Observer.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Common.Test.Interactive.Observer.child_spec/1","ref":"Bonfire.Common.Test.Interactive.Observer.html#child_spec/1"},{"type":"module","doc":"Special Ecto Repo used for federation testing.\n\nNote: more generic functions are defined in `Bonfire.Common.RepoTemplate`","title":"Bonfire.Common.TestInstanceRepo","ref":"Bonfire.Common.TestInstanceRepo.html"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.aggregate/3","ref":"Bonfire.Common.TestInstanceRepo.html#aggregate/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.aggregate/4","ref":"Bonfire.Common.TestInstanceRepo.html#aggregate/4"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.all/2","ref":"Bonfire.Common.TestInstanceRepo.html#all/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.apply/1","ref":"Bonfire.Common.TestInstanceRepo.html#apply/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.checked_out?/0","ref":"Bonfire.Common.TestInstanceRepo.html#checked_out?/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.checkout/2","ref":"Bonfire.Common.TestInstanceRepo.html#checkout/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.child_spec/1","ref":"Bonfire.Common.TestInstanceRepo.html#child_spec/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.config/0","ref":"Bonfire.Common.TestInstanceRepo.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.custom_preload_fun/1","ref":"Bonfire.Common.TestInstanceRepo.html#custom_preload_fun/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.default_endpoint/0","ref":"Bonfire.Common.TestInstanceRepo.html#default_endpoint/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.default_options/1","ref":"Bonfire.Common.TestInstanceRepo.html#default_options/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.default_repo/0","ref":"Bonfire.Common.TestInstanceRepo.html#default_repo/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.default_repo_opts/0","ref":"Bonfire.Common.TestInstanceRepo.html#default_repo_opts/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.delete/2","ref":"Bonfire.Common.TestInstanceRepo.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.delete!/2","ref":"Bonfire.Common.TestInstanceRepo.html#delete!/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.delete_all/2","ref":"Bonfire.Common.TestInstanceRepo.html#delete_all/2"},{"type":"function","doc":"Execute a query to delete all matching records.","title":"Bonfire.Common.TestInstanceRepo.delete_many/1","ref":"Bonfire.Common.TestInstanceRepo.html#delete_many/1"},{"type":"function","doc":"iex> delete_many(from u in User, where: u.id < 100)\n    {:ok, _count}","title":"Examples - Bonfire.Common.TestInstanceRepo.delete_many/1","ref":"Bonfire.Common.TestInstanceRepo.html#delete_many/1-examples"},{"type":"function","doc":"A convenience function for SQL-based repositories that forces all connections in the\npool to disconnect within the given interval.\n\nSee `Ecto.Adapters.SQL.disconnect_all/3` for more information.","title":"Bonfire.Common.TestInstanceRepo.disconnect_all/2","ref":"Bonfire.Common.TestInstanceRepo.html#disconnect_all/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.exists?/2","ref":"Bonfire.Common.TestInstanceRepo.html#exists?/2"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar\ndepending on the adapter to obtain statistics for the given query.\n\nSee `Ecto.Adapters.SQL.explain/4` for more information.","title":"Bonfire.Common.TestInstanceRepo.explain/3","ref":"Bonfire.Common.TestInstanceRepo.html#explain/3"},{"type":"function","doc":"Execute a query for one result where the primary key matches the given id, and return either an {:ok, result} tuple or a {:error, :not_found}.","title":"Bonfire.Common.TestInstanceRepo.fetch/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch/2"},{"type":"function","doc":"iex> fetch(User, 1)\n    {:ok, %User{}}\n\n    iex> fetch(User, 999)\n    {:error, :not_found}","title":"Examples - Bonfire.Common.TestInstanceRepo.fetch/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch/2-examples"},{"type":"function","doc":"Execute a query for multiple results given one or multiple IDs.","title":"Bonfire.Common.TestInstanceRepo.fetch_all/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_all/2"},{"type":"function","doc":"iex> fetch_all(User, [1, 2, 3])\n    [%User{}, %User{}, %User{}]\n\n    iex> fetch_all(User, 999)\n    []","title":"Examples - Bonfire.Common.TestInstanceRepo.fetch_all/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_all/2-examples"},{"type":"function","doc":"Execute a query for one result (using a keyword list to specify the key/value to query with), and return either an {:ok, result} tuple or a {:error, :not_found}.","title":"Bonfire.Common.TestInstanceRepo.fetch_by/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_by/2"},{"type":"function","doc":"iex> fetch_by(User, name: \"Alice\")\n    {:ok, %User{}}\n\n    iex> fetch_by(User, name: \"Nonexistent\")\n    {:error, :not_found}","title":"Examples - Bonfire.Common.TestInstanceRepo.fetch_by/2","ref":"Bonfire.Common.TestInstanceRepo.html#fetch_by/2-examples"},{"type":"function","doc":"Like `single/1`, except on failure, adds an error to the changeset.","title":"Bonfire.Common.TestInstanceRepo.find/3","ref":"Bonfire.Common.TestInstanceRepo.html#find/3"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{}\n    iex> find(from u in User, where: u.id == 1, changeset)\n    {:ok, %User{}}\n\n    iex> changeset = %Ecto.Changeset{}\n    iex> find(from u in User, where: u.id == 999, changeset)\n    {:error, %Ecto.Changeset{}}","title":"Examples - Bonfire.Common.TestInstanceRepo.find/3","ref":"Bonfire.Common.TestInstanceRepo.html#find/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.get/3","ref":"Bonfire.Common.TestInstanceRepo.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.get!/3","ref":"Bonfire.Common.TestInstanceRepo.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.get_by/3","ref":"Bonfire.Common.TestInstanceRepo.html#get_by/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.get_by!/3","ref":"Bonfire.Common.TestInstanceRepo.html#get_by!/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.get_dynamic_repo/0","ref":"Bonfire.Common.TestInstanceRepo.html#get_dynamic_repo/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.in_transaction?/0","ref":"Bonfire.Common.TestInstanceRepo.html#in_transaction?/0"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.insert/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.insert!/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert!/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.insert_all/3","ref":"Bonfire.Common.TestInstanceRepo.html#insert_all/3"},{"type":"function","doc":"Insert all or ignore a list of maps into a schema.","title":"Bonfire.Common.TestInstanceRepo.insert_all_or_ignore/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_all_or_ignore/2"},{"type":"function","doc":"iex> insert_all_or_ignore(MySchema, [%{field: \"value1\"}, %{field: \"value2\"}])\n    {:ok, _result}","title":"Examples - Bonfire.Common.TestInstanceRepo.insert_all_or_ignore/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_all_or_ignore/2-examples"},{"type":"function","doc":"Insert or ignore a changeset or struct into a schema.","title":"Bonfire.Common.TestInstanceRepo.insert_or_ignore/1","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_ignore/1"},{"type":"function","doc":"iex> insert_or_ignore(%Ecto.Changeset{})\n    {:ok, _result}\n\n    iex> insert_or_ignore(%MySchema{field: \"value\"})\n    {:ok, _result}","title":"Examples - Bonfire.Common.TestInstanceRepo.insert_or_ignore/1","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_ignore/1-examples"},{"type":"function","doc":"Insert or ignore a map (or iterate over a list of maps) into a schema.","title":"Bonfire.Common.TestInstanceRepo.insert_or_ignore/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_ignore/2"},{"type":"function","doc":"iex> insert_or_ignore(MySchema, %{field: \"value\"})\n    [{:ok, _result}]\n\n    iex> insert_or_ignore(MySchema, [%{field: \"value1\"}, %{field: \"value2\"}])\n    [{:ok, _result}]","title":"Examples - Bonfire.Common.TestInstanceRepo.insert_or_ignore/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_ignore/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.insert_or_update/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_update/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.insert_or_update!/2","ref":"Bonfire.Common.TestInstanceRepo.html#insert_or_update!/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.load/2","ref":"Bonfire.Common.TestInstanceRepo.html#load/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.make_subquery/1","ref":"Bonfire.Common.TestInstanceRepo.html#make_subquery/1"},{"type":"function","doc":"Execute a query for multiple results and return the results.","title":"Bonfire.Common.TestInstanceRepo.many/2","ref":"Bonfire.Common.TestInstanceRepo.html#many/2"},{"type":"function","doc":"iex> many(from u in User)\n    [%User{}, %User{}]\n\n    iex> many(from u in User, return: :query)\n    #Ecto.Query<...>","title":"Examples - Bonfire.Common.TestInstanceRepo.many/2","ref":"Bonfire.Common.TestInstanceRepo.html#many/2-examples"},{"type":"function","doc":"Execute a query for multiple results and return one page of results.\nThis uses the main implementation for pagination, which is cursor-based and powered by the `Paginator` library.","title":"Bonfire.Common.TestInstanceRepo.many_paginated/3","ref":"Bonfire.Common.TestInstanceRepo.html#many_paginated/3"},{"type":"function","doc":"iex> many_paginated(User, [limit: 10])\n    %Paginator.Page{}","title":"Examples - Bonfire.Common.TestInstanceRepo.many_paginated/3","ref":"Bonfire.Common.TestInstanceRepo.html#many_paginated/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.maybe_declare_test_instance/1","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_declare_test_instance/1"},{"type":"function","doc":"Execute a query for one result and return either a result or a fallback value (`nil` by default).","title":"Bonfire.Common.TestInstanceRepo.maybe_one/2","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_one/2"},{"type":"function","doc":"iex> maybe_one(from u in User, where: u.id == 1)\n    %User{}\n\n    iex> maybe_one(from u in User, where: u.id == 999, \"fallback\")\n    \"fallback\"","title":"Examples - Bonfire.Common.TestInstanceRepo.maybe_one/2","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_one/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.maybe_preload/3","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_preload/3"},{"type":"function","doc":"Add an `ilike` clause to a query if the user query is safe.","title":"Bonfire.Common.TestInstanceRepo.maybe_where_ilike/5","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_where_ilike/5"},{"type":"function","doc":"iex> maybe_where_ilike(Needle.Pointer, :id, \"Alice\")\n    #Ecto.Query<...>\n\n    iex> maybe_where_ilike(Needle.Pointer, :id, \"Al%ice\")\n    Needle.Pointer \n    # ^ unchanged due to unsafe query","title":"Examples - Bonfire.Common.TestInstanceRepo.maybe_where_ilike/5","ref":"Bonfire.Common.TestInstanceRepo.html#maybe_where_ilike/5-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.one/2","ref":"Bonfire.Common.TestInstanceRepo.html#one/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.one!/2","ref":"Bonfire.Common.TestInstanceRepo.html#one!/2"},{"type":"function","doc":"Different implementation for pagination using Scrivener (used by eg. rauversion).","title":"Bonfire.Common.TestInstanceRepo.paginate/2","ref":"Bonfire.Common.TestInstanceRepo.html#paginate/2"},{"type":"function","doc":"iex> paginate(User, page: 1, page_size: 10)\n    %Scrivener.Page{}","title":"Examples - Bonfire.Common.TestInstanceRepo.paginate/2","ref":"Bonfire.Common.TestInstanceRepo.html#paginate/2-examples"},{"type":"function","doc":"Select and return only specific fields (specified as an atom or list of atoms)","title":"Bonfire.Common.TestInstanceRepo.pluck/3","ref":"Bonfire.Common.TestInstanceRepo.html#pluck/3"},{"type":"function","doc":"> pluck(:id)\n    [id1, id2]\n\n    > pluck([:id, :inserted_at])\n    [%{id: id1, inserted_at: _}, %{id: id2, inserted_at: _}]","title":"Examples - Bonfire.Common.TestInstanceRepo.pluck/3","ref":"Bonfire.Common.TestInstanceRepo.html#pluck/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.preload/3","ref":"Bonfire.Common.TestInstanceRepo.html#preload/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.preload_all/2","ref":"Bonfire.Common.TestInstanceRepo.html#preload_all/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.preload_mixins/2","ref":"Bonfire.Common.TestInstanceRepo.html#preload_mixins/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.prepare_query/3","ref":"Bonfire.Common.TestInstanceRepo.html#prepare_query/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.process_put/1","ref":"Bonfire.Common.TestInstanceRepo.html#process_put/1"},{"type":"function","doc":"Like `insert/1`, but understands remapping changeset errors to attr\nnames from config (and only config, no overrides at present!)","title":"Bonfire.Common.TestInstanceRepo.put/1","ref":"Bonfire.Common.TestInstanceRepo.html#put/1"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{valid?: false}\n    iex> put(changeset)\n    {:error, %Ecto.Changeset{}}","title":"Examples - Bonfire.Common.TestInstanceRepo.put/1","ref":"Bonfire.Common.TestInstanceRepo.html#put/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.put_dynamic_repo/1","ref":"Bonfire.Common.TestInstanceRepo.html#put_dynamic_repo/1"},{"type":"function","doc":"Like `put/1` but for multiple `changesets`","title":"Bonfire.Common.TestInstanceRepo.put_many/1","ref":"Bonfire.Common.TestInstanceRepo.html#put_many/1"},{"type":"function","doc":"iex> changesets = [%{valid?: true}, %{valid?: false}]\n    iex> put_many(changesets)\n    {:error, [%{valid?: false}]}\n\n    iex> changesets = [%{valid?: true}, %{valid?: true}]\n    iex> put_many(changesets)\n    {:ok, _result}","title":"Examples - Bonfire.Common.TestInstanceRepo.put_many/1","ref":"Bonfire.Common.TestInstanceRepo.html#put_many/1-examples"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query/4` for more information.","title":"Bonfire.Common.TestInstanceRepo.query/3","ref":"Bonfire.Common.TestInstanceRepo.html#query/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query!/4` for more information.","title":"Bonfire.Common.TestInstanceRepo.query!/3","ref":"Bonfire.Common.TestInstanceRepo.html#query!/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many/4` for more information.","title":"Bonfire.Common.TestInstanceRepo.query_many/3","ref":"Bonfire.Common.TestInstanceRepo.html#query_many/3"},{"type":"function","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many!/4` for more information.","title":"Bonfire.Common.TestInstanceRepo.query_many!/3","ref":"Bonfire.Common.TestInstanceRepo.html#query_many!/3"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.reject_preload_ids/1","ref":"Bonfire.Common.TestInstanceRepo.html#reject_preload_ids/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.reload/2","ref":"Bonfire.Common.TestInstanceRepo.html#reload/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.reload!/2","ref":"Bonfire.Common.TestInstanceRepo.html#reload!/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.rollback/1","ref":"Bonfire.Common.TestInstanceRepo.html#rollback/1"},{"type":"function","doc":"Execute a query for one result and return either an `{:ok, result}` or `{:error, :not_found}` tuple.","title":"Bonfire.Common.TestInstanceRepo.single/1","ref":"Bonfire.Common.TestInstanceRepo.html#single/1"},{"type":"function","doc":"iex> single(from u in User, where: u.id == 1)\n    {:ok, %User{}}\n\n    iex> single(from u in User, where: u.id == 999)\n    {:error, :not_found}","title":"Examples - Bonfire.Common.TestInstanceRepo.single/1","ref":"Bonfire.Common.TestInstanceRepo.html#single/1-examples"},{"type":"function","doc":"Executes raw SQL query.","title":"Bonfire.Common.TestInstanceRepo.sql/3","ref":"Bonfire.Common.TestInstanceRepo.html#sql/3"},{"type":"function","doc":"> YourModule.sql(\"SELECT * FROM pointers\")","title":"Examples - Bonfire.Common.TestInstanceRepo.sql/3","ref":"Bonfire.Common.TestInstanceRepo.html#sql/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.start_link/1","ref":"Bonfire.Common.TestInstanceRepo.html#start_link/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.stop/1","ref":"Bonfire.Common.TestInstanceRepo.html#stop/1"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.stream/2","ref":"Bonfire.Common.TestInstanceRepo.html#stream/2"},{"type":"function","doc":"A convenience function for SQL-based repositories that translates the given query to SQL.\n\nSee `Ecto.Adapters.SQL.to_sql/3` for more information.","title":"Bonfire.Common.TestInstanceRepo.to_sql/2","ref":"Bonfire.Common.TestInstanceRepo.html#to_sql/2"},{"type":"function","doc":"Can be used to log specific queries (by calling function) in production.","title":"Bonfire.Common.TestInstanceRepo.trace/1","ref":"Bonfire.Common.TestInstanceRepo.html#trace/1"},{"type":"function","doc":"iex> trace(fn -> Repo.all(User) end)\n    [%User{}, %User{}]","title":"Examples - Bonfire.Common.TestInstanceRepo.trace/1","ref":"Bonfire.Common.TestInstanceRepo.html#trace/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.transact_many/1","ref":"Bonfire.Common.TestInstanceRepo.html#transact_many/1"},{"type":"function","doc":"Run a transaction, similar to `Repo.transaction/1`, but it expects an ok or error\ntuple. If an error tuple is returned, the transaction is aborted.","title":"Bonfire.Common.TestInstanceRepo.transact_with/2","ref":"Bonfire.Common.TestInstanceRepo.html#transact_with/2"},{"type":"function","doc":"iex> transact_with(fn -> {:ok, \"success\"} end)\n    \"success\"\n\n    iex> transact_with(fn -> {:error, \"failure\"} end)\n    ** (Ecto.RollbackError) Rolling back the DB transaction, error reason: failure","title":"Examples - Bonfire.Common.TestInstanceRepo.transact_with/2","ref":"Bonfire.Common.TestInstanceRepo.html#transact_with/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.transaction/2","ref":"Bonfire.Common.TestInstanceRepo.html#transaction/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.update/2","ref":"Bonfire.Common.TestInstanceRepo.html#update/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.update!/2","ref":"Bonfire.Common.TestInstanceRepo.html#update!/2"},{"type":"function","doc":"","title":"Bonfire.Common.TestInstanceRepo.update_all/3","ref":"Bonfire.Common.TestInstanceRepo.html#update_all/3"},{"type":"function","doc":"Inserts or updates data in the database with upsert semantics.\n\n* `cs` - The changeset or schema to insert or update.\n* `keys_or_attrs_to_update` - A list of keys or a map of attributes to update.\n* `conflict_target` - The column(s) or constraint to check for conflicts, defaults to `[:id]`.","title":"Bonfire.Common.TestInstanceRepo.upsert/3","ref":"Bonfire.Common.TestInstanceRepo.html#upsert/3"},{"type":"function","doc":"iex> upsert(%Ecto.Changeset{}, [:field1, :field2])\n    {:ok, _result}\n\n    iex> upsert(%Ecto.Changeset{}, %{field1: \"value\"})\n    {:ok, _result}","title":"Examples - Bonfire.Common.TestInstanceRepo.upsert/3","ref":"Bonfire.Common.TestInstanceRepo.html#upsert/3-examples"},{"type":"function","doc":"Insert or update all entries with upsert semantics.\n\n* `schema` - The schema or table name to insert or update.\n* `data` - A list of maps containing the data to insert or update.\n* `conflict_target` - The column(s) or constraint to check for conflicts, defaults to `[:id]`.","title":"Bonfire.Common.TestInstanceRepo.upsert_all/3","ref":"Bonfire.Common.TestInstanceRepo.html#upsert_all/3"},{"type":"function","doc":"iex> upsert_all(User, [%{id: 1, name: \"Alice\"}, %{id: 2, name: \"Bob\"}])\n    {:ok, _result}\n\n    iex> upsert_all(User, [%{id: 1, name: \"Alice Updated\"}], [:id])\n    {:ok, _result}","title":"Examples - Bonfire.Common.TestInstanceRepo.upsert_all/3","ref":"Bonfire.Common.TestInstanceRepo.html#upsert_all/3-examples"},{"type":"module","doc":"","title":"Bonfire.Common.Testing","ref":"Bonfire.Common.Testing.html"},{"type":"function","doc":"","title":"Bonfire.Common.Testing.configure_start_test/1","ref":"Bonfire.Common.Testing.html#configure_start_test/1"},{"type":"module","doc":"","title":"Bonfire.Common.Testing.InsecurePW","ref":"Bonfire.Common.Testing.InsecurePW.html"},{"type":"function","doc":"","title":"Bonfire.Common.Testing.InsecurePW.no_user_verify/0","ref":"Bonfire.Common.Testing.InsecurePW.html#no_user_verify/0"},{"type":"module","doc":"Helpers for handling plain or rich text (markdown, HTML, etc)","title":"Bonfire.Common.Text","ref":"Bonfire.Common.Text.html"},{"type":"function","doc":"Checks if a string is blank.","title":"Bonfire.Common.Text.blank?/1","ref":"Bonfire.Common.Text.html#blank?/1"},{"type":"function","doc":"iex> blank?(nil)\n    true\n\n    iex> blank?(\"   \")\n    true\n\n    iex> blank?(\"not blank\")\n    false","title":"Examples - Bonfire.Common.Text.blank?/1","ref":"Bonfire.Common.Text.html#blank?/1-examples"},{"type":"function","doc":"Converts a string to CamelCase.","title":"Bonfire.Common.Text.camelise/1","ref":"Bonfire.Common.Text.html#camelise/1"},{"type":"function","doc":"iex> camelise(\"hello world\")\n    \"HelloWorld\"","title":"Examples - Bonfire.Common.Text.camelise/1","ref":"Bonfire.Common.Text.html#camelise/1-examples"},{"type":"function","doc":"Highlights code using Makeup or falls back to Phoenix.HTML if unsupported.","title":"Bonfire.Common.Text.code_syntax/2","ref":"Bonfire.Common.Text.html#code_syntax/2"},{"type":"function","doc":"> code_syntax(\"defmodule Test {}\", \"test.ex\")\n    #=> \"  defmodule Test {}  \"","title":"Examples - Bonfire.Common.Text.code_syntax/2","ref":"Bonfire.Common.Text.html#code_syntax/2-examples"},{"type":"function","doc":"Checks if a string contains a substring.","title":"Bonfire.Common.Text.contains?/2","ref":"Bonfire.Common.Text.html#contains?/2"},{"type":"function","doc":"iex> contains?(\"hello world\", \"world\")\n    true\n\n    iex> contains?(\"hello world\", \"foo\")\n    false","title":"Examples - Bonfire.Common.Text.contains?/2","ref":"Bonfire.Common.Text.html#contains?/2-examples"},{"type":"function","doc":"Checks if a string contains HTML tags.","title":"Bonfire.Common.Text.contains_html?/1","ref":"Bonfire.Common.Text.html#contains_html?/1"},{"type":"function","doc":"iex> contains_html?(\" Test \")\n    true\n\n    iex> contains_html?(\"Just text\")\n    false","title":"Examples - Bonfire.Common.Text.contains_html?/1","ref":"Bonfire.Common.Text.html#contains_html?/1-examples"},{"type":"function","doc":"Hashes the input using a specified algorithm.","title":"Bonfire.Common.Text.hash/2","ref":"Bonfire.Common.Text.html#hash/2"},{"type":"function","doc":"iex> hash(\"data\", algorithm: :sha256)\n    \"Om6weQ85rIfJTzhWst0sXREOaBFgImGpqSPTuyOtyLc\"\n\n    iex> hash(\"data\")\n    \"jXd_OF09_siBXSD3SWAm3A\"","title":"Examples - Bonfire.Common.Text.hash/2","ref":"Bonfire.Common.Text.html#hash/2-examples"},{"type":"function","doc":"Lists all checkboxes from the text.","title":"Bonfire.Common.Text.list_checkboxes/1","ref":"Bonfire.Common.Text.html#list_checkboxes/1"},{"type":"function","doc":"> list_checkboxes(\"* [ ] task\n* [x] done\")\n    [[\" \", \"task\"], [\" \", \"done\"]]","title":"Examples - Bonfire.Common.Text.list_checkboxes/1","ref":"Bonfire.Common.Text.html#list_checkboxes/1-examples"},{"type":"function","doc":"Lists checked boxes from the text.","title":"Bonfire.Common.Text.list_checked_boxes/1","ref":"Bonfire.Common.Text.html#list_checked_boxes/1"},{"type":"function","doc":"> list_checked_boxes(\"* [x] done\")\n    [[\"done\"]]","title":"Examples - Bonfire.Common.Text.list_checked_boxes/1","ref":"Bonfire.Common.Text.html#list_checked_boxes/1-examples"},{"type":"function","doc":"Lists unchecked boxes from the text.","title":"Bonfire.Common.Text.list_unchecked_boxes/1","ref":"Bonfire.Common.Text.html#list_unchecked_boxes/1"},{"type":"function","doc":"> list_unchecked_boxes(\"* [ ] task\")\n    [[\"task\"]]","title":"Examples - Bonfire.Common.Text.list_unchecked_boxes/1","ref":"Bonfire.Common.Text.html#list_unchecked_boxes/1-examples"},{"type":"function","doc":"Makes local links within content live.","title":"Bonfire.Common.Text.make_local_links_live/1","ref":"Bonfire.Common.Text.html#make_local_links_live/1"},{"type":"function","doc":"> make_local_links_live(\" Link \")\n    \" Link \"","title":"Examples - Bonfire.Common.Text.make_local_links_live/1","ref":"Bonfire.Common.Text.html#make_local_links_live/1-examples"},{"type":"function","doc":"Converts markdown checkboxes to HTML checkboxes.","title":"Bonfire.Common.Text.markdown_checkboxes/1","ref":"Bonfire.Common.Text.html#markdown_checkboxes/1"},{"type":"function","doc":"> markdown_checkboxes(\"* [ ] task\n* [x] done\")\n    \"    task    done  \"","title":"Examples - Bonfire.Common.Text.markdown_checkboxes/1","ref":"Bonfire.Common.Text.html#markdown_checkboxes/1-examples"},{"type":"function","doc":"Converts text to emotes if the Emote module is enabled.","title":"Bonfire.Common.Text.maybe_emote/3","ref":"Bonfire.Common.Text.html#maybe_emote/3"},{"type":"function","doc":"iex> maybe_emote(\":smile:\", nil, [])\n    \"😄\"","title":"Examples - Bonfire.Common.Text.maybe_emote/3","ref":"Bonfire.Common.Text.html#maybe_emote/3-examples"},{"type":"function","doc":"Converts the input content from markdown to HTML if the markdown library is enabled.\nIf the content starts with an HTML tag or if the markdown library is not enabled, it skips conversion.\n\n    > Bonfire.Common.Text.maybe_markdown_to_html(\"*Hello World*\", [])\n    \"  Hello World  \"\n\n    iex> Bonfire.Common.Text.maybe_markdown_to_html(\" Hello \", [])\n    \" Hello \"\n\n    > Bonfire.Common.Text.maybe_markdown_to_html(\"Not markdown\", [])\n    \" Not markdown \"","title":"Bonfire.Common.Text.maybe_markdown_to_html/2","ref":"Bonfire.Common.Text.html#maybe_markdown_to_html/2"},{"type":"function","doc":"Normalizes HTML content, handling various edge cases.","title":"Bonfire.Common.Text.maybe_normalize_html/1","ref":"Bonfire.Common.Text.html#maybe_normalize_html/1"},{"type":"function","doc":"iex> maybe_normalize_html(\" Test \")\n    \"Test\"\n\n    iex> maybe_normalize_html(\"   \")\n    \"\"","title":"Examples - Bonfire.Common.Text.maybe_normalize_html/1","ref":"Bonfire.Common.Text.html#maybe_normalize_html/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Text.maybe_other_custom_emoji/2","ref":"Bonfire.Common.Text.html#maybe_other_custom_emoji/2"},{"type":"function","doc":"Renders templated content if the `Solid` library is enabled.","title":"Bonfire.Common.Text.maybe_render_templated/2","ref":"Bonfire.Common.Text.html#maybe_render_templated/2"},{"type":"function","doc":"> maybe_render_templated(\"Hello {{name}}\", %{name: \"World\"})\n    \"Hello World\"","title":"Examples - Bonfire.Common.Text.maybe_render_templated/2","ref":"Bonfire.Common.Text.html#maybe_render_templated/2-examples"},{"type":"function","doc":"Sanitizes HTML content to ensure it is safe.\n\nIt is recommended to call this before storing any that data is coming in from the user or from a remote instance","title":"Bonfire.Common.Text.maybe_sane_html/1","ref":"Bonfire.Common.Text.html#maybe_sane_html/1"},{"type":"function","doc":"> maybe_sane_html(\" alert('XSS') \")\n    #=> \"alert('XSS')\" (if HtmlSanitizeEx is enabled)","title":"Examples - Bonfire.Common.Text.maybe_sane_html/1","ref":"Bonfire.Common.Text.html#maybe_sane_html/1-examples"},{"type":"function","doc":"Converts input to snake_case.","title":"Bonfire.Common.Text.maybe_to_snake/1","ref":"Bonfire.Common.Text.html#maybe_to_snake/1"},{"type":"function","doc":"iex> maybe_to_snake(\"CamelCase\")\n    \"camel_case\"","title":"Examples - Bonfire.Common.Text.maybe_to_snake/1","ref":"Bonfire.Common.Text.html#maybe_to_snake/1-examples"},{"type":"function","doc":"Normalizes links in the content based on format.","title":"Bonfire.Common.Text.normalise_links/2","ref":"Bonfire.Common.Text.html#normalise_links/2"},{"type":"function","doc":"> normalise_links(\" Actor \", :markdown)\n    \" Actor \"","title":"Examples - Bonfire.Common.Text.normalise_links/2","ref":"Bonfire.Common.Text.html#normalise_links/2-examples"},{"type":"function","doc":"Generates a *random* string of a given length. \n\nSee also `unique_string/1` and `unique_integer/1`","title":"Bonfire.Common.Text.random_string/1","ref":"Bonfire.Common.Text.html#random_string/1"},{"type":"function","doc":"iex> random_string(5) |> String.length()\n    5\n\n    > random_string()\n    #=> a string of length 10","title":"Examples - Bonfire.Common.Text.random_string/1","ref":"Bonfire.Common.Text.html#random_string/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Text.regex_list/2","ref":"Bonfire.Common.Text.html#regex_list/2"},{"type":"function","doc":"Truncates a string to a maximum length, ensuring it ends on a sentence boundary.","title":"Bonfire.Common.Text.sentence_truncate/3","ref":"Bonfire.Common.Text.html#sentence_truncate/3"},{"type":"function","doc":"iex> sentence_truncate(\"Hello world. This is a test.\", 12)\n    \"Hello world.\"\n\n    iex> sentence_truncate(\"Hello world. This is a test.\", 12, \"...\")\n    \"Hello world....\"","title":"Examples - Bonfire.Common.Text.sentence_truncate/3","ref":"Bonfire.Common.Text.html#sentence_truncate/3-examples"},{"type":"function","doc":"Generates a URL-friendly slug from the given text.\nThe text is downcased, trimmed, spaces are replaced with dashes, and it is URI-encoded.\n\n    iex> Bonfire.Common.Text.slug(\"Hello World!\")\n    \"hello-world!\"\n\n    iex> Bonfire.Common.Text.slug(\"Elixir Programming\")\n    \"elixir-programming\"\n\n    iex> Bonfire.Common.Text.slug(\"Special & Characters\")\n    \"special-&-characters\"","title":"Bonfire.Common.Text.slug/1","ref":"Bonfire.Common.Text.html#slug/1"},{"type":"function","doc":"Splits a string into lines.","title":"Bonfire.Common.Text.split_lines/1","ref":"Bonfire.Common.Text.html#split_lines/1"},{"type":"function","doc":"iex> split_lines(\"line1\\nline2\\r\\nline3\\rline4\")\n    [\"line1\", \"line2\", \"line3\", \"line4\"]","title":"Examples - Bonfire.Common.Text.split_lines/1","ref":"Bonfire.Common.Text.html#split_lines/1-examples"},{"type":"function","doc":"Returns the length of the input based on its type.","title":"Bonfire.Common.Text.strlen/1","ref":"Bonfire.Common.Text.html#strlen/1"},{"type":"function","doc":"iex> strlen(\"hello\")\n    5\n\n    iex> strlen([1, 2, 3])\n    3\n\n    iex> strlen(%{})\n    0\n\n    iex> strlen(nil)\n    0\n\n    iex> strlen(0)\n    0\n\n    iex> strlen(123)\n    1","title":"Examples - Bonfire.Common.Text.strlen/1","ref":"Bonfire.Common.Text.html#strlen/1-examples"},{"type":"function","doc":"Extracts plain text from HTML content.","title":"Bonfire.Common.Text.text_only/1","ref":"Bonfire.Common.Text.html#text_only/1"},{"type":"function","doc":"iex> text_only(\" Text \")\n    \"Text\"\n\n    iex> text_only({:safe, \" Safe Text \"})\n    \"Safe Text\"","title":"Examples - Bonfire.Common.Text.text_only/1","ref":"Bonfire.Common.Text.html#text_only/1-examples"},{"type":"function","doc":"Truncates a string to a maximum length, optionally adding a suffix.","title":"Bonfire.Common.Text.truncate/3","ref":"Bonfire.Common.Text.html#truncate/3"},{"type":"function","doc":"iex> truncate(\"Hello world\", 5)\n    \"Hello\"\n\n    iex> truncate(\"Hello world\", 5, \"...\")\n    \"He...\"\n\n    iex> truncate(\"Hello world\", 7, \"...\")\n    \"Hell...\"","title":"Examples - Bonfire.Common.Text.truncate/3","ref":"Bonfire.Common.Text.html#truncate/3-examples"},{"type":"function","doc":"Truncates the input string at the last underscore (`_`) if its length exceeds the given length.\nIf the input string is shorter than or equal to the given length, it returns the string as is.\n\n    iex> Bonfire.Common.Text.underscore_truncate(\"abc_def_ghi\", 4)\n    \"abc\"\n\n    iex> Bonfire.Common.Text.underscore_truncate(\"abc_def_ghi\", 10)\n    \"abc_def\"\n\n    iex> Bonfire.Common.Text.underscore_truncate(\"abc_def_ghi\", 5)\n    \"abc\"\n\n    iex> Bonfire.Common.Text.underscore_truncate(\"abc_def_ghi\", 0)","title":"Bonfire.Common.Text.underscore_truncate/2","ref":"Bonfire.Common.Text.html#underscore_truncate/2"},{"type":"function","doc":"Generates a *unique* random integer.\n\n\"Unique\" means that this function will not return the same integer more than once on the current BEAM runtime, meaning until the application is next restarted.","title":"Bonfire.Common.Text.unique_integer/0","ref":"Bonfire.Common.Text.html#unique_integer/0"},{"type":"function","doc":"iex> unique_integer()","title":"Examples - Bonfire.Common.Text.unique_integer/0","ref":"Bonfire.Common.Text.html#unique_integer/0-examples"},{"type":"function","doc":"Generates a *unique* random string.\n\n\"Unique\" means that this function will not return the same string more than once on the current BEAM runtime, meaning until the application is next restarted.","title":"Bonfire.Common.Text.unique_string/0","ref":"Bonfire.Common.Text.html#unique_string/0"},{"type":"function","doc":"iex> unique_string()","title":"Examples - Bonfire.Common.Text.unique_string/0","ref":"Bonfire.Common.Text.html#unique_string/0-examples"},{"type":"function","doc":"Converts the first character of a binary to uppercase.","title":"Bonfire.Common.Text.upcase_first/1","ref":"Bonfire.Common.Text.html#upcase_first/1"},{"type":"function","doc":"iex> upcase_first(\"hello\")\n    \"Hello\"","title":"Examples - Bonfire.Common.Text.upcase_first/1","ref":"Bonfire.Common.Text.html#upcase_first/1-examples"},{"type":"function","doc":"Converts an English conjugated verb to its infinitive form using the `Verbs` library. Currently only supports irregular verbs.","title":"Bonfire.Common.Text.verb_infinitive/1","ref":"Bonfire.Common.Text.html#verb_infinitive/1"},{"type":"function","doc":"> verb_infinitive(\"running\")\n    \"run\"","title":"Examples - Bonfire.Common.Text.verb_infinitive/1","ref":"Bonfire.Common.Text.html#verb_infinitive/1-examples"},{"type":"module","doc":"","title":"Bonfire.Common.TextExtended","ref":"Bonfire.Common.TextExtended.html"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.blank?/1","ref":"Bonfire.Common.TextExtended.html#blank?/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.camelise/1","ref":"Bonfire.Common.TextExtended.html#camelise/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.code_syntax/2","ref":"Bonfire.Common.TextExtended.html#code_syntax/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.contains?/2","ref":"Bonfire.Common.TextExtended.html#contains?/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.contains_html?/1","ref":"Bonfire.Common.TextExtended.html#contains_html?/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.hash/1","ref":"Bonfire.Common.TextExtended.html#hash/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.hash/2","ref":"Bonfire.Common.TextExtended.html#hash/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.list_checkboxes/1","ref":"Bonfire.Common.TextExtended.html#list_checkboxes/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.list_checked_boxes/1","ref":"Bonfire.Common.TextExtended.html#list_checked_boxes/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.list_unchecked_boxes/1","ref":"Bonfire.Common.TextExtended.html#list_unchecked_boxes/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.make_local_links_live/1","ref":"Bonfire.Common.TextExtended.html#make_local_links_live/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.markdown_checkboxes/1","ref":"Bonfire.Common.TextExtended.html#markdown_checkboxes/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_emote/1","ref":"Bonfire.Common.TextExtended.html#maybe_emote/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_emote/2","ref":"Bonfire.Common.TextExtended.html#maybe_emote/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_emote/3","ref":"Bonfire.Common.TextExtended.html#maybe_emote/3"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_markdown_to_html/1","ref":"Bonfire.Common.TextExtended.html#maybe_markdown_to_html/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_markdown_to_html/2","ref":"Bonfire.Common.TextExtended.html#maybe_markdown_to_html/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_normalize_html/1","ref":"Bonfire.Common.TextExtended.html#maybe_normalize_html/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_other_custom_emoji/2","ref":"Bonfire.Common.TextExtended.html#maybe_other_custom_emoji/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_render_templated/2","ref":"Bonfire.Common.TextExtended.html#maybe_render_templated/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_sane_html/1","ref":"Bonfire.Common.TextExtended.html#maybe_sane_html/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.maybe_to_snake/1","ref":"Bonfire.Common.TextExtended.html#maybe_to_snake/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.normalise_links/1","ref":"Bonfire.Common.TextExtended.html#normalise_links/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.normalise_links/2","ref":"Bonfire.Common.TextExtended.html#normalise_links/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.random_string/0","ref":"Bonfire.Common.TextExtended.html#random_string/0"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.random_string/1","ref":"Bonfire.Common.TextExtended.html#random_string/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.regex_list/2","ref":"Bonfire.Common.TextExtended.html#regex_list/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.sentence_truncate/1","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.sentence_truncate/2","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.sentence_truncate/3","ref":"Bonfire.Common.TextExtended.html#sentence_truncate/3"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.slug/1","ref":"Bonfire.Common.TextExtended.html#slug/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.split_lines/1","ref":"Bonfire.Common.TextExtended.html#split_lines/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.strlen/1","ref":"Bonfire.Common.TextExtended.html#strlen/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.text_only/1","ref":"Bonfire.Common.TextExtended.html#text_only/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.truncate/1","ref":"Bonfire.Common.TextExtended.html#truncate/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.truncate/2","ref":"Bonfire.Common.TextExtended.html#truncate/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.truncate/3","ref":"Bonfire.Common.TextExtended.html#truncate/3"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.underscore_truncate/1","ref":"Bonfire.Common.TextExtended.html#underscore_truncate/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.underscore_truncate/2","ref":"Bonfire.Common.TextExtended.html#underscore_truncate/2"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.unique_integer/0","ref":"Bonfire.Common.TextExtended.html#unique_integer/0"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.unique_string/0","ref":"Bonfire.Common.TextExtended.html#unique_string/0"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.upcase_first/1","ref":"Bonfire.Common.TextExtended.html#upcase_first/1"},{"type":"function","doc":"","title":"Bonfire.Common.TextExtended.verb_infinitive/1","ref":"Bonfire.Common.TextExtended.html#verb_infinitive/1"},{"type":"module","doc":"Helpers for handling the type of objects (structs and more)","title":"Bonfire.Common.Types","ref":"Bonfire.Common.Types.html"},{"type":"function","doc":"Outputs the names of all object types for the purpose of adding to the localisation strings (as long as the output is piped through to `Bonfire.Common.Localise.Gettext.localise_strings/1` at compile time)\n\n    > all_object_type_names()\n    [\"User\", \"Delete this User\", \"Post\", \"Delete this Post\", ...]","title":"Bonfire.Common.Types.all_object_type_names/0","ref":"Bonfire.Common.Types.html#all_object_type_names/0"},{"type":"function","doc":"Takes an object or module name and checks if it defines a struct.","title":"Bonfire.Common.Types.defines_struct?/1","ref":"Bonfire.Common.Types.html#defines_struct?/1"},{"type":"function","doc":"iex> defines_struct?(Needle.Pointer)\n    true\n\n    iex> defines_struct?(%{__struct__: Bonfire.Common})\n    true\n\n    iex> defines_struct?(%{some_key: \"some_value\"})\n    false","title":"Examples - Bonfire.Common.Types.defines_struct?/1","ref":"Bonfire.Common.Types.html#defines_struct?/1-examples"},{"type":"function","doc":"Takes a value and returns true if it's a number or can be converted to a float.","title":"Bonfire.Common.Types.is_numeric/1","ref":"Bonfire.Common.Types.html#is_numeric/1"},{"type":"function","doc":"iex> is_numeric(123)\n    true\n\n    iex> is_numeric(\"123.45\")\n    true\n\n    iex> is_numeric(\"abc\")\n    false","title":"Examples - Bonfire.Common.Types.is_numeric/1","ref":"Bonfire.Common.Types.html#is_numeric/1-examples"},{"type":"function","doc":"Takes a string and returns true if it is a valid UUID or ULID.","title":"Bonfire.Common.Types.is_uid?/2","ref":"Bonfire.Common.Types.html#is_uid?/2"},{"type":"function","doc":"iex> is_uid?(\"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\")\n    true\n\n    iex> is_uid?(\"550e8400-e29b-41d4-a716-446655440000\")\n    true\n\n    iex> is_uid?(\"invalid_id\")\n    false","title":"Examples - Bonfire.Common.Types.is_uid?/2","ref":"Bonfire.Common.Types.html#is_uid?/2-examples"},{"type":"function","doc":"Takes a map or list of maps, and if the value of a key in the map is a ULID, it replaces it with the corresponding Crockford Base32 encoded string.","title":"Bonfire.Common.Types.maybe_convert_ulids/1","ref":"Bonfire.Common.Types.html#maybe_convert_ulids/1"},{"type":"function","doc":"iex> maybe_convert_ulids(%{key: \"01FJ4ZZZ8P5RMZMM00XDDDF8\"})\n    %{key: \"01FJ4ZZZ8P5RMZMM00XDDDF8\"}\n\n    iex> maybe_convert_ulids([%{key: \"01FJ4ZZZ8P5RMZMM00XDDDF8\"}])\n    [%{key: \"01FJ4ZZZ8P5RMZMM00XDDDF8\"}]","title":"Examples - Bonfire.Common.Types.maybe_convert_ulids/1","ref":"Bonfire.Common.Types.html#maybe_convert_ulids/1-examples"},{"type":"function","doc":"Takes a string and returns an atom if it can be converted to one, else returns the input itself.","title":"Bonfire.Common.Types.maybe_to_atom/1","ref":"Bonfire.Common.Types.html#maybe_to_atom/1"},{"type":"function","doc":"iex> maybe_to_atom(\"atom_name\")\n    :atom_name\n\n    iex> maybe_to_atom(\"def_non_existing_atom\")\n    \"def_non_existing_atom\"","title":"Examples - Bonfire.Common.Types.maybe_to_atom/1","ref":"Bonfire.Common.Types.html#maybe_to_atom/1-examples"},{"type":"function","doc":"Takes a string or an atom and returns an atom if it is one or can be converted to one, else returns nil.","title":"Bonfire.Common.Types.maybe_to_atom!/1","ref":"Bonfire.Common.Types.html#maybe_to_atom!/1"},{"type":"function","doc":"iex> maybe_to_atom!(\"atom_name\")\n    :atom_name\n\n    iex> maybe_to_atom!(\"def_non_existing_atom\")\n    nil","title":"Examples - Bonfire.Common.Types.maybe_to_atom!/1","ref":"Bonfire.Common.Types.html#maybe_to_atom!/1-examples"},{"type":"function","doc":"Takes a string or atom and attempts to convert it to an atom or module, depending on the flags.","title":"Bonfire.Common.Types.maybe_to_atom_or_module/3","ref":"Bonfire.Common.Types.html#maybe_to_atom_or_module/3"},{"type":"function","doc":"iex> maybe_to_atom_or_module(\"Enum\", false, true)\n    Enum\n\n    iex> maybe_to_atom_or_module(:some_atom, false, true)\n    :some_atom\n\n    iex> maybe_to_atom_or_module(:some_atom, false, true)\n    :some_atom","title":"Examples - Bonfire.Common.Types.maybe_to_atom_or_module/3","ref":"Bonfire.Common.Types.html#maybe_to_atom_or_module/3-examples"},{"type":"function","doc":"Converts a value to a floating-point number if possible. If the value cannot be converted to a float, it returns a fallback value (which defaults to 0 if not provided).","title":"Bonfire.Common.Types.maybe_to_float/2","ref":"Bonfire.Common.Types.html#maybe_to_float/2"},{"type":"function","doc":"iex> maybe_to_float(123)\n    123\n\n    iex> maybe_to_float(\"123.45\")\n    123.45\n\n    iex> maybe_to_float(\"abc\", 0.0)\n    0.0","title":"Examples - Bonfire.Common.Types.maybe_to_float/2","ref":"Bonfire.Common.Types.html#maybe_to_float/2-examples"},{"type":"function","doc":"Converts a value to an integer if possible. If the value is not an integer, it attempts to convert it to a float and then rounds it to the nearest integer. Otherwise it returns a fallback value (which defaults to 0 if not provided).","title":"Bonfire.Common.Types.maybe_to_integer/2","ref":"Bonfire.Common.Types.html#maybe_to_integer/2"},{"type":"function","doc":"iex> maybe_to_integer(123.45)\n    123\n\n    iex> maybe_to_integer(\"123\")\n    123\n\n    iex> maybe_to_integer(\"abc\", 0)\n    0","title":"Examples - Bonfire.Common.Types.maybe_to_integer/2","ref":"Bonfire.Common.Types.html#maybe_to_integer/2-examples"},{"type":"function","doc":"Takes a string and returns the corresponding Elixir module if it exists and is not disabled in the app.","title":"Bonfire.Common.Types.maybe_to_module/2","ref":"Bonfire.Common.Types.html#maybe_to_module/2"},{"type":"function","doc":"iex> maybe_to_module(\"Enum\")\n    Enum\n\n    iex> maybe_to_module(\"NonExistentModule\")\n    nil","title":"Examples - Bonfire.Common.Types.maybe_to_module/2","ref":"Bonfire.Common.Types.html#maybe_to_module/2-examples"},{"type":"function","doc":"Takes a string as input, converts it to snake_case, and converts it to an atom if such an atom exists, otherwise returns nil.","title":"Bonfire.Common.Types.maybe_to_snake_atom/1","ref":"Bonfire.Common.Types.html#maybe_to_snake_atom/1"},{"type":"function","doc":"iex> maybe_to_snake_atom(\"SomeString\")\n    :some_string\n\n    iex> maybe_to_snake_atom(\"DefNonExistingAtom\")\n    nil","title":"Examples - Bonfire.Common.Types.maybe_to_snake_atom/1","ref":"Bonfire.Common.Types.html#maybe_to_snake_atom/1-examples"},{"type":"function","doc":"Handles multiple cases where the input value is of a different type (atom, list, tuple, etc.) and returns a string representation of it.","title":"Bonfire.Common.Types.maybe_to_string/1","ref":"Bonfire.Common.Types.html#maybe_to_string/1"},{"type":"function","doc":"iex> maybe_to_string(:some_atom)\n    \"some_atom\"\n\n    iex> maybe_to_string([1, 2, 3])\n    \"[1, 2, 3]\"\n\n    iex> maybe_to_string({:a, :tuple})\n    \"a: tuple\"","title":"Examples - Bonfire.Common.Types.maybe_to_string/1","ref":"Bonfire.Common.Types.html#maybe_to_string/1-examples"},{"type":"function","doc":"Takes a module name (as a string or an atom) and converts it to a human-readable string. \n\nIt removes the `Elixir.` prefix (if it exists) and any other prefixes (e.g., `Bonfire.Common.`) and converts the final part of the module name to a string in title case (e.g., `Types`).","title":"Bonfire.Common.Types.module_to_human_readable/1","ref":"Bonfire.Common.Types.html#module_to_human_readable/1"},{"type":"function","doc":"iex> module_to_human_readable(\"Elixir.Bonfire.Common.Types\")\n    \"Types\"\n\n    iex> module_to_human_readable(Bonfire.Common.Types)\n    \"Types\"","title":"Examples - Bonfire.Common.Types.module_to_human_readable/1","ref":"Bonfire.Common.Types.html#module_to_human_readable/1-examples"},{"type":"function","doc":"Takes a module atom and converts it to a string, or a string and removes the `Elixir.` prefix if it exists.","title":"Bonfire.Common.Types.module_to_str/1","ref":"Bonfire.Common.Types.html#module_to_str/1"},{"type":"function","doc":"iex> module_to_str(SomeModule)\n    \"SomeModule\"\n\n    iex> module_to_str(Elixir.SomeModule)\n    \"SomeModule\"","title":"Examples - Bonfire.Common.Types.module_to_str/1","ref":"Bonfire.Common.Types.html#module_to_str/1-examples"},{"type":"function","doc":"Takes an object, module name, or string, and returns the type of the object. \n\nThe function uses various patterns to match different object types (such as associations, Pointables, edges/verbs, etc.). If none of the patterns match, the function returns nil.","title":"Bonfire.Common.Types.object_type/2","ref":"Bonfire.Common.Types.html#object_type/2"},{"type":"function","doc":"iex> object_type(%Ecto.Association.NotLoaded{})\n    nil\n\n    > object_type(%{table_id: \"601NTERTAB1EF0RA11TAB1ES00\"})\n    Needle.Table\n\n    iex> object_type(%{pointer_id: \"User\"})\n    Bonfire.Data.Identity.User\n\n    iex> object_type(\"User\")\n    Bonfire.Data.Identity.User\n\n    iex> object_type(:some_atom)\n    :some_atom","title":"Examples - Bonfire.Common.Types.object_type/2","ref":"Bonfire.Common.Types.html#object_type/2-examples"},{"type":"function","doc":"Outputs a human-readable representation of an object type.","title":"Bonfire.Common.Types.object_type_display/1","ref":"Bonfire.Common.Types.html#object_type_display/1"},{"type":"function","doc":"iex> object_type_display(:user)\n    \"user\"\n\n    > object_type_display(%Bonfire.Data.Social.APActivity{})\n    \"apactivity\"","title":"Examples - Bonfire.Common.Types.object_type_display/1","ref":"Bonfire.Common.Types.html#object_type_display/1-examples"},{"type":"function","doc":"Used for mapping schema types to user-friendly names. Given a string representing a schema type name, returns a sanitised version of it, or nil for object types (or mixins) that shouldn't be displayed.","title":"Bonfire.Common.Types.sanitise_name/1","ref":"Bonfire.Common.Types.html#sanitise_name/1"},{"type":"function","doc":"iex> sanitise_name(\"Apactivity\")\n    \"Federated Object\"\n\n    iex> sanitise_name(\"Settings\")\n    \"Setting\"\n\n    iex> sanitise_name(\"Created\")\n    nil","title":"Examples - Bonfire.Common.Types.sanitise_name/1","ref":"Bonfire.Common.Types.html#sanitise_name/1-examples"},{"type":"function","doc":"Given a schema module, returns its table ID (i.e. Pointable ULID).","title":"Bonfire.Common.Types.table_id/1","ref":"Bonfire.Common.Types.html#table_id/1"},{"type":"function","doc":"> table_id(Bonfire.Data.Social.APActivity)\n    \"30NF1REAPACTTAB1ENVMBER0NE\"","title":"Examples - Bonfire.Common.Types.table_id/1","ref":"Bonfire.Common.Types.html#table_id/1-examples"},{"type":"function","doc":"Given an object or module name, returns its respective table table ID (i.e. Pointable ULID).","title":"Bonfire.Common.Types.table_type/1","ref":"Bonfire.Common.Types.html#table_type/1"},{"type":"function","doc":"> table_type(%Bonfire.Data.Social.APActivity{})\n    \"30NF1REAPACTTAB1ENVMBER0NE\"\n    \n    iex> table_type(%Needle.Pointer{table_id: \"30NF1REAPACTTAB1ENVMBER0NE\"})\n    \"30NF1REAPACTTAB1ENVMBER0NE\"\n\n    > table_type(Bonfire.Data.Social.APActivity)\n    \"30NF1REAPACTTAB1ENVMBER0NE\"","title":"Examples - Bonfire.Common.Types.table_type/1","ref":"Bonfire.Common.Types.html#table_type/1-examples"},{"type":"function","doc":"Given a list of schema types, returns a list of their respective table types. Filters out any empty values. \n\n    > table_types([%Needle.Pointer{table_id: \"30NF1REAPACTTAB1ENVMBER0NE\"}, %Bonfire.Data.Social.APActivity{}])\n    [\"30NF1REAPACTTAB1ENVMBER0NE\"]\n\n    Given a single schema type, it returns its respective table type.\n\n    > table_types(Bonfire.Data.Social.APActivity)\n    [\"30NF1REAPACTTAB1ENVMBER0NE\"]","title":"Bonfire.Common.Types.table_types/1","ref":"Bonfire.Common.Types.html#table_types/1"},{"type":"function","doc":"Takes an object and returns its data type as a module name or atom.","title":"Bonfire.Common.Types.typeof/1","ref":"Bonfire.Common.Types.html#typeof/1"},{"type":"function","doc":"iex> typeof(%{__struct__: Ecto.Schema})\n    Ecto.Schema\n\n    iex> typeof(%{__context__: nil, __changed__: nil})\n    :assigns\n\n    iex> typeof(nil)\n    :empty\n\n    iex> typeof(%Ecto.Changeset{})\n    Ecto.Changeset\n\n    iex> typeof([1, 2])\n    List\n\n    iex> typeof([])\n    :empty\n\n    iex> typeof(\"string\")\n    String\n\n    iex> typeof(:atom)\n    Atom\n\n    iex> typeof(123)\n    Integer\n\n    iex> typeof(%{id: 1})\n    Map\n\n    iex> typeof(%{})\n    :empty\n\n    iex> typeof(3.14)\n    Float\n\n    iex> typeof({:ok, 42})\n    Tuple\n\n    iex> typeof(fn -> :ok end)\n    Function\n\n    iex> typeof(self())\n    Process\n\n    iex> typeof(Port.open({:spawn, \"cat\"}, [:binary]))\n    Port\n\n    iex> typeof(make_ref())\n    :reference\n\n    iex> typeof(%{__struct__: Bonfire.Classify.Category})\n    Bonfire.Classify.Category","title":"Examples - Bonfire.Common.Types.typeof/1","ref":"Bonfire.Common.Types.html#typeof/1-examples"},{"type":"function","doc":"Takes an object and returns a single ULID (Universally Unique Lexicographically Sortable Identifier) ID(s) if present in the object.","title":"Bonfire.Common.Types.uid/2","ref":"Bonfire.Common.Types.html#uid/2"},{"type":"function","doc":"iex> uid(%{pointer_id: \"01J3MNBPD0VX96MFY9B15BCHYP\"})\n    \"01J3MNBPD0VX96MFY9B15BCHYP\"\n\n    iex> uid(%{pointer: %{id: \"01J3MNBPD0VX96MFY9B15BCHYP\"}})\n    \"01J3MNBPD0VX96MFY9B15BCHYP\"\n\n    iex> uid(%{id: \"01J3MNBPD0VX96MFY9B15BCHYP\"})\n    \"01J3MNBPD0VX96MFY9B15BCHYP\"\n    \n    iex> uid(\"01J3MNBPD0VX96MFY9B15BCHYP\")\n    \"01J3MNBPD0VX96MFY9B15BCHYP\"\n\n    > uid([\"01J3MNBPD0VX96MFY9B15BCHYP\", \"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\"])\n    # ** (ArgumentError) Expected an ID (ULID or UUID) or an object or list containing a single one, but got several\n\n    iex> uid(\"invalid_id\")\n    nil\n\n    iex> uid(\"invalid_id\", :fallback)\n    :fallback","title":"Examples - Bonfire.Common.Types.uid/2","ref":"Bonfire.Common.Types.html#uid/2-examples"},{"type":"function","doc":"Takes an object and returns the ULID (Universally Unique Lexicographically Sortable Identifier) ID if present in the object. Throws an error if a ULID ID is not present.","title":"Bonfire.Common.Types.uid!/1","ref":"Bonfire.Common.Types.html#uid!/1"},{"type":"function","doc":"iex> uid!(%{pointer_id: \"01J3MNBPD0VX96MFY9B15BCHYP\"})\n    \"01J3MNBPD0VX96MFY9B15BCHYP\"\n\n    iex> uid!(\"invalid_id\")\n    ** (RuntimeError) Expected an object or ID (ULID)","title":"Examples - Bonfire.Common.Types.uid!/1","ref":"Bonfire.Common.Types.html#uid!/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Types.uid_or_uids/1","ref":"Bonfire.Common.Types.html#uid_or_uids/1"},{"type":"function","doc":"Takes an object or list of objects and returns a list of ULIDs (Universally Unique Lexicographically Sortable Identifier) ID(s) if present.","title":"Bonfire.Common.Types.uids/2","ref":"Bonfire.Common.Types.html#uids/2"},{"type":"function","doc":"iex> uids(%{pointer_id: \"01J3MNBPD0VX96MFY9B15BCHYP\"})\n    [\"01J3MNBPD0VX96MFY9B15BCHYP\"]\n\n    iex> uids(%{pointer: %{id: \"01J3MNBPD0VX96MFY9B15BCHYP\"}})\n    [\"01J3MNBPD0VX96MFY9B15BCHYP\"]\n\n    iex> uids([%{id: \"01J3MNBPD0VX96MFY9B15BCHYP\"}])\n    [\"01J3MNBPD0VX96MFY9B15BCHYP\"]\n    \n    iex> uids(\"01J3MNBPD0VX96MFY9B15BCHYP\")\n    [\"01J3MNBPD0VX96MFY9B15BCHYP\"]\n\n    iex> uids([\"01J3MNBPD0VX96MFY9B15BCHYP\", \"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\"])\n    [\"01J3MNBPD0VX96MFY9B15BCHYP\", \"01J3MQ2Q4RVB1WTE3KT1D8ZNX1\"]\n\n    iex> uids(\"invalid_id\")\n    []","title":"Examples - Bonfire.Common.Types.uids/2","ref":"Bonfire.Common.Types.html#uids/2-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Types.uids_or/2","ref":"Bonfire.Common.Types.html#uids_or/2"},{"type":"module","doc":"URI/URL/path helpers","title":"Bonfire.Common.URIs","ref":"Bonfire.Common.URIs.html"},{"type":"function","doc":"Returns the base domain from the given URI or endpoint.\n\n    iex> base_domain(%URI{host: \"example.com\", port: 443})\n    \"example.com\"","title":"Bonfire.Common.URIs.base_domain/1","ref":"Bonfire.Common.URIs.html#base_domain/1"},{"type":"function","doc":"Returns the homepage URI (as struct) of the local instance.\n\n    > %URI{scheme: \"http\", host: \"localhost\"} = base_uri(:my_endpoint)","title":"Bonfire.Common.URIs.base_uri/1","ref":"Bonfire.Common.URIs.html#base_uri/1"},{"type":"function","doc":"Return the homepage URL (as string) of the local instance","title":"Bonfire.Common.URIs.base_url/1","ref":"Bonfire.Common.URIs.html#base_url/1"},{"type":"function","doc":"TODOC","title":"Bonfire.Common.URIs.based_url/2","ref":"Bonfire.Common.URIs.html#based_url/2"},{"type":"function","doc":"Returns the canonical URL (i.e., the one used for ActivityPub federation) of an object.","title":"Bonfire.Common.URIs.canonical_url/1","ref":"Bonfire.Common.URIs.html#canonical_url/1"},{"type":"function","doc":"iex> canonical_url(%{canonical_uri: \"http://example.com\"})\n    \"http://example.com\"\n\n    iex> canonical_url(%{canonical_url: \"http://example.com\"})\n    \"http://example.com\"\n\n    iex> canonical_url(%{\"canonicalUrl\" => \"http://example.com\"})\n    \"http://example.com\"\n\n    iex> canonical_url(%{peered: %{canonical_uri: \"http://example.com\"}})\n    \"http://example.com\"\n\n    iex> canonical_url(%{character: %{canonical_uri: \"http://example.com\"}})\n    \"http://example.com\"\n\n    iex> canonical_url(%{character: %{peered: %{canonical_uri: \"http://example.com\"}}})\n    \"http://example.com\"\n\n    iex> canonical_url(%{peered: %Ecto.Association.NotLoaded{}})\n    nil\n\n    iex> canonical_url(%{created: %Ecto.Association.NotLoaded{}})\n    nil\n\n    iex> canonical_url(%{character: %Ecto.Association.NotLoaded{}})\n    nil\n\n    iex> canonical_url(%{character: %{peered: %{}}})\n    nil\n\n    iex> canonical_url(%{path: \"http://example.com\"})\n    \"http://example.com\"\n\n    iex> canonical_url(%{other: \"data\"})\n    nil","title":"Examples - Bonfire.Common.URIs.canonical_url/1","ref":"Bonfire.Common.URIs.html#canonical_url/1-examples"},{"type":"function","doc":"Removes the scheme from a URL to get the display URL.\n\n    iex> display_url(\"https://example.com/path\")\n    \"example.com/path\"\n\n    iex> display_url(\"http://example.com/path\")\n    \"example.com/path\"\n\n    iex> display_url(\"/path\")\n    \"/path\"","title":"Bonfire.Common.URIs.display_url/1","ref":"Bonfire.Common.URIs.html#display_url/1"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.fallback/1","ref":"Bonfire.Common.URIs.html#fallback/1"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.fallback/2","ref":"Bonfire.Common.URIs.html#fallback/2"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.fallback/3","ref":"Bonfire.Common.URIs.html#fallback/3"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.maybe_generate_canonical_url/1","ref":"Bonfire.Common.URIs.html#maybe_generate_canonical_url/1"},{"type":"function","doc":"Returns the path (URL on the local instance) for the given object/struct (eg. a User), view or schema module, or path name (atom defined in routes), along with optional arguments.\n\nReturns the path (URL on the local instance) for the given object/struct (e.g., a User), view or schema module, or path name (atom defined in routes), along with optional arguments.","title":"Bonfire.Common.URIs.path/3","ref":"Bonfire.Common.URIs.html#path/3"},{"type":"function","doc":"> path(:user, [1], [])\n    \"/users/1\"\n\n    > path(User, [1], [])\n    \"/users/1\"\n\n    > path(%{id: \"1\"}, :show, [])\n    \"/users/1/show\"\n\n    > path(%{id: \"1\"}, [some: :args], [])\n    \"/users/1/some_args\"\n\n    iex> path(\"12345\", [some: :args], [])\n    nil","title":"Examples - Bonfire.Common.URIs.path/3","ref":"Bonfire.Common.URIs.html#path/3-examples"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.path_by_id/4","ref":"Bonfire.Common.URIs.html#path_by_id/4"},{"type":"function","doc":"","title":"Bonfire.Common.URIs.remote_canonical_url/1","ref":"Bonfire.Common.URIs.html#remote_canonical_url/1"},{"type":"function","doc":"Generates a static path based on the given path and endpoint module.\n\n    > static_path(\"/assets/image.png\")\n    \"/assets/image.png\"","title":"Bonfire.Common.URIs.static_path/2","ref":"Bonfire.Common.URIs.html#static_path/2"},{"type":"function","doc":"Returns the full URL (including domain and path) for a given object, module, or path name.\n\n    > url_path(:user, [1])\n    \"http://localhost:4000/discussion/user/1\"","title":"Bonfire.Common.URIs.url_path/2","ref":"Bonfire.Common.URIs.html#url_path/2"},{"type":"function","doc":"Validates a URI string and returns a boolean.","title":"Bonfire.Common.URIs.valid_url?/1","ref":"Bonfire.Common.URIs.html#valid_url?/1"},{"type":"function","doc":"iex> true == validate_uri(\"http://example.com\")\n\n    iex> false == validate_uri(\"invalid_uri\")","title":"Examples - Bonfire.Common.URIs.valid_url?/1","ref":"Bonfire.Common.URIs.html#valid_url?/1-examples"},{"type":"function","doc":"Validates a URI string and returns a tuple.","title":"Bonfire.Common.URIs.validate_uri/1","ref":"Bonfire.Common.URIs.html#validate_uri/1"},{"type":"function","doc":"iex> {:ok, %URI{scheme: \"http\", host: \"example.com\"}} = validate_uri(\"http://example.com\")\n\n    iex> {:error, %URI{scheme: nil, host: nil}} = validate_uri(\"invalid_uri\")","title":"Examples - Bonfire.Common.URIs.validate_uri/1","ref":"Bonfire.Common.URIs.html#validate_uri/1-examples"},{"type":"module","doc":"Various very commonly used utility functions for the Bonfire application.\n\nThis module should contain only a few generic and/or heavily-used functions, and any other functions should be in more specific modules (or in other extensions altogether) for e.g.: \n\n- `Bonfire.Common.Enums` for functions around maps, structs, keyword lists, and the like\n- `Bonfire.Common.Types` for object types\n- `Bonfire.Common.URIs` and `Linkify` for URI handling\n- `Bonfire.Common.DatesTimes` for date/time helpers\n- `Bonfire.Common.E` to extract nested data from an object\n- `Bonfire.Common.Errors` and `Bonfire.Fail` for error handling\n- `Bonfire.Common.Extend` for functions around modularity\n- `Bonfire.Common.Opts` for handling function options\n- `Bonfire.Common.Config` for handling app-wide config\n- `Bonfire.Common.Settings` for handling account/user/instance level settings\n- `Bonfire.Common.HTTP` for HTTP requests\n- `Bonfire.Common.Cache` for caching\n- `Bonfire.Common.Text` for plain or rich text\n- `Bonfire.Common.Localise` for app localisation\n- `Bonfire.Common.Media` and `Bonfire.Files` for avatars/images/videos/etc\n- `Bonfire.Common.Repo` and `Needle` for database access\n- `Bonfire.Common.PubSub` for pub/sub\n\nWe may also want to consider reusing functions from existing utils libraries when possible and contributing missing ones there, for example:\n\n- https://hexdocs.pm/moar/readme.html\n- https://hexdocs.pm/bunch/api-reference.html\n- https://hexdocs.pm/swiss/api-reference.html\n- https://hexdocs.pm/wuunder_utils/api-reference.html\n- https://github.com/cozy-elixir","title":"Bonfire.Common.Utils","ref":"Bonfire.Common.Utils.html"},{"type":"function","doc":"","title":"Bonfire.Common.Utils.apply_error/3","ref":"Bonfire.Common.Utils.html#apply_error/3"},{"type":"function","doc":"Runs a function asynchronously in a Task. Simply a shorthand for calling functions in `Task` and `Task.Supervisor` but with support for multi-tenancy in the spawned process. \n\n- `Task.async/1` the caller creates a new process links and monitors it. Once the task action finishes, a message is sent to the caller with the result. `Task.await/2` is used to read the message sent by the task. When using `async`, you *must* `await` a reply as they are always sent. \n\n- `Task.start_link/1` is suggested instead if you are not expecting a reply. It starts a statically supervised task as part of a supervision tree, linked to the calling process (meaning it will be stopped when the caller stops). \n\n- `Task.start/1` can be used for fire-and-forget tasks, like side-effects, when you have no interest on its results nor if it completes successfully (because if the server is shut down it won't be restarted).\n\nFor more serious tasks, consider using `Oban` or `apply_task_supervised/3` for supervised tasks when possible:\n\n- `Task.Supervisor.start_child/2` allows you to start a fire-and-forget task when you don't care about its results or if it completes successfully or not.\n\n- `Task.Supervisor.async/2` + `Task.await/2` allows you to execute tasks concurrently and retrieve its result. If the task fails, the caller will also fail.","title":"Bonfire.Common.Utils.apply_task/3","ref":"Bonfire.Common.Utils.html#apply_task/3"},{"type":"function","doc":"- `function`: The type of task to start (e.g. `:async`, `:start_link`, or `:start`).\n- `fun`: The function to execute async.\n- `opts`: Options for task execution, including:\n  - `:module` - The module to use for task execution (defaults to `Task`).","title":"Parameters - Bonfire.Common.Utils.apply_task/3","ref":"Bonfire.Common.Utils.html#apply_task/3-parameters"},{"type":"function","doc":"> apply_task(:async, fn -> IO.puts(\"Async task\") end)\n    # Output: \"Async task\"\n\n    > {apply_task(:start, fn -> IO.puts(\"Fire-and-forget task\") end)\n    # Output: \"Fire-and-forget task\"\n\n    > apply_task(:start_link, fn -> IO.puts(\"Supervised task\") end)\n    # Output: \"Supervised task\"","title":"Examples - Bonfire.Common.Utils.apply_task/3","ref":"Bonfire.Common.Utils.html#apply_task/3-examples"},{"type":"function","doc":"Runs a function asynchronously using `Task.Supervisor`. This is similar to `apply_task/3` but specifically uses `Task.Supervisor` for supervision.","title":"Bonfire.Common.Utils.apply_task_supervised/3","ref":"Bonfire.Common.Utils.html#apply_task_supervised/3"},{"type":"function","doc":"- `module`: The supervisor module to use for task execution\n  - `fun`: The function to execute async\n  - `opts`: Options for task execution, including:\n    - `:function` - The `Task.Supervisor` function to use for task execution (defaults to `:async`).","title":"Parameters - Bonfire.Common.Utils.apply_task_supervised/3","ref":"Bonfire.Common.Utils.html#apply_task_supervised/3-parameters"},{"type":"function","doc":"> apply_task_supervised(MySupervisor, fn -> IO.puts(\"Supervised async task\") end)\n    ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started\n    # because `MySupervisor` is not defined and/or started ^","title":"Examples - Bonfire.Common.Utils.apply_task_supervised/3","ref":"Bonfire.Common.Utils.html#apply_task_supervised/3-examples"},{"type":"macro","doc":"","title":"Bonfire.Common.Utils.common_utils/1","ref":"Bonfire.Common.Utils.html#common_utils/1"},{"type":"function","doc":"Returns the current account from socket, assigns, or options.\n\nThis function traverses various possible structures to find and return the current account.","title":"Bonfire.Common.Utils.current_account/2","ref":"Bonfire.Common.Utils.html#current_account/2"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_account(%{current_account: %{id: \"account1\"}})\n    %{id: \"account1\"}\n\n    iex> Bonfire.Common.Utils.current_account(%{assigns: %{current_account: %{id: \"account2\"}}})\n    %{id: \"account2\"}\n\n    iex> Bonfire.Common.Utils.current_account(%{socket: %{assigns: %{current_account: %{id: \"account3\"}}}})\n    %{id: \"account3\"}\n\n    iex> Bonfire.Common.Utils.current_account([current_account: %{id: \"account4\"}])\n    %{id: \"account4\"}","title":"Examples - Bonfire.Common.Utils.current_account/2","ref":"Bonfire.Common.Utils.html#current_account/2-examples"},{"type":"function","doc":"Returns a list of current account IDs and/or user IDs.\n\nThis function returns a keyword list with the current account IDs and/or user IDs.","title":"Bonfire.Common.Utils.current_account_and_or_user_ids/1","ref":"Bonfire.Common.Utils.html#current_account_and_or_user_ids/1"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_account_and_or_user_ids(%{current_account_id: \"2CC0VNTSARE1S01AT10NGR0VPS\", current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"})\n    [account: \"2CC0VNTSARE1S01AT10NGR0VPS\", user: \"5EVSER1S0STENS1B1YHVMAN01D\"]\n    \n    iex> Bonfire.Common.Utils.current_account_and_or_user_ids(%{current_account: %{id: \"2CC0VNTSARE1S01AT10NGR0VPS\"}, current_user: %{id: \"5EVSER1S0STENS1B1YHVMAN01D\"}})\n    [account: \"2CC0VNTSARE1S01AT10NGR0VPS\", user: \"5EVSER1S0STENS1B1YHVMAN01D\"]\n\n    iex> Bonfire.Common.Utils.current_account_and_or_user_ids(%{current_account_id: \"2CC0VNTSARE1S01AT10NGR0VPS\"})\n    [account: \"2CC0VNTSARE1S01AT10NGR0VPS\"]\n\n    iex> Bonfire.Common.Utils.current_account_and_or_user_ids(%{current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"})\n    [user: \"5EVSER1S0STENS1B1YHVMAN01D\"]\n\n    iex> Bonfire.Common.Utils.current_account_and_or_user_ids(%{})\n    []","title":"Examples - Bonfire.Common.Utils.current_account_and_or_user_ids/1","ref":"Bonfire.Common.Utils.html#current_account_and_or_user_ids/1-examples"},{"type":"function","doc":"(Re)authenticates the current account using the provided password.\n\nRaises an exception if the credentials are invalid.","title":"Bonfire.Common.Utils.current_account_auth!/2","ref":"Bonfire.Common.Utils.html#current_account_auth!/2"},{"type":"function","doc":"> Bonfire.Common.Utils.current_account_auth!(%{current_account: %{id: \"2CC0VNTSARE1S01AT10NGR0VPS\"}}, \"wrong-password\")\n    ** (Bonfire.Fail.Auth) We couldn't find an account with the details you provided.","title":"Examples - Bonfire.Common.Utils.current_account_auth!/2","ref":"Bonfire.Common.Utils.html#current_account_auth!/2-examples"},{"type":"function","doc":"Returns the current account ID from socket, assigns, or options.\n\nThis function traverses various possible structures to find and return the current account ID.","title":"Bonfire.Common.Utils.current_account_id/2","ref":"Bonfire.Common.Utils.html#current_account_id/2"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_account_id(%{current_account_id: \"2CC0VNTSARE1S01AT10NGR0VPS\"})\n    \"2CC0VNTSARE1S01AT10NGR0VPS\"\n\n    iex> Bonfire.Common.Utils.current_account_id(%{assigns: %{current_account_id: \"2CC0VNTSARE1S01AT10NGR0VPS\"}})\n    \"2CC0VNTSARE1S01AT10NGR0VPS\"\n\n    iex> Bonfire.Common.Utils.current_account_id(%{socket: %{assigns: %{current_account_id: \"2CC0VNTSARE1S01AT10NGR0VPS\"}}})\n    \"2CC0VNTSARE1S01AT10NGR0VPS\"\n\n    iex> Bonfire.Common.Utils.current_account_id(\"2CC0VNTSARE1S01AT10NGR0VPS\")\n    \"2CC0VNTSARE1S01AT10NGR0VPS\"","title":"Examples - Bonfire.Common.Utils.current_account_id/2","ref":"Bonfire.Common.Utils.html#current_account_id/2-examples"},{"type":"function","doc":"Returns the current user from socket, assigns, or options.\n\nThis function traverses various possible structures to find and return the current user (or current user ID if that's all that's available).","title":"Bonfire.Common.Utils.current_user/2","ref":"Bonfire.Common.Utils.html#current_user/2"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_user(%{current_user: %{id: \"user1\"}})\n    %{id: \"user1\"}\n\n    iex> Bonfire.Common.Utils.current_user(%{assigns: %{current_user: %{id: \"user2\"}}})\n    %{id: \"user2\"}\n\n    iex> Bonfire.Common.Utils.current_user(%{socket: %{assigns: %{current_user: %{id: \"user3\"}}}})\n    %{id: \"user3\"}\n\n    iex> Bonfire.Common.Utils.current_user([current_user: %{id: \"user4\"}])\n    %{id: \"user4\"}\n\n    iex> Bonfire.Common.Utils.current_user(%{current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"})\n    \"5EVSER1S0STENS1B1YHVMAN01D\"","title":"Examples - Bonfire.Common.Utils.current_user/2","ref":"Bonfire.Common.Utils.html#current_user/2-examples"},{"type":"function","doc":"(Re)authenticates the current user using the provided password.\n\nRaises an exception if the credentials are invalid.","title":"Bonfire.Common.Utils.current_user_auth!/2","ref":"Bonfire.Common.Utils.html#current_user_auth!/2"},{"type":"function","doc":"> Bonfire.Common.Utils.current_user_auth!(%{current_user: %{id: \"user1\"}}, \"password123\")\n    ** (Bonfire.Fail.Auth) We couldn't find an account with the details you provided.","title":"Examples - Bonfire.Common.Utils.current_user_auth!/2","ref":"Bonfire.Common.Utils.html#current_user_auth!/2-examples"},{"type":"function","doc":"Returns the current user ID from socket, assigns, or options.\n\nThis function traverses various possible structures to find and return the current user ID.","title":"Bonfire.Common.Utils.current_user_id/2","ref":"Bonfire.Common.Utils.html#current_user_id/2"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_user_id(%{current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"})\n    \"5EVSER1S0STENS1B1YHVMAN01D\"\n\n    iex> Bonfire.Common.Utils.current_user_id(%{assigns: %{current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"}})\n    \"5EVSER1S0STENS1B1YHVMAN01D\"\n\n    iex> Bonfire.Common.Utils.current_user_id(%{assigns: %{__context__: %{current_user_id: \"5EVSER1S0STENS1B1YHVMAN01D\"}}})\n    \"5EVSER1S0STENS1B1YHVMAN01D\"\n\n    iex> Bonfire.Common.Utils.current_user_id(\"5EVSER1S0STENS1B1YHVMAN01D\")\n    \"5EVSER1S0STENS1B1YHVMAN01D\"\n    \n    iex> Bonfire.Common.Utils.current_user_id(\"invalid id\")\n    nil","title":"Examples - Bonfire.Common.Utils.current_user_id/2","ref":"Bonfire.Common.Utils.html#current_user_id/2-examples"},{"type":"function","doc":"Ensures that the current user is present and raises an exception if not logged in.","title":"Bonfire.Common.Utils.current_user_required!/1","ref":"Bonfire.Common.Utils.html#current_user_required!/1"},{"type":"function","doc":"iex> Bonfire.Common.Utils.current_user_required!(%{current_user: %{id: \"user1\"}})\n    %{id: \"user1\"}\n\n    > Bonfire.Common.Utils.current_user_required!(%{})\n    ** (Bonfire.Fail.Auth) You need to log in first.","title":"Examples - Bonfire.Common.Utils.current_user_required!/1","ref":"Bonfire.Common.Utils.html#current_user_required!/1-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Utils.declared_extension/0","ref":"Bonfire.Common.Utils.html#declared_extension/0"},{"type":"function","doc":"Checks if the given value is `nil`, an empty enumerable, or an empty string.","title":"Bonfire.Common.Utils.empty?/1","ref":"Bonfire.Common.Utils.html#empty?/1"},{"type":"function","doc":"- `v`: The value to check.","title":"Parameters - Bonfire.Common.Utils.empty?/1","ref":"Bonfire.Common.Utils.html#empty?/1-parameters"},{"type":"function","doc":"iex> empty?(nil)\n    true\n\n    iex> empty?(\"\")\n    true\n\n    iex> empty?([])\n    true\n\n    iex> empty?([1, 2, 3])\n    false\n\n    iex> empty?(\"hello\")\n    false","title":"Examples - Bonfire.Common.Utils.empty?/1","ref":"Bonfire.Common.Utils.html#empty?/1-examples"},{"type":"function","doc":"Applies the given function if the first parameter is not `nil`.","title":"Bonfire.Common.Utils.maybe/2","ref":"Bonfire.Common.Utils.html#maybe/2"},{"type":"function","doc":"- `val`: The value to check.\n  - `change_fn`: A function to apply if `val` is not `nil`.","title":"Parameters - Bonfire.Common.Utils.maybe/2","ref":"Bonfire.Common.Utils.html#maybe/2-parameters"},{"type":"function","doc":"iex> maybe(nil, fn x -> x * 2 end)\n    nil\n\n    iex> maybe(3, fn x -> x * 2 end)\n    6","title":"Examples - Bonfire.Common.Utils.maybe/2","ref":"Bonfire.Common.Utils.html#maybe/2-examples"},{"type":"function","doc":"Helper for calling hypothetical functions another modules. \n  \nAttempts to apply a function from a specified module with the given arguments and returns the result. \n\nReturns an error if the function is not defined,  unless a fallback function was provided to be invoked, or a fallback value to be returned.","title":"Bonfire.Common.Utils.maybe_apply/4","ref":"Bonfire.Common.Utils.html#maybe_apply/4"},{"type":"function","doc":"- `module`: The module to check for the function.\n  - `funs`: A list of function names (atoms) to try.\n  - `args`: Arguments to pass to the function.\n  - `opts`: Options for error handling and fallback. Options include:\n    - `:fallback_fun` - A function to call if the primary function is not found.\n    - `:fallback_return` - A default return value if the function cannot be applied.","title":"Parameters - Bonfire.Common.Utils.maybe_apply/4","ref":"Bonfire.Common.Utils.html#maybe_apply/4-parameters"},{"type":"function","doc":"iex> maybe_apply(Enum, :map, [[1, 2, 3], &(&1 * 2)])\n    [2, 4, 6]\n\n    iex> maybe_apply(Enum, [:nonexistent_fun], [])\n    {:error, \"None of the functions [:nonexistent_fun] are defined at Elixir.Enum with arity 0\"}\n\n    iex> maybe_apply(Enum, [:nonexistent_fun], [], fallback_fun: fn error, _args, _opts -> raise \"Failed\" end)\n    ** (RuntimeError) Failed\n\n    iex> maybe_apply(SomeModule, [:some_fun], [1, 2, 3], fallback_return: \"Failed\")\n    # Output: [warning] maybe_apply: No such module (Elixir.SomeModule) could be loaded. - with args: ([1, 2, 3])\n    \"Failed\"","title":"Examples - Bonfire.Common.Utils.maybe_apply/4","ref":"Bonfire.Common.Utils.html#maybe_apply/4-examples"},{"type":"function","doc":"","title":"Bonfire.Common.Utils.maybe_apply_fallback/3","ref":"Bonfire.Common.Utils.html#maybe_apply_fallback/3"},{"type":"function","doc":"Returns the value of a key from options keyword list or map, or a fallback if not present or empty.","title":"Bonfire.Common.Utils.maybe_from_opts/3","ref":"Bonfire.Common.Utils.html#maybe_from_opts/3"},{"type":"function","doc":"Checks if the given value is `nil`, `false`, `0`, or an empty value (using `empty?/1`).","title":"Bonfire.Common.Utils.nothing?/1","ref":"Bonfire.Common.Utils.html#nothing?/1"},{"type":"function","doc":"- `v`: The value to check.","title":"Parameters - Bonfire.Common.Utils.nothing?/1","ref":"Bonfire.Common.Utils.html#nothing?/1-parameters"},{"type":"function","doc":"iex> nothing?(nil)\n    true\n\n    iex> nothing?(false)\n    true\n\n    iex> nothing?(0)\n    true\n\n    iex> nothing?(\"\")\n    true\n\n    iex> nothing?([1, 2, 3])\n    false\n\n    iex> nothing?(\"hello\")\n    false","title":"Examples - Bonfire.Common.Utils.nothing?/1","ref":"Bonfire.Common.Utils.html#nothing?/1-examples"},{"type":"function","doc":"Unwraps an `{:ok, val}` tuple, returning the value. If not OK, returns a fallback value (default is `nil`).","title":"Bonfire.Common.Utils.ok_unwrap/2","ref":"Bonfire.Common.Utils.html#ok_unwrap/2"},{"type":"function","doc":"- `val`: The value or tuple to unwrap.\n  - `fallback`: The fallback value if the tuple is an error.","title":"Parameters - Bonfire.Common.Utils.ok_unwrap/2","ref":"Bonfire.Common.Utils.html#ok_unwrap/2-parameters"},{"type":"function","doc":"iex> ok_unwrap({:ok, 42})\n    42\n\n    iex> ok_unwrap({:error, \"something went wrong\"}, \"default\")\n    \"default\"\n\n    iex> ok_unwrap(:error, \"default\")\n    \"default\"\n\n    iex> ok_unwrap(nil, \"default\")\n    \"default\"","title":"Examples - Bonfire.Common.Utils.ok_unwrap/2","ref":"Bonfire.Common.Utils.html#ok_unwrap/2-examples"},{"type":"function","doc":"Rounds a number and uses `Bonfire.Common.Localise.Cldr.Number.to_string/2` function to format into a human readable string.","title":"Bonfire.Common.Utils.round_nearest/1","ref":"Bonfire.Common.Utils.html#round_nearest/1"},{"type":"function","doc":"iex> round_nearest(1234)\n    \"1K\"\n\n    iex> round_nearest(1600000)\n    \"2M\"","title":"Examples - Bonfire.Common.Utils.round_nearest/1","ref":"Bonfire.Common.Utils.html#round_nearest/1-examples"},{"type":"function","doc":"Rounds a number to the nearest specified target.","title":"Bonfire.Common.Utils.round_nearest/2","ref":"Bonfire.Common.Utils.html#round_nearest/2"},{"type":"function","doc":"- `num`: The number to round.\n  - `target`: The target to round to (optional).","title":"Parameters - Bonfire.Common.Utils.round_nearest/2","ref":"Bonfire.Common.Utils.html#round_nearest/2-parameters"},{"type":"function","doc":"iex> round_nearest(1234, 10)\n    1230\n\n    iex> round_nearest(1234, 100)\n    1200\n\n    iex> round_nearest(1234, 1000)\n    1000","title":"Examples - Bonfire.Common.Utils.round_nearest/2","ref":"Bonfire.Common.Utils.html#round_nearest/2-examples"},{"type":"function","doc":"Converts a map, user, socket, tuple, etc, to a keyword list for standardised use as function options.","title":"Bonfire.Common.Utils.to_options/1","ref":"Bonfire.Common.Utils.html#to_options/1"},{"type":"module","doc":"`Bonfire.Ecto` contains `Ecto` transactional support as acts for `Bonfire.Epics`","title":"Bonfire.Ecto","ref":"Bonfire.Ecto.html"},{"type":"module","doc":"`Bonfire.Ecto` is designed to facilitate complex Ecto transaction handling within an Elixir application that uses `Bonfire.Epics` to execute a sequence of operations (or `Acts`). These modules provide a structured way to manage database transactions as a series of acts and managing them within an `Epic`, offering flexibility and control over database interactions, ensuring that transactions are executed efficiently.","title":"Introduction - Bonfire.Ecto","ref":"Bonfire.Ecto.html#module-introduction"},{"type":"module","doc":"1. `Bonfire.Ecto.Acts.Begin`\n    - Responsible for initiating a transaction if certain conditions are met. It ensures that the transaction is only started when it is sensible to do so, based on the current state of the `Epic`.\n\n2. `Bonfire.Ecto.Acts.Work`\n    - Handles queued database operations within a transaction. Operations are queued using the `Bonfire.Ecto.Acts.Work.add/2` function and executed if there are no errors in the `Epic` or changesets.\n\n3. `Bonfire.Ecto.Acts.Commit`\n    - A placeholder marker used by `Bonfire.Ecto.Acts.Begin` to identify when to commit the transaction.","title":"Modules Overview - Bonfire.Ecto","ref":"Bonfire.Ecto.html#module-modules-overview"},{"type":"module","doc":"#### 1. Initial Setup\n\nEnsure that you have `Ecto` and `Bonfire.Epics` installed and configured in your application, and then install this linrary.\n\n#### 2. Using `Bonfire.Ecto.Acts.Begin`\n\nRefer to `Bonfire.Epics` docs to define some `Act`s and `Epic`s: https://github.com/bonfire-networks/bonfire_epics\n\n#### 3. Queue database operation(s) in an Act \n\nQueue operations by calling the `Bonfire.Ecto.Acts.Work.add/2` function, providing the epic and a key representing the changeset to be processed.\n\n```elixir\nepic = Bonfire.Ecto.Acts.Work.add(epic, :some_changeset)\n```\n\n#### 3. Add the three `Bonfire.Ecto` Acts to your Epic\n```\n    # First come the Acts that prepare the changeset and call `Bonfire.Ecto.Acts.Work.add/2` to queue it\n\n    # Open a Postgres transaction and actually do the insertions in DB\n    Bonfire.Ecto.Acts.Begin,\n\n    # Run our inserts\n    Bonfire.Ecto.Acts.Work,\n    Bonfire.Ecto.Acts.Commit,\n\n    # Then can come some Acts that process the result of the transaction \n```","title":"Usage - Bonfire.Ecto","ref":"Bonfire.Ecto.html#module-usage"},{"type":"module","doc":"An Act that enters a transaction unless it senses that it would be futile.","title":"Bonfire.Ecto.Acts.Begin","ref":"Bonfire.Ecto.Acts.Begin.html"},{"type":"function","doc":"Runs the given act(s) within a transaction if no errors are detected in the epic.\n\nThis function takes the modules before the `Commit` module in the `epic.next` list, runs them,\nand then processes the remaining modules. If there are any errors in the epic, it avoids\nentering a transaction.","title":"Bonfire.Ecto.Acts.Begin.run/2","ref":"Bonfire.Ecto.Acts.Begin.html#run/2"},{"type":"function","doc":"- `epic` - The epic struct that contains the list of acts to be executed.\n  - `act` - The current act being processed.","title":"Parameters - Bonfire.Ecto.Acts.Begin.run/2","ref":"Bonfire.Ecto.Acts.Begin.html#run/2-parameters"},{"type":"function","doc":"iex> epic = %Epic{next: [%{module: OtherModule}, %{module: Commit}], errors: []}\n    iex> act = %{}\n    iex> Bonfire.Ecto.Acts.Begin.run(epic, act)\n    %Epic{next: [], errors: []}\n\n    iex> epic = %Epic{next: [%{module: OtherModule}, %{module: Commit}], errors: [\"error\"]}\n    iex> act = %{}\n    iex> Bonfire.Ecto.Acts.Begin.run(epic, act)\n    %Epic{next: [], errors: [\"error\"]}","title":"Examples - Bonfire.Ecto.Acts.Begin.run/2","ref":"Bonfire.Ecto.Acts.Begin.html#run/2-examples"},{"type":"module","doc":"A placeholder marker used by `Bonfire.Ecto.Acts.Begin` to identify when to commit the transaction.","title":"Bonfire.Ecto.Acts.Commit","ref":"Bonfire.Ecto.Acts.Commit.html"},{"type":"function","doc":"","title":"Bonfire.Ecto.Acts.Commit.run/2","ref":"Bonfire.Ecto.Acts.Commit.html#run/2"},{"type":"module","doc":"","title":"Bonfire.Ecto.Acts.Delete","ref":"Bonfire.Ecto.Acts.Delete.html"},{"type":"function","doc":"Attempts to delete the given objects or struct from the repository.\n\nThis function handles the deletion of objects, whether they are a list, a `Needle.Pointer`, or a regular struct. It returns the number of objects deleted.","title":"Bonfire.Ecto.Acts.Delete.maybe_delete/2","ref":"Bonfire.Ecto.Acts.Delete.html#maybe_delete/2"},{"type":"function","doc":"- `objects` - The object(s) to be deleted, can be a list or a single struct.\n  - `repo` - The repository module to use for deletion.","title":"Parameters - Bonfire.Ecto.Acts.Delete.maybe_delete/2","ref":"Bonfire.Ecto.Acts.Delete.html#maybe_delete/2-parameters"},{"type":"function","doc":"iex> objects = [%SomeStruct{id: 1}, %SomeStruct{id: 2}]\n    iex> repo = MyApp.Repo\n    iex> Bonfire.Ecto.Acts.Delete.maybe_delete(objects, repo)\n    {:ok, 2}\n\n    iex> object = %SomeStruct{id: 1}\n    iex> repo = MyApp.Repo\n    iex> Bonfire.Ecto.Acts.Delete.maybe_delete(object, repo)\n    {:ok, 1}","title":"Examples - Bonfire.Ecto.Acts.Delete.maybe_delete/2","ref":"Bonfire.Ecto.Acts.Delete.html#maybe_delete/2-examples"},{"type":"function","doc":"Runs the delete act, marking the specified changeset or struct for deletion.\n\nThis function marks an object for deletion based on the `:on` key in the act options.\nIf associations are specified for deletion, they will be processed as well.","title":"Bonfire.Ecto.Acts.Delete.run/2","ref":"Bonfire.Ecto.Acts.Delete.html#run/2"},{"type":"function","doc":"- `epic` - The epic struct that contains the list of acts to be executed.\n  - `act` - The current act being processed.","title":"Parameters - Bonfire.Ecto.Acts.Delete.run/2","ref":"Bonfire.Ecto.Acts.Delete.html#run/2-parameters"},{"type":"function","doc":"iex> epic = %Epic{assigns: %{some_key: %SomeStruct{}}, errors: []}\n    iex> act = %{options: %{on: :some_key}}\n    iex> Bonfire.Ecto.Acts.Delete.run(epic, act)\n    %Epic{assigns: %{some_key: %SomeStruct{}}, errors: []}\n\n    iex> epic = %Epic{assigns: %{some_key: %SomeStruct{}}, errors: [\"error\"]}\n    iex> act = %{options: %{on: :some_key}}\n    iex> Bonfire.Ecto.Acts.Delete.run(epic, act)\n    %Epic{assigns: %{some_key: %SomeStruct{}}, errors: [\"error\"]}","title":"Examples - Bonfire.Ecto.Acts.Delete.run/2","ref":"Bonfire.Ecto.Acts.Delete.html#run/2-examples"},{"type":"module","doc":"An act that performs queued up work in a transaction.\n\nWork is queued up with calls to `add/2` in earlier acts and when run, this act will apply the\nappropriate actions.\n\nOnly runs if there are no epic or changesets errors.","title":"Bonfire.Ecto.Acts.Work","ref":"Bonfire.Ecto.Acts.Work.html"},{"type":"function","doc":"Records that a particular key contains an `Ecto.Changeset` that needs to be processed (inserted, updated, upserted, or deleted).\n\nCall this in earlier acts to queue work for in-transaction processing.\n\nIf you wish to delete, you must ensure you set the changeset's `:action` key to `:delete`.","title":"Bonfire.Ecto.Acts.Work.add/2","ref":"Bonfire.Ecto.Acts.Work.html#add/2"},{"type":"function","doc":"- `epic` - The epic struct that contains the list of acts to be executed.\n  - `key` - The key representing the changeset to be processed.","title":"Parameters - Bonfire.Ecto.Acts.Work.add/2","ref":"Bonfire.Ecto.Acts.Work.html#add/2-parameters"},{"type":"function","doc":"iex> epic = %Epic{}\n    iex> Bonfire.Ecto.Acts.Work.add(epic, :some_changeset)\n    %Epic{assigns: %{Bonfire.Ecto.Acts.Work => [:some_changeset]}}","title":"Examples - Bonfire.Ecto.Acts.Work.add/2","ref":"Bonfire.Ecto.Acts.Work.html#add/2-examples"},{"type":"function","doc":"Runs the queued work within a transaction if no errors are detected in the epic.\n\nThis function retrieves the list of keys scheduled for processing, validates them,\nand performs the appropriate actions (`:insert`, `:update`, `:upsert`, `:delete`) in a transaction.","title":"Bonfire.Ecto.Acts.Work.run/2","ref":"Bonfire.Ecto.Acts.Work.html#run/2"},{"type":"function","doc":"- `epic` - The epic struct that contains the list of acts to be executed.\n  - `act` - The current act being processed.","title":"Parameters - Bonfire.Ecto.Acts.Work.run/2","ref":"Bonfire.Ecto.Acts.Work.html#run/2-parameters"},{"type":"function","doc":"iex> epic = %Epic{assigns: %{Bonfire.Ecto.Acts.Work => [:some_changeset]}, errors: []}\n    iex> act = %{}\n    iex> Bonfire.Ecto.Acts.Work.run(epic, act)\n    %Epic{assigns: %{Bonfire.Ecto.Acts.Work => [:some_changeset]}, errors: []}\n\n    iex> epic = %Epic{assigns: %{Bonfire.Ecto.Acts.Work => [:some_changeset]}, errors: [\"error\"]}\n    iex> act = %{}\n    iex> Bonfire.Ecto.Acts.Work.run(epic, act)\n    %Epic{assigns: %{Bonfire.Ecto.Acts.Work => [:some_changeset]}, errors: [\"error\"]}","title":"Examples - Bonfire.Ecto.Acts.Work.run/2","ref":"Bonfire.Ecto.Acts.Work.html#run/2-examples"},{"type":"module","doc":"Epics are a extensible way of structuring tasks.\n\nThis library is designed to provide a structured way to define and execute complex workflows in Elixir applications. It introduces the concept of \"Epics\" and \"Acts\" to organize and run sequences of operations.","title":"Bonfire.Epics","ref":"Bonfire.Epics.html"},{"type":"module","doc":"- `Bonfire.Epics.Epic`: An Epic represents a complete workflow or process. It's a container that holds a sequence of Acts to be executed, along with state information, errors, and assigned values.\n- `Bonfire.Epics.Act`: An Act is an individual step or operation within an Epic. Each Act is typically a module that implements a specific task or functionality.\n- Execution Flow & Parallel Execution: Epics are executed by running their Acts in sequence. The library provides mechanisms to define, modify, and run these sequences. The library supports running multiple Acts in parallel for improved performance in certain scenarios.\n- Shared State: An Epic can maintain state throughout its execution using the 'assigns' map, allowing data to be passed between Acts.\n- Configurable: Epics can be defined in configuration, including at runtime, making it easy to set up and modify workflows without changing code.\n- Database Transactions: See the `Bonfire.Ecto` library for helpers to queue changeset operations within Acts and then run them all together in a single transaction: https://github.com/bonfire-networks/bonfire_ecto\n- Error Handling: The library includes built-in error handling, allowing errors to be captured and associated with specific Acts within an Epic.\n\nThis library is particularly useful for applications that need to manage complex, multi-step tasks with error handling and state management. It provides a flexible and extensible way to define, configure, and execute these processes, making it easier to maintain and modify complex workflows.","title":"Key components and concepts: - Bonfire.Epics","ref":"Bonfire.Epics.html#module-key-components-and-concepts"},{"type":"module","doc":"1. Each Act is implemented as a module with a `run/2` function that performs a specific task.\n2. Users define an Epic, either in code or configuration, as sequences of Acts.\n3. When the Epic is run, it executes each Act in sequence (or with some Acts optionally running in parallel), maintaining state and handling errors along the way. Acts can update the Epic's state, adding errors, and assigning values that can be used by subsequent Acts.\n4. After all Acts are executed, the final state of the Epic is returned, including any errors or assigned values.","title":"How it works - Bonfire.Epics","ref":"Bonfire.Epics.html#module-how-it-works"},{"type":"module","doc":"Write a module with a `run/2` function that takes an Epic and an Act, performs a specific task, and returns an Epic.\n\n```elixir\ndefmodule Bonfire.Label.Acts.LabelObject do\n  @moduledoc \"\"\"\n  Takes an object and label and returns a changeset for labeling that object. \n  Implements `Bonfire.Epics.Act`.\n\n  Epic Options:\n    * `:current_user` - user that will create the page, required.\n\n  Act Options:\n    * `:as` - key to where we find the label(s) to add, and then assign changeset to, default: `:label`.\n    * `:object` (configurable) - id to use for the thing to label\n    * `:attrs` - epic options key to find the attributes at, default: `:attrs`.\n  \"\"\"\n\n  use Arrows\n  import Bonfire.Epics\n\n  @doc false\n  def run(epic, act) do\n    current_user = Bonfire.Common.Utils.current_user(epic.assigns[:options])\n\n    cond do\n      epic.errors != [] ->\n        maybe_debug(\n          epic,\n          act,\n          length(epic.errors),\n          \"Skipping due to epic errors\"\n        )\n\n        epic\n\n      not (is_struct(current_user) or is_binary(current_user)) ->\n        maybe_debug(\n          epic,\n          act,\n          current_user,\n          \"Skipping due to missing current_user\"\n        )\n\n        epic\n\n      true ->\n        as = Keyword.get(act.options, :as) || Keyword.get(act.options, :on, :label)\n        object_key = Keyword.get(act.options, :object, :object)\n\n        label = Keyword.get(epic.assigns[:options], as, [])\n        object = Keyword.get(epic.assigns[:options], object_key, nil)\n\n        Bonfire.Label.Labelling.label_object(label, object,\n          return: :changeset,\n          current_user: current_user\n        )\n        |> Map.put(:action, :insert)\n        |> Bonfire.Epics.Epic.assign(epic, as, ...)\n        |> Bonfire.Ecto.Acts.Work.add(:label)\n    end\n  end\nend\n```","title":"1. How to write an Act - Bonfire.Epics","ref":"Bonfire.Epics.html#module-1-how-to-write-an-act"},{"type":"module","doc":"","title":"2. How to define an Epic - Bonfire.Epics","ref":"Bonfire.Epics.html#module-2-how-to-define-an-epic"},{"type":"module","doc":"```elixir\n     @page_act_opts [on: :page, attrs: :page_attrs]\n\n     config :bonfire_pages, Bonfire.Pages,\n      epics: [\n        create: [\n          # Create a changeset for insertion\n          {Bonfire.Pages.Acts.Page.Create, @page_act_opts},\n          # with a sanitised body and tags extracted,\n          {Bonfire.Social.Acts.PostContents, @page_act_opts},\n          # a caretaker,\n          {Bonfire.Me.Acts.Caretaker, @page_act_opts},\n          # and a creator,\n          {Bonfire.Me.Acts.Creator, @page_act_opts},\n          # and possibly fetch contents of URLs,\n          {Bonfire.Files.Acts.URLPreviews, @page_act_opts},\n          # possibly with uploaded files,\n          {Bonfire.Files.Acts.AttachMedia, @page_act_opts},\n          # with extracted tags fully hooked up,\n          {Bonfire.Tag.Acts.Tag, @page_act_opts},\n          # and the appropriate boundaries established,\n          {Bonfire.Boundaries.Acts.SetBoundaries, @page_act_opts},\n\n          # Now we open a Postgres transaction and actually do the insertions in DB\n          Bonfire.Ecto.Acts.Begin,\n          # Run our inserts\n          Bonfire.Ecto.Acts.Work,\n          Bonfire.Ecto.Acts.Commit,\n\n          # Enqueue for indexing by meilisearch\n          {Bonfire.Search.Acts.Queue, @page_act_opts}\n        ]\n      ]\n```","title":"Simple Epic where each Act executes sequentially - Bonfire.Epics","ref":"Bonfire.Epics.html#module-simple-epic-where-each-act-executes-sequentially"},{"type":"module","doc":"```elixir\n    config :bonfire_posts, Bonfire.Posts,\n      epics: [\n        publish: [\n          # Create a changeset for insertion\n          Bonfire.Posts.Acts.Posts.Publish,\n          # These next 3 Acts are run in parallel\n          [\n            # with a sanitised body and tags extracted,\n            {Bonfire.Social.Acts.PostContents, on: :post},\n\n            # assign a caretaker,\n            {Bonfire.Me.Acts.Caretaker, on: :post},\n\n            # record the creator,\n            {Bonfire.Me.Acts.Creator, on: :post}\n          ],\n          # These next 4 Acts are run in parallel (they run after the previous 3 because they depend on the outputs of those Acts)\n          [\n            # possibly fetch contents of URLs,\n            {Bonfire.Files.Acts.URLPreviews, on: :post},\n\n            # possibly occurring in a thread,\n            {Bonfire.Social.Acts.Threaded, on: :post},\n\n            # with extracted tags/mentions fully hooked up,\n            {Bonfire.Tag.Acts.Tag, on: :post},\n\n            # maybe set as sensitive,\n            {Bonfire.Social.Acts.Sensitivity, on: :post}\n          ],\n          # These next 3 Acts are run in parallel (they run after the previous 4 because they depend on the outputs of those Acts)\n          [\n            # possibly with uploaded/linked media (optionally depends on URLPreviews),\n            {Bonfire.Files.Acts.AttachMedia, on: :post},\n\n            # with appropriate boundaries established (depends on Threaded),\n            {Bonfire.Boundaries.Acts.SetBoundaries, on: :post},\n\n            # summarised by an activity (possibly appearing in feeds),\n            {Bonfire.Social.Acts.Activity, on: :post}\n          ],\n\n          # Now we open a Postgres transaction and actually do the insertions in DB\n          Bonfire.Ecto.Acts.Begin,\n          # Run our inserts\n          Bonfire.Ecto.Acts.Work,\n          Bonfire.Ecto.Acts.Commit,\n\n          # Preload data & Publish live feed updates via (in-memory) PubSub\n          {Bonfire.Social.Acts.LivePush, on: :post},\n\n          # These steps are run in parallel\n          [\n            # Enqueue for indexing by meilisearch\n            {Bonfire.Search.Acts.Queue, on: :post},\n\n            # Prepare JSON for federation and add to queue (oban).\n            {Bonfire.Social.Acts.Federate, on: :post}\n          ],\n\n          # Once the activity/object exists (depends on federation being done)\n          {Bonfire.Tags.Acts.AutoBoost, on: :post}\n        ]\n      ]\n```","title":"Advanced Epic, where some Acts execute in parallel - Bonfire.Epics","ref":"Bonfire.Epics.html#module-advanced-epic-where-some-acts-execute-in-parallel"},{"type":"module","doc":"```elixir\nBonfire.Epics.run_epic(Bonfire.Posts, :publish, on: :post)\n```","title":"3. How to run an Epic - Bonfire.Epics","ref":"Bonfire.Epics.html#module-3-how-to-run-an-epic"},{"type":"module","doc":"Copyright (c) 2022 Bonfire Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Bonfire.Epics","ref":"Bonfire.Epics.html#module-copyright-and-license"},{"type":"macro","doc":"","title":"Bonfire.Epics.maybe_debug/3","ref":"Bonfire.Epics.html#maybe_debug/3"},{"type":"macro","doc":"","title":"Bonfire.Epics.maybe_debug/4","ref":"Bonfire.Epics.html#maybe_debug/4"},{"type":"function","doc":"Runs a series of `Bonfire.Epics.Epic` operations based on configured Acts for this module.","title":"Bonfire.Epics.run_epic/3","ref":"Bonfire.Epics.html#run_epic/3"},{"type":"function","doc":"- `config_key`: The config key from which to load the Epic definition, such as a module name.\n- `type`: The type of epic operation to run.\n- `options`: Options for the epic operation, including `:on` for the key in the epic assigns to return on success (default to `:result`).","title":"Parameters - Bonfire.Epics.run_epic/3","ref":"Bonfire.Epics.html#run_epic/3-parameters"},{"type":"function","doc":"`{:ok, result}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Epics.run_epic/3","ref":"Bonfire.Epics.html#run_epic/3-returns"},{"type":"function","doc":"# runs an Epic defined in config at `config :bonfire_posts, Bonfire.Posts, epics: [publish: [...]]`\n    iex> Bonfire.Epics.run_epic(Bonfire.Posts, :publish, [on: :post])\n    {:ok, %{}}","title":"Examples - Bonfire.Epics.run_epic/3","ref":"Bonfire.Epics.html#run_epic/3-examples"},{"type":"macro","doc":"Like `debug`, but will omit fully outputting the inspectable thing\nand still print the message if only `:debug` is set","title":"Bonfire.Epics.smart/4","ref":"Bonfire.Epics.html#smart/4"},{"type":"behaviour","doc":"Represents an individual Act within an Epic.\n\nAn Act is a struct containing a module to be executed, options, and metadata.\n\nThis module provides functionality to create new Acts and define their behavior. See `Bonfire.Epics` docs for an example Act.","title":"Bonfire.Epics.Act","ref":"Bonfire.Epics.Act.html"},{"type":"macro","doc":"","title":"Bonfire.Epics.Act.debug/3","ref":"Bonfire.Epics.Act.html#debug/3"},{"type":"function","doc":"Creates a new Act for the given module.","title":"Bonfire.Epics.Act.new/1","ref":"Bonfire.Epics.Act.html#new/1"},{"type":"function","doc":"- `module`: The module to be executed.","title":"Parameters - Bonfire.Epics.Act.new/1","ref":"Bonfire.Epics.Act.html#new/1-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Act.new(MyActModule)\n    %Bonfire.Epics.Act{module: MyActModule, options: [], meta: nil}","title":"Examples - Bonfire.Epics.Act.new/1","ref":"Bonfire.Epics.Act.html#new/1-examples"},{"type":"function","doc":"Creates a new Act for the given module, with options.","title":"Bonfire.Epics.Act.new/2","ref":"Bonfire.Epics.Act.html#new/2"},{"type":"function","doc":"- `module`: The module to be executed.\n- `options`: A keyword list of options for the Act.","title":"Parameters - Bonfire.Epics.Act.new/2","ref":"Bonfire.Epics.Act.html#new/2-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Act.new(MyActModule, [option1: :value1])\n    %Bonfire.Epics.Act{module: MyActModule, options: [option1: :value1], meta: nil}","title":"Examples - Bonfire.Epics.Act.new/2","ref":"Bonfire.Epics.Act.html#new/2-examples"},{"type":"function","doc":"Creates a new Act for the given module, with options and metadata.","title":"Bonfire.Epics.Act.new/3","ref":"Bonfire.Epics.Act.html#new/3"},{"type":"function","doc":"- `module`: The module to be executed.\n- `options`: A keyword list of options for the Act.\n- `meta`: Any additional metadata for the Act.","title":"Parameters - Bonfire.Epics.Act.new/3","ref":"Bonfire.Epics.Act.html#new/3-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Act.new(MyActModule, [option1: :value1], %{extra: \"data\"})\n    %Bonfire.Epics.Act{module: MyActModule, options: [option1: :value1], meta: %{extra: \"data\"}}","title":"Examples - Bonfire.Epics.Act.new/3","ref":"Bonfire.Epics.Act.html#new/3-examples"},{"type":"callback","doc":"Callback for running an Act.\n\nThis function should be implemented by modules that define Acts.","title":"Bonfire.Epics.Act.run/2","ref":"Bonfire.Epics.Act.html#c:run/2"},{"type":"callback","doc":"- `epic`: The current Epic struct.\n- `act`: The current Act struct.","title":"Parameters - Bonfire.Epics.Act.run/2","ref":"Bonfire.Epics.Act.html#c:run/2-parameters"},{"type":"callback","doc":"The return value can be one of the following:\n- `Epic.t()`\n- `Act.t()`\n- `{:ok, Epic.t()}`\n- `{:ok, Act.t()}`\n- `{:ok, Epic.t(), Act.t()}`\n- `{:error, any}`","title":"Returns - Bonfire.Epics.Act.run/2","ref":"Bonfire.Epics.Act.html#c:run/2-returns"},{"type":"type","doc":"","title":"Bonfire.Epics.Act.ret/0","ref":"Bonfire.Epics.Act.html#t:ret/0"},{"type":"type","doc":"Represents an Act struct.\n\n- `:module` - The module to be executed.\n- `:options` - A keyword list of options for the Act.\n- `:meta` - Any additional metadata for the Act.","title":"Bonfire.Epics.Act.t/0","ref":"Bonfire.Epics.Act.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Epics.Debug","ref":"Bonfire.Epics.Debug.html"},{"type":"function","doc":"","title":"Bonfire.Epics.Debug.do_maybe_debug/4","ref":"Bonfire.Epics.Debug.html#do_maybe_debug/4"},{"type":"function","doc":"","title":"Bonfire.Epics.Debug.opts/2","ref":"Bonfire.Epics.Debug.html#opts/2"},{"type":"module","doc":"Represents and manages an Epic, which is a sequence of Acts to be executed.\n\nAn Epic is a struct containing lists of previous and next steps, errors, and assigns.\n\nThis module provides functionality to create, modify, and run Epics, as well as handle errors\nand debugging.","title":"Bonfire.Epics.Epic","ref":"Bonfire.Epics.Epic.html"},{"type":"function","doc":"Adds an error to the Epic.","title":"Bonfire.Epics.Epic.add_error/2","ref":"Bonfire.Epics.Epic.html#add_error/2"},{"type":"function","doc":"- `epic`: The Epic struct.\n- `error`: The Error struct to add.","title":"Parameters - Bonfire.Epics.Epic.add_error/2","ref":"Bonfire.Epics.Epic.html#add_error/2-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{}\n    iex> error = %Bonfire.Epics.Error{error: \"Something went wrong\"}\n    iex> Bonfire.Epics.Epic.add_error(epic, error)\n    %Bonfire.Epics.Epic{errors: [%Bonfire.Epics.Error{error: \"Something went wrong\"}]}","title":"Examples - Bonfire.Epics.Epic.add_error/2","ref":"Bonfire.Epics.Epic.html#add_error/2-examples"},{"type":"function","doc":"","title":"Bonfire.Epics.Epic.add_error/5","ref":"Bonfire.Epics.Epic.html#add_error/5"},{"type":"function","doc":"Appends Act(s) to the end of the Epic's next steps.","title":"Bonfire.Epics.Epic.append/2","ref":"Bonfire.Epics.Epic.html#append/2"},{"type":"function","doc":"- `self`: The Epic struct.\n- `acts`: A list of Acts or a single Act to append.","title":"Parameters - Bonfire.Epics.Epic.append/2","ref":"Bonfire.Epics.Epic.html#append/2-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{next: [Act1]}\n    iex> Bonfire.Epics.Epic.append(epic, [Act2])\n    %Bonfire.Epics.Epic{next: [Act1, Act2]}","title":"Examples - Bonfire.Epics.Epic.append/2","ref":"Bonfire.Epics.Epic.html#append/2-examples"},{"type":"function","doc":"Assigns a value to the Epic's assigns.","title":"Bonfire.Epics.Epic.assign/3","ref":"Bonfire.Epics.Epic.html#assign/3"},{"type":"function","doc":"- `self`: The Epic struct.\n- `name`: The atom key for the assign.\n- `value`: The value to assign.","title":"Parameters - Bonfire.Epics.Epic.assign/3","ref":"Bonfire.Epics.Epic.html#assign/3-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{}\n    iex> Bonfire.Epics.Epic.assign(epic, :foo, \"bar\")\n    %Bonfire.Epics.Epic{assigns: %{foo: \"bar\"}}","title":"Examples - Bonfire.Epics.Epic.assign/3","ref":"Bonfire.Epics.Epic.html#assign/3-examples"},{"type":"macro","doc":"","title":"Bonfire.Epics.Epic.debug/3","ref":"Bonfire.Epics.Epic.html#debug/3"},{"type":"function","doc":"Loads an epic from the app's config.","title":"Bonfire.Epics.Epic.from_config!/2","ref":"Bonfire.Epics.Epic.html#from_config!/2"},{"type":"function","doc":"- `config_key`: The config key to load, such as a module atom (in which case it will load it from that module's app config).\n- `name`: The name atom of the epic in the config.","title":"Parameters - Bonfire.Epics.Epic.from_config!/2","ref":"Bonfire.Epics.Epic.html#from_config!/2-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Epic.from_config!(MyApp.Module, :my_epic)\n    %Bonfire.Epics.Epic{...}\n\n    iex> Bonfire.Epics.Epic.from_config!(:my_key, :my_other_epic)\n    %Bonfire.Epics.Epic{...}","title":"Examples - Bonfire.Epics.Epic.from_config!/2","ref":"Bonfire.Epics.Epic.html#from_config!/2-examples"},{"type":"function","doc":"Creates an `Epic` from a specification of steps.","title":"Bonfire.Epics.Epic.from_spec!/1","ref":"Bonfire.Epics.Epic.html#from_spec!/1"},{"type":"function","doc":"- `acts`: A list of act specifications.","title":"Parameters - Bonfire.Epics.Epic.from_spec!/1","ref":"Bonfire.Epics.Epic.html#from_spec!/1-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Epic.from_spec!([MyAct, {OtherAct, [option: :value]}])\n    %Bonfire.Epics.Epic{...}","title":"Examples - Bonfire.Epics.Epic.from_spec!/1","ref":"Bonfire.Epics.Epic.html#from_spec!/1-examples"},{"type":"macro","doc":"","title":"Bonfire.Epics.Epic.maybe_debug/3","ref":"Bonfire.Epics.Epic.html#maybe_debug/3"},{"type":"function","doc":"Creates a new Epic with the given list of next steps.","title":"Bonfire.Epics.Epic.new/1","ref":"Bonfire.Epics.Epic.html#new/1"},{"type":"function","doc":"- `next`: A list of Acts to be executed.","title":"Parameters - Bonfire.Epics.Epic.new/1","ref":"Bonfire.Epics.Epic.html#new/1-parameters"},{"type":"function","doc":"iex> Bonfire.Epics.Epic.new([MyAct, OtherAct])\n    %Bonfire.Epics.Epic{next: [MyAct, OtherAct]}","title":"Examples - Bonfire.Epics.Epic.new/1","ref":"Bonfire.Epics.Epic.html#new/1-examples"},{"type":"function","doc":"Prepends Act(s) to the beginning of the Epic's next steps.","title":"Bonfire.Epics.Epic.prepend/2","ref":"Bonfire.Epics.Epic.html#prepend/2"},{"type":"function","doc":"- `self`: The Epic struct.\n- `acts`: A list of Acts or a single Act to prepend.","title":"Parameters - Bonfire.Epics.Epic.prepend/2","ref":"Bonfire.Epics.Epic.html#prepend/2-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{next: [Act2]}\n    iex> Bonfire.Epics.Epic.prepend(epic, [Act1])\n    %Bonfire.Epics.Epic{next: [Act1, Act2]}","title":"Examples - Bonfire.Epics.Epic.prepend/2","ref":"Bonfire.Epics.Epic.html#prepend/2-examples"},{"type":"function","doc":"Renders all errors in the Epic as a string.","title":"Bonfire.Epics.Epic.render_errors/1","ref":"Bonfire.Epics.Epic.html#render_errors/1"},{"type":"function","doc":"- `epic`: The Epic struct containing errors.","title":"Parameters - Bonfire.Epics.Epic.render_errors/1","ref":"Bonfire.Epics.Epic.html#render_errors/1-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{errors: [%Bonfire.Epics.Error{error: \"Error 1\"}, %Bonfire.Epics.Error{error: \"Error 2\"}]}\n    iex> Bonfire.Epics.Epic.render_errors(epic)\n    \"Error 1\\nError 2\"","title":"Examples - Bonfire.Epics.Epic.render_errors/1","ref":"Bonfire.Epics.Epic.html#render_errors/1-examples"},{"type":"function","doc":"Runs the Epic, executing each Act in sequence (with some Acts optionally running in parallel).","title":"Bonfire.Epics.Epic.run/1","ref":"Bonfire.Epics.Epic.html#run/1"},{"type":"function","doc":"- `epic`: The Epic struct to run.","title":"Parameters - Bonfire.Epics.Epic.run/1","ref":"Bonfire.Epics.Epic.html#run/1-parameters"},{"type":"function","doc":"iex> epic = Bonfire.Epics.Epic.new([MyAct, OtherAct])\n    iex> Bonfire.Epics.Epic.run(epic)\n    %Bonfire.Epics.Epic{prev: [OtherAct, MyAct], next: [], ...}","title":"Examples - Bonfire.Epics.Epic.run/1","ref":"Bonfire.Epics.Epic.html#run/1-examples"},{"type":"function","doc":"Updates an assign in the Epic using a function.","title":"Bonfire.Epics.Epic.update/4","ref":"Bonfire.Epics.Epic.html#update/4"},{"type":"function","doc":"- `self`: The Epic struct.\n- `name`: The atom key for the assign.\n- `default`: The default value if the assign doesn't exist.\n- `fun`: The function to apply to the current value.","title":"Parameters - Bonfire.Epics.Epic.update/4","ref":"Bonfire.Epics.Epic.html#update/4-parameters"},{"type":"function","doc":"iex> epic = %Bonfire.Epics.Epic{assigns: %{count: 1}}\n    iex> Bonfire.Epics.Epic.update(epic, :count, 0, &(&1 + 1))\n    %Bonfire.Epics.Epic{assigns: %{count: 2}}","title":"Examples - Bonfire.Epics.Epic.update/4","ref":"Bonfire.Epics.Epic.html#update/4-examples"},{"type":"type","doc":"Represents an Epic struct.\n\n- `:prev` - List of Acts that have already been run.\n- `:next` - List of remaining Acts to be run (may be modified during run).\n- `:errors` - List of errors (accrued during run).\n- `:assigns` - Map of assigned values (may be modified during run).","title":"Bonfire.Epics.Epic.t/0","ref":"Bonfire.Epics.Epic.html#t:t/0"},{"type":"exception","doc":"","title":"Bonfire.Epics.Error","ref":"Bonfire.Epics.Error.html"},{"type":"function","doc":"","title":"Bonfire.Epics.Error.message/1","ref":"Bonfire.Epics.Error.html#message/1"},{"type":"module","doc":"","title":"Bonfire.Epics.Test","ref":"Bonfire.Epics.Test.html"},{"type":"macro","doc":"","title":"Bonfire.Epics.Test.assert_epic_ok/1","ref":"Bonfire.Epics.Test.html#assert_epic_ok/1"},{"type":"function","doc":"","title":"Bonfire.Epics.Test.debug_error/1","ref":"Bonfire.Epics.Test.html#debug_error/1"},{"type":"module","doc":"Email delivery is a crucial component of many web applications, including your Bonfire instance. It's used for various purposes such as:\n\n- Sending signup confirmation emails\n- Delivering password reset links\n- Notifying users of new messages or activities\n- Sending alerts to administrators or moderators\n\nTo set up email delivery for your Bonfire instance, you'll need to choose an email delivery method and configure it properly. This guide will help you through that process.","title":"Bonfire.Mailer","ref":"Bonfire.Mailer.html"},{"type":"module","doc":"1. **Choose Email Delivery Method and/or Provider**: You may choose to sign up with one of the email service providers listed in this guide. Each provider has its own pricing, features, and delivery rates.\n\n2. **Domain Configuration**: To ensure reliable email delivery and avoid spam filters, you should configure your [email-related DNS settings](https://www.cloudflare.com/en-gb/learning/email-security/dmarc-dkim-spf/) for your instance's domain name. This typically involves setting up:\n   - MX (Mail Exchanger) records\n   - SPF (Sender Policy Framework) records\n   - DKIM (DomainKeys Identified Mail) records\n   - DMARC (Domain-based Message Authentication, Reporting, and Conformance) records\n\nYour chosen email provider should provide instructions on how to set these up for your domain.\n\n3. **Environment Variables**: Bonfire uses environment variables for configuration. You'll need to set these variables in your deployment environment or in a `.env` file if you're running Bonfire locally or using Co-op Cloud.\n\nFor all email delivery methods, you'll need to set the following environment variables:\n\n- `MAIL_BACKEND` environment variable to choose your email delivery method or provider. \n- `MAIL_DOMAIN` or `HOSTNAME`: Your domain name\n- `MAIL_FROM`: The email address from which emails will be sent (this should match the domain name you set up with SPF/DKIM/DMARC, which will usually be your instance's domain)","title":"Before You Begin - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-before-you-begin"},{"type":"module","doc":"","title":"Choosing an Email Delivery Method - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-choosing-an-email-delivery-method"},{"type":"module","doc":"If no specific email configuration is set, Bonfire will attempt to deliver emails directly to the recipients' SMTP servers. Here's what you need to know about this default behaviour:\n\n- **What it means**: Your server will try to connect directly to the recipient's email server (e.g. a provider such as Gmail or an organisation's own mail server) to deliver the email.\n\n- **Pros**: It requires no additional configuration and can work for basic setups.\n\n- **Cons**: This method is often unreliable and prone to several issues:\n  1. **Spam Filters**: Emails sent this way are more likely to be marked as spam or rejected entirely.\n  2. **Deliverability**: Many recipient servers may flat-out reject IP addresses not properly set up for email sending.\n  3. **DNS Configuration**: Without proper DNS records (SPF, DKIM, DMARK, etc.), your emails are more likely to be treated as suspicious.\n  4. **IP Reputation**: If your server's IP address isn't established as a legitimate email sender, deliverability will suffer.\n\n- **Important**: While this default method can work for testing or in very small-scale scenarios, it is strongly recommended to configure a proper email delivery service for any production use of Bonfire. If you want to try this method anyway, make sure to configure [SPF, DKIM, DMARK, etc.](https://www.cloudflare.com/en-gb/learning/email-security/dmarc-dkim-spf/) for your instance domain name and IP address.","title":"1. Default Behaviour: Direct SMTP Delivery - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-1-default-behaviour-direct-smtp-delivery"},{"type":"module","doc":"These providers offer comprehensive email delivery services, usually featuring analytics, bounce handling, high deliverability rates, etc.\n\n> Note: the information about free tiers and pricing are only meant to serve as a rough indication of the options available and may be outdated or inaccurate (we'd welcome PRs with any updates of course). Please check with each provider's website for more details.\n\n\n#### Brevo (formerly Sendinblue)\n- Website: [brevo.com](https://www.brevo.com/)\n- Free Tier: 300 emails per day, then $15+/month or pay-as-you-go ($59 per 10,000 emails)  \n```\nMAIL_BACKEND=brevo\nMAIL_KEY=your_brevo_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailjet\n- Website: [mailjet.com](https://www.mailjet.com/)\n- Free Tier: 200 emails per day, then $17+/month\n```\nMAIL_BACKEND=mailjet\nMAIL_KEY=your_mailjet_api_key\nMAIL_PRIVATE_KEY=your_mailjet_secret_key\nMAIL_FROM=email@instance.domain\n```\n\n#### SMTP2GO\n- Website: [smtp2go.com](https://www.smtp2go.com/)\n- Free Tier: 200 emails per day (up to 1,000 emails per month), then $10+/month\n```\nMAIL_BACKEND=SMTP2GO\nMAIL_KEY=your_smtp2go_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailtrap \n- Website: [mailtrap.io](https://mailtrap.io/)\n- Free Tier: 200 emails per day (up to 1,000 emails per month), then $15+/month\n```\nMAIL_BACKEND=mailtrap\nMAIL_KEY=your_mailtrap_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailgun\n- Website: [www.mailgun.com](https://www.mailgun.com/)\n- Free Tier: 100 emails per day, then $15+/month\n```\nMAIL_BACKEND=mailgun\nMAIL_KEY=your_mailgun_api_key\nMAIL_BASE_URI=https://api.eu.mailgun.net/v3\nMAIL_FROM=email@instance.domain\n```\nNote: The `MAIL_BASE_URI` depends on your Mailgun registration region. The default is set to EU, adjust if necessary.\n\n#### Twilio SendGrid \n- Website: [sendgrid.com](https://sendgrid.com/)\n- Free Tier: 100 emails per day, then $20+/month\n```\nMAIL_BACKEND=sendgrid\nMAIL_KEY=your_sendgrid_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Postmark\n- Website: [postmarkapp.com](https://postmarkapp.com/)\n- Free Tier: 100 emails per month, then $15+/month\n```\nMAIL_BACKEND=postmark\nMAIL_KEY=your_postmark_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Zoho ZeptoMail\n- Website: [zoho.com](https://www.zoho.com/zeptomail/)\n- First 10,000 emails are free, then €2,50 per 10,000 emails\n```\nMAIL_BACKEND=zepto\nMAIL_KEY=your_zeptomail_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Scaleway\n- Website: [scaleway.com](https://www.scaleway.com/en/transactional-email-tem/)\n- No free tier, pay-as-you-go pricing (€2.50 per 10,000 emails)\n```\nMAIL_BACKEND=scaleway\nMAIL_KEY=your_scaleway_api_key\nMAIL_PROJECT_ID=your_scaleway_project_id\nMAIL_PRIVATE_KEY=your_scaleway_secret_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Gmail\n- Website: [gmail.com](https://developers.google.com/gmail/api)\n- Free Tier: 500 emails per day\n```\nMAIL_BACKEND=gmail\nMAIL_KEY=your_gmail_api_key \nMAIL_FROM=email@instance.domain\n# ^ OAuth2 access token with `gmail.compose` scope\n```\nNote: Using Gmail for sending application email is generally not recommended for production use.\n\n#### MailPace\n- Website: [mailpace.com](https://mailpace.com/)\n- No free tier, starts at £2.50 per month for up to 1,000 emails\n```\nMAIL_BACKEND=mailpace\nMAIL_KEY=your_mailpace_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mandrill (Mailchimp Transactional)\n- Website: [mailchimp.com](https://mailchimp.com/features/transactional-email/)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=mandrill\nMAIL_KEY=your_mandrill_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Bird / SparkPost\n- Website: [bird.com](https://bird.com/api/email)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=sparkpost\nMAIL_KEY=your_sparkpost_api_key\nMAIL_BASE_URI=https://api.eu.sparkpost.com\nMAIL_FROM=email@instance.domain\n```\nNote: The `MAIL_BASE_URI` depends on your SparkPost registration region. The default is set to EU, adjust if necessary.\n\n#### Sendcloud (China)\n- Website: [sendcloud.net](https://www.sendcloud.net/)\n- Free Tier: 10 emails per day\n```\nMAIL_BACKEND=sendcloud\nMAIL_KEY=your_sendcloud_api_key\nMAIL_USER=your_sendcloud_api_user\nMAIL_FROM=email@instance.domain\n```\n\n#### SocketLabs\n- Website: [socketlabs.com](https://www.socketlabs.com/)\n- No free tier\n```\nMAIL_BACKEND=socketlabs\nMAIL_KEY=your_socketlabs_api_key\nMAIL_SERVER=your_socketlabs_server_id\nMAIL_PRIVATE_KEY=your_socketlabs_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Campaign Monitor\n- Website: [campaignmonitor.com](https://www.campaignmonitor.com/)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=campaign_monitor\nMAIL_KEY=your_campaign_monitor_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Amazon AWS SES\n- Website: [aws.amazon.com](https://aws.amazon.com/ses/)\n- Free Tier: 3,000 message / month (only for the first 12 months, and extra AWS charges may still apply)\n\nAmazon SES can be configured in two ways:\n\n1. Using existing AWS credentials (if already configured for S3 file storage, you can simplify configuration and use the same AWS credentials for both file storage and email delivery):\n```\nMAIL_BACKEND=aws\nMAIL_FROM=email@instance.domain\n```\nNote: This method will automatically use the credentials set by `UPLOADS_S3_ACCESS_KEY_ID` and `UPLOADS_S3_SECRET_ACCESS_KEY`. No additional configuration is needed if these are already set up for a Bonfire extension (such as `Bonfire.Files`) which uses S3 file storage.\n\n2. Using dedicated credentials, if you don't use AWS for S3 file storage or you want to use different AWS accounts for file storage and email delivery:\n```\nMAIL_BACKEND=aws\nMAIL_KEY=your_aws_access_key_id\nMAIL_PRIVATE_KEY=your_aws_secret_access_key\nMAIL_REGION=your_aws_region\nMAIL_FROM=email@instance.domain\n```\n\nNote: \n- If not specified, `MAIL_REGION` defaults to \"eu-west-1\".","title":"2. Managed Email Service Providers - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-2-managed-email-service-providers"},{"type":"module","doc":"These methods involve sending emails directly or through your own mail server. They require more setup and maintenance but offer more control.\n\n#### Default: Direct SMTP Delivery\n- When no specific email configuration is set, Bonfire will attempt to deliver emails directly to the recipients' SMTP servers.\n- No additional configuration is needed as this is the default behaviour, but it's not recommended for production use due to deliverability issues ([see above](#module-default-behaviour-direct-smtp-delivery)).\n\n#### SMTP\nSMTP (Simple Mail Transfer Protocol) is the standard method for sending emails across the internet. It's like the postal service for digital messages, ensuring your emails reach their destination regardless of the systems involved. While many opt for using a dedicated email delivery provider (see above), if you already run your own email server or use a provider that's not listed above which provides you with SMTP credentials, you can configure Bonfire to use that:\n\n```\nMAIL_BACKEND=smtp\nMAIL_SERVER=your_smtp_server\nMAIL_PORT=587\nMAIL_USER=your_smtp_username\nMAIL_PASSWORD=your_smtp_password\nMAIL_FROM=email@instance.domain\n```\n\nNotes: \n- `MAIL_PORT` defaults to 587 if not specified.\n\n#### Sendmail\n- Built into many Unix-like operating systems\n```\nMAIL_BACKEND=sendmail\nMAIL_SERVER=/path/to/sendmail\n# MAIL_ARGS=\nMAIL_QMAIL=true_or_false\nMAIL_FROM=email@instance.domain\n```\n\nNotes: \n- `MAIL_SERVER` defaults to `/usr/bin/sendmail` if not specified.\n- `MAIL_ARGS` defaults to `-N delay,failure,success` if not specified.\n- While sendmail can send mail directly (similar to the default behaviour), it can be set up to hand off emails to a local or remote SMTP server for delivery.\n- Using sendmail usually provides more control and logging capabilities compared to the default direct SMTP delivery.\n\n#### Postal\n- Self-hosted email delivery platform\n- Website: [postalserver.io](https://docs.postalserver.io)\n```\nMAIL_BACKEND=postal\nMAIL_KEY=your_postal_api_key\nMAIL_BASE_URI=https://your_postal_server_api.uri/\nMAIL_FROM=email@instance.domain\n```","title":"3. Direct Email Sending Methods - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-3-direct-email-sending-methods"},{"type":"module","doc":"Copyright (c) 2024 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Mailer","ref":"Bonfire.Mailer.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Mailer.app_name/0","ref":"Bonfire.Mailer.html#app_name/0"},{"type":"function","doc":"","title":"Bonfire.Mailer.deliver_async/1","ref":"Bonfire.Mailer.html#deliver_async/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.deliver_inline/1","ref":"Bonfire.Mailer.html#deliver_inline/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.from/2","ref":"Bonfire.Mailer.html#from/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.handle_error/2","ref":"Bonfire.Mailer.html#handle_error/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.html_body/2","ref":"Bonfire.Mailer.html#html_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.new/1","ref":"Bonfire.Mailer.html#new/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.send/4","ref":"Bonfire.Mailer.html#send/4"},{"type":"function","doc":"","title":"Bonfire.Mailer.send_app_feedback/3","ref":"Bonfire.Mailer.html#send_app_feedback/3"},{"type":"function","doc":"","title":"Bonfire.Mailer.send_async/3","ref":"Bonfire.Mailer.html#send_async/3"},{"type":"function","doc":"","title":"Bonfire.Mailer.send_now/3","ref":"Bonfire.Mailer.html#send_now/3"},{"type":"function","doc":"","title":"Bonfire.Mailer.start/2","ref":"Bonfire.Mailer.html#start/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.subject/2","ref":"Bonfire.Mailer.html#subject/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.text_body/2","ref":"Bonfire.Mailer.html#text_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.to/2","ref":"Bonfire.Mailer.html#to/2"},{"type":"module","doc":"","title":"Bonfire.Mailer.Bamboo","ref":"Bonfire.Mailer.Bamboo.html"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver/1","ref":"Bonfire.Mailer.Bamboo.html#deliver/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_async/1","ref":"Bonfire.Mailer.Bamboo.html#deliver_async/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_inline/1","ref":"Bonfire.Mailer.Bamboo.html#deliver_inline/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_later/2","ref":"Bonfire.Mailer.Bamboo.html#deliver_later/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_later!/2","ref":"Bonfire.Mailer.Bamboo.html#deliver_later!/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_now/2","ref":"Bonfire.Mailer.Bamboo.html#deliver_now/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.deliver_now!/2","ref":"Bonfire.Mailer.Bamboo.html#deliver_now!/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.from/2","ref":"Bonfire.Mailer.Bamboo.html#from/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.html_body/2","ref":"Bonfire.Mailer.Bamboo.html#html_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.new/1","ref":"Bonfire.Mailer.Bamboo.html#new/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.subject/2","ref":"Bonfire.Mailer.Bamboo.html#subject/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.text_body/2","ref":"Bonfire.Mailer.Bamboo.html#text_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Bamboo.to/2","ref":"Bonfire.Mailer.Bamboo.html#to/2"},{"type":"behaviour","doc":"","title":"Bonfire.Mailer.Behaviour","ref":"Bonfire.Mailer.Behaviour.html"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.deliver_async/1","ref":"Bonfire.Mailer.Behaviour.html#c:deliver_async/1"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.deliver_inline/1","ref":"Bonfire.Mailer.Behaviour.html#c:deliver_inline/1"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.from/2","ref":"Bonfire.Mailer.Behaviour.html#c:from/2"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.html_body/2","ref":"Bonfire.Mailer.Behaviour.html#c:html_body/2"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.new/0","ref":"Bonfire.Mailer.Behaviour.html#c:new/0"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.new/1","ref":"Bonfire.Mailer.Behaviour.html#c:new/1"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.subject/2","ref":"Bonfire.Mailer.Behaviour.html#c:subject/2"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.text_body/2","ref":"Bonfire.Mailer.Behaviour.html#c:text_body/2"},{"type":"callback","doc":"","title":"Bonfire.Mailer.Behaviour.to/2","ref":"Bonfire.Mailer.Behaviour.html#c:to/2"},{"type":"type","doc":"","title":"Bonfire.Mailer.Behaviour.email/0","ref":"Bonfire.Mailer.Behaviour.html#t:email/0"},{"type":"module","doc":"Functions for checking the validity of email addresses and domains","title":"Bonfire.Mailer.Checker","ref":"Bonfire.Mailer.Checker.html"},{"type":"function","doc":"Checks whether an email domain name is valid, returns a reason if not.\n\nThis function first checks if the domain matches a valid domain format using a regex.\nIf the format is valid, it then performs the same checks as `validate_email/1` on a test email address.","title":"Bonfire.Mailer.Checker.validate_domain/1","ref":"Bonfire.Mailer.Checker.html#validate_domain/1"},{"type":"function","doc":"- domain: The domain to validate as a binary string.","title":"Parameters - Bonfire.Mailer.Checker.validate_domain/1","ref":"Bonfire.Mailer.Checker.html#validate_domain/1-parameters"},{"type":"function","doc":"- `:ok` if the domain is valid.\n  - `{:error, :format}` if the domain format is invalid.\n  - `{:error, :mx}` if the domain has no valid MX records.","title":"Returns - Bonfire.Mailer.Checker.validate_domain/1","ref":"Bonfire.Mailer.Checker.html#validate_domain/1-returns"},{"type":"function","doc":"iex> Bonfire.Mailer.Checker.validate_domain(\"example.com\")\n    :ok\n\n    iex> Bonfire.Mailer.Checker.validate_domain(\"invalid-domain\")\n    {:error, :format}\n\n    iex> Bonfire.Mailer.Checker.validate_domain(\"nonexistent-domain.com\")\n    {:error, :mx}","title":"Examples - Bonfire.Mailer.Checker.validate_domain/1","ref":"Bonfire.Mailer.Checker.html#validate_domain/1-examples"},{"type":"function","doc":"Checks whether an email address is valid, returns a reason if not.\n\nThis function can perform two types of checks:\n1. Format check: Ensures the email address has a valid format.\n2. MX record check: Verifies the existence of MX records for the email domain.\n\nThe checks are enabled by default but can be disabled with `check_format: false` and `check_mx: false` on the `:bonfire_mailer` configuration.","title":"Bonfire.Mailer.Checker.validate_email/1","ref":"Bonfire.Mailer.Checker.html#validate_email/1"},{"type":"function","doc":"- email: The email address to validate as a binary string.","title":"Parameters - Bonfire.Mailer.Checker.validate_email/1","ref":"Bonfire.Mailer.Checker.html#validate_email/1-parameters"},{"type":"function","doc":"- `:ok` if the email is valid.\n  - `{:error, :format}` if the email format is invalid.\n  - `{:error, :mx}` if the email domain has no valid MX records.","title":"Returns - Bonfire.Mailer.Checker.validate_email/1","ref":"Bonfire.Mailer.Checker.html#validate_email/1-returns"},{"type":"function","doc":"iex> Bonfire.Mailer.Checker.validate_email(\"user@example.com\")\n    :ok\n\n    iex> Bonfire.Mailer.Checker.validate_email(\"invalid-email\")\n    {:error, :format}\n\n    iex> Bonfire.Mailer.Checker.validate_email(\"user@nonexistent-domain.com\")\n    {:error, :mx}","title":"Examples - Bonfire.Mailer.Checker.validate_email/1","ref":"Bonfire.Mailer.Checker.html#validate_email/1-examples"},{"type":"type","doc":"","title":"Bonfire.Mailer.Checker.error_reason/0","ref":"Bonfire.Mailer.Checker.html#t:error_reason/0"},{"type":"module","doc":"","title":"Bonfire.Mailer.Render","ref":"Bonfire.Mailer.Render.html"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.default_layout/0","ref":"Bonfire.Mailer.Render.html#default_layout/0"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.maybe_with_layout/4","ref":"Bonfire.Mailer.Render.html#maybe_with_layout/4"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.new_templated/3","ref":"Bonfire.Mailer.Render.html#new_templated/3"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.render_templated/6","ref":"Bonfire.Mailer.Render.html#render_templated/6"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.render_to_string/3","ref":"Bonfire.Mailer.Render.html#render_to_string/3"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.render_to_string/4","ref":"Bonfire.Mailer.Render.html#render_to_string/4"},{"type":"function","doc":"","title":"Bonfire.Mailer.Render.templated/4","ref":"Bonfire.Mailer.Render.html#templated/4"},{"type":"module","doc":"","title":"Bonfire.Mailer.RuntimeConfig","ref":"Bonfire.Mailer.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.bamboo_service/2","ref":"Bonfire.Mailer.RuntimeConfig.html#bamboo_service/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.config/0","ref":"Bonfire.Mailer.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.config_module/0","ref":"Bonfire.Mailer.RuntimeConfig.html#config_module/0"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.mail_blackhole/1","ref":"Bonfire.Mailer.RuntimeConfig.html#mail_blackhole/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.mailer/0","ref":"Bonfire.Mailer.RuntimeConfig.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Mailer.RuntimeConfig.swoosh_service/2","ref":"Bonfire.Mailer.RuntimeConfig.html#swoosh_service/2"},{"type":"module","doc":"","title":"Bonfire.Mailer.Swoosh","ref":"Bonfire.Mailer.Swoosh.html"},{"type":"function","doc":"Delivers an email.\n\nIf the email is delivered it returns an `{:ok, result}` tuple. If it fails,\nreturns an `{:error, error}` tuple.","title":"Bonfire.Mailer.Swoosh.deliver/2","ref":"Bonfire.Mailer.Swoosh.html#deliver/2"},{"type":"function","doc":"Delivers an email, raises on error.\n\nIf the email is delivered, it returns the result. If it fails, it raises\na `DeliveryError`.","title":"Bonfire.Mailer.Swoosh.deliver!/2","ref":"Bonfire.Mailer.Swoosh.html#deliver!/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.deliver_async/1","ref":"Bonfire.Mailer.Swoosh.html#deliver_async/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.deliver_inline/1","ref":"Bonfire.Mailer.Swoosh.html#deliver_inline/1"},{"type":"function","doc":"Delivers a list of emails.\n\nIt accepts a list of `%Swoosh.Email{}` as its first parameter.","title":"Bonfire.Mailer.Swoosh.deliver_many/2","ref":"Bonfire.Mailer.Swoosh.html#deliver_many/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.from/2","ref":"Bonfire.Mailer.Swoosh.html#from/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.html_body/2","ref":"Bonfire.Mailer.Swoosh.html#html_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.new/1","ref":"Bonfire.Mailer.Swoosh.html#new/1"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.subject/2","ref":"Bonfire.Mailer.Swoosh.html#subject/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.text_body/2","ref":"Bonfire.Mailer.Swoosh.html#text_body/2"},{"type":"function","doc":"","title":"Bonfire.Mailer.Swoosh.to/2","ref":"Bonfire.Mailer.Swoosh.html#to/2"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Defining categories/topics\n- Defining relationships (parent or related) between categories to create taxonomies\n\nUse Bonfire.Tag if you want to tag/classify posts or other objects with these categories/topics.","title":"Bonfire.Classify","ref":"Bonfire.Classify.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Classify","ref":"Bonfire.Classify.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, Haha Academy, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program. If not, see  .","title":"Copyright and License - Bonfire.Classify","ref":"Bonfire.Classify.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Classify.arrange_categories_tree/1","ref":"Bonfire.Classify.html#arrange_categories_tree/1"},{"type":"function","doc":"","title":"Bonfire.Classify.ensure_update_allowed/2","ref":"Bonfire.Classify.html#ensure_update_allowed/2"},{"type":"function","doc":"","title":"Bonfire.Classify.maybe_index/1","ref":"Bonfire.Classify.html#maybe_index/1"},{"type":"function","doc":"","title":"Bonfire.Classify.maybe_unindex/1","ref":"Bonfire.Classify.html#maybe_unindex/1"},{"type":"function","doc":"","title":"Bonfire.Classify.my_followed_tree/2","ref":"Bonfire.Classify.html#my_followed_tree/2"},{"type":"function","doc":"","title":"Bonfire.Classify.publish/5","ref":"Bonfire.Classify.html#publish/5"},{"type":"module","doc":"","title":"Bonfire.Classify.Categories","ref":"Bonfire.Classify.Categories.html"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.ap_publish_activity/3","ref":"Bonfire.Classify.Categories.html#ap_publish_activity/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.ap_receive_activity/3","ref":"Bonfire.Classify.Categories.html#ap_receive_activity/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.attrs_prepare_tree/2","ref":"Bonfire.Classify.Categories.html#attrs_prepare_tree/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.attrs_with_username/1","ref":"Bonfire.Classify.Categories.html#attrs_with_username/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.by_username/2","ref":"Bonfire.Classify.Categories.html#by_username/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.clean_username/1","ref":"Bonfire.Classify.Categories.html#clean_username/1"},{"type":"function","doc":"Create a brand-new category object, with info stored in profile and character mixins","title":"Bonfire.Classify.Categories.create/3","ref":"Bonfire.Classify.Categories.html#create/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.create_remote/1","ref":"Bonfire.Classify.Categories.html#create_remote/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.federation_module/0","ref":"Bonfire.Classify.Categories.html#federation_module/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.format_actor/1","ref":"Bonfire.Classify.Categories.html#format_actor/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.get/2","ref":"Bonfire.Classify.Categories.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.indexing_object_format/1","ref":"Bonfire.Classify.Categories.html#indexing_object_format/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.indexing_object_format_name/1","ref":"Bonfire.Classify.Categories.html#indexing_object_format_name/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.indexing_object_format_parent/1","ref":"Bonfire.Classify.Categories.html#indexing_object_format_parent/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.list/2","ref":"Bonfire.Classify.Categories.html#list/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.list_tree/2","ref":"Bonfire.Classify.Categories.html#list_tree/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.moderators/1","ref":"Bonfire.Classify.Categories.html#moderators/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.name_already_taken?/1","ref":"Bonfire.Classify.Categories.html#name_already_taken?/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.one/2","ref":"Bonfire.Classify.Categories.html#one/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.put_attrs_with_parent_category/2","ref":"Bonfire.Classify.Categories.html#put_attrs_with_parent_category/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.put_generated_username/2","ref":"Bonfire.Classify.Categories.html#put_generated_username/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.query_module/0","ref":"Bonfire.Classify.Categories.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.schema_module/0","ref":"Bonfire.Classify.Categories.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.soft_delete/2","ref":"Bonfire.Classify.Categories.html#soft_delete/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.try_several_usernames/4","ref":"Bonfire.Classify.Categories.html#try_several_usernames/4"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.update/4","ref":"Bonfire.Classify.Categories.html#update/4"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.update_local_actor/2","ref":"Bonfire.Classify.Categories.html#update_local_actor/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.update_remote_actor/2","ref":"Bonfire.Classify.Categories.html#update_remote_actor/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Categories.username_with_parent/2","ref":"Bonfire.Classify.Categories.html#username_with_parent/2"},{"type":"module","doc":"","title":"Bonfire.Classify.Category","ref":"Bonfire.Classify.Category.html"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.base_create_changeset/2","ref":"Bonfire.Classify.Category.html#base_create_changeset/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.context_module/0","ref":"Bonfire.Classify.Category.html#context_module/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.create_changeset/3","ref":"Bonfire.Classify.Category.html#create_changeset/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.delete/2","ref":"Bonfire.Classify.Category.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.follow_filters/0","ref":"Bonfire.Classify.Category.html#follow_filters/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.get/3","ref":"Bonfire.Classify.Category.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.put/3","ref":"Bonfire.Classify.Category.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.query_module/0","ref":"Bonfire.Classify.Category.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.update_changeset/3","ref":"Bonfire.Classify.Category.html#update_changeset/3"},{"type":"type","doc":"","title":"Bonfire.Classify.Category.t/0","ref":"Bonfire.Classify.Category.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Classify.Category.Queries","ref":"Bonfire.Classify.Category.Queries.html"},{"type":"function","doc":"Filter the query according to arbitrary criteria","title":"Bonfire.Classify.Category.Queries.filter/2","ref":"Bonfire.Classify.Category.Queries.html#filter/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.Queries.join_to/3","ref":"Bonfire.Classify.Category.Queries.html#join_to/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.Queries.queries/4","ref":"Bonfire.Classify.Category.Queries.html#queries/4"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.Queries.query/1","ref":"Bonfire.Classify.Category.Queries.html#query/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Category.Queries.query/2","ref":"Bonfire.Classify.Category.Queries.html#query/2"},{"type":"module","doc":"","title":"Bonfire.Classify.LiveHandler","ref":"Bonfire.Classify.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.declared_extension/0","ref":"Bonfire.Classify.LiveHandler.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.handle_event/3","ref":"Bonfire.Classify.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.handle_params/3","ref":"Bonfire.Classify.LiveHandler.html#handle_params/3"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.mounted/3","ref":"Bonfire.Classify.LiveHandler.html#mounted/3"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.new/3","ref":"Bonfire.Classify.LiveHandler.html#new/3"},{"type":"function","doc":"","title":"Bonfire.Classify.LiveHandler.set_image/5","ref":"Bonfire.Classify.LiveHandler.html#set_image/5"},{"type":"macro","doc":"","title":"Bonfire.Classify.LiveHandler.sigil_p/2","ref":"Bonfire.Classify.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Classify.RuntimeConfig","ref":"Bonfire.Classify.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.Classify.RuntimeConfig.config/0","ref":"Bonfire.Classify.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Classify.RuntimeConfig.config_module/0","ref":"Bonfire.Classify.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.Classify.Simulate","ref":"Bonfire.Classify.Simulate.html"},{"type":"function","doc":"","title":"Bonfire.Classify.Simulate.category/1","ref":"Bonfire.Classify.Simulate.html#category/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Simulate.fake_category!/3","ref":"Bonfire.Classify.Simulate.html#fake_category!/3"},{"type":"module","doc":"A mixin used to record parent/child relationships between categories (eg. a topic that belongs to a group) and between objects and categories (eg. a post was published in a topic)","title":"Bonfire.Classify.Tree","ref":"Bonfire.Classify.Tree.html"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.ancestor_ids/1","ref":"Bonfire.Classify.Tree.html#ancestor_ids/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.ancestors/1","ref":"Bonfire.Classify.Tree.html#ancestors/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.arrange/2","ref":"Bonfire.Classify.Tree.html#arrange/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.build_child/1","ref":"Bonfire.Classify.Tree.html#build_child/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.changeset/2","ref":"Bonfire.Classify.Tree.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.children/1","ref":"Bonfire.Classify.Tree.html#children/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.delete/2","ref":"Bonfire.Classify.Tree.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.depth/1","ref":"Bonfire.Classify.Tree.html#depth/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.descendants/1","ref":"Bonfire.Classify.Tree.html#descendants/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.get/3","ref":"Bonfire.Classify.Tree.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.make_child_of/2","ref":"Bonfire.Classify.Tree.html#make_child_of/2"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.parent/1","ref":"Bonfire.Classify.Tree.html#parent/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.parent_id/1","ref":"Bonfire.Classify.Tree.html#parent_id/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.path/1","ref":"Bonfire.Classify.Tree.html#path/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.path_ids/1","ref":"Bonfire.Classify.Tree.html#path_ids/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.put/3","ref":"Bonfire.Classify.Tree.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.put_tree/3","ref":"Bonfire.Classify.Tree.html#put_tree/3"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.root/1","ref":"Bonfire.Classify.Tree.html#root/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.root?/1","ref":"Bonfire.Classify.Tree.html#root?/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.root_id/1","ref":"Bonfire.Classify.Tree.html#root_id/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.siblings/1","ref":"Bonfire.Classify.Tree.html#siblings/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.subtree/1","ref":"Bonfire.Classify.Tree.html#subtree/1"},{"type":"function","doc":"","title":"Bonfire.Classify.Tree.where_depth/2","ref":"Bonfire.Classify.Tree.html#where_depth/2"},{"type":"type","doc":"","title":"Bonfire.Classify.Tree.t/0","ref":"Bonfire.Classify.Tree.html#t:t/0"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Extensible/configurable tools for translating Bonfire data to/from ActivityStreams\n- Bonfire Adapter for the [ActivityPub federation library ](https://github.com/bonfire-networks/activity_pub)","title":"Bonfire.Federate.ActivityPub","ref":"Bonfire.Federate.ActivityPub.html"},{"type":"module","doc":"There are unit tests both in this repo, and in the activity_pub lib, but they can't cover every possible federation case, so manual testing with e.g. `curl -H \"Accept: application/activity+json\" -v \"http://localhost:4001/pub/actors/my_username\" | jq '.'` and by trying out federation flows between instances of Bonfire and other ActivityPub implementation is a must.","title":"Testing - Bonfire.Federate.ActivityPub","ref":"Bonfire.Federate.ActivityPub.html#module-testing"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Federate.ActivityPub","ref":"Bonfire.Federate.ActivityPub.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Federate.ActivityPub","ref":"Bonfire.Federate.ActivityPub.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.disable/1","ref":"Bonfire.Federate.ActivityPub.html#disable/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.do_not_federate_user_ids/0","ref":"Bonfire.Federate.ActivityPub.html#do_not_federate_user_ids/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.federating?/1","ref":"Bonfire.Federate.ActivityPub.html#federating?/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.federating_default?/0","ref":"Bonfire.Federate.ActivityPub.html#federating_default?/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.repo/0","ref":"Bonfire.Federate.ActivityPub.html#repo/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.set_federating/2","ref":"Bonfire.Federate.ActivityPub.html#set_federating/2"},{"type":"module","doc":"Adapter functions delegated from the `ActivityPub` Library","title":"Bonfire.Federate.ActivityPub.Adapter","ref":"Bonfire.Federate.ActivityPub.Adapter.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.base_url/0","ref":"Bonfire.Federate.ActivityPub.Adapter.html#base_url/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.external_followers_for_activity/2","ref":"Bonfire.Federate.ActivityPub.Adapter.html#external_followers_for_activity/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.federate_actor?/3","ref":"Bonfire.Federate.ActivityPub.Adapter.html#federate_actor?/3"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_ap_id/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_id/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_actor_by_username/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_actor_by_username/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_follower_local_ids/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_follower_local_ids/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_following_local_ids/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_following_local_ids/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_locale/0","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_locale/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_or_create_service_actor/0","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_or_create_service_actor/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.get_redirect_url/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#get_redirect_url/1"},{"type":"function","doc":"Process incoming activities","title":"Bonfire.Federate.ActivityPub.Adapter.handle_activity/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#handle_activity/1"},{"type":"function","doc":"For updating an Actor in cache after a User/etc is updated","title":"Bonfire.Federate.ActivityPub.Adapter.local_actor_updated/2","ref":"Bonfire.Federate.ActivityPub.Adapter.html#local_actor_updated/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.maybe_create_remote_actor/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#maybe_create_remote_actor/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.maybe_publish_object/2","ref":"Bonfire.Federate.ActivityPub.Adapter.html#maybe_publish_object/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.redirect_to_actor/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#redirect_to_actor/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.update_local_actor/2","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_local_actor/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.update_remote_actor/1","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_remote_actor/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Adapter.update_remote_actor/2","ref":"Bonfire.Federate.ActivityPub.Adapter.html#update_remote_actor/2"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.all_actors/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#all_actors/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.all_recipients/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#all_recipients/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.ap_base_url/0","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#ap_base_url/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.apply_fun_style/3","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#apply_fun_style/3"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.character_module/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#character_module/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.character_to_actor/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#character_to_actor/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.create_author_object/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#create_author_object/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.create_remote_actor/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#create_remote_actor/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/3","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/3"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.determine_recipients/4","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#determine_recipients/4"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.format_actor/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#format_actor/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_actor_by_ap_id/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_actor_by_ap_id/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_actor_username/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_actor_username/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_author/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_author/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_by_url_ap_id_or_username/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_by_url_ap_id_or_username/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_ap_id/1"},{"type":"function","doc":"without :ok / :error tuple","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_ap_id!/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_ap_id!/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_id/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_id/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_character_by_username/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_character_by_username/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_context_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_context_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_creator_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_creator_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_different_creator_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_different_creator_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_in_reply_to/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_in_reply_to/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_local_actor_by_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_local_actor_by_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_local_character_by_ap_id/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_local_character_by_ap_id/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_ap_id!/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_ap_id!/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_object_or_actor_by_ap_id!/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_object_or_actor_by_ap_id!/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_create_service_character/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_create_service_character/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_fetch_and_create_by_uri/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_fetch_and_create_by_uri/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_fetch_and_create_by_username/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_fetch_and_create_by_username/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_or_fetch_character_by_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_or_fetch_character_by_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.get_pointer_id_by_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#get_pointer_id_by_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.id_or_object_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#id_or_object_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_follow?/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_follow?/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_local?/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_local?/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_local_collection?/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_local_collection?/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.is_local_collection_or_built_in?/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#is_local_collection_or_built_in?/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.local_actor_ids/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#local_actor_ids/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.log/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#log/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_add_aliases/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_add_aliases/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_attach_property_value/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_attach_property_value/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_banner_object/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_banner_object/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_icon_object/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_icon_object/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_create_image_object/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_create_image_object/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_fix_image_object/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_fix_image_object/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_format_image_object_from_path/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_format_image_object_from_path/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.maybe_pointer_for_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#maybe_pointer_for_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.preload_peered/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#preload_peered/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.public_uri/0","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#public_uri/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.return_pointable/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#return_pointable/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.return_pointer/2","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#return_pointer/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.service_character_id/0","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#service_character_id/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.service_character_username/0","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#service_character_username/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.AdapterUtils.the_ap_id/1","ref":"Bonfire.Federate.ActivityPub.AdapterUtils.html#the_ap_id/1"},{"type":"module","doc":"Filter activities depending on their origin instance, actor, or other criteria","title":"Bonfire.Federate.ActivityPub.BoundariesMRF","ref":"Bonfire.Federate.ActivityPub.BoundariesMRF.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.BoundariesMRF.actor_blocked?/3","ref":"Bonfire.Federate.ActivityPub.BoundariesMRF.html#actor_blocked?/3"},{"type":"behaviour","doc":"A automatically-generated global list of federation modules which can queried by activity and/or object type.\n\nTo add a module to this list, you should declare `@behaviour Bonfire.Federate.ActivityPub.FederationModules` in it and define a `federation_module/0` function which returns a list of object and/or activity types which that module handles.\n\nExample:\n```\n@behaviour Bonfire.Federate.ActivityPub.FederationModules\ndef federation_module,\n  do: [\n    \"Announce\",\n    {\"Create\", \"Announce\"},\n    {\"Undo\", \"Announce\"},\n    {\"Delete\", \"Announce\"}\n  ]\n```\n\nYou should also then implement these two functions:\n- for outgoing federation: `ap_publish_activity(subject_struct, verb, object_struct)`\n- for incoming federation: `ap_receive_activity(subject_struct, activity_json, object_json)`","title":"Bonfire.Federate.ActivityPub.FederationModules","ref":"Bonfire.Federate.ActivityPub.FederationModules.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.FederationModules.app_modules/0","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#app_modules/0"},{"type":"callback","doc":"Get a Federation Module identified by activity and/or object type, given a activity and/or object (string or {activity, object} tuple).","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_module/0","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#c:federation_module/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_module/2","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_module/2"},{"type":"function","doc":"Look up a Federation Module, throw :not_found if not found.","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_module!/2","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_module!/2"},{"type":"function","doc":"Look up many types at once, throw :not_found if any of them are not found","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_modules/1","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_modules/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.FederationModules.federation_modules_data_types/0","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#federation_modules_data_types/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.FederationModules.maybe_federation_module/2","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#maybe_federation_module/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.FederationModules.modules/0","ref":"Bonfire.Federate.ActivityPub.FederationModules.html#modules/0"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.Incoming","ref":"Bonfire.Federate.ActivityPub.Incoming.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Incoming.no_federation_module_match/2","ref":"Bonfire.Federate.ActivityPub.Incoming.html#no_federation_module_match/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Incoming.receive_activity/1","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_activity/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Incoming.receive_activity/2","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_activity/2"},{"type":"function","doc":"Create an object without an activity","title":"Bonfire.Federate.ActivityPub.Incoming.receive_object/2","ref":"Bonfire.Federate.ActivityPub.Incoming.html#receive_object/2"},{"type":"module","doc":"Federated instances\nContext for `Bonfire.Data.ActivityPub.Peer`","title":"Bonfire.Federate.ActivityPub.Instances","ref":"Bonfire.Federate.ActivityPub.Instances.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get_by_domain/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_by_domain/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get_by_id/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_by_id/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get_instance_circle/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_instance_circle/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get_or_create/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_or_create/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.get_or_create_instance_circle/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#get_or_create_instance_circle/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.instance_blocked?/3","ref":"Bonfire.Federate.ActivityPub.Instances.html#instance_blocked?/3"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.list/0","ref":"Bonfire.Federate.ActivityPub.Instances.html#list/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.list_by_domains/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#list_by_domains/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.list_paginated/1","ref":"Bonfire.Federate.ActivityPub.Instances.html#list_paginated/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Instances.list_query/0","ref":"Bonfire.Federate.ActivityPub.Instances.html#list_query/0"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.base_url/0","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html#base_url/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.gather_nodeinfo_data/0","ref":"Bonfire.Federate.ActivityPub.NodeinfoAdapter.html#gather_nodeinfo_data/0"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing","ref":"Bonfire.Federate.ActivityPub.Outgoing.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.ap_activity!/1","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#ap_activity!/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.federate_outgoing?/1","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#federate_outgoing?/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.maybe_federate/4","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#maybe_federate/4"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.preparation_error/2","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#preparation_error/2"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.push_actor_update/1","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#push_actor_update/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Outgoing.push_now!/1","ref":"Bonfire.Federate.ActivityPub.Outgoing.html#push_now!/1"},{"type":"module","doc":"Federated actors or objects\nContext for `Bonfire.Data.ActivityPub.Peered`","title":"Bonfire.Federate.ActivityPub.Peered","ref":"Bonfire.Federate.ActivityPub.Peered.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Peered.actor_blocked?/3","ref":"Bonfire.Federate.ActivityPub.Peered.html#actor_blocked?/3"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Peered.get/1","ref":"Bonfire.Federate.ActivityPub.Peered.html#get/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Peered.get_canonical_uri/1","ref":"Bonfire.Federate.ActivityPub.Peered.html#get_canonical_uri/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Peered.list/0","ref":"Bonfire.Federate.ActivityPub.Peered.html#list/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Peered.save_canonical_uri/3","ref":"Bonfire.Federate.ActivityPub.Peered.html#save_canonical_uri/3"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.RuntimeConfig","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.RuntimeConfig.config/0","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.RuntimeConfig.config_module/0","ref":"Bonfire.Federate.ActivityPub.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.Federate.ActivityPub.Simulate","ref":"Bonfire.Federate.ActivityPub.Simulate.html"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Simulate.actor_json/1","ref":"Bonfire.Federate.ActivityPub.Simulate.html#actor_json/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Simulate.fake_remote_user/1","ref":"Bonfire.Federate.ActivityPub.Simulate.html#fake_remote_user/1"},{"type":"function","doc":"","title":"Bonfire.Federate.ActivityPub.Simulate.webfingered/0","ref":"Bonfire.Federate.ActivityPub.Simulate.html#webfingered/0"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) to generate invite links","title":"Bonfire.Invite.Links","ref":"Bonfire.Invite.Links.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Invite.Links","ref":"Bonfire.Invite.Links.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Invite.Links","ref":"Bonfire.Invite.Links.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.create/2","ref":"Bonfire.Invite.Links.html#create/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.date_expires/1","ref":"Bonfire.Invite.Links.html#date_expires/1"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.delete/2","ref":"Bonfire.Invite.Links.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.expired?/1","ref":"Bonfire.Invite.Links.html#expired?/1"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.get/2","ref":"Bonfire.Invite.Links.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.list_paginated/2","ref":"Bonfire.Invite.Links.html#list_paginated/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.one/2","ref":"Bonfire.Invite.Links.html#one/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.query/2","ref":"Bonfire.Invite.Links.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.redeem/1","ref":"Bonfire.Invite.Links.html#redeem/1"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.redeemable?/1","ref":"Bonfire.Invite.Links.html#redeemable?/1"},{"type":"module","doc":"","title":"Bonfire.Invite.Links.Fake","ref":"Bonfire.Invite.Links.Fake.html"},{"type":"module","doc":"","title":"Bonfire.Invite.Links.Integration","ref":"Bonfire.Invite.Links.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.Integration.repo/0","ref":"Bonfire.Invite.Links.Integration.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.Invite.Links.LiveHandler","ref":"Bonfire.Invite.Links.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Invite.Links.LiveHandler.handle_event/3","ref":"Bonfire.Invite.Links.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Invite.Links.LiveHandler.sigil_p/2","ref":"Bonfire.Invite.Links.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Invite.Links.Web.Routes","ref":"Bonfire.Invite.Links.Web.Routes.html"},{"type":"module","doc":"","title":"Bonfire.InviteLink","ref":"Bonfire.InviteLink.html"},{"type":"function","doc":"","title":"Bonfire.InviteLink.changeset/2","ref":"Bonfire.InviteLink.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.InviteLink.delete/2","ref":"Bonfire.InviteLink.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.InviteLink.get/3","ref":"Bonfire.InviteLink.html#get/3"},{"type":"function","doc":"","title":"Bonfire.InviteLink.put/3","ref":"Bonfire.InviteLink.html#put/3"},{"type":"type","doc":"","title":"Bonfire.InviteLink.t/0","ref":"Bonfire.InviteLink.html#t:t/0"},{"type":"module","doc":"Bonfire.Label is a powerful and flexible extension designed to enhance content moderation and improve online safety. Inspired by the design principles outlined by Prosocial Design (specifically the [Label Misleading Content & Add Links to Reliable Related Content](https://www.prosocialdesign.org/library/label-misleading-content-add-links-to-reliable-related-content) pattern), this library enables the addition of custom labels and descriptions to user-generated posts. \n\nThis feature aids in identifying and marking potentially misleading, harmful, or unsafe content, while also providing users with links to reliable and related information.","title":"Bonfire.Label","ref":"Bonfire.Label.html"},{"type":"module","doc":"- **Custom Labeling**: Easily add custom labels to posts, categorizing them based on content, reliability, and safety.\n- **Dynamic Descriptions**: Append descriptions to posts to provide context, warnings, or additional information.\n- **Link to Reliable Sources**: Option to include up to 3 links to authoritative sources for further reading or fact-checking.\n- **Configurable Settings**: Tailor the permission system to fit the specific governance of your platform.\n- **User-friendly Interface**: Intuitive tools for moderators and administrators to manage labels and descriptions.","title":"Features - Bonfire.Label","ref":"Bonfire.Label.html#module-features"},{"type":"module","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Label","ref":"Bonfire.Label.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Label.changeset/2","ref":"Bonfire.Label.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Label.delete/2","ref":"Bonfire.Label.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Label.get/3","ref":"Bonfire.Label.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Label.put/3","ref":"Bonfire.Label.html#put/3"},{"type":"module","doc":"Takes an object and label and returns a changeset for labeling that object. \nImplements `Bonfire.Epics.Act`.\n\nEpic Options:\n  * `:current_user` - user that will create the page, required.\n\nAct Options:\n  * `:as` - key to where we find the label(s) to add, and then assign changeset to, default: `:label`.\n  * `:object` (configurable) - id to use for the thing to label\n  * `:attrs` - epic options key to find the attributes at, default: `:attrs`.","title":"Bonfire.Label.Acts.LabelObject","ref":"Bonfire.Label.Acts.LabelObject.html"},{"type":"module","doc":"","title":"Bonfire.Label.ContentLabels","ref":"Bonfire.Label.ContentLabels.html"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.built_in_ids/0","ref":"Bonfire.Label.ContentLabels.html#built_in_ids/0"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.built_ins/0","ref":"Bonfire.Label.ContentLabels.html#built_ins/0"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.can_label?/3","ref":"Bonfire.Label.ContentLabels.html#can_label?/3"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.labels/0","ref":"Bonfire.Label.ContentLabels.html#labels/0"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.labels_under/1","ref":"Bonfire.Label.ContentLabels.html#labels_under/1"},{"type":"function","doc":"","title":"Bonfire.Label.ContentLabels.parent_label_id/0","ref":"Bonfire.Label.ContentLabels.html#parent_label_id/0"},{"type":"module","doc":"","title":"Bonfire.Label.Fake","ref":"Bonfire.Label.Fake.html"},{"type":"module","doc":"","title":"Bonfire.Label.Labelling","ref":"Bonfire.Label.Labelling.html"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.ap_publish_activity/3","ref":"Bonfire.Label.Labelling.html#ap_publish_activity/3"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.count/2","ref":"Bonfire.Label.Labelling.html#count/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.date_last_labelled/2","ref":"Bonfire.Label.Labelling.html#date_last_labelled/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.get/3","ref":"Bonfire.Label.Labelling.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.get!/3","ref":"Bonfire.Label.Labelling.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.label_object/3","ref":"Bonfire.Label.Labelling.html#label_object/3"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.labelled?/2","ref":"Bonfire.Label.Labelling.html#labelled?/2"},{"type":"function","doc":"List labels by the user","title":"Bonfire.Label.Labelling.list_by/2","ref":"Bonfire.Label.Labelling.html#list_by/2"},{"type":"function","doc":"List current user's labels","title":"Bonfire.Label.Labelling.list_my/1","ref":"Bonfire.Label.Labelling.html#list_my/1"},{"type":"function","doc":"List label of an object","title":"Bonfire.Label.Labelling.list_of/2","ref":"Bonfire.Label.Labelling.html#list_of/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.list_paginated/2","ref":"Bonfire.Label.Labelling.html#list_paginated/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.query/2","ref":"Bonfire.Label.Labelling.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.query_module/0","ref":"Bonfire.Label.Labelling.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.run_epic/4","ref":"Bonfire.Label.Labelling.html#run_epic/4"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.schema_module/0","ref":"Bonfire.Label.Labelling.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Label.Labelling.unlabel/3","ref":"Bonfire.Label.Labelling.html#unlabel/3"},{"type":"module","doc":"","title":"Bonfire.Label.Labels","ref":"Bonfire.Label.Labels.html"},{"type":"function","doc":"","title":"Bonfire.Label.Labels.create/4","ref":"Bonfire.Label.Labels.html#create/4"},{"type":"function","doc":"","title":"Bonfire.Label.Labels.get/2","ref":"Bonfire.Label.Labels.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Label.Labels.get_or_create/4","ref":"Bonfire.Label.Labels.html#get_or_create/4"},{"type":"function","doc":"","title":"Bonfire.Label.Labels.repo/0","ref":"Bonfire.Label.Labels.html#repo/0"},{"type":"function","doc":"","title":"Bonfire.Label.Labels.top_label_id/0","ref":"Bonfire.Label.Labels.html#top_label_id/0"},{"type":"module","doc":"","title":"Bonfire.Label.LiveHandler","ref":"Bonfire.Label.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Label.LiveHandler.handle_event/3","ref":"Bonfire.Label.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Label.LiveHandler.maybe_tag/4","ref":"Bonfire.Label.LiveHandler.html#maybe_tag/4"},{"type":"macro","doc":"","title":"Bonfire.Label.LiveHandler.sigil_p/2","ref":"Bonfire.Label.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Label.RuntimeConfig","ref":"Bonfire.Label.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.Label.RuntimeConfig.config/0","ref":"Bonfire.Label.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Label.RuntimeConfig.config_module/0","ref":"Bonfire.Label.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.Label.Web.Routes","ref":"Bonfire.Label.Web.Routes.html"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Account creation\n- Email verification\n- Authentication\n- User/Profile creation\n- User/Profile switching\n- User Profile\n- Settings","title":"Bonfire.Me","ref":"Bonfire.Me.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Me","ref":"Bonfire.Me.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Me","ref":"Bonfire.Me.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Me.make_account_and_user/4","ref":"Bonfire.Me.html#make_account_and_user/4"},{"type":"function","doc":"","title":"Bonfire.Me.make_account_only/3","ref":"Bonfire.Me.html#make_account_only/3"},{"type":"function","doc":"","title":"Bonfire.Me.make_admin/1","ref":"Bonfire.Me.html#make_admin/1"},{"type":"module","doc":"An account represents a private identity within the system, and can have many User identities (see `Bonfire.Me.Accounts`). An account usually has an `Bonfire.Data.Identity.Email` and a `Bonfire.Data.Identity.Credential` user for login.","title":"Bonfire.Me.Accounts","ref":"Bonfire.Me.Accounts.html"},{"type":"function","doc":"Checks if signup is allowed based on instance config and provided options.","title":"Bonfire.Me.Accounts.allow_signup?/1","ref":"Bonfire.Me.Accounts.html#allow_signup?/1"},{"type":"function","doc":"iex> allow_signup?(%{invite: \"invite_code\"})\n    true","title":"Examples - Bonfire.Me.Accounts.allow_signup?/1","ref":"Bonfire.Me.Accounts.html#allow_signup?/1-examples"},{"type":"function","doc":"Changes the email for the current account.","title":"Bonfire.Me.Accounts.change_email/3","ref":"Bonfire.Me.Accounts.html#change_email/3"},{"type":"function","doc":"> change_email(%Account{}, %{old_email: \"old@example.com\", email: \"new@example.com\"})\n    {:ok, %Account{}}\n\n    > change_email(%Account{}, %Changeset{valid?: false})\n    {:error, %Changeset{}}","title":"Examples - Bonfire.Me.Accounts.change_email/3","ref":"Bonfire.Me.Accounts.html#change_email/3-examples"},{"type":"function","doc":"Changes the password for the current account.","title":"Bonfire.Me.Accounts.change_password/3","ref":"Bonfire.Me.Accounts.html#change_password/3"},{"type":"function","doc":"> change_password(%Account{}, %{old_password: \"old\", password: \"new\"})\n    {:ok, %Account{}}\n\n    > change_password(%Account{}, %Changeset{valid?: false})\n    {:error, %Changeset{}}","title":"Examples - Bonfire.Me.Accounts.change_password/3","ref":"Bonfire.Me.Accounts.html#change_password/3-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.change_password/4","ref":"Bonfire.Me.Accounts.html#change_password/4"},{"type":"function","doc":"Returns a changeset for the given changeset name and parameters.","title":"Bonfire.Me.Accounts.changeset/3","ref":"Bonfire.Me.Accounts.html#changeset/3"},{"type":"function","doc":"> changeset(:forgot_password, %{})\n    %Changeset{}\n\n    > changeset(:login, %{email: \"test@example.com\", password: \"secret\"})\n    %Changeset{}","title":"Examples - Bonfire.Me.Accounts.changeset/3","ref":"Bonfire.Me.Accounts.html#changeset/3-examples"},{"type":"function","doc":"Confirms an account's email address as valid, usually by providing a confirmation token, or directly by providing an Account.","title":"Bonfire.Me.Accounts.confirm_email/2","ref":"Bonfire.Me.Accounts.html#confirm_email/2"},{"type":"function","doc":"> confirm_email(\"some_token\")\n    {:ok, %Account{}}\n\n    > confirm_email(%Account{})\n    {:ok, %Account{}}","title":"Examples - Bonfire.Me.Accounts.confirm_email/2","ref":"Bonfire.Me.Accounts.html#confirm_email/2-examples"},{"type":"function","doc":"Confirms an account's email manually, by providing the email address. Only for internal or CLI use.","title":"Bonfire.Me.Accounts.confirm_email_manually/1","ref":"Bonfire.Me.Accounts.html#confirm_email_manually/1"},{"type":"function","doc":"> confirm_email_manually(\"test@example.com\")\n    {:ok, %Account{}}","title":"Examples - Bonfire.Me.Accounts.confirm_email_manually/1","ref":"Bonfire.Me.Accounts.html#confirm_email_manually/1-examples"},{"type":"function","doc":"Counts the number of accounts.","title":"Bonfire.Me.Accounts.count/0","ref":"Bonfire.Me.Accounts.html#count/0"},{"type":"function","doc":"iex> count()\n    42","title":"Examples - Bonfire.Me.Accounts.count/0","ref":"Bonfire.Me.Accounts.html#count/0-examples"},{"type":"function","doc":"Deletes the given account - use `enqueue_delete/1` instead.","title":"Bonfire.Me.Accounts.delete/2","ref":"Bonfire.Me.Accounts.html#delete/2"},{"type":"function","doc":"iex> delete(%Account{})\n    :ok\n\n    iex> delete(\"some_account_id\")\n    :ok","title":"Examples - Bonfire.Me.Accounts.delete/2","ref":"Bonfire.Me.Accounts.html#delete/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.do_signup/2","ref":"Bonfire.Me.Accounts.html#do_signup/2"},{"type":"function","doc":"Enqueues the deletion of the given account.","title":"Bonfire.Me.Accounts.enqueue_delete/1","ref":"Bonfire.Me.Accounts.html#enqueue_delete/1"},{"type":"function","doc":"> enqueue_delete(%Account{})\n    :ok\n\n    > enqueue_delete(\"some_account_id\")\n    :ok","title":"Examples - Bonfire.Me.Accounts.enqueue_delete/1","ref":"Bonfire.Me.Accounts.html#enqueue_delete/1-examples"},{"type":"function","doc":"Fetches the current account by its ID, returns `{:error, :not_found}` if the ID is nil.","title":"Bonfire.Me.Accounts.fetch_current/1","ref":"Bonfire.Me.Accounts.html#fetch_current/1"},{"type":"function","doc":"iex> fetch_current(nil)\n    {:error, :not_found}\n\n    > fetch_current(\"some_id\")\n    {:ok, %Account{id: \"some_id\"}}","title":"Examples - Bonfire.Me.Accounts.fetch_current/1","ref":"Bonfire.Me.Accounts.html#fetch_current/1-examples"},{"type":"function","doc":"Returns the account by its email.","title":"Bonfire.Me.Accounts.get_by_email/1","ref":"Bonfire.Me.Accounts.html#get_by_email/1"},{"type":"function","doc":"> get_by_email(\"test@example.com\")\n    %Account{email: \"test@example.com\"}","title":"Examples - Bonfire.Me.Accounts.get_by_email/1","ref":"Bonfire.Me.Accounts.html#get_by_email/1-examples"},{"type":"function","doc":"Returns the current account by its ID or nil if the ID is nil.","title":"Bonfire.Me.Accounts.get_current/1","ref":"Bonfire.Me.Accounts.html#get_current/1"},{"type":"function","doc":"iex> get_current(nil)\n    nil\n\n    > get_current(\"some_id\")\n    %Account{id: \"some_id\"}","title":"Examples - Bonfire.Me.Accounts.get_current/1","ref":"Bonfire.Me.Accounts.html#get_current/1-examples"},{"type":"function","doc":"Checks if the instance is invite-only.","title":"Bonfire.Me.Accounts.instance_is_invite_only?/0","ref":"Bonfire.Me.Accounts.html#instance_is_invite_only?/0"},{"type":"function","doc":"> instance_is_invite_only?()\n    true","title":"Examples - Bonfire.Me.Accounts.instance_is_invite_only?/0","ref":"Bonfire.Me.Accounts.html#instance_is_invite_only?/0-examples"},{"type":"function","doc":"Checks if the given user or account is an admin.","title":"Bonfire.Me.Accounts.is_admin?/1","ref":"Bonfire.Me.Accounts.html#is_admin?/1"},{"type":"function","doc":"> is_admin?(user)\n    true\n\n    > is_admin?(account)\n    true","title":"Examples - Bonfire.Me.Accounts.is_admin?/1","ref":"Bonfire.Me.Accounts.html#is_admin?/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.is_first_account?/0","ref":"Bonfire.Me.Accounts.html#is_first_account?/0"},{"type":"function","doc":"Attempts to log in by password and either username or email.\n\nAccepts a map of parameters or a `LoginFields` changeset.\n\nOn success, returns `{:ok, account, user}` if a username was\nprovided and `{:ok, account, nil}` otherwise.\nOn error, returns `{:error, changeset}`","title":"Bonfire.Me.Accounts.login/2","ref":"Bonfire.Me.Accounts.html#login/2"},{"type":"function","doc":"> login(%{email: \"test@example.com\", password: \"secret\"})\n    {:ok, %Account{}, nil}\n\n    > login(%{username: \"test\", password: \"secret\"})\n    {:ok, %Account{}, %User{}}\n\n    > login(%Changeset{valid?: false})\n    {:error, %Changeset{}}","title":"Examples - Bonfire.Me.Accounts.login/2","ref":"Bonfire.Me.Accounts.html#login/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.login_valid?/2","ref":"Bonfire.Me.Accounts.html#login_valid?/2"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.make_account/2","ref":"Bonfire.Me.Accounts.html#make_account/2"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.maybe_redeem_invite/2","ref":"Bonfire.Me.Accounts.html#maybe_redeem_invite/2"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.prepare_signup_opts/1","ref":"Bonfire.Me.Accounts.html#prepare_signup_opts/1"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.redeemable_invite?/1","ref":"Bonfire.Me.Accounts.html#redeemable_invite?/1"},{"type":"function","doc":"Requests an email confirmation for the account.","title":"Bonfire.Me.Accounts.request_confirm_email/2","ref":"Bonfire.Me.Accounts.html#request_confirm_email/2"},{"type":"function","doc":"> request_confirm_email(%{email: \"test@example.com\"})\n    {:ok, :resent, %Account{}}\n\n    > request_confirm_email(%Changeset{valid?: false})\n    {:error, %Changeset{}}","title":"Examples - Bonfire.Me.Accounts.request_confirm_email/2","ref":"Bonfire.Me.Accounts.html#request_confirm_email/2-examples"},{"type":"function","doc":"Requests a password reset to be sent for the account.","title":"Bonfire.Me.Accounts.request_forgot_password/1","ref":"Bonfire.Me.Accounts.html#request_forgot_password/1"},{"type":"function","doc":"> request_forgot_password(%{email: \"test@example.com\"})\n    {:ok, :resent, %Account{}}","title":"Examples - Bonfire.Me.Accounts.request_forgot_password/1","ref":"Bonfire.Me.Accounts.html#request_forgot_password/1-examples"},{"type":"function","doc":"Signs up a new account with the given parameters.","title":"Bonfire.Me.Accounts.signup/2","ref":"Bonfire.Me.Accounts.html#signup/2"},{"type":"function","doc":"> signup(%{email: \"test@example.com\", password: \"secret\"})\n    {:ok, %Account{}}\n\n    > signup(%Changeset{valid?: false})\n    {:error, %Changeset{}}","title":"Examples - Bonfire.Me.Accounts.signup/2","ref":"Bonfire.Me.Accounts.html#signup/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.update_is_admin/3","ref":"Bonfire.Me.Accounts.html#update_is_admin/3"},{"type":"type","doc":"","title":"Bonfire.Me.Accounts.changeset_name/0","ref":"Bonfire.Me.Accounts.html#t:changeset_name/0"},{"type":"module","doc":"A changeset for changing an account's email address","title":"Bonfire.Me.Accounts.ChangeEmailFields","ref":"Bonfire.Me.Accounts.ChangeEmailFields.html"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.ChangeEmailFields.changeset/2","ref":"Bonfire.Me.Accounts.ChangeEmailFields.html#changeset/2"},{"type":"module","doc":"A changeset for changing an account's password","title":"Bonfire.Me.Accounts.ChangePasswordFields","ref":"Bonfire.Me.Accounts.ChangePasswordFields.html"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.ChangePasswordFields.changeset/3","ref":"Bonfire.Me.Accounts.ChangePasswordFields.html#changeset/3"},{"type":"module","doc":"A changeset for confirming an email address","title":"Bonfire.Me.Accounts.ConfirmEmailFields","ref":"Bonfire.Me.Accounts.ConfirmEmailFields.html"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.ConfirmEmailFields.changeset/2","ref":"Bonfire.Me.Accounts.ConfirmEmailFields.html#changeset/2"},{"type":"module","doc":"A changeset for requesting a password reset","title":"Bonfire.Me.Accounts.ForgotPasswordFields","ref":"Bonfire.Me.Accounts.ForgotPasswordFields.html"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.ForgotPasswordFields.changeset/2","ref":"Bonfire.Me.Accounts.ForgotPasswordFields.html#changeset/2"},{"type":"module","doc":"A changeset for logging in","title":"Bonfire.Me.Accounts.LoginFields","ref":"Bonfire.Me.Accounts.LoginFields.html"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.LoginFields.changeset/2","ref":"Bonfire.Me.Accounts.LoginFields.html#changeset/2"},{"type":"module","doc":"Queries for `Bonfire.Me.Accounts`","title":"Bonfire.Me.Accounts.Queries","ref":"Bonfire.Me.Accounts.Queries.html"},{"type":"function","doc":"Finds an account by email confirmation token.","title":"Bonfire.Me.Accounts.Queries.by_confirm_token/1","ref":"Bonfire.Me.Accounts.Queries.html#by_confirm_token/1"},{"type":"function","doc":"iex> by_confirm_token(\"some_token\")\n    #Ecto.Query<...>","title":"Examples - Bonfire.Me.Accounts.Queries.by_confirm_token/1","ref":"Bonfire.Me.Accounts.Queries.html#by_confirm_token/1-examples"},{"type":"function","doc":"Finds an account by email address.","title":"Bonfire.Me.Accounts.Queries.by_email/1","ref":"Bonfire.Me.Accounts.Queries.html#by_email/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.Queries.by_email(\"example@example.com\")\n    #Ecto.Query<...>","title":"Examples - Bonfire.Me.Accounts.Queries.by_email/1","ref":"Bonfire.Me.Accounts.Queries.html#by_email/1-examples"},{"type":"function","doc":"Counts the total number of accounts, or counts the number of records in the provided query.","title":"Bonfire.Me.Accounts.Queries.count/1","ref":"Bonfire.Me.Accounts.Queries.html#count/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.Queries.count()\n\n    iex> Bonfire.Me.Accounts.Queries.count(from(a in Account, where: a.active == true))","title":"Examples - Bonfire.Me.Accounts.Queries.count/1","ref":"Bonfire.Me.Accounts.Queries.html#count/1-examples"},{"type":"function","doc":"Retrieves the current account by ID.","title":"Bonfire.Me.Accounts.Queries.current/1","ref":"Bonfire.Me.Accounts.Queries.html#current/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.Queries.current(\"some_id\")","title":"Examples - Bonfire.Me.Accounts.Queries.current/1","ref":"Bonfire.Me.Accounts.Queries.html#current/1-examples"},{"type":"function","doc":"Find an account by ID, preloading email and credential information.","title":"Bonfire.Me.Accounts.Queries.login_by_account_id/1","ref":"Bonfire.Me.Accounts.Queries.html#login_by_account_id/1"},{"type":"function","doc":"Find an account by email address, preloading email and credential information.","title":"Bonfire.Me.Accounts.Queries.login_by_email/1","ref":"Bonfire.Me.Accounts.Queries.html#login_by_email/1"},{"type":"function","doc":"Find an account by username, preloading the user (with character, and profile information).","title":"Bonfire.Me.Accounts.Queries.login_by_username/1","ref":"Bonfire.Me.Accounts.Queries.html#login_by_username/1"},{"type":"module","doc":"Support for second-factor authentication. Powered by `NimbleTOTP`.","title":"Bonfire.Me.Accounts.SecondFactors","ref":"Bonfire.Me.Accounts.SecondFactors.html"},{"type":"function","doc":"Creates or updates a TOTP changeset.\n\n  The secret will only be updated if the OTP code sent is valid.","title":"Bonfire.Me.Accounts.SecondFactors.changeset/3","ref":"Bonfire.Me.Accounts.SecondFactors.html#changeset/3"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.changeset(%AuthSecondFactor{}, %{secret: \"new_secret\"}, [])\n    %Ecto.Changeset{data: %AuthSecondFactor{}}","title":"Examples - Bonfire.Me.Accounts.SecondFactors.changeset/3","ref":"Bonfire.Me.Accounts.SecondFactors.html#changeset/3-examples"},{"type":"function","doc":"Disables the TOTP configuration for the given account.","title":"Bonfire.Me.Accounts.SecondFactors.delete_account_totp/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#delete_account_totp/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.delete_account_totp(%AuthSecondFactor{id: \"some_id\"})\n\n    iex> Bonfire.Me.Accounts.SecondFactors.delete_account_totp(\"some_id\")","title":"Examples - Bonfire.Me.Accounts.SecondFactors.delete_account_totp/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#delete_account_totp/1-examples"},{"type":"function","doc":"Checks if second-factor authentication (TOTP) is enabled on the instance.","title":"Bonfire.Me.Accounts.SecondFactors.enabled?/0","ref":"Bonfire.Me.Accounts.SecondFactors.html#enabled?/0"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.enabled?()\n    true","title":"Examples - Bonfire.Me.Accounts.SecondFactors.enabled?/0","ref":"Bonfire.Me.Accounts.SecondFactors.html#enabled?/0-examples"},{"type":"function","doc":"Formats a TOTP secret into a human-readable format.","title":"Bonfire.Me.Accounts.SecondFactors.format_secret/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#format_secret/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.format_secret(\"JBSWY3DPEHPK3PXP\")\n    \"JBSW Y3DP EHPK 3PXP\"","title":"Examples - Bonfire.Me.Accounts.SecondFactors.format_secret/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#format_secret/1-examples"},{"type":"function","doc":"Retrieves the second factor record for an account, if any.","title":"Bonfire.Me.Accounts.SecondFactors.get_account_totp/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#get_account_totp/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.get_account_totp(%{auth_second_factor: %AuthSecondFactor{}})\n    %AuthSecondFactor{}\n\n    iex> Bonfire.Me.Accounts.SecondFactors.get_account_totp(\"some_id\")\n    %AuthSecondFactor{}","title":"Examples - Bonfire.Me.Accounts.SecondFactors.get_account_totp/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#get_account_totp/1-examples"},{"type":"function","doc":"Tries to authenticates an account using the provided parameters.","title":"Bonfire.Me.Accounts.SecondFactors.maybe_authenticate/2","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_authenticate/2"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.maybe_authenticate(\"account_id\", %{\"auth_second_factor\" => %{\"code\" => \"123456\"}})\n    {:ok, :valid_totp}","title":"Examples - Bonfire.Me.Accounts.SecondFactors.maybe_authenticate/2","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_authenticate/2-examples"},{"type":"function","doc":"Conditionally casts a TOTP changeset based on parameters and options.","title":"Bonfire.Me.Accounts.SecondFactors.maybe_cast_totp_changeset/3","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_cast_totp_changeset/3"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.maybe_cast_totp_changeset(changeset, %{auth_second_factor: %{code: \"123456\"}}, [])\n    %Ecto.Changeset{data: %AuthSecondFactor{}}","title":"Examples - Bonfire.Me.Accounts.SecondFactors.maybe_cast_totp_changeset/3","ref":"Bonfire.Me.Accounts.SecondFactors.html#maybe_cast_totp_changeset/3-examples"},{"type":"function","doc":"Generates a new TOTP secret if second-factor authentication is enabled.\n\n The secret is a random 20 bytes binary that is used to generate the QR Code to enable 2FA using auth applications.","title":"Bonfire.Me.Accounts.SecondFactors.new/0","ref":"Bonfire.Me.Accounts.SecondFactors.html#new/0"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.new()\n    \"JBSWY3DPEHPK3PXP\"","title":"Examples - Bonfire.Me.Accounts.SecondFactors.new/0","ref":"Bonfire.Me.Accounts.SecondFactors.html#new/0-examples"},{"type":"function","doc":"Generates a QR code for the TOTP URI.","title":"Bonfire.Me.Accounts.SecondFactors.new_qrcode/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_qrcode/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.new_qrcode()\n    \" ... \"","title":"Examples - Bonfire.Me.Accounts.SecondFactors.new_qrcode/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_qrcode/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Accounts.SecondFactors.new_struct/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_struct/1"},{"type":"function","doc":"Generates a new TOTP URI for use in an authentication app.","title":"Bonfire.Me.Accounts.SecondFactors.new_uri/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_uri/1"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.new_uri()\n    \"otpauth://totp/bonfire:AccountName?secret=APYWY3DPEHPK3PXV&issuer=Issuer\"\n\n    iex> Bonfire.Me.Accounts.SecondFactors.new_uri(\"JBSWY3DPEHPK3PXP\")\n    \"otpauth://totp/bonfire:AccountName?secret=JBSWY3DPEHPK3PXP&issuer=Issuer\"","title":"Examples - Bonfire.Me.Accounts.SecondFactors.new_uri/1","ref":"Bonfire.Me.Accounts.SecondFactors.html#new_uri/1-examples"},{"type":"function","doc":"Validates if the given TOTP code is valid.","title":"Bonfire.Me.Accounts.SecondFactors.validate_account_totp/2","ref":"Bonfire.Me.Accounts.SecondFactors.html#validate_account_totp/2"},{"type":"function","doc":"iex> Bonfire.Me.Accounts.SecondFactors.validate_account_totp(%AuthSecondFactor{id: \"some_id\", secret: \"JBSWY3DPEHPK3PXP\"}, \"123456\")\n    :valid_totp\n\n     iex> Bonfire.Me.Accounts.SecondFactors.validate_account_totp(\"some_id\", \"123456\")\n    :valid_totp","title":"Examples - Bonfire.Me.Accounts.SecondFactors.validate_account_totp/2","ref":"Bonfire.Me.Accounts.SecondFactors.html#validate_account_totp/2-examples"},{"type":"module","doc":"An act that deals with maintaining a `Caretaker` record for a changeset.\n\nDuring insertion, adds an associated insert if a caretaker can be found in the epic options.\n\nDuring deletion, ensures that the related record will be cleaned up.\n\nEpic Options (insert):\n  * `:caretaker` - user that will take care of the post, falls back to `:current_user`\n  * `:current_user` - user that will taker care of the post, fallback if `:caretaker` is not set.\n\nAct Options:\n  * `:on` - key to find changeset, required.","title":"Bonfire.Me.Acts.Caretaker","ref":"Bonfire.Me.Acts.Caretaker.html"},{"type":"function","doc":"","title":"Bonfire.Me.Acts.Caretaker.run/2","ref":"Bonfire.Me.Acts.Caretaker.html#run/2"},{"type":"module","doc":"An act that deals with maintaining a `Created` record for a changeset.\n\nDuring insertion, adds an associated insert if a creator can be found in the epic options.\n\nDuring deletion, ensures that the related record will be cleaned up.\n\nEpic Options (insert):\n  * `:creator` - user that will create the post, falls back to `:current_user`\n  * `:current_user` - user that will create the post, fallback if `:creator` is not set.\n\nAct Options:\n  * `:on` - key to find changeset, required.","title":"Bonfire.Me.Acts.Creator","ref":"Bonfire.Me.Acts.Creator.html"},{"type":"module","doc":"","title":"Bonfire.Me.Archive.LiveHandler","ref":"Bonfire.Me.Archive.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Me.Archive.LiveHandler.handle_event/3","ref":"Bonfire.Me.Archive.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Me.Archive.LiveHandler.sigil_p/2","ref":"Bonfire.Me.Archive.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Shared helpers for character types (such as User or Category)\n\nContext for `Bonfire.Data.Identity.Character` mixin, which has these fields:\n- username\n- username_hash: hashed username (used for preserving uniqueness incl. deleted usernames)\n- outbox: Feed of activities by the user\n- inbox: Feed of messages and other activities for the user\n- notifications: Feed of notifications for the user","title":"Bonfire.Me.Characters","ref":"Bonfire.Me.Characters.html"},{"type":"function","doc":"Retrieves a character by username.","title":"Bonfire.Me.Characters.by_username/1","ref":"Bonfire.Me.Characters.html#by_username/1"},{"type":"function","doc":"> Bonfire.Me.Characters.by_username(\"username\")\n    %Bonfire.Data.Identity.Character{}","title":"Examples - Bonfire.Me.Characters.by_username/1","ref":"Bonfire.Me.Characters.html#by_username/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.by_username!/1","ref":"Bonfire.Me.Characters.html#by_username!/1"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.by_username_q/1","ref":"Bonfire.Me.Characters.html#by_username_q/1"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.changeset/3","ref":"Bonfire.Me.Characters.html#changeset/3"},{"type":"function","doc":"Returns the appropriate mention prefix for a character type.","title":"Bonfire.Me.Characters.character_mention_prefix/1","ref":"Bonfire.Me.Characters.html#character_mention_prefix/1"},{"type":"function","doc":"iex> Bonfire.Me.Characters.character_mention_prefix(%Bonfire.Data.Identity.User{})\n    \"@\"","title":"Examples - Bonfire.Me.Characters.character_mention_prefix/1","ref":"Bonfire.Me.Characters.html#character_mention_prefix/1-examples"},{"type":"function","doc":"Returns the canonical URL for a character.","title":"Bonfire.Me.Characters.character_url/1","ref":"Bonfire.Me.Characters.html#character_url/1"},{"type":"function","doc":"iex> Bonfire.Me.Characters.character_url(%Bonfire.Data.Identity.Character{})\n    \"http://example.com/character/username\"","title":"Examples - Bonfire.Me.Characters.character_url/1","ref":"Bonfire.Me.Characters.html#character_url/1-examples"},{"type":"function","doc":"Cleans a username by replacing forbidden characters with underscores.","title":"Bonfire.Me.Characters.clean_username/1","ref":"Bonfire.Me.Characters.html#clean_username/1"},{"type":"function","doc":"iex> Bonfire.Me.Characters.clean_username(\"invalid username!\")\n    \"invalid_username\"","title":"Examples - Bonfire.Me.Characters.clean_username/1","ref":"Bonfire.Me.Characters.html#clean_username/1-examples"},{"type":"function","doc":"Displays a username with optional domain and prefix.","title":"Bonfire.Me.Characters.display_username/4","ref":"Bonfire.Me.Characters.html#display_username/4"},{"type":"function","doc":"iex> Bonfire.Me.Characters.display_username(\"username\")\n    \"@username\"\n\n    iex> Bonfire.Me.Characters.display_username(\"username\", true, true, \"@\")\n    \"@username@domain.com\"","title":"Examples - Bonfire.Me.Characters.display_username/4","ref":"Bonfire.Me.Characters.html#display_username/4-examples"},{"type":"function","doc":"Retrieves multiple characters by IDs.","title":"Bonfire.Me.Characters.get/1","ref":"Bonfire.Me.Characters.html#get/1"},{"type":"function","doc":"> Bonfire.Me.Characters.get(\"id_or_username\")\n    %Bonfire.Data.Identity.Character{}\n\n    > Bonfire.Me.Characters.get([\"id1\", \"id2\"])\n    {:ok, [%Bonfire.Data.Identity.Character{}, %Bonfire.Data.Identity.Character{}]}","title":"Examples - Bonfire.Me.Characters.get/1","ref":"Bonfire.Me.Characters.html#get/1-examples"},{"type":"function","doc":"Checks if a username hash is available.","title":"Bonfire.Me.Characters.hash_available?/1","ref":"Bonfire.Me.Characters.html#hash_available?/1"},{"type":"function","doc":"iex> Bonfire.Me.Characters.hash_available?(\"hash\")\n    true","title":"Examples - Bonfire.Me.Characters.hash_available?/1","ref":"Bonfire.Me.Characters.html#hash_available?/1-examples"},{"type":"function","doc":"Deletes a character by username hash.","title":"Bonfire.Me.Characters.hash_delete/1","ref":"Bonfire.Me.Characters.html#hash_delete/1"},{"type":"function","doc":"> Bonfire.Me.Characters.hash_delete(\"hash\")","title":"Examples - Bonfire.Me.Characters.hash_delete/1","ref":"Bonfire.Me.Characters.html#hash_delete/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.indexing_object_format/1","ref":"Bonfire.Me.Characters.html#indexing_object_format/1"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.q_by_id/1","ref":"Bonfire.Me.Characters.html#q_by_id/1"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.remote_changeset/2","ref":"Bonfire.Me.Characters.html#remote_changeset/2"},{"type":"function","doc":"","title":"Bonfire.Me.Characters.schema_module/0","ref":"Bonfire.Me.Characters.html#schema_module/0"},{"type":"function","doc":"Updates a character with the given attributes.","title":"Bonfire.Me.Characters.update/2","ref":"Bonfire.Me.Characters.html#update/2"},{"type":"function","doc":"> Bonfire.Me.Characters.update(%Bonfire.Data.Identity.Character{}, %{field: \"value\"})\n    {:ok, %Bonfire.Data.Identity.Character{}}","title":"Examples - Bonfire.Me.Characters.update/2","ref":"Bonfire.Me.Characters.html#update/2-examples"},{"type":"function","doc":"Checks if a username is available.","title":"Bonfire.Me.Characters.username_available?/1","ref":"Bonfire.Me.Characters.html#username_available?/1"},{"type":"function","doc":"iex> Bonfire.Me.Characters.username_available?(\"non_existing_username\")\n    true","title":"Examples - Bonfire.Me.Characters.username_available?/1","ref":"Bonfire.Me.Characters.html#username_available?/1-examples"},{"type":"module","doc":"Handles queued deletion of a user and its data.","title":"Bonfire.Me.DeleteWorker","ref":"Bonfire.Me.DeleteWorker.html"},{"type":"function","doc":"","title":"Bonfire.Me.DeleteWorker.delete/2","ref":"Bonfire.Me.DeleteWorker.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Me.DeleteWorker.delete_now/1","ref":"Bonfire.Me.DeleteWorker.html#delete_now/1"},{"type":"function","doc":"","title":"Bonfire.Me.DeleteWorker.delete_structs_now/1","ref":"Bonfire.Me.DeleteWorker.html#delete_structs_now/1"},{"type":"function","doc":"","title":"Bonfire.Me.DeleteWorker.enqueue_delete/1","ref":"Bonfire.Me.DeleteWorker.html#enqueue_delete/1"},{"type":"function","doc":"","title":"Bonfire.Me.DeleteWorker.perform/1","ref":"Bonfire.Me.DeleteWorker.html#perform/1"},{"type":"module","doc":"","title":"Bonfire.Me.Fake","ref":"Bonfire.Me.Fake.html"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.fake_account!/2","ref":"Bonfire.Me.Fake.html#fake_account!/2"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.fake_user!/3","ref":"Bonfire.Me.Fake.html#fake_user!/3"},{"type":"module","doc":"","title":"Bonfire.Me.Fake.Helpers","ref":"Bonfire.Me.Fake.Helpers.html"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.atusername/0","ref":"Bonfire.Me.Fake.Helpers.html#atusername/0"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.avatar_url/0","ref":"Bonfire.Me.Fake.Helpers.html#avatar_url/0"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.avatar_url/1","ref":"Bonfire.Me.Fake.Helpers.html#avatar_url/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.character_subform/1","ref":"Bonfire.Me.Fake.Helpers.html#character_subform/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.confirm_token/0","ref":"Bonfire.Me.Fake.Helpers.html#confirm_token/0"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.create_user_form/1","ref":"Bonfire.Me.Fake.Helpers.html#create_user_form/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.credential_subform/1","ref":"Bonfire.Me.Fake.Helpers.html#credential_subform/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.email_subform/1","ref":"Bonfire.Me.Fake.Helpers.html#email_subform/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.icon_url/1","ref":"Bonfire.Me.Fake.Helpers.html#icon_url/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.image/1","ref":"Bonfire.Me.Fake.Helpers.html#image/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.image_url/1","ref":"Bonfire.Me.Fake.Helpers.html#image_url/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.profile_subform/1","ref":"Bonfire.Me.Fake.Helpers.html#profile_subform/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.signup_form/1","ref":"Bonfire.Me.Fake.Helpers.html#signup_form/1"},{"type":"function","doc":"","title":"Bonfire.Me.Fake.Helpers.user_live/1","ref":"Bonfire.Me.Fake.Helpers.html#user_live/1"},{"type":"module","doc":"","title":"Bonfire.Me.Integration","ref":"Bonfire.Me.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.declared_extension/0","ref":"Bonfire.Me.Integration.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.indexing_format_created/1","ref":"Bonfire.Me.Integration.html#indexing_format_created/1"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.indexing_format_creator/1","ref":"Bonfire.Me.Integration.html#indexing_format_creator/1"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.is_local?/2","ref":"Bonfire.Me.Integration.html#is_local?/2"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.mailer/0","ref":"Bonfire.Me.Integration.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.maybe_index/2","ref":"Bonfire.Me.Integration.html#maybe_index/2"},{"type":"function","doc":"","title":"Bonfire.Me.Integration.repo/0","ref":"Bonfire.Me.Integration.html#repo/0"},{"type":"module","doc":"Handles email sending functionality for accounts and users","title":"Bonfire.Me.Mails","ref":"Bonfire.Me.Mails.html"},{"type":"function","doc":"Sends a confirmation email based on the specified action.","title":"Bonfire.Me.Mails.confirm_email/2","ref":"Bonfire.Me.Mails.html#confirm_email/2"},{"type":"function","doc":"- `account`: The `%Account{}` struct for the user.\n  - `opts`: Options including `:confirm_action`, which determines the type of email to send.","title":"Parameters - Bonfire.Me.Mails.confirm_email/2","ref":"Bonfire.Me.Mails.html#confirm_email/2-parameters"},{"type":"function","doc":"iex> Bonfire.Me.Mails.confirm_email(%Account{})\n    # sends signup confirmation\n\n    iex> Bonfire.Me.Mails.confirm_email(%Account{}, confirm_action: :forgot_password)\n\n    iex> Bonfire.Me.Mails.confirm_email(%Account{}, confirm_action: :forgot_password)","title":"Examples - Bonfire.Me.Mails.confirm_email/2","ref":"Bonfire.Me.Mails.html#confirm_email/2-examples"},{"type":"function","doc":"Sends a password reset email.","title":"Bonfire.Me.Mails.forgot_password/1","ref":"Bonfire.Me.Mails.html#forgot_password/1"},{"type":"function","doc":"- `account`: The `%Account{}` struct for the user.","title":"Parameters - Bonfire.Me.Mails.forgot_password/1","ref":"Bonfire.Me.Mails.html#forgot_password/1-parameters"},{"type":"function","doc":"iex> Bonfire.Me.Mails.forgot_password(%Account{email: %{confirm_token: \"token\"}})\n    :ok","title":"Examples - Bonfire.Me.Mails.forgot_password/1","ref":"Bonfire.Me.Mails.html#forgot_password/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Mails.mailer/0","ref":"Bonfire.Me.Mails.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Me.Mails.render/3","ref":"Bonfire.Me.Mails.html#render/3"},{"type":"function","doc":"Sends a confirmation email for user signup.","title":"Bonfire.Me.Mails.signup_confirm_email/1","ref":"Bonfire.Me.Mails.html#signup_confirm_email/1"},{"type":"function","doc":"- `account`: The `%Account{}` struct for the user.","title":"Parameters - Bonfire.Me.Mails.signup_confirm_email/1","ref":"Bonfire.Me.Mails.html#signup_confirm_email/1-parameters"},{"type":"function","doc":"iex> Bonfire.Me.Mails.signup_confirm_email(%Account{email: %{confirm_token: \"token\"}})","title":"Examples - Bonfire.Me.Mails.signup_confirm_email/1","ref":"Bonfire.Me.Mails.html#signup_confirm_email/1-examples"},{"type":"module","doc":"","title":"Bonfire.Me.Mails.EmailView","ref":"Bonfire.Me.Mails.EmailView.html"},{"type":"function","doc":"","title":"Bonfire.Me.Mails.EmailView.render_template/2","ref":"Bonfire.Me.Mails.EmailView.html#render_template/2"},{"type":"module","doc":"Shared helpers for profiles (such as the profile of a User or Category)\n\nContext for `Bonfire.Data.Social.Profile` mixin, which has these fields:\n- name\n- summary\n- website\n- location (plaintext, see also Geolocation integration for storing GPS coordinates)\n- icon: eg. avatar (references a `Bonfire.Files.Media`)\n- image: eg. banner","title":"Bonfire.Me.Profiles","ref":"Bonfire.Me.Profiles.html"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.changeset/2","ref":"Bonfire.Me.Profiles.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.changeset_simple/2","ref":"Bonfire.Me.Profiles.html#changeset_simple/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.indexing_object_format/1","ref":"Bonfire.Me.Profiles.html#indexing_object_format/1"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.schema_module/0","ref":"Bonfire.Me.Profiles.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.set_profile_image/3","ref":"Bonfire.Me.Profiles.html#set_profile_image/3"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.spam?/2","ref":"Bonfire.Me.Profiles.html#spam?/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.spam_check!/2","ref":"Bonfire.Me.Profiles.html#spam_check!/2"},{"type":"module","doc":"","title":"Bonfire.Me.Profiles.LiveHandler","ref":"Bonfire.Me.Profiles.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.default_assigns/1","ref":"Bonfire.Me.Profiles.LiveHandler.html#default_assigns/1"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.get/1","ref":"Bonfire.Me.Profiles.LiveHandler.html#get/1"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.handle_event/3","ref":"Bonfire.Me.Profiles.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.init/2","ref":"Bonfire.Me.Profiles.LiveHandler.html#init/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.maybe_assign_aliases/2","ref":"Bonfire.Me.Profiles.LiveHandler.html#maybe_assign_aliases/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.set_image_setting/5","ref":"Bonfire.Me.Profiles.LiveHandler.html#set_image_setting/5"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.set_profile_image/5","ref":"Bonfire.Me.Profiles.LiveHandler.html#set_profile_image/5"},{"type":"macro","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.sigil_p/2","ref":"Bonfire.Me.Profiles.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Me.Profiles.LiveHandler.user_assigns/3","ref":"Bonfire.Me.Profiles.LiveHandler.html#user_assigns/3"},{"type":"module","doc":"","title":"Bonfire.Me.RuntimeConfig","ref":"Bonfire.Me.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Me.RuntimeConfig.config/0","ref":"Bonfire.Me.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Me.RuntimeConfig.config_module/0","ref":"Bonfire.Me.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"A User represents a visible identity within the system belonging to an Account (see `Bonfire.Me.Accounts`) and having a Profile (see `Bonfire.Me.Profiles`) and a Character identified by a username (see `Bonfire.Me.Characters`).","title":"Bonfire.Me.Users","ref":"Bonfire.Me.Users.html"},{"type":"function","doc":"","title":"Bonfire.Me.Users.ap_receive_activity/3","ref":"Bonfire.Me.Users.html#ap_receive_activity/3"},{"type":"function","doc":"Gets users by account.","title":"Bonfire.Me.Users.by_account/1","ref":"Bonfire.Me.Users.html#by_account/1"},{"type":"function","doc":"> Bonfire.Me.Users.by_account(%Bonfire.Data.Identity.Account{id: \"account_id\"})\n    [%Bonfire.Data.Identity.User{}]\n\n    > Bonfire.Me.Users.by_account!(\"account_id\")\n    [%Bonfire.Data.Identity.User{}]","title":"Examples - Bonfire.Me.Users.by_account/1","ref":"Bonfire.Me.Users.html#by_account/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.by_account!/1","ref":"Bonfire.Me.Users.html#by_account!/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.by_ap_id/1","ref":"Bonfire.Me.Users.html#by_ap_id/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.by_ap_id!/1","ref":"Bonfire.Me.Users.html#by_ap_id!/1"},{"type":"function","doc":"Gets a user by canonical URI.","title":"Bonfire.Me.Users.by_canonical_uri/1","ref":"Bonfire.Me.Users.html#by_canonical_uri/1"},{"type":"function","doc":"> Bonfire.Me.Users.by_canonical_uri(\"http://example.com\")\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.by_canonical_uri/1","ref":"Bonfire.Me.Users.html#by_canonical_uri/1-examples"},{"type":"function","doc":"Gets a user by ID.","title":"Bonfire.Me.Users.by_id/2","ref":"Bonfire.Me.Users.html#by_id/2"},{"type":"function","doc":"> Bonfire.Me.Users.by_id(\"user_id\")\n    %Bonfire.Data.Identity.User{}\n\n    > Bonfire.Me.Users.by_id([\"user_id\"])\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.by_id/2","ref":"Bonfire.Me.Users.html#by_id/2-examples"},{"type":"function","doc":"Gets a user by username or user ID and account ID, useful for switch-user functionality. \n\nWill throw an error if any of the account's users is blocked instance-wide by admins.","title":"Bonfire.Me.Users.by_user_and_account/2","ref":"Bonfire.Me.Users.html#by_user_and_account/2"},{"type":"function","doc":"> Bonfire.Me.Users.by_user_and_account(\"username\", \"account_id\")\n    {:ok, %Bonfire.Data.Identity.User{}}","title":"Examples - Bonfire.Me.Users.by_user_and_account/2","ref":"Bonfire.Me.Users.html#by_user_and_account/2-examples"},{"type":"function","doc":"Gets a user by username.","title":"Bonfire.Me.Users.by_username/2","ref":"Bonfire.Me.Users.html#by_username/2"},{"type":"function","doc":"> Bonfire.Me.Users.by_username(\"username\")\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.by_username/2","ref":"Bonfire.Me.Users.html#by_username/2-examples"},{"type":"function","doc":"Gets a user by username, raising an error if not found.","title":"Bonfire.Me.Users.by_username!/1","ref":"Bonfire.Me.Users.html#by_username!/1"},{"type":"function","doc":"> Bonfire.Me.Users.by_username!(\"username\")\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.by_username!/1","ref":"Bonfire.Me.Users.html#by_username!/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.changeset/4","ref":"Bonfire.Me.Users.html#changeset/4"},{"type":"function","doc":"Checks if users are active.","title":"Bonfire.Me.Users.check_active/1","ref":"Bonfire.Me.Users.html#check_active/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.check_active([user1])\n    [{:ok, %Bonfire.Data.Identity.User{}}]\n\n    iex> Bonfire.Me.Users.check_active(user)\n    {:ok, %Bonfire.Data.Identity.User{}}","title":"Examples - Bonfire.Me.Users.check_active/1","ref":"Bonfire.Me.Users.html#check_active/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.check_active!/1","ref":"Bonfire.Me.Users.html#check_active!/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.count/1","ref":"Bonfire.Me.Users.html#count/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.create/2","ref":"Bonfire.Me.Users.html#create/2"},{"type":"function","doc":"Creates a remote user","title":"Bonfire.Me.Users.create_remote/2","ref":"Bonfire.Me.Users.html#create_remote/2"},{"type":"function","doc":"","title":"Bonfire.Me.Users.enqueue_delete/1","ref":"Bonfire.Me.Users.html#enqueue_delete/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.federation_module/0","ref":"Bonfire.Me.Users.html#federation_module/0"},{"type":"function","doc":"Fetches the current user by ID.","title":"Bonfire.Me.Users.fetch_current/1","ref":"Bonfire.Me.Users.html#fetch_current/1"},{"type":"function","doc":"> Bonfire.Me.Users.fetch_current(\"user_id\")\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.fetch_current/1","ref":"Bonfire.Me.Users.html#fetch_current/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.flatten/1","ref":"Bonfire.Me.Users.html#flatten/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.format_actor/1","ref":"Bonfire.Me.Users.html#format_actor/1"},{"type":"function","doc":"Gets the current user by ID.","title":"Bonfire.Me.Users.get_current/1","ref":"Bonfire.Me.Users.html#get_current/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.get_current(nil)\n    nil\n\n    > Bonfire.Me.Users.get_current(\"user_id\")\n    %Bonfire.Data.Identity.User{}","title":"Examples - Bonfire.Me.Users.get_current/1","ref":"Bonfire.Me.Users.html#get_current/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.get_current/2","ref":"Bonfire.Me.Users.html#get_current/2"},{"type":"function","doc":"","title":"Bonfire.Me.Users.get_only_in_account/1","ref":"Bonfire.Me.Users.html#get_only_in_account/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.get_or_create_service_character/3","ref":"Bonfire.Me.Users.html#get_or_create_service_character/3"},{"type":"function","doc":"","title":"Bonfire.Me.Users.get_or_create_service_user/2","ref":"Bonfire.Me.Users.html#get_or_create_service_user/2"},{"type":"function","doc":"","title":"Bonfire.Me.Users.ids_by_account/1","ref":"Bonfire.Me.Users.html#ids_by_account/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.indexing_object_format/1","ref":"Bonfire.Me.Users.html#indexing_object_format/1"},{"type":"function","doc":"Checks if a user is active.","title":"Bonfire.Me.Users.is_active?/1","ref":"Bonfire.Me.Users.html#is_active?/1"},{"type":"function","doc":"> Bonfire.Me.Users.is_active?(user)","title":"Examples - Bonfire.Me.Users.is_active?/1","ref":"Bonfire.Me.Users.html#is_active?/1-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.is_first_user?/0","ref":"Bonfire.Me.Users.html#is_first_user?/0"},{"type":"function","doc":"","title":"Bonfire.Me.Users.list/1","ref":"Bonfire.Me.Users.html#list/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.list_admins/0","ref":"Bonfire.Me.Users.html#list_admins/0"},{"type":"function","doc":"","title":"Bonfire.Me.Users.list_boundarised_query/1","ref":"Bonfire.Me.Users.html#list_boundarised_query/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.list_paginated/1","ref":"Bonfire.Me.Users.html#list_paginated/1"},{"type":"function","doc":"Grants a user superpowers.","title":"Bonfire.Me.Users.make_admin/1","ref":"Bonfire.Me.Users.html#make_admin/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.make_user/3","ref":"Bonfire.Me.Users.html#make_user/3"},{"type":"function","doc":"","title":"Bonfire.Me.Users.maybe_count/1","ref":"Bonfire.Me.Users.html#maybe_count/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.maybe_index_user/2","ref":"Bonfire.Me.Users.html#maybe_index_user/2"},{"type":"function","doc":"","title":"Bonfire.Me.Users.query_module/0","ref":"Bonfire.Me.Users.html#query_module/0"},{"type":"function","doc":"Revokes a user's superpowers.","title":"Bonfire.Me.Users.revoke_admin/1","ref":"Bonfire.Me.Users.html#revoke_admin/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.schema_module/0","ref":"Bonfire.Me.Users.html#schema_module/0"},{"type":"function","doc":"Searches for users.","title":"Bonfire.Me.Users.search/2","ref":"Bonfire.Me.Users.html#search/2"},{"type":"function","doc":"> Bonfire.Me.Users.search(\"username\")\n    [%Bonfire.Data.Identity.User{}]","title":"Examples - Bonfire.Me.Users.search/2","ref":"Bonfire.Me.Users.html#search/2-examples"},{"type":"function","doc":"Query for searching for users.","title":"Bonfire.Me.Users.search_query/2","ref":"Bonfire.Me.Users.html#search_query/2"},{"type":"function","doc":"> Bonfire.Me.Users.search_query(\"search_term\")\n    %Ecto.Query{}","title":"Examples - Bonfire.Me.Users.search_query/2","ref":"Bonfire.Me.Users.html#search_query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.update/3","ref":"Bonfire.Me.Users.html#update/3"},{"type":"function","doc":"","title":"Bonfire.Me.Users.update_local_actor/2","ref":"Bonfire.Me.Users.html#update_local_actor/2"},{"type":"function","doc":"Updates a remote user","title":"Bonfire.Me.Users.update_remote_actor/2","ref":"Bonfire.Me.Users.html#update_remote_actor/2"},{"type":"type","doc":"","title":"Bonfire.Me.Users.changeset_extra/0","ref":"Bonfire.Me.Users.html#t:changeset_extra/0"},{"type":"type","doc":"","title":"Bonfire.Me.Users.changeset_name/0","ref":"Bonfire.Me.Users.html#t:changeset_name/0"},{"type":"module","doc":"","title":"Bonfire.Me.Users.LiveHandler","ref":"Bonfire.Me.Users.LiveHandler.html"},{"type":"function","doc":"This function disconnects the user and account, erases the session and CSRF token, and starts a new session","title":"Bonfire.Me.Users.LiveHandler.disconnect_account_session/1","ref":"Bonfire.Me.Users.LiveHandler.html#disconnect_account_session/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.LiveHandler.disconnect_sockets/1","ref":"Bonfire.Me.Users.LiveHandler.html#disconnect_sockets/1"},{"type":"function","doc":"This function disconnects the user but leaves the account session alone","title":"Bonfire.Me.Users.LiveHandler.disconnect_user_session/1","ref":"Bonfire.Me.Users.LiveHandler.html#disconnect_user_session/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.LiveHandler.handle_event/3","ref":"Bonfire.Me.Users.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Me.Users.LiveHandler.sigil_p/2","ref":"Bonfire.Me.Users.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Me.Users.LiveHandler.to_tuple/1","ref":"Bonfire.Me.Users.LiveHandler.html#to_tuple/1"},{"type":"module","doc":"Queries for `Bonfire.Me.Users`","title":"Bonfire.Me.Users.Queries","ref":"Bonfire.Me.Users.Queries.html"},{"type":"function","doc":"Returns the query to list admin users.","title":"Bonfire.Me.Users.Queries.admins/1","ref":"Bonfire.Me.Users.Queries.html#admins/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.Queries.base_by_id/1","ref":"Bonfire.Me.Users.Queries.html#base_by_id/1"},{"type":"function","doc":"","title":"Bonfire.Me.Users.Queries.base_query/0","ref":"Bonfire.Me.Users.Queries.html#base_query/0"},{"type":"function","doc":"Finds users by account ID.","title":"Bonfire.Me.Users.Queries.by_account/1","ref":"Bonfire.Me.Users.Queries.html#by_account/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_account(\"account_id\")","title":"Examples - Bonfire.Me.Users.Queries.by_account/1","ref":"Bonfire.Me.Users.Queries.html#by_account/1-examples"},{"type":"function","doc":"Finds a user by canonical URI.","title":"Bonfire.Me.Users.Queries.by_canonical_uri/2","ref":"Bonfire.Me.Users.Queries.html#by_canonical_uri/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_canonical_uri(\"canonical_uri\")","title":"Examples - Bonfire.Me.Users.Queries.by_canonical_uri/2","ref":"Bonfire.Me.Users.Queries.html#by_canonical_uri/2-examples"},{"type":"function","doc":"Gets a user by ID.","title":"Bonfire.Me.Users.Queries.by_id/2","ref":"Bonfire.Me.Users.Queries.html#by_id/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_id(\"user_id\")","title":"Examples - Bonfire.Me.Users.Queries.by_id/2","ref":"Bonfire.Me.Users.Queries.html#by_id/2-examples"},{"type":"function","doc":"Finds a user by username or user ID and account ID.","title":"Bonfire.Me.Users.Queries.by_user_and_account/2","ref":"Bonfire.Me.Users.Queries.html#by_user_and_account/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_user_and_account(\"username_or_user_id\", \"account_id\")","title":"Examples - Bonfire.Me.Users.Queries.by_user_and_account/2","ref":"Bonfire.Me.Users.Queries.html#by_user_and_account/2-examples"},{"type":"function","doc":"Finds a user by username or ID.","title":"Bonfire.Me.Users.Queries.by_username_or_id/2","ref":"Bonfire.Me.Users.Queries.html#by_username_or_id/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_username_or_id(\"username_or_id\")","title":"Examples - Bonfire.Me.Users.Queries.by_username_or_id/2","ref":"Bonfire.Me.Users.Queries.html#by_username_or_id/2-examples"},{"type":"function","doc":"Finds a user by username.","title":"Bonfire.Me.Users.Queries.by_username_query/2","ref":"Bonfire.Me.Users.Queries.html#by_username_query/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.by_username_query(\"username\")","title":"Examples - Bonfire.Me.Users.Queries.by_username_query/2","ref":"Bonfire.Me.Users.Queries.html#by_username_query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.Queries.context_module/0","ref":"Bonfire.Me.Users.Queries.html#context_module/0"},{"type":"function","doc":"Counts the number of users.","title":"Bonfire.Me.Users.Queries.count/1","ref":"Bonfire.Me.Users.Queries.html#count/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.count(:all)\n\n    iex> Bonfire.Me.Users.Queries.count(:local)\n\n    iex> Bonfire.Me.Users.Queries.count(:remote)","title":"Examples - Bonfire.Me.Users.Queries.count/1","ref":"Bonfire.Me.Users.Queries.html#count/1-examples"},{"type":"function","doc":"Returns for the current user based on the user ID.","title":"Bonfire.Me.Users.Queries.current/1","ref":"Bonfire.Me.Users.Queries.html#current/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.current(\"user_id\")","title":"Examples - Bonfire.Me.Users.Queries.current/1","ref":"Bonfire.Me.Users.Queries.html#current/1-examples"},{"type":"function","doc":"Returns for the current user based on the user ID and account ID.","title":"Bonfire.Me.Users.Queries.current/2","ref":"Bonfire.Me.Users.Queries.html#current/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.current(\"user_id\", \"account_id\")","title":"Examples - Bonfire.Me.Users.Queries.current/2","ref":"Bonfire.Me.Users.Queries.html#current/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.Queries.join_peered/1","ref":"Bonfire.Me.Users.Queries.html#join_peered/1"},{"type":"function","doc":"Lists all users, or local or remote users, or users by instance ID.","title":"Bonfire.Me.Users.Queries.list/1","ref":"Bonfire.Me.Users.Queries.html#list/1"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.list(:all)\n\n    iex> Bonfire.Me.Users.Queries.list(:local)\n\n    iex> Bonfire.Me.Users.Queries.list(:remote)\n\n    iex> Bonfire.Me.Users.Queries.list({:instance, \"instance_id\"})","title":"Examples - Bonfire.Me.Users.Queries.list/1","ref":"Bonfire.Me.Users.Queries.html#list/1-examples"},{"type":"function","doc":"Queries for a user based on the given filter.","title":"Bonfire.Me.Users.Queries.query/2","ref":"Bonfire.Me.Users.Queries.html#query/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.query(id: \"some_id\")\n\n    iex> Bonfire.Me.Users.Queries.query(username: \"some_username\")\n\n    iex> Bonfire.Me.Users.Queries.query(:invalid_filter)\n    {:error, \"Could not query\"}","title":"Examples - Bonfire.Me.Users.Queries.query/2","ref":"Bonfire.Me.Users.Queries.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Me.Users.Queries.schema_module/0","ref":"Bonfire.Me.Users.Queries.html#schema_module/0"},{"type":"function","doc":"Searches for users based on a text string.","title":"Bonfire.Me.Users.Queries.search/2","ref":"Bonfire.Me.Users.Queries.html#search/2"},{"type":"function","doc":"iex> Bonfire.Me.Users.Queries.search(\"userna\")","title":"Examples - Bonfire.Me.Users.Queries.search/2","ref":"Bonfire.Me.Users.Queries.html#search/2-examples"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- DM\n- Group messaging","title":"Bonfire.Messages","ref":"Bonfire.Messages.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Messages","ref":"Bonfire.Messages.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Messages","ref":"Bonfire.Messages.html#module-copyright-and-license"},{"type":"function","doc":"Publishes an activity to the ActivityPub.","title":"Bonfire.Messages.ap_publish_activity/3","ref":"Bonfire.Messages.html#ap_publish_activity/3"},{"type":"function","doc":"iex> Bonfire.Messages.ap_publish_activity(subject, verb, message)","title":"Examples - Bonfire.Messages.ap_publish_activity/3","ref":"Bonfire.Messages.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives an activity from ActivityPub.","title":"Bonfire.Messages.ap_receive_activity/3","ref":"Bonfire.Messages.html#ap_receive_activity/3"},{"type":"function","doc":"iex> Bonfire.Messages.ap_receive_activity(creator, activity, object)","title":"Examples - Bonfire.Messages.ap_receive_activity/3","ref":"Bonfire.Messages.html#ap_receive_activity/3-examples"},{"type":"function","doc":"","title":"Bonfire.Messages.changeset/3","ref":"Bonfire.Messages.html#changeset/3"},{"type":"function","doc":"Save a new message as a draft (without sending it).","title":"Bonfire.Messages.draft/2","ref":"Bonfire.Messages.html#draft/2"},{"type":"function","doc":"iex> Bonfire.Messages.draft(creator, attrs)\n    {:ok, %Message{}}","title":"Examples - Bonfire.Messages.draft/2","ref":"Bonfire.Messages.html#draft/2-examples"},{"type":"function","doc":"","title":"Bonfire.Messages.federation_module/0","ref":"Bonfire.Messages.html#federation_module/0"},{"type":"function","doc":"","title":"Bonfire.Messages.filter/3","ref":"Bonfire.Messages.html#filter/3"},{"type":"function","doc":"Lists messages created by the user, excluding replies.","title":"Bonfire.Messages.list/3","ref":"Bonfire.Messages.html#list/3"},{"type":"function","doc":"iex> Bonfire.Messages.list(current_user)\n    [%Message{}]","title":"Examples - Bonfire.Messages.list/3","ref":"Bonfire.Messages.html#list/3-examples"},{"type":"function","doc":"","title":"Bonfire.Messages.list/4","ref":"Bonfire.Messages.html#list/4"},{"type":"function","doc":"","title":"Bonfire.Messages.maybe_index_message/1","ref":"Bonfire.Messages.html#maybe_index_message/1"},{"type":"function","doc":"","title":"Bonfire.Messages.maybe_spam_check/3","ref":"Bonfire.Messages.html#maybe_spam_check/3"},{"type":"function","doc":"Attempt to read a message by its ID.","title":"Bonfire.Messages.read/2","ref":"Bonfire.Messages.html#read/2"},{"type":"function","doc":"iex> Bonfire.Messages.read(message_id, current_user: me)\n    %Message{}","title":"Examples - Bonfire.Messages.read/2","ref":"Bonfire.Messages.html#read/2-examples"},{"type":"function","doc":"","title":"Bonfire.Messages.schema_module/0","ref":"Bonfire.Messages.html#schema_module/0"},{"type":"function","doc":"Sends a message to the specified recipients.","title":"Bonfire.Messages.send/3","ref":"Bonfire.Messages.html#send/3"},{"type":"function","doc":"iex> Bonfire.Messages.send(me, %{post_content: %{html_body: \"test message\"}}, to_user_id)","title":"Examples - Bonfire.Messages.send/3","ref":"Bonfire.Messages.html#send/3-examples"},{"type":"module","doc":"","title":"Bonfire.Messages.Fake","ref":"Bonfire.Messages.Fake.html"},{"type":"function","doc":"","title":"Bonfire.Messages.Fake.fake_comment!/4","ref":"Bonfire.Messages.Fake.html#fake_comment!/4"},{"type":"function","doc":"","title":"Bonfire.Messages.Fake.fake_post!/4","ref":"Bonfire.Messages.Fake.html#fake_post!/4"},{"type":"function","doc":"","title":"Bonfire.Messages.Fake.fake_remote_user!/0","ref":"Bonfire.Messages.Fake.html#fake_remote_user!/0"},{"type":"module","doc":"","title":"Bonfire.Messages.Integration","ref":"Bonfire.Messages.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Messages.Integration.declared_extension/0","ref":"Bonfire.Messages.Integration.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Messages.Integration.mailer/0","ref":"Bonfire.Messages.Integration.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Messages.Integration.repo/0","ref":"Bonfire.Messages.Integration.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.Messages.LiveHandler","ref":"Bonfire.Messages.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.handle_event/3","ref":"Bonfire.Messages.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.handle_params/3","ref":"Bonfire.Messages.LiveHandler.html#handle_params/3"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.list_threads/3","ref":"Bonfire.Messages.LiveHandler.html#list_threads/3"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.live_more/3","ref":"Bonfire.Messages.LiveHandler.html#live_more/3"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.send_message/2","ref":"Bonfire.Messages.LiveHandler.html#send_message/2"},{"type":"macro","doc":"","title":"Bonfire.Messages.LiveHandler.sigil_p/2","ref":"Bonfire.Messages.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.thread_meta/4","ref":"Bonfire.Messages.LiveHandler.html#thread_meta/4"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.thread_meta/5","ref":"Bonfire.Messages.LiveHandler.html#thread_meta/5"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.thread_participants/4","ref":"Bonfire.Messages.LiveHandler.html#thread_participants/4"},{"type":"function","doc":"","title":"Bonfire.Messages.LiveHandler.threads_widget/3","ref":"Bonfire.Messages.LiveHandler.html#threads_widget/3"},{"type":"module","doc":"An extension to enable:\n- authenticating on Bonfire using an external identity using OpenID Connect\n- using your Bonfire identity to authenticate in other apps with OpenID Connect 1.0 or OAuth 2.0","title":"Bonfire.OpenID","ref":"Bonfire.OpenID.html"},{"type":"module","doc":"Powered by these libraries: \n- https://hex.pm/packages/boruta (MIT license)\n- https://hex.pm/packages/openid_connect (MIT license)\n\nExtension copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.OpenID","ref":"Bonfire.OpenID.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.OpenID.get_user/1","ref":"Bonfire.OpenID.html#get_user/1"},{"type":"module","doc":"","title":"Bonfire.OpenID.Client","ref":"Bonfire.OpenID.Client.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Client.oauth2_providers/0","ref":"Bonfire.OpenID.Client.html#oauth2_providers/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.Client.open_id_connect_providers/0","ref":"Bonfire.OpenID.Client.html#open_id_connect_providers/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.Client.providers_authorization_urls/1","ref":"Bonfire.OpenID.Client.html#providers_authorization_urls/1"},{"type":"module","doc":"","title":"Bonfire.OpenID.Fake","ref":"Bonfire.OpenID.Fake.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Fake.fake_account!/2","ref":"Bonfire.OpenID.Fake.html#fake_account!/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Fake.fake_user!/2","ref":"Bonfire.OpenID.Fake.html#fake_user!/2"},{"type":"module","doc":"","title":"Bonfire.OpenID.Plugs.AuthRequired","ref":"Bonfire.OpenID.Plugs.AuthRequired.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Plugs.AuthRequired.require_auth/2","ref":"Bonfire.OpenID.Plugs.AuthRequired.html#require_auth/2"},{"type":"module","doc":"","title":"Bonfire.OpenID.Plugs.Authorize","ref":"Bonfire.OpenID.Plugs.Authorize.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Plugs.Authorize.authorize/2","ref":"Bonfire.OpenID.Plugs.Authorize.html#authorize/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Plugs.Authorize.load_authorization/2","ref":"Bonfire.OpenID.Plugs.Authorize.html#load_authorization/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Plugs.Authorize.maybe_load_authorization/2","ref":"Bonfire.OpenID.Plugs.Authorize.html#maybe_load_authorization/2"},{"type":"module","doc":"","title":"Bonfire.OpenID.Plugs.ClientID","ref":"Bonfire.OpenID.Plugs.ClientID.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Plugs.ClientID.validate_client_id/2","ref":"Bonfire.OpenID.Plugs.ClientID.html#validate_client_id/2"},{"type":"module","doc":"","title":"Bonfire.OpenID.Provider.ClientApps","ref":"Bonfire.OpenID.Provider.ClientApps.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.get/1","ref":"Bonfire.OpenID.Provider.ClientApps.html#get/1"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.get/3","ref":"Bonfire.OpenID.Provider.ClientApps.html#get/3"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.get_or_new/1","ref":"Bonfire.OpenID.Provider.ClientApps.html#get_or_new/1"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.get_or_new/2","ref":"Bonfire.OpenID.Provider.ClientApps.html#get_or_new/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.init_test_client_app/2","ref":"Bonfire.OpenID.Provider.ClientApps.html#init_test_client_app/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.list_active_tokens/0","ref":"Bonfire.OpenID.Provider.ClientApps.html#list_active_tokens/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.list_clients/0","ref":"Bonfire.OpenID.Provider.ClientApps.html#list_clients/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.list_scopes/0","ref":"Bonfire.OpenID.Provider.ClientApps.html#list_scopes/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.new/1","ref":"Bonfire.OpenID.Provider.ClientApps.html#new/1"},{"type":"function","doc":"Define an OAuth client app, providing a name and redirect URI(s)","title":"Bonfire.OpenID.Provider.ClientApps.new/2","ref":"Bonfire.OpenID.Provider.ClientApps.html#new/2"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.prepare_redirect_uri/1","ref":"Bonfire.OpenID.Provider.ClientApps.html#prepare_redirect_uri/1"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.ClientApps.prepare_redirect_uris/1","ref":"Bonfire.OpenID.Provider.ClientApps.html#prepare_redirect_uris/1"},{"type":"module","doc":"","title":"Bonfire.OpenID.Provider.OAuth","ref":"Bonfire.OpenID.Provider.OAuth.html"},{"type":"function","doc":"","title":"Bonfire.OpenID.Provider.OAuth.redirect_uri_validate/1","ref":"Bonfire.OpenID.Provider.OAuth.html#redirect_uri_validate/1"},{"type":"module","doc":"","title":"Bonfire.OpenID.RuntimeConfig","ref":"Bonfire.OpenID.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's runtime.exs, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs` line","title":"Bonfire.OpenID.RuntimeConfig.config/0","ref":"Bonfire.OpenID.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.OpenID.RuntimeConfig.config_module/0","ref":"Bonfire.OpenID.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.OpenID.Web.Routes","ref":"Bonfire.OpenID.Web.Routes.html"},{"type":"module","doc":"An extensions for asking questions, collecting options, and conducting ranked voting on [Bonfire](https://bonfire.cafe/)","title":"Bonfire.Poll","ref":"Bonfire.Poll.html"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Poll","ref":"Bonfire.Poll.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Poll.repo/0","ref":"Bonfire.Poll.html#repo/0"},{"type":"module","doc":"Creates a changeset for publishing choice(s) for a question\n\nEpic Options:\n  * `:current_user` - user that will create the choice, required.\n  * `:choice_attrs` (configurable) - attrs to create the choice from, required.\n  * `:choice_id` (configurable) - id to use for the created choice (handy for creating\n    activitypub objects with an id representing their reported creation time)\n\nAct Options:\n  * `:id` - epic options key to find an id to force override with at, default: `:choice_id`\n  * `:as` - key to assign changeset to, default: `:choice`.\n  * `:attrs` - epic options key to find the attributes at, default: `:choice_attrs`.","title":"Bonfire.Poll.Acts.Choices.Upsert","ref":"Bonfire.Poll.Acts.Choices.Upsert.html"},{"type":"module","doc":"","title":"Bonfire.Poll.Choice","ref":"Bonfire.Poll.Choice.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Choice.changeset/2","ref":"Bonfire.Poll.Choice.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Choice.delete/2","ref":"Bonfire.Poll.Choice.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Choice.get/3","ref":"Bonfire.Poll.Choice.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Choice.put/3","ref":"Bonfire.Poll.Choice.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Poll.Choices","ref":"Bonfire.Poll.Choices.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Choices.put_choice/3","ref":"Bonfire.Poll.Choices.html#put_choice/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Choices.simple_create_and_put/4","ref":"Bonfire.Poll.Choices.html#simple_create_and_put/4"},{"type":"module","doc":"","title":"Bonfire.Poll.Fake","ref":"Bonfire.Poll.Fake.html"},{"type":"module","doc":"","title":"Bonfire.Poll.LiveHandler","ref":"Bonfire.Poll.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Poll.LiveHandler.handle_event/3","ref":"Bonfire.Poll.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Poll.LiveHandler.negative_score_info/0","ref":"Bonfire.Poll.LiveHandler.html#negative_score_info/0"},{"type":"macro","doc":"","title":"Bonfire.Poll.LiveHandler.sigil_p/2","ref":"Bonfire.Poll.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Poll.Question","ref":"Bonfire.Poll.Question.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Question.delete/2","ref":"Bonfire.Poll.Question.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Question.get/3","ref":"Bonfire.Poll.Question.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Question.put/3","ref":"Bonfire.Poll.Question.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Poll.Question.t/0","ref":"Bonfire.Poll.Question.html#t:t/0"},{"type":"module","doc":"Creates a changeset for publishing a page\n\nEpic Options:\n  * `:current_user` - user that will create the page, required.\n  * `:page_attrs` (configurable) - attrs to create the page from, required.\n  * `:page_id` (configurable) - id to use for the created page (handy for creating\n    activitypub objects with an id representing their reported creation time)\n\nAct Options:\n  * `:id` - epic options key to find an id to force override with at, default: `:page_id`\n  * `:as` - key to assign changeset to, default: `:page`.\n  * `:attrs` - epic options key to find the attributes at, default: `:page_attrs`.","title":"Bonfire.Poll.Question.Create","ref":"Bonfire.Poll.Question.Create.html"},{"type":"module","doc":"","title":"Bonfire.Poll.Questions","ref":"Bonfire.Poll.Questions.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.changeset/2","ref":"Bonfire.Poll.Questions.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.create/1","ref":"Bonfire.Poll.Questions.html#create/1"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.create_simple/1","ref":"Bonfire.Poll.Questions.html#create_simple/1"},{"type":"function","doc":"List posts created by the user and which are in their outbox, which are not replies","title":"Bonfire.Poll.Questions.list_by/2","ref":"Bonfire.Poll.Questions.html#list_by/2"},{"type":"function","doc":"List posts with pagination","title":"Bonfire.Poll.Questions.list_paginated/2","ref":"Bonfire.Poll.Questions.html#list_paginated/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.query/2","ref":"Bonfire.Poll.Questions.html#query/2"},{"type":"function","doc":"Query posts with pagination","title":"Bonfire.Poll.Questions.query_paginated/2","ref":"Bonfire.Poll.Questions.html#query_paginated/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.read/2","ref":"Bonfire.Poll.Questions.html#read/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Questions.run_epic/4","ref":"Bonfire.Poll.Questions.html#run_epic/4"},{"type":"module","doc":"","title":"Bonfire.Poll.RuntimeConfig","ref":"Bonfire.Poll.RuntimeConfig.html"},{"type":"function","doc":"NOTE: you can override this default config in your app's `runtime.exs`, by placing similarly-named config keys below the `Bonfire.Common.Config.LoadExtensionsConfig.load_configs()` line","title":"Bonfire.Poll.RuntimeConfig.config/0","ref":"Bonfire.Poll.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Poll.RuntimeConfig.config_module/0","ref":"Bonfire.Poll.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"","title":"Bonfire.Poll.Vote","ref":"Bonfire.Poll.Vote.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Vote.changeset/2","ref":"Bonfire.Poll.Vote.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Vote.delete/2","ref":"Bonfire.Poll.Vote.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Vote.get/3","ref":"Bonfire.Poll.Vote.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Vote.put/3","ref":"Bonfire.Poll.Vote.html#put/3"},{"type":"type","doc":"","title":"Bonfire.Poll.Vote.t/0","ref":"Bonfire.Poll.Vote.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Poll.Votes","ref":"Bonfire.Poll.Votes.html"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.by_voter/2","ref":"Bonfire.Poll.Votes.html#by_voter/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.calculate_total/3","ref":"Bonfire.Poll.Votes.html#calculate_total/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.count/2","ref":"Bonfire.Poll.Votes.html#count/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.get/3","ref":"Bonfire.Poll.Votes.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.get!/3","ref":"Bonfire.Poll.Votes.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.get_average_base_score/2","ref":"Bonfire.Poll.Votes.html#get_average_base_score/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.get_average_emoji/4","ref":"Bonfire.Poll.Votes.html#get_average_emoji/4"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.get_score/2","ref":"Bonfire.Poll.Votes.html#get_score/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.query/2","ref":"Bonfire.Poll.Votes.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.register_vote_choice/4","ref":"Bonfire.Poll.Votes.html#register_vote_choice/4"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.scores/0","ref":"Bonfire.Poll.Votes.html#scores/0"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.send_vote_activity/4","ref":"Bonfire.Poll.Votes.html#send_vote_activity/4"},{"type":"function","doc":"","title":"Bonfire.Poll.Votes.vote/4","ref":"Bonfire.Poll.Votes.html#vote/4"},{"type":"module","doc":"","title":"Bonfire.Poll.Web.Routes","ref":"Bonfire.Poll.Web.Routes.html"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Creating and reading posts","title":"Bonfire.Posts","ref":"Bonfire.Posts.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Posts","ref":"Bonfire.Posts.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Posts","ref":"Bonfire.Posts.html#module-copyright-and-license"},{"type":"function","doc":"Publishes an ActivityPub activity for a post.","title":"Bonfire.Posts.ap_publish_activity/3","ref":"Bonfire.Posts.html#ap_publish_activity/3"},{"type":"function","doc":"- `subject`: The subject of the activity.\n- `verb`: The verb of the activity.\n- `post`: The post to publish.","title":"Parameters - Bonfire.Posts.ap_publish_activity/3","ref":"Bonfire.Posts.html#ap_publish_activity/3-parameters"},{"type":"function","doc":"`{:ok, activity}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Posts.ap_publish_activity/3","ref":"Bonfire.Posts.html#ap_publish_activity/3-returns"},{"type":"function","doc":"iex> Bonfire.Posts.ap_publish_activity(user, :create, post)\n    {:ok, %ActivityPub.Activity{}}","title":"Examples - Bonfire.Posts.ap_publish_activity/3","ref":"Bonfire.Posts.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives an incoming ActivityPub post.","title":"Bonfire.Posts.ap_receive_activity/3","ref":"Bonfire.Posts.html#ap_receive_activity/3"},{"type":"function","doc":"- `creator`: The creator of the post.\n- `activity`: The ActivityPub activity.\n- `object`: The ActivityPub object.\n- `circles`: The circles to publish to (default: `[]`).","title":"Parameters - Bonfire.Posts.ap_receive_activity/3","ref":"Bonfire.Posts.html#ap_receive_activity/3-parameters"},{"type":"function","doc":"`{:ok, post}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Posts.ap_receive_activity/3","ref":"Bonfire.Posts.html#ap_receive_activity/3-returns"},{"type":"function","doc":"iex> Bonfire.Posts.ap_receive_activity(creator, activity, object)\n    {:ok, %Post{}}","title":"Examples - Bonfire.Posts.ap_receive_activity/3","ref":"Bonfire.Posts.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Creates a changeset for a post.","title":"Bonfire.Posts.changeset/4","ref":"Bonfire.Posts.html#changeset/4"},{"type":"function","doc":"- `action`: The action to perform (`:create`).\n- `attrs`: Attributes for the post.","title":"Parameters - Bonfire.Posts.changeset/4","ref":"Bonfire.Posts.html#changeset/4-parameters"},{"type":"function","doc":"A `%Changeset{}` for the post.","title":"Returns - Bonfire.Posts.changeset/4","ref":"Bonfire.Posts.html#changeset/4-returns"},{"type":"function","doc":"iex> Bonfire.Posts.changeset(:create, %{title: \"New Post\"})","title":"Examples - Bonfire.Posts.changeset/4","ref":"Bonfire.Posts.html#changeset/4-examples"},{"type":"function","doc":"","title":"Bonfire.Posts.count_total/0","ref":"Bonfire.Posts.html#count_total/0"},{"type":"function","doc":"Deletes a post.\n\nNote: You should use `Bonfire.Social.Objects.delete/2` instead.","title":"Bonfire.Posts.delete/2","ref":"Bonfire.Posts.html#delete/2"},{"type":"function","doc":"- `object`: The post object to delete.\n- `opts`: Options for deleting the post.","title":"Parameters - Bonfire.Posts.delete/2","ref":"Bonfire.Posts.html#delete/2-parameters"},{"type":"function","doc":"`{:ok, deleted_post}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Posts.delete/2","ref":"Bonfire.Posts.html#delete/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.delete(post)\n    {:ok, %Post{}}","title":"Examples - Bonfire.Posts.delete/2","ref":"Bonfire.Posts.html#delete/2-examples"},{"type":"function","doc":"TODO: Creates a draft post. Not implemented yet.","title":"Bonfire.Posts.draft/2","ref":"Bonfire.Posts.html#draft/2"},{"type":"function","doc":"- `creator`: The creator of the draft post.\n- `attrs`: Attributes for the draft post.","title":"Parameters - Bonfire.Posts.draft/2","ref":"Bonfire.Posts.html#draft/2-parameters"},{"type":"function","doc":"","title":"Bonfire.Posts.federation_module/0","ref":"Bonfire.Posts.html#federation_module/0"},{"type":"function","doc":"Formats a post for search indexing.","title":"Bonfire.Posts.indexing_object_format/1","ref":"Bonfire.Posts.html#indexing_object_format/1"},{"type":"function","doc":"- `post`: The post to format.\n- `opts`: Formatting options.","title":"Parameters - Bonfire.Posts.indexing_object_format/1","ref":"Bonfire.Posts.html#indexing_object_format/1-parameters"},{"type":"function","doc":"A map with formatted post data for indexing.","title":"Returns - Bonfire.Posts.indexing_object_format/1","ref":"Bonfire.Posts.html#indexing_object_format/1-returns"},{"type":"function","doc":"iex> Bonfire.Posts.indexing_object_format(post)\n    %{id: \"post_123\", index_type: \"Bonfire.Data.Social.Post\", post_content: %{}, created: %{}, tags: []}","title":"Examples - Bonfire.Posts.indexing_object_format/1","ref":"Bonfire.Posts.html#indexing_object_format/1-examples"},{"type":"function","doc":"Lists posts created by a user that are in their outbox and are not replies.","title":"Bonfire.Posts.list_by/2","ref":"Bonfire.Posts.html#list_by/2"},{"type":"function","doc":"- `by_user`: The user whose posts to list.\n- `opts`: Options for listing posts.","title":"Parameters - Bonfire.Posts.list_by/2","ref":"Bonfire.Posts.html#list_by/2-parameters"},{"type":"function","doc":"A list of posts.","title":"Returns - Bonfire.Posts.list_by/2","ref":"Bonfire.Posts.html#list_by/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.list_by(user)\n    [%Post{}, %Post{}]","title":"Examples - Bonfire.Posts.list_by/2","ref":"Bonfire.Posts.html#list_by/2-examples"},{"type":"function","doc":"Lists posts with pagination.","title":"Bonfire.Posts.list_paginated/2","ref":"Bonfire.Posts.html#list_paginated/2"},{"type":"function","doc":"- `filters`: Filters to apply to the query.\n- `opts`: Options for pagination.","title":"Parameters - Bonfire.Posts.list_paginated/2","ref":"Bonfire.Posts.html#list_paginated/2-parameters"},{"type":"function","doc":"A paginated list of posts.","title":"Returns - Bonfire.Posts.list_paginated/2","ref":"Bonfire.Posts.html#list_paginated/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.list_paginated([])\n    %{edges: [%Post{}, %Post{}], page_info: %{}}","title":"Examples - Bonfire.Posts.list_paginated/2","ref":"Bonfire.Posts.html#list_paginated/2-examples"},{"type":"function","doc":"","title":"Bonfire.Posts.prepare_post_attrs/1","ref":"Bonfire.Posts.html#prepare_post_attrs/1"},{"type":"function","doc":"Publishes a post.","title":"Bonfire.Posts.publish/1","ref":"Bonfire.Posts.html#publish/1"},{"type":"function","doc":"- `opts`: Options for publishing the post.","title":"Parameters - Bonfire.Posts.publish/1","ref":"Bonfire.Posts.html#publish/1-parameters"},{"type":"function","doc":"`{:ok, post}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Posts.publish/1","ref":"Bonfire.Posts.html#publish/1-returns"},{"type":"function","doc":"iex> Bonfire.Posts.publish(\n      current_user: me, \n      boundary: \"public\",\n      post_attrs: %{\n        post_content: %{\n          name: \"test post title\",\n          html_body: \" epic html message \"\n        }\n      })\n    {:ok, %Post{}}","title":"Examples - Bonfire.Posts.publish/1","ref":"Bonfire.Posts.html#publish/1-examples"},{"type":"function","doc":"Queries posts.","title":"Bonfire.Posts.query/2","ref":"Bonfire.Posts.html#query/2"},{"type":"function","doc":"- `filters`: Filters to apply to the query.\n- `opts`: Query options.","title":"Parameters - Bonfire.Posts.query/2","ref":"Bonfire.Posts.html#query/2-parameters"},{"type":"function","doc":"An Ecto query for posts.","title":"Returns - Bonfire.Posts.query/2","ref":"Bonfire.Posts.html#query/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.query([id: \"post_123\"])\n    #Ecto.Query<>","title":"Examples - Bonfire.Posts.query/2","ref":"Bonfire.Posts.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Posts.query_module/0","ref":"Bonfire.Posts.html#query_module/0"},{"type":"function","doc":"Queries posts with pagination.","title":"Bonfire.Posts.query_paginated/2","ref":"Bonfire.Posts.html#query_paginated/2"},{"type":"function","doc":"- `filters`: Filters to apply to the query.\n- `opts`: Options for pagination.","title":"Parameters - Bonfire.Posts.query_paginated/2","ref":"Bonfire.Posts.html#query_paginated/2-parameters"},{"type":"function","doc":"A paginated query for posts.","title":"Returns - Bonfire.Posts.query_paginated/2","ref":"Bonfire.Posts.html#query_paginated/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.query_paginated([])\n    #Ecto.Query<>","title":"Examples - Bonfire.Posts.query_paginated/2","ref":"Bonfire.Posts.html#query_paginated/2-examples"},{"type":"function","doc":"Attempts to fetch a post by its ID, if the current user has permission to read it.","title":"Bonfire.Posts.read/2","ref":"Bonfire.Posts.html#read/2"},{"type":"function","doc":"- `post_id`: The ID of the post to read.\n- `opts`: Options, incl. current user.","title":"Parameters - Bonfire.Posts.read/2","ref":"Bonfire.Posts.html#read/2-parameters"},{"type":"function","doc":"The post if found, `nil` otherwise.","title":"Returns - Bonfire.Posts.read/2","ref":"Bonfire.Posts.html#read/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.read(\"post_123\")\n    %Post{}","title":"Examples - Bonfire.Posts.read/2","ref":"Bonfire.Posts.html#read/2-examples"},{"type":"function","doc":"Runs a series of post `Bonfire.Epics` operations based on configured acts for this module.","title":"Bonfire.Posts.run_epic/3","ref":"Bonfire.Posts.html#run_epic/3"},{"type":"function","doc":"- `type`: The type of epic operation to run.\n- `options`: Options for the epic operation.\n- `on`: The key in the epic assigns to return (default: `:post`).","title":"Parameters - Bonfire.Posts.run_epic/3","ref":"Bonfire.Posts.html#run_epic/3-parameters"},{"type":"function","doc":"`{:ok, result}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Posts.run_epic/3","ref":"Bonfire.Posts.html#run_epic/3-returns"},{"type":"function","doc":"iex> Bonfire.Posts.run_epic(:publish, [])\n    {:ok, %Post{}}","title":"Examples - Bonfire.Posts.run_epic/3","ref":"Bonfire.Posts.html#run_epic/3-examples"},{"type":"function","doc":"","title":"Bonfire.Posts.schema_module/0","ref":"Bonfire.Posts.html#schema_module/0"},{"type":"function","doc":"Searches for posts.","title":"Bonfire.Posts.search/2","ref":"Bonfire.Posts.html#search/2"},{"type":"function","doc":"- `search`: The search term to look for in the title, summary, or body.\n- `opts`: Search options.","title":"Parameters - Bonfire.Posts.search/2","ref":"Bonfire.Posts.html#search/2-parameters"},{"type":"function","doc":"A list of matching posts.","title":"Returns - Bonfire.Posts.search/2","ref":"Bonfire.Posts.html#search/2-returns"},{"type":"function","doc":"iex> Bonfire.Posts.search(\"example\")\n    [%Post{}, %Post{}]","title":"Examples - Bonfire.Posts.search/2","ref":"Bonfire.Posts.html#search/2-examples"},{"type":"function","doc":"","title":"Bonfire.Posts.search_query/2","ref":"Bonfire.Posts.html#search_query/2"},{"type":"module","doc":"Creates a changeset for publishing a post\n\nEpic Options:\n  * `:current_user` - user that will create the post, required.\n  * `:post_attrs` (configurable) - attrs to create the post from, required.\n  * `:post_id` (configurable) - id to use for the created post (handy for creating\n    activitypub objects with an id representing their reported creation time)\n\nAct Options:\n  * `:id` - epic options key to find an id to force override with at, default: `:post_id`\n  * `:as` - key to assign changeset to, default: `:post`.\n  * `:attrs` - epic options key to find the attributes at, default: `:post_attrs`.","title":"Bonfire.Posts.Acts.Posts.Publish","ref":"Bonfire.Posts.Acts.Posts.Publish.html"},{"type":"module","doc":"","title":"Bonfire.Posts.Fake","ref":"Bonfire.Posts.Fake.html"},{"type":"function","doc":"","title":"Bonfire.Posts.Fake.fake_comment!/4","ref":"Bonfire.Posts.Fake.html#fake_comment!/4"},{"type":"function","doc":"","title":"Bonfire.Posts.Fake.fake_post!/4","ref":"Bonfire.Posts.Fake.html#fake_post!/4"},{"type":"function","doc":"","title":"Bonfire.Posts.Fake.fake_remote_user!/0","ref":"Bonfire.Posts.Fake.html#fake_remote_user!/0"},{"type":"module","doc":"","title":"Bonfire.Posts.Integration","ref":"Bonfire.Posts.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Posts.Integration.declared_extension/0","ref":"Bonfire.Posts.Integration.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Posts.Integration.mailer/0","ref":"Bonfire.Posts.Integration.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Posts.Integration.repo/0","ref":"Bonfire.Posts.Integration.html#repo/0"},{"type":"module","doc":"","title":"Bonfire.Posts.LiveHandler","ref":"Bonfire.Posts.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Posts.LiveHandler.handle_event/3","ref":"Bonfire.Posts.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Posts.LiveHandler.post_changeset/2","ref":"Bonfire.Posts.LiveHandler.html#post_changeset/2"},{"type":"macro","doc":"","title":"Bonfire.Posts.LiveHandler.sigil_p/2","ref":"Bonfire.Posts.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Posts.LiveHandler.write_feedback/2","ref":"Bonfire.Posts.LiveHandler.html#write_feedback/2"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) to handle:\n\n- Search indexing\n- Ultra-fast search\n- LiveView search UI\n\nYou can implement adapters for your prefered search backend. Currently adapters are included for:\n- Database\n- [Meili Search](https://www.meilisearch.com/)","title":"Bonfire.Search","ref":"Bonfire.Search.html"},{"type":"module","doc":"This extension is meant to be used inside of a Bonfire app, so please refer to the main repo at: https://github.com/bonfire-networks/bonfire-app","title":"Development & Deployment Documentation - Bonfire.Search","ref":"Bonfire.Search.html#module-development-deployment-documentation"},{"type":"module","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Search","ref":"Bonfire.Search.html#module-copyright-and-license"},{"type":"function","doc":"Returns the configured search adapter module.\nDefaults to DB Adapter if no adapter configured or if adapter is disabled.","title":"Bonfire.Search.adapter/0","ref":"Bonfire.Search.html#adapter/0"},{"type":"function","doc":"","title":"Bonfire.Search.maybe_boundarise/3","ref":"Bonfire.Search.html#maybe_boundarise/3"},{"type":"function","doc":"Search with simplified options","title":"Bonfire.Search.search/2","ref":"Bonfire.Search.html#search/2"},{"type":"function","doc":"Main search function supporting facets and filtering","title":"Bonfire.Search.search/4","ref":"Bonfire.Search.html#search/4"},{"type":"function","doc":"Type-specific search with optional facets","title":"Bonfire.Search.search_by_type/3","ref":"Bonfire.Search.html#search_by_type/3"},{"type":"module","doc":"An act that enqueues publish/update/delete requests to meilisearch via an oban job queue.","title":"Bonfire.Search.Acts.Queue","ref":"Bonfire.Search.Acts.Queue.html"},{"type":"function","doc":"","title":"Bonfire.Search.Acts.Queue.maybe_unindex/1","ref":"Bonfire.Search.Acts.Queue.html#maybe_unindex/1"},{"type":"function","doc":"","title":"Bonfire.Search.Acts.Queue.prepare_object/1","ref":"Bonfire.Search.Acts.Queue.html#prepare_object/1"},{"type":"behaviour","doc":"Behaviour defining the interface for search adapters in Bonfire.\nAdapters must implement all these callbacks to provide search functionality.","title":"Bonfire.Search.Adapter","ref":"Bonfire.Search.Adapter.html"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.create_index/2","ref":"Bonfire.Search.Adapter.html#c:create_index/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.delete/2","ref":"Bonfire.Search.Adapter.html#c:delete/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.index_exists/1","ref":"Bonfire.Search.Adapter.html#c:index_exists/1"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.put_documents/2","ref":"Bonfire.Search.Adapter.html#c:put_documents/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.search/2","ref":"Bonfire.Search.Adapter.html#c:search/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.search/4","ref":"Bonfire.Search.Adapter.html#c:search/4"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.search_by_type/2","ref":"Bonfire.Search.Adapter.html#c:search_by_type/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.set_facets/2","ref":"Bonfire.Search.Adapter.html#c:set_facets/2"},{"type":"callback","doc":"","title":"Bonfire.Search.Adapter.set_searchable_fields/2","ref":"Bonfire.Search.Adapter.html#c:set_searchable_fields/2"},{"type":"type","doc":"","title":"Bonfire.Search.Adapter.facets/0","ref":"Bonfire.Search.Adapter.html#t:facets/0"},{"type":"type","doc":"","title":"Bonfire.Search.Adapter.index/0","ref":"Bonfire.Search.Adapter.html#t:index/0"},{"type":"type","doc":"","title":"Bonfire.Search.Adapter.object/0","ref":"Bonfire.Search.Adapter.html#t:object/0"},{"type":"type","doc":"","title":"Bonfire.Search.Adapter.search_opts/0","ref":"Bonfire.Search.Adapter.html#t:search_opts/0"},{"type":"type","doc":"","title":"Bonfire.Search.Adapter.search_result/0","ref":"Bonfire.Search.Adapter.html#t:search_result/0"},{"type":"module","doc":"Database-based search adapter implementation.\nUses Ecto queries to search across tables directly in the database.","title":"Bonfire.Search.DB","ref":"Bonfire.Search.DB.html"},{"type":"function","doc":"","title":"Bonfire.Search.DB.base_query/0","ref":"Bonfire.Search.DB.html#base_query/0"},{"type":"function","doc":"","title":"Bonfire.Search.DB.default_types/1","ref":"Bonfire.Search.DB.html#default_types/1"},{"type":"function","doc":"","title":"Bonfire.Search.DB.run_search_db/3","ref":"Bonfire.Search.DB.html#run_search_db/3"},{"type":"function","doc":"Main search implementation using database queries","title":"Bonfire.Search.DB.search/4","ref":"Bonfire.Search.DB.html#search/4"},{"type":"function","doc":"Type-specific search implementation","title":"Bonfire.Search.DB.search_by_type/2","ref":"Bonfire.Search.DB.html#search_by_type/2"},{"type":"module","doc":"","title":"Bonfire.Search.Fuzzy","ref":"Bonfire.Search.Fuzzy.html"},{"type":"function","doc":"","title":"Bonfire.Search.Fuzzy.do_search/4","ref":"Bonfire.Search.Fuzzy.html#do_search/4"},{"type":"function","doc":"","title":"Bonfire.Search.Fuzzy.search/4","ref":"Bonfire.Search.Fuzzy.html#search/4"},{"type":"function","doc":"","title":"Bonfire.Search.Fuzzy.search_filtered/2","ref":"Bonfire.Search.Fuzzy.html#search_filtered/2"},{"type":"module","doc":"","title":"Bonfire.Search.HTTP","ref":"Bonfire.Search.HTTP.html"},{"type":"function","doc":"","title":"Bonfire.Search.HTTP.http_adapter/0","ref":"Bonfire.Search.HTTP.html#http_adapter/0"},{"type":"function","doc":"","title":"Bonfire.Search.HTTP.http_error/5","ref":"Bonfire.Search.HTTP.html#http_error/5"},{"type":"function","doc":"","title":"Bonfire.Search.HTTP.http_request/4","ref":"Bonfire.Search.HTTP.html#http_request/4"},{"type":"module","doc":"","title":"Bonfire.Search.Indexer","ref":"Bonfire.Search.Indexer.html"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.host/1","ref":"Bonfire.Search.Indexer.html#host/1"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.index_name/1","ref":"Bonfire.Search.Indexer.html#index_name/1"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.init_index/4","ref":"Bonfire.Search.Indexer.html#init_index/4"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.maybe_delete_object/2","ref":"Bonfire.Search.Indexer.html#maybe_delete_object/2"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.maybe_index_object/2","ref":"Bonfire.Search.Indexer.html#maybe_index_object/2"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.maybe_indexable_and_discoverable/2","ref":"Bonfire.Search.Indexer.html#maybe_indexable_and_discoverable/2"},{"type":"function","doc":"","title":"Bonfire.Search.Indexer.maybe_indexable_object/1","ref":"Bonfire.Search.Indexer.html#maybe_indexable_object/1"},{"type":"module","doc":"","title":"Bonfire.Search.LiveHandler","ref":"Bonfire.Search.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Search.LiveHandler.handle_event/3","ref":"Bonfire.Search.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Search.LiveHandler.live_search/5","ref":"Bonfire.Search.LiveHandler.html#live_search/5"},{"type":"macro","doc":"","title":"Bonfire.Search.LiveHandler.sigil_p/2","ref":"Bonfire.Search.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Search.MeiliLib","ref":"Bonfire.Search.MeiliLib.html"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.create_index/2","ref":"Bonfire.Search.MeiliLib.html#create_index/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.delete/2","ref":"Bonfire.Search.MeiliLib.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.facet_from_map/1","ref":"Bonfire.Search.MeiliLib.html#facet_from_map/1"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.get_client/0","ref":"Bonfire.Search.MeiliLib.html#get_client/0"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.index_exists/1","ref":"Bonfire.Search.MeiliLib.html#index_exists/1"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.list_facets/1","ref":"Bonfire.Search.MeiliLib.html#list_facets/1"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.put_documents/2","ref":"Bonfire.Search.MeiliLib.html#put_documents/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.search/2","ref":"Bonfire.Search.MeiliLib.html#search/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.search/3","ref":"Bonfire.Search.MeiliLib.html#search/3"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.search/4","ref":"Bonfire.Search.MeiliLib.html#search/4"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.search_by_type/2","ref":"Bonfire.Search.MeiliLib.html#search_by_type/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.set_facets/2","ref":"Bonfire.Search.MeiliLib.html#set_facets/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.set_searchable_fields/2","ref":"Bonfire.Search.MeiliLib.html#set_searchable_fields/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.settings/2","ref":"Bonfire.Search.MeiliLib.html#settings/2"},{"type":"function","doc":"","title":"Bonfire.Search.MeiliLib.wait_for_task/3","ref":"Bonfire.Search.MeiliLib.html#wait_for_task/3"},{"type":"module","doc":"","title":"Bonfire.Search.RuntimeConfig","ref":"Bonfire.Search.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Search.RuntimeConfig.config/0","ref":"Bonfire.Search.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Search.RuntimeConfig.config_module/0","ref":"Bonfire.Search.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"Handles matching of needs & offers","title":"Bonfire.Search.Stopwords","ref":"Bonfire.Search.Stopwords.html"},{"type":"function","doc":"Filters out pre-defined stop words.","title":"Bonfire.Search.Stopwords.filter/2","ref":"Bonfire.Search.Stopwords.html#filter/2"},{"type":"function","doc":"","title":"Bonfire.Search.Stopwords.split_sentences/1","ref":"Bonfire.Search.Stopwords.html#split_sentences/1"},{"type":"function","doc":"","title":"Bonfire.Search.Stopwords.split_words/1","ref":"Bonfire.Search.Stopwords.html#split_words/1"},{"type":"function","doc":"","title":"Bonfire.Search.Stopwords.stop_words/1","ref":"Bonfire.Search.Stopwords.html#stop_words/1"},{"type":"module","doc":"","title":"Bonfire.Search.Web.Routes","ref":"Bonfire.Search.Web.Routes.html"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Feeds / Timelines\n- Activities\n- Threads\n- Boosting\n- Liking\n- Flagging\n- etc","title":"Bonfire.Social","ref":"Bonfire.Social.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Social","ref":"Bonfire.Social.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Social","ref":"Bonfire.Social.html#module-copyright-and-license"},{"type":"function","doc":"","title":"Bonfire.Social.automod_id/0","ref":"Bonfire.Social.html#automod_id/0"},{"type":"function","doc":"","title":"Bonfire.Social.declared_extension/0","ref":"Bonfire.Social.html#declared_extension/0"},{"type":"function","doc":"Checks if outgoing federation is enabled for the given subject.","title":"Bonfire.Social.federate_outgoing?/1","ref":"Bonfire.Social.html#federate_outgoing?/1"},{"type":"function","doc":"- subject: The subject to check for federation capability (optional).","title":"Parameters - Bonfire.Social.federate_outgoing?/1","ref":"Bonfire.Social.html#federate_outgoing?/1-parameters"},{"type":"function","doc":"iex> Bonfire.Social.federate_outgoing?()\n    true\n\n    iex> Bonfire.Social.federate_outgoing?(user)\n    false","title":"Examples - Bonfire.Social.federate_outgoing?/1","ref":"Bonfire.Social.html#federate_outgoing?/1-examples"},{"type":"function","doc":"Checks if federation is generally enabled for the given subject.","title":"Bonfire.Social.federating?/1","ref":"Bonfire.Social.html#federating?/1"},{"type":"function","doc":"- subject: The subject to check for federation capability (optional).","title":"Parameters - Bonfire.Social.federating?/1","ref":"Bonfire.Social.html#federating?/1-parameters"},{"type":"function","doc":"iex> Bonfire.Social.federating?()\n    true\n\n    iex> Bonfire.Social.federating?(user)\n    true","title":"Examples - Bonfire.Social.federating?/1","ref":"Bonfire.Social.html#federating?/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.get_or_create_automod/0","ref":"Bonfire.Social.html#get_or_create_automod/0"},{"type":"function","doc":"Determines if the given thing is local to the current instance.","title":"Bonfire.Social.is_local?/2","ref":"Bonfire.Social.html#is_local?/2"},{"type":"function","doc":"- thing: The object to check for locality.\n  - opts: Additional options for the check (optional).","title":"Parameters - Bonfire.Social.is_local?/2","ref":"Bonfire.Social.html#is_local?/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.is_local?(local_user)\n    true\n\n    iex> Bonfire.Social.is_local?(remote_user)\n    false","title":"Examples - Bonfire.Social.is_local?/2","ref":"Bonfire.Social.html#is_local?/2-examples"},{"type":"function","doc":"Returns the configured mailer module.","title":"Bonfire.Social.mailer/0","ref":"Bonfire.Social.html#mailer/0"},{"type":"function","doc":"Executes a query and returns results based on the specified options.\n\nThis function can return query results in various formats, including raw query,\nstream, or paginated results.","title":"Bonfire.Social.many/3","ref":"Bonfire.Social.html#many/3"},{"type":"function","doc":"- query: The Ecto query to execute.\n  - paginate?: Boolean indicating whether to paginate results.\n  - opts: Additional options for query execution.","title":"Parameters - Bonfire.Social.many/3","ref":"Bonfire.Social.html#many/3-parameters"},{"type":"function","doc":"iex> query = from(u in User, where: u.age > 18)\n    iex> Bonfire.Social.many(query, false, return: :query)\n    #Ecto.Query<...>\n\n    iex> Bonfire.Social.many(query, true, after: \"1\")\n    %{entries: [%User{}, ...], page_info: %{...}}","title":"Examples - Bonfire.Social.many/3","ref":"Bonfire.Social.html#many/3-examples"},{"type":"function","doc":"Attempts to federate an activity based on the given parameters.\n\nThis function handles various patterns of activities and objects, attempting to\nfederate them according to the specified verb and options.","title":"Bonfire.Social.maybe_federate/5","ref":"Bonfire.Social.html#maybe_federate/5"},{"type":"function","doc":"- subject: The subject initiating the federation.\n  - verb: The verb describing the activity (e.g., :create, :delete).\n  - object: The object to be federated.\n  - activity: The associated activity data (optional).\n  - opts: Additional options for federation.","title":"Parameters - Bonfire.Social.maybe_federate/5","ref":"Bonfire.Social.html#maybe_federate/5-parameters"},{"type":"function","doc":"iex> subject = %User{id: 1}\n    iex> object = %Post{id: 2, content: \"Hello, world!\"}\n    iex> Bonfire.Social.maybe_federate(subject, :create, object)\n    {:ok, %ActivityPub.Object{}}","title":"Examples - Bonfire.Social.maybe_federate/5","ref":"Bonfire.Social.html#maybe_federate/5-examples"},{"type":"function","doc":"Federates an activity (if enabled) and wraps it with additional metadata.\n\nThis function attempts to federate an activity and, if successful, merges the\nfederated activity information with the original object.","title":"Bonfire.Social.maybe_federate_and_gift_wrap_activity/3","ref":"Bonfire.Social.html#maybe_federate_and_gift_wrap_activity/3"},{"type":"function","doc":"- subject: The subject initiating the federation.\n  - object: The object to be federated.\n  - opts: Optional parameters for federation.","title":"Parameters - Bonfire.Social.maybe_federate_and_gift_wrap_activity/3","ref":"Bonfire.Social.html#maybe_federate_and_gift_wrap_activity/3-parameters"},{"type":"function","doc":"iex> subject = %User{id: 1}\n    iex> object = %Post{id: 2, content: \"Hello, world!\"}\n    iex> {:ok, wrapped_object} = Bonfire.Social.maybe_federate_and_gift_wrap_activity(subject, object)\n    iex> Map.has_key?(wrapped_object, :activity)\n    true","title":"Examples - Bonfire.Social.maybe_federate_and_gift_wrap_activity/3","ref":"Bonfire.Social.html#maybe_federate_and_gift_wrap_activity/3-examples"},{"type":"function","doc":"Returns the configured repository module.","title":"Bonfire.Social.repo/0","ref":"Bonfire.Social.html#repo/0"},{"type":"function","doc":"iex> Bonfire.Social.repo()\n    Bonfire.Common.Repo","title":"Examples - Bonfire.Social.repo/0","ref":"Bonfire.Social.html#repo/0-examples"},{"type":"module","doc":"A special type of activity object that stores federated JSON data as-is.\n\nThis module is used for any object type that isn't recognized or isn't implemented by an extension.\nIt provides functionality to handle ActivityPub activities, particularly for receiving and creating activities.","title":"Bonfire.Social.APActivities","ref":"Bonfire.Social.APActivities.html"},{"type":"function","doc":"Receives and processes an ActivityPub activity.\n\nThis function is used to handle incoming federated activities.","title":"Bonfire.Social.APActivities.ap_receive_activity/3","ref":"Bonfire.Social.APActivities.html#ap_receive_activity/3"},{"type":"function","doc":"- creator: The character (user) associated with the activity.\n  - activity: The ActivityPub activity data.\n  - object: The object associated with the activity.","title":"Parameters - Bonfire.Social.APActivities.ap_receive_activity/3","ref":"Bonfire.Social.APActivities.html#ap_receive_activity/3-parameters"},{"type":"function","doc":"iex> creator = %Character{id: \"user123\"}\n    iex> activity = %{data: %{\"type\" => \"Create\"}}\n    iex> object = %{data: %{\"type\" => \"Note\", \"content\" => \"Hello, fediverse!\"}}\n    iex> Bonfire.Social.APActivities.ap_receive_activity(creator, activity, object)\n    {:ok, %APActivity{}}","title":"Examples - Bonfire.Social.APActivities.ap_receive_activity/3","ref":"Bonfire.Social.APActivities.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Creates an `APActivity` from the given character, activity, and object.\n\nThis function handles various patterns of input data to create an APActivity.","title":"Bonfire.Social.APActivities.create/4","ref":"Bonfire.Social.APActivities.html#create/4"},{"type":"function","doc":"- character: The character (user) creating the activity.\n  - activity: The activity data.\n  - object: The object associated with the activity.\n  - public: A boolean indicating whether the activity is public (optional).","title":"Parameters - Bonfire.Social.APActivities.create/4","ref":"Bonfire.Social.APActivities.html#create/4-parameters"},{"type":"function","doc":"iex> character = %Character{id: \"user123\"}\n    iex> activity = %{data: %{\"type\" => \"Create\", \"object\" => %{\"content\" => \"Hello, world!\"}}}\n    iex> object = %{data: %{\"type\" => \"Note\"}}\n    iex> Bonfire.Social.APActivities.create(character, activity, object)\n    {:ok, %APActivity{}}\n\n    iex> Bonfire.Social.APActivities.create(character, activity, object, true)\n    {:ok, %APActivity{}}","title":"Examples - Bonfire.Social.APActivities.create/4","ref":"Bonfire.Social.APActivities.html#create/4-examples"},{"type":"module","doc":"Helpers to create or query (though that's usually done through `Bonfire.Social.FeedActivities`) activities, preload relevant associations, and otherwise massage activity-related data.\n\nThis is the [context](https://hexdocs.pm/phoenix/contexts.html) for `Bonfire.Data.Social.Activity`, which has these fields:\n- id: primary key (which when the verb is Create usually matches the related Object) \n- subject: references the who (eg. a user)\n- verb: what kind of action (eg. references Like or Follow in `Bonfire.Data.AccessControl.Verb`)\n- object: references the what (eg. a specific post)","title":"Bonfire.Social.Activities","ref":"Bonfire.Social.Activities.html"},{"type":"function","doc":"Applies preloads to a query or or post-loads to object(s) with the specified options. See `activity_preloads/3` for what preload options you can specify.","title":"Bonfire.Social.Activities.activity_preloads/2","ref":"Bonfire.Social.Activities.html#activity_preloads/2"},{"type":"function","doc":"> activity_preloads(query, preload: [])\n    # Query with applied activity preloads","title":"Examples - Bonfire.Social.Activities.activity_preloads/2","ref":"Bonfire.Social.Activities.html#activity_preloads/2-examples"},{"type":"function","doc":"Applies preloads to a query or or post-loads to object(s) with the specified preloads and options.","title":"Bonfire.Social.Activities.activity_preloads/3","ref":"Bonfire.Social.Activities.html#activity_preloads/3"},{"type":"function","doc":"> activity_preloads(query, [], [])\n    # Original query, with no extra joins/preloads\n\n    > activity_preloads(object, [], [])\n    # Original object, with no extra assocs preloads\n\n    > activity_preloads(object_or_query, [:with_creator], [])\n    # Object or query with extra assocs preloads\n\n    > activity_preloads(object_or_query, [:feed, :with_reply_to, :with_media, :with_object_more, :maybe_with_labelled])\n    # Object or query several extra assoc preloads\n\n Other possible preloads:\n    :default\n    :all\n    :feed\n    :feed_postload\n    :feed_metadata\n    :feed_by_subject\n    :feed_by_creator\n    :notifications\n    :object_with_creator\n    :posts\n    :posts_with_thread\n    :posts_with_reply_to\n    :with_creator\n    :with_subject\n    :with_verb\n    :with_object\n    :with_post_content\n    :with_object_more\n    :with_replied\n    :with_thread_name\n    :with_parent\n    :with_reply_to\n    :with_seen\n    :with_media\n    :per_media\n    :tags\n    :maybe_with_labelled","title":"Examples - Bonfire.Social.Activities.activity_preloads/3","ref":"Bonfire.Social.Activities.html#activity_preloads/3-examples"},{"type":"function","doc":"Processes and structures activity data within a media.","title":"Bonfire.Social.Activities.activity_under_media/1","ref":"Bonfire.Social.Activities.html#activity_under_media/1"},{"type":"function","doc":"iex> %{id: 1, activity: %{id: 2}} = activity_under_media(%{activity: %Bonfire.Data.Social.Activity{id: 2, media: %{id: 1}}})","title":"Examples - Bonfire.Social.Activities.activity_under_media/1","ref":"Bonfire.Social.Activities.html#activity_under_media/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.activity_under_media/2","ref":"Bonfire.Social.Activities.html#activity_under_media/2"},{"type":"function","doc":"Processes and structures activity data within an object.","title":"Bonfire.Social.Activities.activity_under_object/1","ref":"Bonfire.Social.Activities.html#activity_under_object/1"},{"type":"function","doc":"iex> %{id: 1, activity: %{id: 2}} = activity_under_object(%{activity: %Bonfire.Data.Social.Activity{id: 2, object: %{id: 1}}})","title":"Examples - Bonfire.Social.Activities.activity_under_object/1","ref":"Bonfire.Social.Activities.html#activity_under_object/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.activity_under_object/2","ref":"Bonfire.Social.Activities.html#activity_under_object/2"},{"type":"function","doc":"Outputs the names of all object verbs for localization, for the purpose of adding to the localisation strings, as long as the output is piped through to localise_strings/1 at compile time.","title":"Bonfire.Social.Activities.all_verb_names/0","ref":"Bonfire.Social.Activities.html#all_verb_names/0"},{"type":"function","doc":"Retrieves additional verb names with various formats for localization.","title":"Bonfire.Social.Activities.all_verb_names_extra/0","ref":"Bonfire.Social.Activities.html#all_verb_names_extra/0"},{"type":"function","doc":"Filters a query to include only permitted objects.","title":"Bonfire.Social.Activities.as_permitted_for/3","ref":"Bonfire.Social.Activities.html#as_permitted_for/3"},{"type":"function","doc":"> as_permitted_for(query, [])\n    # Filtered query","title":"Examples - Bonfire.Social.Activities.as_permitted_for/3","ref":"Bonfire.Social.Activities.html#as_permitted_for/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.build_assoc/3","ref":"Bonfire.Social.Activities.html#build_assoc/3"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.build_assoc/4","ref":"Bonfire.Social.Activities.html#build_assoc/4"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.by_subject_verb_object_q/3","ref":"Bonfire.Social.Activities.html#by_subject_verb_object_q/3"},{"type":"function","doc":"Casts a changeset with the provided verb, creator and options.","title":"Bonfire.Social.Activities.cast/4","ref":"Bonfire.Social.Activities.html#cast/4"},{"type":"function","doc":"> cast(changeset, :like, %User{}, feed_ids: [])\n    # Changeset with associations set","title":"Examples - Bonfire.Social.Activities.cast/4","ref":"Bonfire.Social.Activities.html#cast/4-examples"},{"type":"function","doc":"Counts the total number of activities.","title":"Bonfire.Social.Activities.count_total/0","ref":"Bonfire.Social.Activities.html#count_total/0"},{"type":"function","doc":"Create an Activity.\nNOTE: you will usually want to use `cast/3` instead or maybe `Objects.publish/5`","title":"Bonfire.Social.Activities.create/4","ref":"Bonfire.Social.Activities.html#create/4"},{"type":"function","doc":"> create(%User{id: \"1\"}, :like, %Post{id: \"1\"})\n    {:ok, %Activity{}}","title":"Examples - Bonfire.Social.Activities.create/4","ref":"Bonfire.Social.Activities.html#create/4-examples"},{"type":"function","doc":"Deletes activities by ID or struct, or using specific filters.","title":"Bonfire.Social.Activities.delete/1","ref":"Bonfire.Social.Activities.html#delete/1"},{"type":"function","doc":"> delete(activity)\n    # Number of deleted activities\n    \n    > delete(\"1\")\n    # Number of deleted activities\n\n    > delete([id: \"1\"])\n    # Number of deleted activities","title":"Examples - Bonfire.Social.Activities.delete/1","ref":"Bonfire.Social.Activities.html#delete/1-examples"},{"type":"function","doc":"Deletes an activity by object ID.","title":"Bonfire.Social.Activities.delete_by_object/1","ref":"Bonfire.Social.Activities.html#delete_by_object/1"},{"type":"function","doc":"> delete_by_object(\"1\")\n    # Number of deleted objects","title":"Examples - Bonfire.Social.Activities.delete_by_object/1","ref":"Bonfire.Social.Activities.html#delete_by_object/1-examples"},{"type":"function","doc":"Deletes an activity by subject, verb, and object.","title":"Bonfire.Social.Activities.delete_by_subject_verb_object/3","ref":"Bonfire.Social.Activities.html#delete_by_subject_verb_object/3"},{"type":"function","doc":"> delete_by_subject_verb_object(%User{id: \"1\"}, :like, %Post{id: \"1\"})\n    # Number of deleted activities","title":"Examples - Bonfire.Social.Activities.delete_by_subject_verb_object/3","ref":"Bonfire.Social.Activities.html#delete_by_subject_verb_object/3-examples"},{"type":"function","doc":"Retrieves the cursor value for pagination based on field or data structure.","title":"Bonfire.Social.Activities.fetch_cursor_value_fun/2","ref":"Bonfire.Social.Activities.html#fetch_cursor_value_fun/2"},{"type":"function","doc":"> fetch_cursor_value_fun(%{nested_replies_count: 5}, :num_replies)\n    # returns the cursor value based on the number of replies","title":"Examples - Bonfire.Social.Activities.fetch_cursor_value_fun/2","ref":"Bonfire.Social.Activities.html#fetch_cursor_value_fun/2-examples"},{"type":"function","doc":"Gets an activity by its ID.","title":"Bonfire.Social.Activities.get/2","ref":"Bonfire.Social.Activities.html#get/2"},{"type":"function","doc":"> get(\"activity_id\", [])","title":"Examples - Bonfire.Social.Activities.get/2","ref":"Bonfire.Social.Activities.html#get/2-examples"},{"type":"function","doc":"Loads an object based on its ID or pointer.","title":"Bonfire.Social.Activities.load_object/2","ref":"Bonfire.Social.Activities.html#load_object/2"},{"type":"function","doc":"> load_object(\"object_id\")","title":"Examples - Bonfire.Social.Activities.load_object/2","ref":"Bonfire.Social.Activities.html#load_object/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.maybe_filter/3","ref":"Bonfire.Social.Activities.html#maybe_filter/3"},{"type":"function","doc":"Optionally joins the creator.\n\nPerforms a query optimization: only includes the creator if different from the subject or current user.\n\nIf `skip_loading_user_ids` is empty, the creator is always included. Otherwise, it is included only if it is different from the users in `skip_loading_user_ids`.","title":"Bonfire.Social.Activities.maybe_join_creator/2","ref":"Bonfire.Social.Activities.html#maybe_join_creator/2"},{"type":"function","doc":"> maybe_join_creator(query, [])\n    # returns query with creator preloaded if different from the subject\n\n    > maybe_join_creator(query, [1, 2, 3])\n    # returns query with creator included only if creator.id not in [1, 2, 3]","title":"Examples - Bonfire.Social.Activities.maybe_join_creator/2","ref":"Bonfire.Social.Activities.html#maybe_join_creator/2-examples"},{"type":"function","doc":"Optimizes the query to optionally include the subject data.\n\nIf `skip_loading_user_ids` is empty, the subject is always included. Otherwise, it is included only if it is different from the users in `skip_loading_user_ids`.","title":"Bonfire.Social.Activities.maybe_join_subject/2","ref":"Bonfire.Social.Activities.html#maybe_join_subject/2"},{"type":"function","doc":"> maybe_join_subject(query, [])\n    # returns query with subject preloaded\n\n    > maybe_join_subject(query, [1, 2, 3])\n    # returns query with subject included only if subject.id not in [1, 2, 3]","title":"Examples - Bonfire.Social.Activities.maybe_join_subject/2","ref":"Bonfire.Social.Activities.html#maybe_join_subject/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.maybe_remove_for_deleters_feeds/1","ref":"Bonfire.Social.Activities.html#maybe_remove_for_deleters_feeds/1"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.maybe_with_labelled/0","ref":"Bonfire.Social.Activities.html#maybe_with_labelled/0"},{"type":"function","doc":"Retrieves or constructs the object from an activity.","title":"Bonfire.Social.Activities.object_from_activity/1","ref":"Bonfire.Social.Activities.html#object_from_activity/1"},{"type":"function","doc":"iex> object_from_activity(%{object: %{id: 1}})\n    %{id: 1}","title":"Examples - Bonfire.Social.Activities.object_from_activity/1","ref":"Bonfire.Social.Activities.html#object_from_activity/1-examples"},{"type":"function","doc":"Preloads the activity for an object and verb.","title":"Bonfire.Social.Activities.object_preload_activity/2","ref":"Bonfire.Social.Activities.html#object_preload_activity/2"},{"type":"function","doc":"> object_preload_activity(%Post{}, :like)\n    # Object with preloaded activity","title":"Examples - Bonfire.Social.Activities.object_preload_activity/2","ref":"Bonfire.Social.Activities.html#object_preload_activity/2-examples"},{"type":"function","doc":"Preloads the creation activity for an object.","title":"Bonfire.Social.Activities.object_preload_create_activity/1","ref":"Bonfire.Social.Activities.html#object_preload_create_activity/1"},{"type":"function","doc":"> object_preload_create_activity(%Post{})\n    # Object with preloaded creation activity","title":"Examples - Bonfire.Social.Activities.object_preload_create_activity/1","ref":"Bonfire.Social.Activities.html#object_preload_create_activity/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.object_under_activity/2","ref":"Bonfire.Social.Activities.html#object_under_activity/2"},{"type":"function","doc":"Provides cursor fields for ordering based on sort criteria.","title":"Bonfire.Social.Activities.order_cursor_fields/2","ref":"Bonfire.Social.Activities.html#order_cursor_fields/2"},{"type":"function","doc":"> order_cursor_fields(:num_likes, :asc)\n    # returns cursor fields for ordering by number of likes in ascending order","title":"Examples - Bonfire.Social.Activities.order_cursor_fields/2","ref":"Bonfire.Social.Activities.html#order_cursor_fields/2-examples"},{"type":"function","doc":"Provides pagination options for ordering.","title":"Bonfire.Social.Activities.order_pagination_opts/2","ref":"Bonfire.Social.Activities.html#order_pagination_opts/2"},{"type":"function","doc":"> order_pagination_opts(:num_likes, :desc)\n    # returns pagination options for ordering by number of likes in descending order","title":"Examples - Bonfire.Social.Activities.order_pagination_opts/2","ref":"Bonfire.Social.Activities.html#order_pagination_opts/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.put_assoc/3","ref":"Bonfire.Social.Activities.html#put_assoc/3"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.put_assoc/4","ref":"Bonfire.Social.Activities.html#put_assoc/4"},{"type":"function","doc":"Constructs a query based on filters and optional user context.","title":"Bonfire.Social.Activities.query/2","ref":"Bonfire.Social.Activities.html#query/2"},{"type":"function","doc":"> query(filters)\n\n    iex> query([my: :feed], [current_user: nil])\n    ** (Bonfire.Fail.Auth) You need to log in first.","title":"Examples - Bonfire.Social.Activities.query/2","ref":"Bonfire.Social.Activities.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.query_module/0","ref":"Bonfire.Social.Activities.html#query_module/0"},{"type":"function","doc":"Preloads activity for objects in a query using the specified verb and object ID field.","title":"Bonfire.Social.Activities.query_object_preload_activity/4","ref":"Bonfire.Social.Activities.html#query_object_preload_activity/4"},{"type":"function","doc":"> query_object_preload_activity(query, :like, :post_id, [])\n    # Query with preloaded activities","title":"Examples - Bonfire.Social.Activities.query_object_preload_activity/4","ref":"Bonfire.Social.Activities.html#query_object_preload_activity/4-examples"},{"type":"function","doc":"Preloads creation activity for objects in a query.","title":"Bonfire.Social.Activities.query_object_preload_create_activity/2","ref":"Bonfire.Social.Activities.html#query_object_preload_create_activity/2"},{"type":"function","doc":"> query_object_preload_create_activity(query, [])\n    # Query with preloaded creation activities","title":"Examples - Bonfire.Social.Activities.query_object_preload_create_activity/2","ref":"Bonfire.Social.Activities.html#query_object_preload_create_activity/2-examples"},{"type":"function","doc":"Orders query results based on a specified field and sort order.","title":"Bonfire.Social.Activities.query_order/4","ref":"Bonfire.Social.Activities.html#query_order/4"},{"type":"function","doc":"> query_order(query, :num_replies, :asc)\n    # returns the query ordered by number of replies in ascending order","title":"Examples - Bonfire.Social.Activities.query_order/4","ref":"Bonfire.Social.Activities.html#query_order/4-examples"},{"type":"function","doc":"Retrieves an activity based on a query and options.","title":"Bonfire.Social.Activities.read/2","ref":"Bonfire.Social.Activities.html#read/2"},{"type":"function","doc":"> read(query)\n    # returns an activity based on the provided query\n\n    > read(object_id)\n    # returns an activity for the provided object ID (usually a create activity)","title":"Examples - Bonfire.Social.Activities.read/2","ref":"Bonfire.Social.Activities.html#read/2-examples"},{"type":"function","doc":"Constructs a query for reading activities based on input.","title":"Bonfire.Social.Activities.read_query/2","ref":"Bonfire.Social.Activities.html#read_query/2"},{"type":"function","doc":"> read_query(query, opts)\n\n    > read_query(object_id, opts)","title":"Examples - Bonfire.Social.Activities.read_query/2","ref":"Bonfire.Social.Activities.html#read_query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.reply_to_as_permitted_for/3","ref":"Bonfire.Social.Activities.html#reply_to_as_permitted_for/3"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.schema_module/0","ref":"Bonfire.Social.Activities.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Activities.verb_congugate/1","ref":"Bonfire.Social.Activities.html#verb_congugate/1"},{"type":"function","doc":"Returns a localized and formatted display name for a verb.","title":"Bonfire.Social.Activities.verb_display/1","ref":"Bonfire.Social.Activities.html#verb_display/1"},{"type":"function","doc":"iex> verb_display(\"create\")","title":"Examples - Bonfire.Social.Activities.verb_display/1","ref":"Bonfire.Social.Activities.html#verb_display/1-examples"},{"type":"function","doc":"Retrieves or constructs an ID for a verb based on its name or identifier.","title":"Bonfire.Social.Activities.verb_id/1","ref":"Bonfire.Social.Activities.html#verb_id/1"},{"type":"function","doc":"iex> verb_id(:create)","title":"Examples - Bonfire.Social.Activities.verb_id/1","ref":"Bonfire.Social.Activities.html#verb_id/1-examples"},{"type":"function","doc":"Optionally modifies the verb based on activity context.","title":"Bonfire.Social.Activities.verb_maybe_modify/2","ref":"Bonfire.Social.Activities.html#verb_maybe_modify/2"},{"type":"function","doc":"iex> verb_maybe_modify(\"Create\", %{object: %{post_content: %{id: 1}}})\n    \"Write\"","title":"Examples - Bonfire.Social.Activities.verb_maybe_modify/2","ref":"Bonfire.Social.Activities.html#verb_maybe_modify/2-examples"},{"type":"function","doc":"Returns the name of a verb based on its slug or identifier.","title":"Bonfire.Social.Activities.verb_name/1","ref":"Bonfire.Social.Activities.html#verb_name/1"},{"type":"function","doc":"iex> verb_name(:create)\n    \"Create\"","title":"Examples - Bonfire.Social.Activities.verb_name/1","ref":"Bonfire.Social.Activities.html#verb_name/1-examples"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that translates creates an activity for a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `verb` - indicates what kind of activity we're creating, default: `:create`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.Activity","ref":"Bonfire.Social.Acts.Activity.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Activity.run/2","ref":"Bonfire.Social.Acts.Activity.html#run/2"},{"type":"module","doc":"","title":"Bonfire.Social.Acts.Activity.UnderObject","ref":"Bonfire.Social.Acts.Activity.UnderObject.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Activity.UnderObject.run/2","ref":"Bonfire.Social.Acts.Activity.UnderObject.html#run/2"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that marks the sensitivity level of a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.AntiSpam","ref":"Bonfire.Social.Acts.AntiSpam.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.AntiSpam.all_text_content/2","ref":"Bonfire.Social.Acts.AntiSpam.html#all_text_content/2"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.AntiSpam.check!/3","ref":"Bonfire.Social.Acts.AntiSpam.html#check!/3"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.AntiSpam.run/2","ref":"Bonfire.Social.Acts.AntiSpam.html#run/2"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.AntiSpam.spam?/3","ref":"Bonfire.Social.Acts.AntiSpam.html#spam?/3"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that translates an object (eg. a post) or changeset into some jobs for the AP publish worker. Handles creation, update and delete.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `ap_on` - key in assigns to find the AP object, default: `:ap_object`\n  * `action` - indicates what kind of action we're federating, default: `:insert`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.Federate","ref":"Bonfire.Social.Acts.Federate.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Federate.run/2","ref":"Bonfire.Social.Acts.Federate.html#run/2"},{"type":"module","doc":"NOT USED - Finds a list of appropriate feeds into which to post.\n\nEpic Options:\n  * `:current_user` - current user. required.\n  * `:boundary` - preset string or custom boundaries. default: nil\n\nAct Options:\n  * `:changeset` - key in assigns to find changeset, required","title":"Bonfire.Social.Acts.Feeds","ref":"Bonfire.Social.Acts.Feeds.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Feeds.run/2","ref":"Bonfire.Social.Acts.Feeds.html#run/2"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Feeds.thread_id/1","ref":"Bonfire.Social.Acts.Feeds.html#thread_id/1"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that translates creates an activity for a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `feeds` - key\n  * `notify_feeds` - key","title":"Bonfire.Social.Acts.LivePush","ref":"Bonfire.Social.Acts.LivePush.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.LivePush.run/2","ref":"Bonfire.Social.Acts.LivePush.html#run/2"},{"type":"module","doc":"Delete something + specified associations with a changeset","title":"Bonfire.Social.Acts.Objects.Delete","ref":"Bonfire.Social.Acts.Objects.Delete.html"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that translates creates a the post contents for a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.PostContents","ref":"Bonfire.Social.Acts.PostContents.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.PostContents.run/2","ref":"Bonfire.Social.Acts.PostContents.html#run/2"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that marks the sensitivity level of a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.Sensitivity","ref":"Bonfire.Social.Acts.Sensitivity.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Sensitivity.run/2","ref":"Bonfire.Social.Acts.Sensitivity.html#run/2"},{"type":"module","doc":"An Act (as specified by `Bonfire.Epics`) that sets the thread and/or reply_to for a object (eg. post) or changeset.\n\nAct Options:\n  * `on` - key in assigns to find the object, default: `:post`\n  * `current_user` - self explanatory","title":"Bonfire.Social.Acts.Threaded","ref":"Bonfire.Social.Acts.Threaded.html"},{"type":"function","doc":"","title":"Bonfire.Social.Acts.Threaded.run/2","ref":"Bonfire.Social.Acts.Threaded.html#run/2"},{"type":"module","doc":"Answers are just another kind of `Bonfire.Social.Pins`, please refer to that module.","title":"Bonfire.Social.Answers","ref":"Bonfire.Social.Answers.html"},{"type":"module","doc":"Mutate or query bookmarks (similar to likes but only visible to the creator of the bookmark)\n\nBookmarks are implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions)","title":"Bonfire.Social.Bookmarks","ref":"Bonfire.Social.Bookmarks.html"},{"type":"function","doc":"Bookmarks an object for a user.","title":"Bonfire.Social.Bookmarks.bookmark/3","ref":"Bonfire.Social.Bookmarks.html#bookmark/3"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.bookmark(user, object)\n    {:ok, %Bonfire.Data.Social.Bookmark{}}","title":"Examples - Bonfire.Social.Bookmarks.bookmark/3","ref":"Bonfire.Social.Bookmarks.html#bookmark/3-examples"},{"type":"function","doc":"Checks if a user has bookmarked an object.","title":"Bonfire.Social.Bookmarks.bookmarked?/2","ref":"Bonfire.Social.Bookmarks.html#bookmarked?/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.bookmarked?(user, object)\n    true","title":"Examples - Bonfire.Social.Bookmarks.bookmarked?/2","ref":"Bonfire.Social.Bookmarks.html#bookmarked?/2-examples"},{"type":"function","doc":"Retrieves bookmark(er)s for an object.","title":"Bonfire.Social.Bookmarks.by_bookmarked/2","ref":"Bonfire.Social.Bookmarks.html#by_bookmarked/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.by_bookmarked(object)\n    [%Bonfire.Data.Social.Bookmark{}, ...]","title":"Examples - Bonfire.Social.Bookmarks.by_bookmarked/2","ref":"Bonfire.Social.Bookmarks.html#by_bookmarked/2-examples"},{"type":"function","doc":"Retrieves bookmarked objects by a subject.","title":"Bonfire.Social.Bookmarks.by_bookmarker/2","ref":"Bonfire.Social.Bookmarks.html#by_bookmarker/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.by_bookmarker(user)\n    [%Bonfire.Data.Social.Bookmark{}, ...]","title":"Examples - Bonfire.Social.Bookmarks.by_bookmarker/2","ref":"Bonfire.Social.Bookmarks.html#by_bookmarker/2-examples"},{"type":"function","doc":"Counts bookmarks based on filters and options.","title":"Bonfire.Social.Bookmarks.count/2","ref":"Bonfire.Social.Bookmarks.html#count/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.count([subject: user_id], [])\n    5\n\n    iex> Bonfire.Social.Bookmarks.count(user, object)\n    1\n\n    iex> Bonfire.Social.Bookmarks.count(object, [])\n    10","title":"Examples - Bonfire.Social.Bookmarks.count/2","ref":"Bonfire.Social.Bookmarks.html#count/2-examples"},{"type":"function","doc":"Retrieves a bookmark by subject and object.","title":"Bonfire.Social.Bookmarks.get/3","ref":"Bonfire.Social.Bookmarks.html#get/3"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.get(user, object)\n    {:ok, %Bonfire.Data.Social.Bookmark{}}","title":"Examples - Bonfire.Social.Bookmarks.get/3","ref":"Bonfire.Social.Bookmarks.html#get/3-examples"},{"type":"function","doc":"Retrieves a bookmark edge, raising an error if not found.","title":"Bonfire.Social.Bookmarks.get!/3","ref":"Bonfire.Social.Bookmarks.html#get!/3"},{"type":"function","doc":"Lists bookmarks by a specific user.","title":"Bonfire.Social.Bookmarks.list_by/2","ref":"Bonfire.Social.Bookmarks.html#list_by/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.list_by(user_id, current_user: me)\n    [%Bonfire.Data.Social.Bookmark{}, ...]","title":"Examples - Bonfire.Social.Bookmarks.list_by/2","ref":"Bonfire.Social.Bookmarks.html#list_by/2-examples"},{"type":"function","doc":"Lists the current user's bookmarks.","title":"Bonfire.Social.Bookmarks.list_my/1","ref":"Bonfire.Social.Bookmarks.html#list_my/1"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.list_my(current_user: me)\n    [%Bonfire.Data.Social.Bookmark{}, ...]","title":"Examples - Bonfire.Social.Bookmarks.list_my/1","ref":"Bonfire.Social.Bookmarks.html#list_my/1-examples"},{"type":"function","doc":"Lists bookmark(er)s of a specific object or objects.","title":"Bonfire.Social.Bookmarks.list_of/2","ref":"Bonfire.Social.Bookmarks.html#list_of/2"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.list_of(object_id)\n    [%Bonfire.Data.Social.Bookmark{}, ...]","title":"Examples - Bonfire.Social.Bookmarks.list_of/2","ref":"Bonfire.Social.Bookmarks.html#list_of/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.query/2","ref":"Bonfire.Social.Bookmarks.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.query_module/0","ref":"Bonfire.Social.Bookmarks.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.schema_module/0","ref":"Bonfire.Social.Bookmarks.html#schema_module/0"},{"type":"function","doc":"Removes a bookmark from an object for a user, if one exists","title":"Bonfire.Social.Bookmarks.unbookmark/3","ref":"Bonfire.Social.Bookmarks.html#unbookmark/3"},{"type":"function","doc":"iex> Bonfire.Social.Bookmarks.unbookmark(user, object)\n    :ok","title":"Examples - Bonfire.Social.Bookmarks.unbookmark/3","ref":"Bonfire.Social.Bookmarks.html#unbookmark/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler","ref":"Bonfire.Social.Bookmarks.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.bookmarker_count/1","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#bookmarker_count/1"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.do_bookmark/3","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#do_bookmark/3"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.handle_event/3","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.update_many/2","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Bookmarks.LiveHandler.update_many_opts/1","ref":"Bonfire.Social.Bookmarks.LiveHandler.html#update_many_opts/1"},{"type":"module","doc":"Mutate, query, and federate boosts (re-sharing an activity or object).\n\nBoosts are implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions)","title":"Bonfire.Social.Boosts","ref":"Bonfire.Social.Boosts.html"},{"type":"function","doc":"Publishes a federated activity for a boost action.","title":"Bonfire.Social.Boosts.ap_publish_activity/3","ref":"Bonfire.Social.Boosts.html#ap_publish_activity/3"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.ap_publish_activity(subject, :create, boost)\n    {:ok, _activity}","title":"Examples - Bonfire.Social.Boosts.ap_publish_activity/3","ref":"Bonfire.Social.Boosts.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives and processes a federated boost activity.","title":"Bonfire.Social.Boosts.ap_receive_activity/3","ref":"Bonfire.Social.Boosts.html#ap_receive_activity/3"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.ap_receive_activity(creator, activity, object)\n    {:ok, _boost}","title":"Examples - Bonfire.Social.Boosts.ap_receive_activity/3","ref":"Bonfire.Social.Boosts.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Boosts an object for a user.","title":"Bonfire.Social.Boosts.boost/3","ref":"Bonfire.Social.Boosts.html#boost/3"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.boost(user, object)\n    {:ok, %Bonfire.Data.Social.Boost{}}","title":"Examples - Bonfire.Social.Boosts.boost/3","ref":"Bonfire.Social.Boosts.html#boost/3-examples"},{"type":"function","doc":"Checks if a user has boosted an object.","title":"Bonfire.Social.Boosts.boosted?/2","ref":"Bonfire.Social.Boosts.html#boosted?/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.boosted?(user, object)\n    true","title":"Examples - Bonfire.Social.Boosts.boosted?/2","ref":"Bonfire.Social.Boosts.html#boosted?/2-examples"},{"type":"function","doc":"Counts boosts based on filters and options.","title":"Bonfire.Social.Boosts.count/2","ref":"Bonfire.Social.Boosts.html#count/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.count([subjects: user_id], [])\n    5 # user made 5 boosts, across all objects\n\n    iex> Bonfire.Social.Boosts.count(user, object)\n    3 # user boosted object 3 times\n\n    iex> Bonfire.Social.Boosts.count(object, [])\n    10 # object was boosted 5 times, across all users","title":"Examples - Bonfire.Social.Boosts.count/2","ref":"Bonfire.Social.Boosts.html#count/2-examples"},{"type":"function","doc":"Gets the date of the latest boost by a user for an object.","title":"Bonfire.Social.Boosts.date_last_boosted/2","ref":"Bonfire.Social.Boosts.html#date_last_boosted/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.date_last_boosted(user, object)\n    ~U[2023-07-29 12:34:56Z]","title":"Examples - Bonfire.Social.Boosts.date_last_boosted/2","ref":"Bonfire.Social.Boosts.html#date_last_boosted/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.federation_module/0","ref":"Bonfire.Social.Boosts.html#federation_module/0"},{"type":"function","doc":"Retrieves a boost edge by subject and object.","title":"Bonfire.Social.Boosts.get/3","ref":"Bonfire.Social.Boosts.html#get/3"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.get(subject, object)\n    {:ok, %Bonfire.Data.Social.Boost{}}","title":"Examples - Bonfire.Social.Boosts.get/3","ref":"Bonfire.Social.Boosts.html#get/3-examples"},{"type":"function","doc":"Retrieves a boost edge, raising an error if not found.","title":"Bonfire.Social.Boosts.get!/3","ref":"Bonfire.Social.Boosts.html#get!/3"},{"type":"function","doc":"Lists boosts by a specific user.","title":"Bonfire.Social.Boosts.list_by/2","ref":"Bonfire.Social.Boosts.html#list_by/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.list_by(user_id)\n    [%Bonfire.Data.Social.Boost{}, ...]","title":"Examples - Bonfire.Social.Boosts.list_by/2","ref":"Bonfire.Social.Boosts.html#list_by/2-examples"},{"type":"function","doc":"Lists boosts by the current user.","title":"Bonfire.Social.Boosts.list_my/1","ref":"Bonfire.Social.Boosts.html#list_my/1"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.list_my(current_user: me)\n    [%Bonfire.Data.Social.Boost{}, ...]","title":"Examples - Bonfire.Social.Boosts.list_my/1","ref":"Bonfire.Social.Boosts.html#list_my/1-examples"},{"type":"function","doc":"Lists boosts of a specific object.","title":"Bonfire.Social.Boosts.list_of/2","ref":"Bonfire.Social.Boosts.html#list_of/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.list_of(object_id)\n    [%Bonfire.Data.Social.Boost{}, ...]","title":"Examples - Bonfire.Social.Boosts.list_of/2","ref":"Bonfire.Social.Boosts.html#list_of/2-examples"},{"type":"function","doc":"Lists boosts with pagination.","title":"Bonfire.Social.Boosts.list_paginated/2","ref":"Bonfire.Social.Boosts.html#list_paginated/2"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.list_paginated([subjects: user_id], [limit: 10])\n    %{edges: [%Bonfire.Data.Social.Boost{}, ...], page_info: %{...}}","title":"Examples - Bonfire.Social.Boosts.list_paginated/2","ref":"Bonfire.Social.Boosts.html#list_paginated/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.maybe_boost/3","ref":"Bonfire.Social.Boosts.html#maybe_boost/3"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.query/2","ref":"Bonfire.Social.Boosts.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.query_module/0","ref":"Bonfire.Social.Boosts.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.schema_module/0","ref":"Bonfire.Social.Boosts.html#schema_module/0"},{"type":"function","doc":"Removes a boost from an object for a user, if one exists","title":"Bonfire.Social.Boosts.unboost/3","ref":"Bonfire.Social.Boosts.html#unboost/3"},{"type":"function","doc":"iex> Bonfire.Social.Boosts.unboost(user, object)\n    {:ok, _}","title":"Examples - Bonfire.Social.Boosts.unboost/3","ref":"Bonfire.Social.Boosts.html#unboost/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Boosts.LiveHandler","ref":"Bonfire.Social.Boosts.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.LiveHandler.do_boost/3","ref":"Bonfire.Social.Boosts.LiveHandler.html#do_boost/3"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.LiveHandler.handle_event/3","ref":"Bonfire.Social.Boosts.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Boosts.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Boosts.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.LiveHandler.update_many/2","ref":"Bonfire.Social.Boosts.LiveHandler.html#update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Boosts.LiveHandler.update_many_opts/1","ref":"Bonfire.Social.Boosts.LiveHandler.html#update_many_opts/1"},{"type":"module","doc":"Shared helpers for modules that implemented Edges to mutate or query them, preload relevant associations, etc.\n\nThis is a shared [context](https://hexdocs.pm/phoenix/contexts.html) for `Bonfire.Data.Edges.Edge`, which has these fields:\n- id: primary key which matches the related Activity \n- subject: the who (eg. a user)\n- table: what kind of action (eg. references Like or Follow in `Needle.Table` ...)\n- object: the what (eg. a specific post)","title":"Bonfire.Social.Edges","ref":"Bonfire.Social.Edges.html"},{"type":"function","doc":"Prepares a full changeset for the given schema, subject, verb, object, and options.","title":"Bonfire.Social.Edges.changeset/5","ref":"Bonfire.Social.Edges.html#changeset/5"},{"type":"function","doc":"iex> changeset(MySchema, %User{id: 1}, :like, %Post{id: 2}, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Edges.changeset/5","ref":"Bonfire.Social.Edges.html#changeset/5-examples"},{"type":"function","doc":"Prepares a basic schema, with the schema type as top-level and an Egde assoc\n\niex> changeset_base(Like, %User{id: 1}, %Post{id: 2}, [])\n    %Ecto.Changeset{}\n\niex> changeset_base(Follow, %User{id: 1}, %User{id: 2}, [])\n    %Ecto.Changeset{}\n\niex> changeset_base({Request, Follow}, %User{id: 1}, %User{id: 2}, [])\n    %Ecto.Changeset{}","title":"Bonfire.Social.Edges.changeset_base/4","ref":"Bonfire.Social.Edges.html#changeset_base/4"},{"type":"function","doc":"Prepares a changeset with creator but no caretaker, which avoids the edge being deleted when subject is deleted.","title":"Bonfire.Social.Edges.changeset_base_with_creator/4","ref":"Bonfire.Social.Edges.html#changeset_base_with_creator/4"},{"type":"function","doc":"iex> changeset_base_with_creator(MySchema, %User{id: 1}, %Post{id: 2}, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Edges.changeset_base_with_creator/4","ref":"Bonfire.Social.Edges.html#changeset_base_with_creator/4-examples"},{"type":"function","doc":"Prepares a changeset with Acls, Activities and FeedActivities","title":"Bonfire.Social.Edges.changeset_extra/5","ref":"Bonfire.Social.Edges.html#changeset_extra/5"},{"type":"function","doc":"Prepares a changeset with creator but no caretaker, which avoids the edge being deleted when subject is deleted. Also includes Acls, Activities and FeedActivities.","title":"Bonfire.Social.Edges.changeset_without_caretaker/5","ref":"Bonfire.Social.Edges.html#changeset_without_caretaker/5"},{"type":"function","doc":"iex> changeset_without_caretaker(MySchema, %User{id: 1}, :like, %Post{id: 2}, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Edges.changeset_without_caretaker/5","ref":"Bonfire.Social.Edges.html#changeset_without_caretaker/5-examples"},{"type":"function","doc":"Counts the edges for the given type, filters or object, and options.","title":"Bonfire.Social.Edges.count/3","ref":"Bonfire.Social.Edges.html#count/3"},{"type":"function","doc":"> count(:like, %Post{id: 2}, [])\n    42","title":"Examples - Bonfire.Social.Edges.count/3","ref":"Bonfire.Social.Edges.html#count/3-examples"},{"type":"function","doc":"Counts the edges for the given type, subject, object, and options.","title":"Bonfire.Social.Edges.count_for_subject/4","ref":"Bonfire.Social.Edges.html#count_for_subject/4"},{"type":"function","doc":"> count_for_subject(:like, %User{id: 1}, %Post{id: 2}, [])\n    42","title":"Examples - Bonfire.Social.Edges.count_for_subject/4","ref":"Bonfire.Social.Edges.html#count_for_subject/4-examples"},{"type":"function","doc":"Deletes edges by subject, type, and object","title":"Bonfire.Social.Edges.delete_by_both/3","ref":"Bonfire.Social.Edges.html#delete_by_both/3"},{"type":"function","doc":"iex> delete_by_both(%User{id: 1}, MySchema, %User{id: 2})\n    :ok","title":"Examples - Bonfire.Social.Edges.delete_by_both/3","ref":"Bonfire.Social.Edges.html#delete_by_both/3-examples"},{"type":"function","doc":"Deletes edges where the given user is the object.","title":"Bonfire.Social.Edges.delete_by_object/1","ref":"Bonfire.Social.Edges.html#delete_by_object/1"},{"type":"function","doc":"iex> delete_by_object(%User{id: 1})\n    :ok","title":"Examples - Bonfire.Social.Edges.delete_by_object/1","ref":"Bonfire.Social.Edges.html#delete_by_object/1-examples"},{"type":"function","doc":"Deletes edges where the given user is the subject.","title":"Bonfire.Social.Edges.delete_by_subject/1","ref":"Bonfire.Social.Edges.html#delete_by_subject/1"},{"type":"function","doc":"iex> delete_by_subject(%User{id: 1})\n    :ok","title":"Examples - Bonfire.Social.Edges.delete_by_subject/1","ref":"Bonfire.Social.Edges.html#delete_by_subject/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Edges.edge_module_query/2","ref":"Bonfire.Social.Edges.html#edge_module_query/2"},{"type":"function","doc":"Checks if an edge exists with the given schema/context, subject, and object.","title":"Bonfire.Social.Edges.exists?/4","ref":"Bonfire.Social.Edges.html#exists?/4"},{"type":"function","doc":"> exists?(MySchema, %User{id: 1}, %Post{id: 2}, [])\n    true","title":"Examples - Bonfire.Social.Edges.exists?/4","ref":"Bonfire.Social.Edges.html#exists?/4-examples"},{"type":"function","doc":"TODOC","title":"Bonfire.Social.Edges.filters_from_opts/1","ref":"Bonfire.Social.Edges.html#filters_from_opts/1"},{"type":"function","doc":"Retrieves the edge with either:\n- a schema/context, subject, and object(s)\n- a schema/context, filters, and options","title":"Bonfire.Social.Edges.get/4","ref":"Bonfire.Social.Edges.html#get/4"},{"type":"function","doc":"> get(MySchema, %User{id: 1}, %Post{id: 2})\n\n    > get(MySchema, [%{subject: %User{id: 1}}], [])","title":"Examples - Bonfire.Social.Edges.get/4","ref":"Bonfire.Social.Edges.html#get/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Edges.get!/4","ref":"Bonfire.Social.Edges.html#get!/4"},{"type":"function","doc":"Inserts a changeset with optional subject and object.","title":"Bonfire.Social.Edges.insert/3","ref":"Bonfire.Social.Edges.html#insert/3"},{"type":"function","doc":"iex> insert(%Changeset{}, %User{id: 1}, %Post{id: 2})\n    {:ok, %Edge{}}","title":"Examples - Bonfire.Social.Edges.insert/3","ref":"Bonfire.Social.Edges.html#insert/3-examples"},{"type":"function","doc":"Inserts a new edge with the given schema, subject, verb, and object.","title":"Bonfire.Social.Edges.insert/5","ref":"Bonfire.Social.Edges.html#insert/5"},{"type":"function","doc":"> insert(MySchema, %User{id: 1}, :like, %Post{id: 2}, [])\n    {:ok, %Edge{}}","title":"Examples - Bonfire.Social.Edges.insert/5","ref":"Bonfire.Social.Edges.html#insert/5-examples"},{"type":"function","doc":"Retrieves the last edge of a given type, subject, and object from the database.","title":"Bonfire.Social.Edges.last/4","ref":"Bonfire.Social.Edges.html#last/4"},{"type":"function","doc":"iex> last(MySchema, %User{id: 1}, %Post{id: 2}, [])","title":"Examples - Bonfire.Social.Edges.last/4","ref":"Bonfire.Social.Edges.html#last/4-examples"},{"type":"function","doc":"Retrieves the date of the last edge of a given type, subject, and object from the database.","title":"Bonfire.Social.Edges.last_date/4","ref":"Bonfire.Social.Edges.html#last_date/4"},{"type":"function","doc":"> last_date(:like, %User{id: 1}, %Post{id: 2}, [])\n    ~N[2023-07-25 12:34:56]","title":"Examples - Bonfire.Social.Edges.last_date/4","ref":"Bonfire.Social.Edges.html#last_date/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Edges.put_edge_assoc/3","ref":"Bonfire.Social.Edges.html#put_edge_assoc/3"},{"type":"function","doc":"","title":"Bonfire.Social.Edges.put_edge_assoc/4","ref":"Bonfire.Social.Edges.html#put_edge_assoc/4"},{"type":"function","doc":"TODOC","title":"Bonfire.Social.Edges.query/2","ref":"Bonfire.Social.Edges.html#query/2"},{"type":"function","doc":"TODOC","title":"Bonfire.Social.Edges.query_parent/3","ref":"Bonfire.Social.Edges.html#query_parent/3"},{"type":"module","doc":"","title":"Bonfire.Social.Fake","ref":"Bonfire.Social.Fake.html"},{"type":"function","doc":"","title":"Bonfire.Social.Fake.fake_remote_user!/0","ref":"Bonfire.Social.Fake.html#fake_remote_user!/0"},{"type":"module","doc":"Helpers to create or query a feed's activities.\n\nThis is the [context](https://hexdocs.pm/phoenix/contexts.html) for `Bonfire.Data.Social.FeedPublish`, which has two foreign fields:\n- id (of the activity, see `Bonfire.Social.Activities`)\n- feed (see `Bonfire.Social.Feeds`)","title":"Bonfire.Social.FeedActivities","ref":"Bonfire.Social.FeedActivities.html"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.base_query/1","ref":"Bonfire.Social.FeedActivities.html#base_query/1"},{"type":"function","doc":"Casts the changeset to publish an activity to the given feed IDs.","title":"Bonfire.Social.FeedActivities.cast/2","ref":"Bonfire.Social.FeedActivities.html#cast/2"},{"type":"function","doc":"> cast(changeset, feed_ids)\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.FeedActivities.cast/2","ref":"Bonfire.Social.FeedActivities.html#cast/2-examples"},{"type":"function","doc":"Casts the changeset to publish an activity to the given creator and feed IDs.","title":"Bonfire.Social.FeedActivities.cast/3","ref":"Bonfire.Social.FeedActivities.html#cast/3"},{"type":"function","doc":"> cast(changeset, creator, opts)\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.FeedActivities.cast/3","ref":"Bonfire.Social.FeedActivities.html#cast/3-examples"},{"type":"function","doc":"Returns the total count of activities in feeds.","title":"Bonfire.Social.FeedActivities.count_total/0","ref":"Bonfire.Social.FeedActivities.html#count_total/0"},{"type":"function","doc":"Remove activities from feeds, using specific filters","title":"Bonfire.Social.FeedActivities.delete/1","ref":"Bonfire.Social.FeedActivities.html#delete/1"},{"type":"function","doc":"> filters = [object_id: \"123\"]\n    > Bonfire.Social.FeedActivities.delete(filters)\n    {5, nil}","title":"Examples - Bonfire.Social.FeedActivities.delete/1","ref":"Bonfire.Social.FeedActivities.html#delete/1-examples"},{"type":"function","doc":"Remove one or more activities from all feeds","title":"Bonfire.Social.FeedActivities.delete/2","ref":"Bonfire.Social.FeedActivities.html#delete/2"},{"type":"function","doc":"> Bonfire.Social.FeedActivities.delete(\"123\", :object_id)\n    {1, nil}","title":"Examples - Bonfire.Social.FeedActivities.delete/2","ref":"Bonfire.Social.FeedActivities.html#delete/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.feed/2","ref":"Bonfire.Social.FeedActivities.html#feed/2"},{"type":"function","doc":"Gets a list of feed ids this activity was published to from the database.\n\nCurrently only used by the ActivityPub integration.","title":"Bonfire.Social.FeedActivities.feeds_for_activity/1","ref":"Bonfire.Social.FeedActivities.html#feeds_for_activity/1"},{"type":"function","doc":"> feeds_for_activity(%{id: id})\n    [feed_id1, feed_id2]\n\n    > feeds_for_activity(id)\n    [feed_id1, feed_id2]\n\n    > feeds_for_activity(activity)\n    []","title":"Examples - Bonfire.Social.FeedActivities.feeds_for_activity/1","ref":"Bonfire.Social.FeedActivities.html#feeds_for_activity/1-examples"},{"type":"function","doc":"Creates the underlying data for `put_feed_publishes/2`.\n\nOptions: see `get_publish_feed_ids/1`","title":"Bonfire.Social.FeedActivities.get_feed_publishes/1","ref":"Bonfire.Social.FeedActivities.html#get_feed_publishes/1"},{"type":"function","doc":"> options = [feeds: [\"feed123\", \"feed456\"]]\n    > Bonfire.Social.FeedActivities.get_feed_publishes(options)\n    [%{feed_id: \"feed123\"}, %{feed_id: \"feed456\"}]","title":"Examples - Bonfire.Social.FeedActivities.get_feed_publishes/1","ref":"Bonfire.Social.FeedActivities.html#get_feed_publishes/1-examples"},{"type":"function","doc":"Computes the feed ids for `get_feed_publishes/2`.\n\nOptions:\n* `:inbox` - list of users/characters whose inbox we should attempt to insert into.\n* `:outbox` - list of users/characters whose outbox we should attempt to insert into.\n* `:notifications` - list of users/characters whose notifications we should attempt to insert into.\n* `:feeds` - list of ids (or objects containing IDs) of feeds to post to.","title":"Bonfire.Social.FeedActivities.get_publish_feed_ids/1","ref":"Bonfire.Social.FeedActivities.html#get_publish_feed_ids/1"},{"type":"function","doc":"> options = [outbox: [%{id: \"author123\"}], inbox: [%{id: \"mention987\"}], notifications: [%{id: \"reply654\"}], feeds: [\"feed456\"]]\n    > Bonfire.Social.FeedActivities.get_publish_feed_ids(options)\n    [\"inbox_feed_id_for_user123\", \"feed456\"]","title":"Examples - Bonfire.Social.FeedActivities.get_publish_feed_ids/1","ref":"Bonfire.Social.FeedActivities.html#get_publish_feed_ids/1-examples"},{"type":"function","doc":"Marks all unseen items in a feed as seen for the current user.","title":"Bonfire.Social.FeedActivities.mark_all_seen/2","ref":"Bonfire.Social.FeedActivities.html#mark_all_seen/2"},{"type":"function","doc":"> mark_all_seen(feed_id, current_user: me)\n    {:ok, number_of_marked_items}","title":"Examples - Bonfire.Social.FeedActivities.mark_all_seen/2","ref":"Bonfire.Social.FeedActivities.html#mark_all_seen/2-examples"},{"type":"function","doc":"Creates a new local activity or takes an existing one and publishes to specified feeds","title":"Bonfire.Social.FeedActivities.maybe_feed_publish/5","ref":"Bonfire.Social.FeedActivities.html#maybe_feed_publish/5"},{"type":"function","doc":"> subject = %{id: \"user123\"}\n    > verb = :create\n    > object = %{id: \"post456\"}\n    > feeds = [\"feed789\"]\n    > opts = []\n    > Bonfire.Social.FeedActivities.maybe_feed_publish(subject, verb, object, feeds, opts)\n    {:ok, %Bonfire.Data.Social.Activity{}}","title":"Examples - Bonfire.Social.FeedActivities.maybe_feed_publish/5","ref":"Bonfire.Social.FeedActivities.html#maybe_feed_publish/5-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.maybe_preload_replied/1","ref":"Bonfire.Social.FeedActivities.html#maybe_preload_replied/1"},{"type":"function","doc":"Creates a new local activity and publishes to appropriate feeds\nTODO: make this re-use the changeset-based code like in Epics instead of duplicating logic (currently it is only used in VF extension anyway)","title":"Bonfire.Social.FeedActivities.publish/4","ref":"Bonfire.Social.FeedActivities.html#publish/4"},{"type":"function","doc":"> subject = %{id: \"user123\"}\n    > verb = :create\n    > object = %{id: \"post456\"}\n    > Bonfire.Social.FeedActivities.publish(subject, verb, object, [])\n    {:ok, %Bonfire.Data.Social.Activity{}}","title":"Examples - Bonfire.Social.FeedActivities.publish/4","ref":"Bonfire.Social.FeedActivities.html#publish/4-examples"},{"type":"function","doc":"Arranges for an insert changeset to also publish to feeds related to some objects.\n\nOptions: see `get_publish_feed_ids/1`","title":"Bonfire.Social.FeedActivities.put_feed_publishes/2","ref":"Bonfire.Social.FeedActivities.html#put_feed_publishes/2"},{"type":"function","doc":"> changeset = %Ecto.Changeset{}\n    > options = [feeds: [\"feed123\", \"feed456\"]]\n    > Bonfire.Social.FeedActivities.put_feed_publishes(changeset, options)\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.FeedActivities.put_feed_publishes/2","ref":"Bonfire.Social.FeedActivities.html#put_feed_publishes/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.query_maybe_exclude_mine/2","ref":"Bonfire.Social.FeedActivities.html#query_maybe_exclude_mine/2"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.query_module/0","ref":"Bonfire.Social.FeedActivities.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.query_order/3","ref":"Bonfire.Social.FeedActivities.html#query_order/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.schema_module/0","ref":"Bonfire.Social.FeedActivities.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.FeedActivities.the_object/1","ref":"Bonfire.Social.FeedActivities.html#the_object/1"},{"type":"function","doc":"Returns the count of unseen items in a feed for the current user.","title":"Bonfire.Social.FeedActivities.unseen_count/2","ref":"Bonfire.Social.FeedActivities.html#unseen_count/2"},{"type":"function","doc":"> unseen_count(feed_id, current_user: me)\n    5","title":"Examples - Bonfire.Social.FeedActivities.unseen_count/2","ref":"Bonfire.Social.FeedActivities.html#unseen_count/2-examples"},{"type":"module","doc":"","title":"Bonfire.Social.FeedFilters","ref":"Bonfire.Social.FeedFilters.html"},{"type":"function","doc":"Creates a changeset for feed filters.","title":"Bonfire.Social.FeedFilters.changeset/2","ref":"Bonfire.Social.FeedFilters.html#changeset/2"},{"type":"function","doc":"iex> #Ecto.Changeset  = changeset(%{feed_name: \"explore\", object_types: [\"post\"]})","title":"Examples - Bonfire.Social.FeedFilters.changeset/2","ref":"Bonfire.Social.FeedFilters.html#changeset/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.delete/2","ref":"Bonfire.Social.FeedFilters.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.get/3","ref":"Bonfire.Social.FeedFilters.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.put/3","ref":"Bonfire.Social.FeedFilters.html#put/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.supported_filters/0","ref":"Bonfire.Social.FeedFilters.html#supported_filters/0"},{"type":"function","doc":"Creates a changeset and validates the data, returning either validated filters or errors.","title":"Bonfire.Social.FeedFilters.validate/1","ref":"Bonfire.Social.FeedFilters.html#validate/1"},{"type":"function","doc":"iex> {:ok, %FeedFilters{feed_name: :explore, object_types: [:post]}} = \n    ...> validate(%{feed_name: :explore, object_types: \"post\"})\n    \n    iex> {:ok, %FeedFilters{feed_name: :explore, object_types: [:post]}} = \n    ...> validate(%{feed_name: \"explore\", object_types: [\"post\"]})\n\n    iex> {:ok, %FeedFilters{feed_name: :explore, object_types: [:post]}} = \n    ...> validate(%{\"feed_name\"=> \"explore\", \"object_types\"=> \"post\"})\n\n    iex> {:ok, %FeedFilters{feed_name: nil, object_types: [:post]}} = \n    ...> validate(%{feed_name: nil, object_types: :post})\n\n    iex> {:ok, %FeedFilters{object_types: [:post]}} = \n    ...> validate(%{object_types: \"post\"})\n\n    iex> {:error, %Ecto.Changeset{errors: [feed_name: {\"is invalid\", _}]}} = \n    ...> validate(%{feed_name: :unknown})","title":"Examples - Bonfire.Social.FeedFilters.validate/1","ref":"Bonfire.Social.FeedFilters.html#validate/1-examples"},{"type":"type","doc":"","title":"Bonfire.Social.FeedFilters.t/0","ref":"Bonfire.Social.FeedFilters.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.cast/1","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#cast/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.dump/1","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#dump/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.embed_as/1","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#embed_as/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.equal?/2","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#equal?/2"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.load/1","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#load/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.AtomOrStringList.type/0","ref":"Bonfire.Social.FeedFilters.AtomOrStringList.html#type/0"},{"type":"module","doc":"","title":"Bonfire.Social.FeedFilters.StringList","ref":"Bonfire.Social.FeedFilters.StringList.html"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.cast/1","ref":"Bonfire.Social.FeedFilters.StringList.html#cast/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.dump/1","ref":"Bonfire.Social.FeedFilters.StringList.html#dump/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.embed_as/1","ref":"Bonfire.Social.FeedFilters.StringList.html#embed_as/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.equal?/2","ref":"Bonfire.Social.FeedFilters.StringList.html#equal?/2"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.load/1","ref":"Bonfire.Social.FeedFilters.StringList.html#load/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedFilters.StringList.type/0","ref":"Bonfire.Social.FeedFilters.StringList.html#type/0"},{"type":"module","doc":"Determines the appropriate filters, joins, and/or preloads for feed queries based.\n\nEntrypoint for `Bonfire.Social.Feeds` and `Bonfire.Social.FeedActivities`, and `Bonfire.Social.Activities`.","title":"Bonfire.Social.FeedLoader","ref":"Bonfire.Social.FeedLoader.html"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.contextual_preloads_from_filters/3","ref":"Bonfire.Social.FeedLoader.html#contextual_preloads_from_filters/3"},{"type":"function","doc":"Returns the count of items in a feed based on given filters and options.","title":"Bonfire.Social.FeedLoader.count/2","ref":"Bonfire.Social.FeedLoader.html#count/2"},{"type":"function","doc":"> count(filters, current_user: me)\n    10","title":"Examples - Bonfire.Social.FeedLoader.count/2","ref":"Bonfire.Social.FeedLoader.html#count/2-examples"},{"type":"function","doc":"Returns the count of distinct subjects in a feed based on given filters and options.","title":"Bonfire.Social.FeedLoader.count_subjects/2","ref":"Bonfire.Social.FeedLoader.html#count_subjects/2"},{"type":"function","doc":"> count_subjects(filters, opts)\n    3","title":"Examples - Bonfire.Social.FeedLoader.count_subjects/2","ref":"Bonfire.Social.FeedLoader.html#count_subjects/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.default_feed_name/1","ref":"Bonfire.Social.FeedLoader.html#default_feed_name/1"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed/2","ref":"Bonfire.Social.FeedLoader.html#feed/2"},{"type":"function","doc":"Gets a feed based on filters and options.","title":"Bonfire.Social.FeedLoader.feed/3","ref":"Bonfire.Social.FeedLoader.html#feed/3"},{"type":"function","doc":"- `name_or_filters` - A map of filter parameters (see `FeedFilters` for the list of supported filters) or a feed name atom/string if no other filters are needed\n- `opts` - Options that aren't filter-related","title":"Parameters - Bonfire.Social.FeedLoader.feed/3","ref":"Bonfire.Social.FeedLoader.html#feed/3-parameters"},{"type":"function","doc":"iex> %{edges: _, page_info: %Paginator.PageInfo{}} = Bonfire.Social.FeedActivities.feed(:explore)\n\n    iex> %{edges: _, page_info: %Paginator.PageInfo{}} = Bonfire.Social.FeedActivities.feed(%{feed_name: :explore})\n\n    > Bonfire.Social.FeedActivities.feed(\"feed123\", [])\n    %{edges: [%{activity: %{}}], page_info: %Paginator.PageInfo{}}","title":"Examples - Bonfire.Social.FeedLoader.feed/3","ref":"Bonfire.Social.FeedLoader.html#feed/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed_contains?/3","ref":"Bonfire.Social.FeedLoader.html#feed_contains?/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed_contains_single?/3","ref":"Bonfire.Social.FeedLoader.html#feed_contains_single?/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed_filtered/3","ref":"Bonfire.Social.FeedLoader.html#feed_filtered/3"},{"type":"function","doc":"Gets feed ids and options for the given feed or list of feeds.\n\n# TODO: this should be replaced by feed presets","title":"Bonfire.Social.FeedLoader.feed_ids_and_opts/2","ref":"Bonfire.Social.FeedLoader.html#feed_ids_and_opts/2"},{"type":"function","doc":"> feed_ids_and_opts(feed_name, opts)\n    {feed_ids, opts}\n\n    > feed_ids_and_opts({feed_name, feed_id}, opts)\n\n    > feed_ids_and_opts(:my, [current_user: me])\n    {[\"feed_id1\", \"feed_id2\"], [exclude_activity_types: [:flag, :boost, :follow]]}\n\n    > feed_ids_and_opts({:notifications, \"feed_id3\"}, [current_user: me])\n    {\"feed_id3\", [include_flags: true, exclude_activity_types: false, show_objects_only_once: false, preload: [:notifications]]}","title":"Examples - Bonfire.Social.FeedLoader.feed_ids_and_opts/2","ref":"Bonfire.Social.FeedLoader.html#feed_ids_and_opts/2-examples"},{"type":"function","doc":"Returns paginated results for the given query.","title":"Bonfire.Social.FeedLoader.feed_many_paginated/3","ref":"Bonfire.Social.FeedLoader.html#feed_many_paginated/3"},{"type":"function","doc":"> feed_many_paginated(query, opts)\n    %{edges: edges, page_info: page_info}","title":"Examples - Bonfire.Social.FeedLoader.feed_many_paginated/3","ref":"Bonfire.Social.FeedLoader.html#feed_many_paginated/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed_name_or_default/2","ref":"Bonfire.Social.FeedLoader.html#feed_name_or_default/2"},{"type":"function","doc":"Returns a page of feed activities (reverse chronological) + pagination metadata\n\nTODO: consolidate with `feed/2`?","title":"Bonfire.Social.FeedLoader.feed_paginated/2","ref":"Bonfire.Social.FeedLoader.html#feed_paginated/2"},{"type":"function","doc":"iex> %{edges: _, page_info: %{}} = feed_paginated([], [])\n\n    iex> query = Ecto.Query.from(f in Bonfire.Data.Social.FeedPublish)\n    iex> %{edges: _, page_info: %{}} = feed_paginated([], base_query: query)","title":"Examples - Bonfire.Social.FeedLoader.feed_paginated/2","ref":"Bonfire.Social.FeedLoader.html#feed_paginated/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.feed_with_object/3","ref":"Bonfire.Social.FeedLoader.html#feed_with_object/3"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.filter_already_preloaded/2","ref":"Bonfire.Social.FeedLoader.html#filter_already_preloaded/2"},{"type":"function","doc":"Maps high-level preload keys to their corresponding detailed preload lists.","title":"Bonfire.Social.FeedLoader.map_activity_preloads/3","ref":"Bonfire.Social.FeedLoader.html#map_activity_preloads/3"},{"type":"function","doc":"# Single preload key\n    iex> map_activity_preloads([:feed]) |> Enum.sort()\n    [\n      :with_creator,\n      :with_media,\n      :with_object_more,\n      :with_replied,\n      :with_subject\n    ]\n\n    # Multiple preload keys\n    iex> map_activity_preloads([:feed, :notifications]) |> Enum.sort()\n    [:notifications, :with_creator, :with_media, :with_object_more, :with_replied, :with_subject]\n\n    # With :all key it includes all defined preloads\n    iex> map_activity_preloads([:all]) |> Enum.sort()\n    [\n      :maybe_with_labelled,\n      :tags,\n      :with_creator,\n      :with_media,\n      :with_object_more,\n      :with_parent,\n      :with_post_content,\n      :with_replied,\n      :with_reply_to,\n      :with_seen,\n      :with_subject,\n      :with_thread_name,\n      :with_verb\n    ]\n\n    # With unknown key\n    iex> map_activity_preloads([:unknown_key])\n    [:unknown_key]\n\n    # Empty list returns empty list\n    iex> map_activity_preloads([])\n    []\n\n    # Removes duplicates when preload lists overlap\n    iex> map_activity_preloads([:posts, :posts_with_thread]) |> Enum.sort()\n    [\n      :with_post_content,\n      :with_replied,\n      :with_subject,\n      :with_thread_name\n    ]","title":"Examples - Bonfire.Social.FeedLoader.map_activity_preloads/3","ref":"Bonfire.Social.FeedLoader.html#map_activity_preloads/3-examples"},{"type":"function","doc":"Match feed filters against rule criteria.","title":"Bonfire.Social.FeedLoader.matches_filter?/2","ref":"Bonfire.Social.FeedLoader.html#matches_filter?/2"},{"type":"function","doc":"iex> matches_filter?(%{types: \"*\"}, %{types: \"post\"})\n    true\n\n    iex> matches_filter?(%{types: [\"post\", \"comment\"]}, %{types: [\"comment\", \"reaction\"]})\n    true\n\n    iex> matches_filter?(%{types: \"post\"}, %{types: [\"comment\", \"post\"]})\n    true\n\n    iex> matches_filter?(%{types: :post}, %{types: [\"comment\", \"post\"]})\n    true\n\n    iex> matches_filter?(%{types: \"post\"}, %{types: [:comment, :post]})\n    true\n\n    iex> matches_filter?(%{types: [\"post\"]}, %{types: \"post\"})\n    true\n\n    iex> matches_filter?(%{types: \"post\"}, %{types: \"comment\"})\n    false\n\n    iex> matches_filter?(%{types: :post}, %{types: \"post\"})\n    true","title":"Examples - Bonfire.Social.FeedLoader.matches_filter?/2","ref":"Bonfire.Social.FeedLoader.html#matches_filter?/2-examples"},{"type":"function","doc":"Gets a user's home feed, a combination of all feeds the user is subscribed to.\n\n# TODO: should just be an alias to `feed(:my, opts)`","title":"Bonfire.Social.FeedLoader.my_feed/2","ref":"Bonfire.Social.FeedLoader.html#my_feed/2"},{"type":"function","doc":"> Bonfire.Social.FeedActivities.my_feed([current_user: %{id: \"user123\"}])\n    %{edges: [%{activity: %{}}], page_info: %{}}\n\n    > Bonfire.Social.FeedActivities.my_feed([current_user: %{id: \"user123\"}], [\"feed_id1\", \"feed_id2\"])\n    %{edges: [%{activity: %{}}], page_info: %{}}","title":"Examples - Bonfire.Social.FeedLoader.my_feed/2","ref":"Bonfire.Social.FeedLoader.html#my_feed/2-examples"},{"type":"function","doc":"Parameterizes the filters by replacing parameterized values with values from `opts`.","title":"Bonfire.Social.FeedLoader.parameterize_filters/3","ref":"Bonfire.Social.FeedLoader.html#parameterize_filters/3"},{"type":"function","doc":"# 1: Parameterizing a simple filter\n    iex> parameterize_filters(%{}, %{subjects: [:me]}, current_user: %{id: \"alice\"})\n    %{subjects: [%{id: \"alice\"}]}\n\n    # 2: Parameterizing multiple filters\n    iex> parameterize_filters(%{}, %{subjects: [:me], tags: [:hashtag]}, current_user: %{id: \"alice\"}, hashtag: \"elixir\")\n    %{subjects: [%{id: \"alice\"}], tags: [\"elixir\"]}\n\n    # 3: Parameterizing with undefined options\n    iex> parameterize_filters(%{}, %{subjects: :me}, current_user: nil)\n    %{subjects: nil}\n\n    # 4: Handling filters that don't require parameterization\n    iex> parameterize_filters(%{activity_types: [\"like\"]}, %{}, current_user: \"bob\")\n    %{activity_types: [\"like\"]}","title":"Examples - Bonfire.Social.FeedLoader.parameterize_filters/3","ref":"Bonfire.Social.FeedLoader.html#parameterize_filters/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.preload_presets/0","ref":"Bonfire.Social.FeedLoader.html#preload_presets/0"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.preloads_by_context_rules/0","ref":"Bonfire.Social.FeedLoader.html#preloads_by_context_rules/0"},{"type":"function","doc":"Computes the list of preloads to apply based on the provided filters.\nReturns a list of preload atoms.\n\nUses rules defined in configuration rather than code.\n\nMultiple rules can match and their preloads will be merged, with exclusions applied last.","title":"Bonfire.Social.FeedLoader.preloads_from_filters/2","ref":"Bonfire.Social.FeedLoader.html#preloads_from_filters/2"},{"type":"function","doc":"iex> filters = %{feed_name: \"remote\"}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [:with_creator, :with_media, :with_object_more, :with_peered, :with_reply_to, :with_subject]\n\n    iex> filters = %{feed_name: :remote}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [:with_creator, :with_media, :with_object_more, :with_peered, :with_reply_to, :with_subject]\n\n    iex> filters = %{feed_name: [\"remote\"]}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [:with_creator, :with_media, :with_object_more, :with_peered, :with_reply_to, :with_subject]\n\n    iex> filters = %{feed_name: [:remote]}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [:with_creator, :with_media, :with_object_more, :with_peered, :with_reply_to, :with_subject]\n\n    iex> filters = %{subjects: [\"alice\"]}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [:with_creator, :with_media, :with_object_more, :with_reply_to]\n\n    iex> filters = %{feed_name: \"unknown\"}\n    iex> preloads_from_filters(filters) |> Enum.sort()\n    [\n      :with_creator,\n      :with_media,\n      :with_object_more,\n      :with_peered,\n      :with_reply_to,\n      :with_subject\n    ]","title":"Examples - Bonfire.Social.FeedLoader.preloads_from_filters/2","ref":"Bonfire.Social.FeedLoader.html#preloads_from_filters/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.preloads_from_filters_rules/0","ref":"Bonfire.Social.FeedLoader.html#preloads_from_filters_rules/0"},{"type":"function","doc":"Converts socket, assigns, or options to feed options.","title":"Bonfire.Social.FeedLoader.prepare_filters_and_opts/2","ref":"Bonfire.Social.FeedLoader.html#prepare_filters_and_opts/2"},{"type":"function","doc":"> assigns = %{exclude_activity_types: [:flag, :boost]}\n    > to_feed_options(filters, assigns)\n    [exclude_activity_types: [:flag, :boost, :follow]]","title":"Examples - Bonfire.Social.FeedLoader.prepare_filters_and_opts/2","ref":"Bonfire.Social.FeedLoader.html#prepare_filters_and_opts/2-examples"},{"type":"function","doc":"Gets an aliased feed's filters by name, with optional parameters.","title":"Bonfire.Social.FeedLoader.preset_feed_filters/2","ref":"Bonfire.Social.FeedLoader.html#preset_feed_filters/2"},{"type":"function","doc":"# 1: Retrieve a preset feed without parameters\n    iex> {:ok, %{feed_name: :local, exclude_activity_types: [:like]}} = preset_feed_filters(:local, [])\n\n    # 1: Retrieve a preset feed without parameters\n    iex> {:ok, %{feed_name: :local, exclude_activity_types: [:like]}} =preset_feed_filters(:local, [])\n\n    # 2: Retrieve a preset feed with parameters\n    iex> {:ok, %{subjects: \"alice\"}} = preset_feed_filters(:user_activities, [by: \"alice\"])\n\n    # 3: Feed not found (error case)\n    iex> preset_feed_filters(\"unknown_feed\", [])\n    {:error, :not_found}\n\n    # 4: Preset feed with parameterized filters\n    iex> {:ok, %{activity_types: :like, subjects: %{id: \"alice\"}}} = preset_feed_filters(:liked_by_me, current_user: %{id: \"alice\"})\n\n    # 5: Feed with `current_user_required` should check for current user\n    iex> {:ok, %{feed_name: :messages}} = preset_feed_filters(:messages, current_user: %{id: \"alice\"})\n\n    # 6: Feed with `current_user_required` and no current user\n    iex> preset_feed_filters(:messages, [])\n    ** (Bonfire.Fail.Auth) You need to log in first.\n\n    # 7: Custom feed with additional parameters\n    iex> {:ok, %{activity_types: :follow, objects: \"alice\"}} = preset_feed_filters(:user_followers, [by: \"alice\"])","title":"Examples - Bonfire.Social.FeedLoader.preset_feed_filters/2","ref":"Bonfire.Social.FeedLoader.html#preset_feed_filters/2-examples"},{"type":"function","doc":"Return a boundarised query for a feed","title":"Bonfire.Social.FeedLoader.query/3","ref":"Bonfire.Social.FeedLoader.html#query/3"},{"type":"function","doc":"add assocs needed in timelines/feeds","title":"Bonfire.Social.FeedLoader.query_extras_boundarised/3","ref":"Bonfire.Social.FeedLoader.html#query_extras_boundarised/3"},{"type":"function","doc":"add assocs needed in lists of objects","title":"Bonfire.Social.FeedLoader.query_object_extras_boundarised/3","ref":"Bonfire.Social.FeedLoader.html#query_object_extras_boundarised/3"},{"type":"function","doc":"Replaces parameters in the filter value with the actual values from `opts`.","title":"Bonfire.Social.FeedLoader.replace_parameters/3","ref":"Bonfire.Social.FeedLoader.html#replace_parameters/3"},{"type":"function","doc":"# Replacing a `me` parameter with the current user\n    iex> replace_parameters(:me, %{}, current_user: %{id: \"alice\"})\n    %{id: \"alice\"}\n\n    # Replacing a `:current_user` parameter with the current user only if available\n    iex> replace_parameters(:current_user, %{}, current_user: nil)\n    nil\n\n    # Replacing a `by` parameter with the a value from the filters\n    iex> replace_parameters(:by, %{by: %{id: \"alice\"}}, [])\n    %{id: \"alice\"}\n\n    # Replacing a `by` parameter with the a value from the opts\n    iex> replace_parameters(:by, %{}, by: %{id: \"alice\"})\n    %{id: \"alice\"}\n\n    # Replacing a `:by` parameter with the current user as a fallback\n    iex> replace_parameters(:by, %{}, current_user: %{id: \"alice\"})\n    %{id: \"alice\"}\n\n    # Failing with `:current_user_required` parameter if we have no current user\n    iex> replace_parameters(:current_user_required, %{}, current_user: nil)\n    ** (Bonfire.Fail.Auth) You need to log in first.\n\n    # Handling a parameter that is in the opts\n    iex> replace_parameters(:type, %{}, type: \"post\")\n    \"post\"\n\n    # Handling a parameter that is in the filters\n    iex> replace_parameters(:type, %{type: \"post\"}, [])\n    \"post\"\n\n    # Handling a parameter that is in the filters with string key\n    iex> replace_parameters(:type, %{\"type\"=> \"post\"}, [])\n    \"post\"\n\n    # # Handling a string key parameter that is in the filters\n    # iex> replace_parameters(\"type\", %{type: \"post\"}, [])\n    # \"post\"\n\n    # # Handling a string key parameter that is in the opts - FIXME\n    # iex> replace_parameters(\"type\", %{}, type: \"post\")\n    # \"post\"\n\n    # Handling a parameter that is not in the opts\n    iex> replace_parameters(:unknown, %{}, current_user: \"bob\")\n    :unknown","title":"Examples - Bonfire.Social.FeedLoader.replace_parameters/3","ref":"Bonfire.Social.FeedLoader.html#replace_parameters/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.skip_types_default/0","ref":"Bonfire.Social.FeedLoader.html#skip_types_default/0"},{"type":"function","doc":"","title":"Bonfire.Social.FeedLoader.skip_verbs_default/0","ref":"Bonfire.Social.FeedLoader.html#skip_verbs_default/0"},{"type":"module","doc":"Helpers to create or query (though that's usually done through `Bonfire.Social.FeedActivities`) feeds.\n\nThis is the [context](https://hexdocs.pm/phoenix/contexts.html) for `Bonfire.Data.Social.Feed`, a virtual schema with just one field:\n- id","title":"Bonfire.Social.Feeds","ref":"Bonfire.Social.Feeds.html"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.admin_notifications/1","ref":"Bonfire.Social.Feeds.html#admin_notifications/1"},{"type":"function","doc":"Retrieves the notifications feed IDs for all admins.","title":"Bonfire.Social.Feeds.admins_notifications/0","ref":"Bonfire.Social.Feeds.html#admins_notifications/0"},{"type":"function","doc":"Retrieves the notifications feed IDs for the provided admin(s).","title":"Bonfire.Social.Feeds.admins_notifications/1","ref":"Bonfire.Social.Feeds.html#admins_notifications/1"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.admins_notifications/1","ref":"Bonfire.Social.Feeds.html#admins_notifications/1-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.admin_notifications(admin)\n    # Notifications feed ID for the admin","title":"For an admin: - Bonfire.Social.Feeds.admins_notifications/1","ref":"Bonfire.Social.Feeds.html#admins_notifications/1-for-an-admin"},{"type":"function","doc":"> Bonfire.Social.Feeds.admins_notifications([admin1, admin2])\n    # List of notifications feed IDs for the admins","title":"For a list of admins: - Bonfire.Social.Feeds.admins_notifications/1","ref":"Bonfire.Social.Feeds.html#admins_notifications/1-for-a-list-of-admins"},{"type":"function","doc":"Gets the feed ID for a given feed name and subject.","title":"Bonfire.Social.Feeds.feed_id/2","ref":"Bonfire.Social.Feeds.html#feed_id/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.feed_id/2","ref":"Bonfire.Social.Feeds.html#feed_id/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_id(:notifications, character)\n    # Feed ID for notifications of the character","title":"For a character: - Bonfire.Social.Feeds.feed_id/2","ref":"Bonfire.Social.Feeds.html#feed_id/2-for-a-character"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_id(\"notifications\", subject)\n    # Feed ID for notifications","title":"For a binary feed name: - Bonfire.Social.Feeds.feed_id/2","ref":"Bonfire.Social.Feeds.html#feed_id/2-for-a-binary-feed-name"},{"type":"function","doc":"Gets the feed ID for a given feed name and subject, raising an error if not found.","title":"Bonfire.Social.Feeds.feed_id!/2","ref":"Bonfire.Social.Feeds.html#feed_id!/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.feed_id!/2","ref":"Bonfire.Social.Feeds.html#feed_id!/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_id!(:notifications, subject)\n    # Feed ID for notifications","title":"For a valid feed: - Bonfire.Social.Feeds.feed_id!/2","ref":"Bonfire.Social.Feeds.html#feed_id!/2-for-a-valid-feed"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_id!(:invalid, subject)\n    ** (RuntimeError) Expected feed name and user or character, got :invalid","title":"For an invalid feed: - Bonfire.Social.Feeds.feed_id!/2","ref":"Bonfire.Social.Feeds.html#feed_id!/2-for-an-invalid-feed"},{"type":"function","doc":"Retrieves a list of feed IDs based on the feed name and subjects.","title":"Bonfire.Social.Feeds.feed_ids/2","ref":"Bonfire.Social.Feeds.html#feed_ids/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.feed_ids/2","ref":"Bonfire.Social.Feeds.html#feed_ids/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_ids(:notifications, [subject1, subject2])\n    # List of notification feed IDs for the subjects","title":"For a list of subjects: - Bonfire.Social.Feeds.feed_ids/2","ref":"Bonfire.Social.Feeds.html#feed_ids/2-for-a-list-of-subjects"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_ids(:notifications, subject)\n    [feed_id]","title":"For a single subject: - Bonfire.Social.Feeds.feed_ids/2","ref":"Bonfire.Social.Feeds.html#feed_ids/2-for-a-single-subject"},{"type":"function","doc":"Determines the feed IDs to publish based on the provided parameters.\n\nTODO: de-duplicate `feed_ids_to_publish/4` and `target_feeds/3`","title":"Bonfire.Social.Feeds.feed_ids_to_publish/4","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/4"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.feed_ids_to_publish/4","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/4-examples"},{"type":"function","doc":"iex> Bonfire.Social.Feeds.feed_ids_to_publish(nil, \"admins\", nil)\n    [] # List of admin feed IDS","title":"When called with the `\"admins\"` boundary: - Bonfire.Social.Feeds.feed_ids_to_publish/4","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/4-when-called-with-the-admins-boundary"},{"type":"function","doc":"> Bonfire.Social.Feeds.feed_ids_to_publish(me, \"public\", %{reply_to: true}, [some_feed_id])\n    [] # List of feed IDs for the provided boundary","title":"When called with a different boundary and some optional feeds: - Bonfire.Social.Feeds.feed_ids_to_publish/4","ref":"Bonfire.Social.Feeds.html#feed_ids_to_publish/4-when-called-with-a-different-boundary-and-some-optional-feeds"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.feed_presets/0","ref":"Bonfire.Social.Feeds.html#feed_presets/0"},{"type":"function","doc":"Gets the inbox feed ID of the creator of the given object.","title":"Bonfire.Social.Feeds.inbox_of_obj_creator/1","ref":"Bonfire.Social.Feeds.html#inbox_of_obj_creator/1"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.inbox_of_obj_creator/1","ref":"Bonfire.Social.Feeds.html#inbox_of_obj_creator/1-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.inbox_of_obj_creator(object)\n    # Inbox feed ID of the object's creator","title":"For an object: - Bonfire.Social.Feeds.inbox_of_obj_creator/1","ref":"Bonfire.Social.Feeds.html#inbox_of_obj_creator/1-for-an-object"},{"type":"function","doc":"Creates a feed for the given subject if it doesn't already exist.","title":"Bonfire.Social.Feeds.maybe_create_feed/2","ref":"Bonfire.Social.Feeds.html#maybe_create_feed/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.maybe_create_feed/2","ref":"Bonfire.Social.Feeds.html#maybe_create_feed/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_create_feed(:notifications, subject)\n    {:ok, feed_id}","title":"For a new feed: - Bonfire.Social.Feeds.maybe_create_feed/2","ref":"Bonfire.Social.Feeds.html#maybe_create_feed/2-for-a-new-feed"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_create_feed(:notifications, existing_subject)\n    {:ok, existing_feed_id}","title":"For an existing feed: - Bonfire.Social.Feeds.maybe_create_feed/2","ref":"Bonfire.Social.Feeds.html#maybe_create_feed/2-for-an-existing-feed"},{"type":"function","doc":"Checks if a creator notification should be sent for a subject.","title":"Bonfire.Social.Feeds.maybe_creator_notification/3","ref":"Bonfire.Social.Feeds.html#maybe_creator_notification/3"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.maybe_creator_notification/3","ref":"Bonfire.Social.Feeds.html#maybe_creator_notification/3-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_creator_notification(subject, other_creator)\n    [{:notifications, other_creator}]","title":"When creator is different: - Bonfire.Social.Feeds.maybe_creator_notification/3","ref":"Bonfire.Social.Feeds.html#maybe_creator_notification/3-when-creator-is-different"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_creator_notification(subject, subject)\n    []","title":"When creator is the same: - Bonfire.Social.Feeds.maybe_creator_notification/3","ref":"Bonfire.Social.Feeds.html#maybe_creator_notification/3-when-creator-is-the-same"},{"type":"function","doc":"Retrieves custom feeds if specified in the options.","title":"Bonfire.Social.Feeds.maybe_custom_feeds/1","ref":"Bonfire.Social.Feeds.html#maybe_custom_feeds/1"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.maybe_custom_feeds/1","ref":"Bonfire.Social.Feeds.html#maybe_custom_feeds/1-examples"},{"type":"function","doc":"iex> Bonfire.Social.Feeds.maybe_custom_feeds(to_feeds: [\"custom_feed_id\"])\n    [\"custom_feed_id\"]","title":"With custom feeds specified: - Bonfire.Social.Feeds.maybe_custom_feeds/1","ref":"Bonfire.Social.Feeds.html#maybe_custom_feeds/1-with-custom-feeds-specified"},{"type":"function","doc":"Returns the feed ID of the outbox depending on the boundary.","title":"Bonfire.Social.Feeds.maybe_my_outbox_feed_id/2","ref":"Bonfire.Social.Feeds.html#maybe_my_outbox_feed_id/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.maybe_my_outbox_feed_id/2","ref":"Bonfire.Social.Feeds.html#maybe_my_outbox_feed_id/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_my_outbox_feed_id(me, \"public\")\n    # Feed ID of the outbox","title":"When the boundary is `\"public\"`: - Bonfire.Social.Feeds.maybe_my_outbox_feed_id/2","ref":"Bonfire.Social.Feeds.html#maybe_my_outbox_feed_id/2-when-the-boundary-is-public"},{"type":"function","doc":"> Bonfire.Social.Feeds.maybe_my_outbox_feed_id(me, \"mentions\")\n    nil","title":"When the boundary is `\"mentions\"` or `\"admins\"`: - Bonfire.Social.Feeds.maybe_my_outbox_feed_id/2","ref":"Bonfire.Social.Feeds.html#maybe_my_outbox_feed_id/2-when-the-boundary-is-mentions-or-admins"},{"type":"function","doc":"Retrieves the feed ID for a given type and subject.","title":"Bonfire.Social.Feeds.my_feed_id/2","ref":"Bonfire.Social.Feeds.html#my_feed_id/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.my_feed_id/2","ref":"Bonfire.Social.Feeds.html#my_feed_id/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.my_feed_id(:notifications, user)\n    # Feed ID for notifications of the user","title":"For a user: - Bonfire.Social.Feeds.my_feed_id/2","ref":"Bonfire.Social.Feeds.html#my_feed_id/2-for-a-user"},{"type":"function","doc":"Generates the home feed IDs for a user, including extra feeds if specified.","title":"Bonfire.Social.Feeds.my_home_feed_ids/2","ref":"Bonfire.Social.Feeds.html#my_home_feed_ids/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.my_home_feed_ids/2","ref":"Bonfire.Social.Feeds.html#my_home_feed_ids/2-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.my_home_feed_ids(socket_or_opts, [extra_feed_id])\n    # List of home feed IDs including extra feeds","title":"With socket options and extra feeds: - Bonfire.Social.Feeds.my_home_feed_ids/2","ref":"Bonfire.Social.Feeds.html#my_home_feed_ids/2-with-socket-options-and-extra-feeds"},{"type":"function","doc":"> Bonfire.Social.Feeds.my_home_feed_ids(_, [extra_feed_id])\n    # List of home feed IDs including extra feeds","title":"Without socket options: - Bonfire.Social.Feeds.my_home_feed_ids/2","ref":"Bonfire.Social.Feeds.html#my_home_feed_ids/2-without-socket-options"},{"type":"function","doc":"Gets the feed ID for a named feed.","title":"Bonfire.Social.Feeds.named_feed_id/2","ref":"Bonfire.Social.Feeds.html#named_feed_id/2"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.named_feed_id/2","ref":"Bonfire.Social.Feeds.html#named_feed_id/2-examples"},{"type":"function","doc":"iex> Bonfire.Social.Feeds.named_feed_id(:notifications, [])\n    # Feed ID for notifications","title":"For an existing named feed: - Bonfire.Social.Feeds.named_feed_id/2","ref":"Bonfire.Social.Feeds.html#named_feed_id/2-for-an-existing-named-feed"},{"type":"function","doc":"iex> Bonfire.Social.Feeds.named_feed_id(\"notifications\", [])\n    # Feed ID for notifications","title":"For a binary name: - Bonfire.Social.Feeds.named_feed_id/2","ref":"Bonfire.Social.Feeds.html#named_feed_id/2-for-a-binary-name"},{"type":"function","doc":"Generates a list of notification feed IDs based on mentions and replies.","title":"Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds/5","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_notifications_feeds/5"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds/5","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_notifications_feeds/5-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds(me, \"public\", [\"mention1\"], \"creator_id\")\n    # List of notification feed IDs","title":"When there are mentions and a reply to creator: - Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds/5","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_notifications_feeds/5-when-there-are-mentions-and-a-reply-to-creator"},{"type":"function","doc":"> Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds(me, \"local\", [], nil)\n    # List of notification feed IDs for local boundary","title":"When no mentions and no reply to creator: - Bonfire.Social.Feeds.reply_and_or_mentions_notifications_feeds/5","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_notifications_feeds/5-when-no-mentions-and-no-reply-to-creator"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.reply_and_or_mentions_to_notify/5","ref":"Bonfire.Social.Feeds.html#reply_and_or_mentions_to_notify/5"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.schema_module/0","ref":"Bonfire.Social.Feeds.html#schema_module/0"},{"type":"function","doc":"Determines the target feeds for a given changeset, creator, and options.\n\nTODO: de-duplicate `feed_ids_to_publish/4` and `target_feeds/3`","title":"Bonfire.Social.Feeds.target_feeds/3","ref":"Bonfire.Social.Feeds.html#target_feeds/3"},{"type":"function","doc":"","title":"Examples - Bonfire.Social.Feeds.target_feeds/3","ref":"Bonfire.Social.Feeds.html#target_feeds/3-examples"},{"type":"function","doc":"> Bonfire.Social.Feeds.target_feeds(changeset, creator, opts)\n    # List of target feed IDs based on the changeset","title":"When given a changeset: - Bonfire.Social.Feeds.target_feeds/3","ref":"Bonfire.Social.Feeds.html#target_feeds/3-when-given-a-changeset"},{"type":"function","doc":"> Bonfire.Social.Feeds.target_feeds(object, creator, opts)\n    # List of target feed IDs based on the object","title":"When given an object: - Bonfire.Social.Feeds.target_feeds/3","ref":"Bonfire.Social.Feeds.html#target_feeds/3-when-given-an-object"},{"type":"type","doc":"Names a predefined feed attached to a user","title":"Bonfire.Social.Feeds.feed_name/0","ref":"Bonfire.Social.Feeds.html#t:feed_name/0"},{"type":"module","doc":"","title":"Bonfire.Social.Feeds.LiveHandler","ref":"Bonfire.Social.Feeds.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.actions_update_many/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#actions_update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.activity_preloads_tuple_from_filters/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#activity_preloads_tuple_from_filters/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.activity_update_many/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#activity_update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.activity_with_object_from_assigns/1","ref":"Bonfire.Social.Feeds.LiveHandler.html#activity_with_object_from_assigns/1"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.assign_feed/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#assign_feed/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.feed_assigns_maybe_async/4","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_assigns_maybe_async/4"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.feed_assigns_non_live/4","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_assigns_non_live/4"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.feed_default_assigns/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_default_assigns/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.feed_extra_preloads_list/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_extra_preloads_list/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.feed_live_update_many_preload_mode/0","ref":"Bonfire.Social.Feeds.LiveHandler.html#feed_live_update_many_preload_mode/0"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.handle_event/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.handle_info/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_info/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.handle_params/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#handle_params/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.insert_feed/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#insert_feed/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.load_user_feed_assigns/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#load_user_feed_assigns/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.load_user_feed_assigns/4","ref":"Bonfire.Social.Feeds.LiveHandler.html#load_user_feed_assigns/4"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.object_preloads/0","ref":"Bonfire.Social.Feeds.LiveHandler.html#object_preloads/0"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.paginate_feed/4","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_feed/4"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.paginate_fetch_assign_default/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_fetch_assign_default/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.paginate_opts/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#paginate_opts/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.preload_activity_and_object_assocs/3","ref":"Bonfire.Social.Feeds.LiveHandler.html#preload_activity_and_object_assocs/3"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.remove_activity/1","ref":"Bonfire.Social.Feeds.LiveHandler.html#remove_activity/1"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.reply_to_activity/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#reply_to_activity/2"},{"type":"macro","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Feeds.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Feeds.LiveHandler.user_feed_assign_or_load_async/4","ref":"Bonfire.Social.Feeds.LiveHandler.html#user_feed_assign_or_load_async/4"},{"type":"module","doc":"Flagging functionality\n\nThis module handles flagging (reporting an activity or object to moderators and/or admins). It includes creating, querying, and managing flags, as well as handling federation through ActivityPub.\n\nFlags are implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions)","title":"Bonfire.Social.Flags","ref":"Bonfire.Social.Flags.html"},{"type":"function","doc":"Publishes a flag activity to ActivityPub.","title":"Bonfire.Social.Flags.ap_publish_activity/3","ref":"Bonfire.Social.Flags.html#ap_publish_activity/3"},{"type":"function","doc":"- `subject`: The subject (flagger) of the flag.\n- `_verb`: The verb associated with the flag (unused).\n- `flag`: The flag to publish.","title":"Parameters - Bonfire.Social.Flags.ap_publish_activity/3","ref":"Bonfire.Social.Flags.html#ap_publish_activity/3-parameters"},{"type":"function","doc":"The result of the ActivityPub publish operation.","title":"Returns - Bonfire.Social.Flags.ap_publish_activity/3","ref":"Bonfire.Social.Flags.html#ap_publish_activity/3-returns"},{"type":"function","doc":"iex> subject = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> flag = %Bonfire.Data.Social.Flag{}\n    iex> Bonfire.Social.Flags.ap_publish_activity(subject, :flag, flag)\n    {:ok, %ActivityPub.Object{}}","title":"Examples - Bonfire.Social.Flags.ap_publish_activity/3","ref":"Bonfire.Social.Flags.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives a flag activity from ActivityPub for multiple objects.","title":"Bonfire.Social.Flags.ap_receive_activity/3","ref":"Bonfire.Social.Flags.html#ap_receive_activity/3"},{"type":"function","doc":"- `creator`: The creator of the flag.\n- `activity`: The ActivityPub activity.\n- `object`: An object or list of objects to be flagged.","title":"Parameters - Bonfire.Social.Flags.ap_receive_activity/3","ref":"Bonfire.Social.Flags.html#ap_receive_activity/3-parameters"},{"type":"function","doc":"A tuple containing the result of the flag operation.","title":"Returns - Bonfire.Social.Flags.ap_receive_activity/3","ref":"Bonfire.Social.Flags.html#ap_receive_activity/3-returns"},{"type":"function","doc":"iex> creator = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> activity = %{data: %{\"type\" => \"Flag\"}}\n    iex> objects = [%{pointer_id: \"post456\"}, %{pointer_id: \"post789\"}]\n    iex> Bonfire.Social.Flags.ap_receive_activity(creator, activity, objects)\n    {:ok, [%Bonfire.Data.Social.Flag{}, %Bonfire.Data.Social.Flag{}]}","title":"Examples - Bonfire.Social.Flags.ap_receive_activity/3","ref":"Bonfire.Social.Flags.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Retrieves flags of a specific flagged object.","title":"Bonfire.Social.Flags.by_flagged/1","ref":"Bonfire.Social.Flags.html#by_flagged/1"},{"type":"function","doc":"- `object`: The object to query flags for.","title":"Parameters - Bonfire.Social.Flags.by_flagged/1","ref":"Bonfire.Social.Flags.html#by_flagged/1-parameters"},{"type":"function","doc":"A list of flags for the given object.","title":"Returns - Bonfire.Social.Flags.by_flagged/1","ref":"Bonfire.Social.Flags.html#by_flagged/1-returns"},{"type":"function","doc":"iex> object = %Bonfire.Data.Social.Post{id: \"post456\"}\n    iex> Bonfire.Social.Flags.by_flagged(object)\n    [%Bonfire.Data.Social.Flag{}, ...]","title":"Examples - Bonfire.Social.Flags.by_flagged/1","ref":"Bonfire.Social.Flags.html#by_flagged/1-examples"},{"type":"function","doc":"Retrieves flags created by a specific user.","title":"Bonfire.Social.Flags.by_flagger/1","ref":"Bonfire.Social.Flags.html#by_flagger/1"},{"type":"function","doc":"- `subject`: The flagger to query flags for.","title":"Parameters - Bonfire.Social.Flags.by_flagger/1","ref":"Bonfire.Social.Flags.html#by_flagger/1-parameters"},{"type":"function","doc":"A list of flags created by the subject.","title":"Returns - Bonfire.Social.Flags.by_flagger/1","ref":"Bonfire.Social.Flags.html#by_flagger/1-returns"},{"type":"function","doc":"iex> flagger = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> Bonfire.Social.Flags.by_flagger(flagger)\n    [%Bonfire.Data.Social.Flag{}, ...]","title":"Examples - Bonfire.Social.Flags.by_flagger/1","ref":"Bonfire.Social.Flags.html#by_flagger/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.federation_module/0","ref":"Bonfire.Social.Flags.html#federation_module/0"},{"type":"function","doc":"Records a flag.","title":"Bonfire.Social.Flags.flag/3","ref":"Bonfire.Social.Flags.html#flag/3"},{"type":"function","doc":"- `flagger`: The user creating the flag.\n- `flagged`: The object being flagged.\n- `opts`: Additional options (optional).","title":"Parameters - Bonfire.Social.Flags.flag/3","ref":"Bonfire.Social.Flags.html#flag/3-parameters"},{"type":"function","doc":"A tuple containing the created flag or an error.","title":"Returns - Bonfire.Social.Flags.flag/3","ref":"Bonfire.Social.Flags.html#flag/3-returns"},{"type":"function","doc":"iex> flagger = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> flagged = %Bonfire.Data.Social.Post{id: \"post456\"}\n    iex> Bonfire.Social.Flags.flag(flagger, flagged)\n    {:ok, %Bonfire.Data.Social.Flag{}}","title":"Examples - Bonfire.Social.Flags.flag/3","ref":"Bonfire.Social.Flags.html#flag/3-examples"},{"type":"function","doc":"Checks if a user has flagged an object.","title":"Bonfire.Social.Flags.flagged?/2","ref":"Bonfire.Social.Flags.html#flagged?/2"},{"type":"function","doc":"- `user`: The user to check.\n- `object`: The object to check.","title":"Parameters - Bonfire.Social.Flags.flagged?/2","ref":"Bonfire.Social.Flags.html#flagged?/2-parameters"},{"type":"function","doc":"Boolean indicating whether the user has flagged the object.","title":"Returns - Bonfire.Social.Flags.flagged?/2","ref":"Bonfire.Social.Flags.html#flagged?/2-returns"},{"type":"function","doc":"iex> user = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> object = %Bonfire.Data.Social.Post{id: \"post456\"}\n    iex> Bonfire.Social.Flags.flagged?(user, object)\n    false","title":"Examples - Bonfire.Social.Flags.flagged?/2","ref":"Bonfire.Social.Flags.html#flagged?/2-examples"},{"type":"function","doc":"Retrieves a flag by subject and object.","title":"Bonfire.Social.Flags.get/3","ref":"Bonfire.Social.Flags.html#get/3"},{"type":"function","doc":"- `subject`: The subject (flagger) of the flag.\n- `object`: The object being flagged.\n- `opts`: Additional options (optional).","title":"Parameters - Bonfire.Social.Flags.get/3","ref":"Bonfire.Social.Flags.html#get/3-parameters"},{"type":"function","doc":"The flag if found, otherwise an error tuple.","title":"Returns - Bonfire.Social.Flags.get/3","ref":"Bonfire.Social.Flags.html#get/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.get(subject, object)\n    {:ok, %Bonfire.Data.Social.Flag{}}","title":"Examples - Bonfire.Social.Flags.get/3","ref":"Bonfire.Social.Flags.html#get/3-examples"},{"type":"function","doc":"Retrieves a flag by subject and object, raising an error if not found.","title":"Bonfire.Social.Flags.get!/3","ref":"Bonfire.Social.Flags.html#get!/3"},{"type":"function","doc":"Retrieves instance moderators.","title":"Bonfire.Social.Flags.instance_moderators/0","ref":"Bonfire.Social.Flags.html#instance_moderators/0"},{"type":"function","doc":"A list of instance moderators.","title":"Returns - Bonfire.Social.Flags.instance_moderators/0","ref":"Bonfire.Social.Flags.html#instance_moderators/0-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.instance_moderators()\n    [%Bonfire.Data.Identity.User{}, ...]","title":"Examples - Bonfire.Social.Flags.instance_moderators/0","ref":"Bonfire.Social.Flags.html#instance_moderators/0-examples"},{"type":"function","doc":"Lists flags based on given options.","title":"Bonfire.Social.Flags.list/1","ref":"Bonfire.Social.Flags.html#list/1"},{"type":"function","doc":"- `opts`: Options for filtering and pagination.","title":"Parameters - Bonfire.Social.Flags.list/1","ref":"Bonfire.Social.Flags.html#list/1-parameters"},{"type":"function","doc":"A paginated list of flags.","title":"Returns - Bonfire.Social.Flags.list/1","ref":"Bonfire.Social.Flags.html#list/1-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.list(scope: :instance)\n    %{page_info: %{}, edges: [%Bonfire.Data.Social.Flag{}, ...]}","title":"Examples - Bonfire.Social.Flags.list/1","ref":"Bonfire.Social.Flags.html#list/1-examples"},{"type":"function","doc":"Lists flags created by a specific user.","title":"Bonfire.Social.Flags.list_by/2","ref":"Bonfire.Social.Flags.html#list_by/2"},{"type":"function","doc":"- `by_user`: The user or user ID to filter flags by.\n- `opts`: Options for filtering and pagination (optional).","title":"Parameters - Bonfire.Social.Flags.list_by/2","ref":"Bonfire.Social.Flags.html#list_by/2-parameters"},{"type":"function","doc":"A paginated list of flags created by the specified user.","title":"Returns - Bonfire.Social.Flags.list_by/2","ref":"Bonfire.Social.Flags.html#list_by/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.list_by(\"user123\")\n    %{page_info: %{}, edges: [%Bonfire.Data.Social.Flag{}, ...]}","title":"Examples - Bonfire.Social.Flags.list_by/2","ref":"Bonfire.Social.Flags.html#list_by/2-examples"},{"type":"function","doc":"Lists flags created by the current user.","title":"Bonfire.Social.Flags.list_my/1","ref":"Bonfire.Social.Flags.html#list_my/1"},{"type":"function","doc":"- `opts`: Options for filtering and pagination.","title":"Parameters - Bonfire.Social.Flags.list_my/1","ref":"Bonfire.Social.Flags.html#list_my/1-parameters"},{"type":"function","doc":"A paginated list of flags created by the current user.","title":"Returns - Bonfire.Social.Flags.list_my/1","ref":"Bonfire.Social.Flags.html#list_my/1-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.list_my(current_user: %Bonfire.Data.Identity.User{id: \"user123\"})\n    %{page_info: %{}, edges: [%Bonfire.Data.Social.Flag{}, ...]}","title":"Examples - Bonfire.Social.Flags.list_my/1","ref":"Bonfire.Social.Flags.html#list_my/1-examples"},{"type":"function","doc":"Lists flags for a specific object.","title":"Bonfire.Social.Flags.list_of/2","ref":"Bonfire.Social.Flags.html#list_of/2"},{"type":"function","doc":"- `object`: The object or object ID to filter flags by.\n- `opts`: Options for filtering and pagination (optional).","title":"Parameters - Bonfire.Social.Flags.list_of/2","ref":"Bonfire.Social.Flags.html#list_of/2-parameters"},{"type":"function","doc":"A paginated list of flags for the specified object.","title":"Returns - Bonfire.Social.Flags.list_of/2","ref":"Bonfire.Social.Flags.html#list_of/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.list_of(\"post456\")\n    %{page_info: %{}, edges: [%Bonfire.Data.Social.Flag{}, ...]}","title":"Examples - Bonfire.Social.Flags.list_of/2","ref":"Bonfire.Social.Flags.html#list_of/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.list_paginated/2","ref":"Bonfire.Social.Flags.html#list_paginated/2"},{"type":"function","doc":"Lists flags with preloaded associations.","title":"Bonfire.Social.Flags.list_preloaded/1","ref":"Bonfire.Social.Flags.html#list_preloaded/1"},{"type":"function","doc":"- `opts`: Options for filtering and pagination.","title":"Parameters - Bonfire.Social.Flags.list_preloaded/1","ref":"Bonfire.Social.Flags.html#list_preloaded/1-parameters"},{"type":"function","doc":"A paginated list of flags with preloaded associations.","title":"Returns - Bonfire.Social.Flags.list_preloaded/1","ref":"Bonfire.Social.Flags.html#list_preloaded/1-returns"},{"type":"function","doc":"iex> Bonfire.Social.Flags.list_preloaded(scope: :instance)\n    %{page_info: %{}, edges: [%Bonfire.Data.Social.Flag{object: %{created: %{creator: %{}}}}, ...]}","title":"Examples - Bonfire.Social.Flags.list_preloaded/1","ref":"Bonfire.Social.Flags.html#list_preloaded/1-examples"},{"type":"function","doc":"Retrieves moderators for a given object.","title":"Bonfire.Social.Flags.moderators/1","ref":"Bonfire.Social.Flags.html#moderators/1"},{"type":"function","doc":"- `object`: The object to find moderators for.","title":"Parameters - Bonfire.Social.Flags.moderators/1","ref":"Bonfire.Social.Flags.html#moderators/1-parameters"},{"type":"function","doc":"iex> object = %Bonfire.Data.Social.Post{id: \"post456\"}\n    iex> Bonfire.Social.Flags.moderators(object)","title":"Examples - Bonfire.Social.Flags.moderators/1","ref":"Bonfire.Social.Flags.html#moderators/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.query/2","ref":"Bonfire.Social.Flags.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.query_module/0","ref":"Bonfire.Social.Flags.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.schema_module/0","ref":"Bonfire.Social.Flags.html#schema_module/0"},{"type":"function","doc":"Removes a flag created by a specific user on an object, if one exists.","title":"Bonfire.Social.Flags.unflag/2","ref":"Bonfire.Social.Flags.html#unflag/2"},{"type":"function","doc":"- `flagger`: The user who created the flag.\n- `flagged`: The flagged object or ID.","title":"Parameters - Bonfire.Social.Flags.unflag/2","ref":"Bonfire.Social.Flags.html#unflag/2-parameters"},{"type":"function","doc":"The result of the unflag operation.","title":"Returns - Bonfire.Social.Flags.unflag/2","ref":"Bonfire.Social.Flags.html#unflag/2-returns"},{"type":"function","doc":"iex> flagger = %Bonfire.Data.Identity.User{id: \"user123\"}\n    iex> flagged = %Bonfire.Data.Social.Post{id: \"post456\"}\n    iex> Bonfire.Social.Flags.unflag(flagger, flagged)\n    :ok","title":"Examples - Bonfire.Social.Flags.unflag/2","ref":"Bonfire.Social.Flags.html#unflag/2-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Flags.LiveHandler","ref":"Bonfire.Social.Flags.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Flags.LiveHandler.handle_event/3","ref":"Bonfire.Social.Flags.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Flags.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Flags.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Following\n- Follow Requests\n- Social graph analysis","title":"Bonfire.Social.Graph","ref":"Bonfire.Social.Graph.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Social.Graph","ref":"Bonfire.Social.Graph.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Social.Graph","ref":"Bonfire.Social.Graph.html#module-copyright-and-license"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Bonfire.Social.Graph.child_spec/1","ref":"Bonfire.Social.Graph.html#child_spec/1"},{"type":"function","doc":"Adds a relationship to the graph.","title":"Bonfire.Social.Graph.graph_add/3","ref":"Bonfire.Social.Graph.html#graph_add/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_add(\"subject_id\", \"object_id\", \"type\")\n    :ok","title":"Examples - Bonfire.Social.Graph.graph_add/3","ref":"Bonfire.Social.Graph.html#graph_add/3-examples"},{"type":"function","doc":"Clears the graph database by deleting all nodes and relationships. Use with care!","title":"Bonfire.Social.Graph.graph_clear/0","ref":"Bonfire.Social.Graph.html#graph_clear/0"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_clear()\n    :ok","title":"Examples - Bonfire.Social.Graph.graph_clear/0","ref":"Bonfire.Social.Graph.html#graph_clear/0-examples"},{"type":"function","doc":"Retrieves the graph DB connection.","title":"Bonfire.Social.Graph.graph_conn/0","ref":"Bonfire.Social.Graph.html#graph_conn/0"},{"type":"function","doc":"Calculates the distance between two nodes in the graph.","title":"Bonfire.Social.Graph.graph_distance/2","ref":"Bonfire.Social.Graph.html#graph_distance/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_distance(\"subject_id\", \"object_id\")\n    {:ok, length}","title":"Examples - Bonfire.Social.Graph.graph_distance/2","ref":"Bonfire.Social.Graph.html#graph_distance/2-examples"},{"type":"function","doc":"Retrieves distances from a given subject to all other nodes.","title":"Bonfire.Social.Graph.graph_distances/1","ref":"Bonfire.Social.Graph.html#graph_distances/1"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_distances(\"subject_id\")\n    [{id, length}]","title":"Examples - Bonfire.Social.Graph.graph_distances/1","ref":"Bonfire.Social.Graph.html#graph_distances/1-examples"},{"type":"function","doc":"Executes a query on the graph database.","title":"Bonfire.Social.Graph.graph_query/2","ref":"Bonfire.Social.Graph.html#graph_query/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_query(\"MATCH (n) RETURN n\")\n    {:ok, result}","title":"Examples - Bonfire.Social.Graph.graph_query/2","ref":"Bonfire.Social.Graph.html#graph_query/2-examples"},{"type":"function","doc":"Removes a relationship from the graph.","title":"Bonfire.Social.Graph.graph_remove/3","ref":"Bonfire.Social.Graph.html#graph_remove/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.graph_remove(\"subject_id\", \"object_id\", \"type\")\n    :ok","title":"Examples - Bonfire.Social.Graph.graph_remove/3","ref":"Bonfire.Social.Graph.html#graph_remove/3-examples"},{"type":"function","doc":"Initializes the GenServer and calls `init_and_load/0`","title":"Bonfire.Social.Graph.init/1","ref":"Bonfire.Social.Graph.html#init/1"},{"type":"function","doc":"Initializes the graph DB and calls `load_from_db/0`","title":"Bonfire.Social.Graph.init_and_load/0","ref":"Bonfire.Social.Graph.html#init_and_load/0"},{"type":"function","doc":"Loads follows from the SQL DB and stores them the in-memory graph DB.","title":"Bonfire.Social.Graph.load_from_db/0","ref":"Bonfire.Social.Graph.html#load_from_db/0"},{"type":"function","doc":"Retrieves the possible applications to be started based on configuration.\n\nReturns a list of OTP applications (including the `Bolt.Sips` Neo4j driver to connect to the graph database) or an empty list if disabled.","title":"Bonfire.Social.Graph.maybe_applications/0","ref":"Bonfire.Social.Graph.html#maybe_applications/0"},{"type":"function","doc":"Starts the GenServer link.","title":"Bonfire.Social.Graph.start_link/1","ref":"Bonfire.Social.Graph.html#start_link/1"},{"type":"module","doc":"Implements aliases (i.e. \"also known as\") for characters in Bonfire.\n\nThis module provides functionality for managing aliases, including adding,\nremoving, and querying aliases. It also implements ActivityPub federation\nfor the \"Move\" activity.","title":"Bonfire.Social.Graph.Aliases","ref":"Bonfire.Social.Graph.Aliases.html"},{"type":"function","doc":"Adds an alias to a user, linking it to a another character.","title":"Bonfire.Social.Graph.Aliases.add/3","ref":"Bonfire.Social.Graph.Aliases.html#add/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.add(user, target)\n    {:ok, %Alias{}}","title":"Examples - Bonfire.Social.Graph.Aliases.add/3","ref":"Bonfire.Social.Graph.Aliases.html#add/3-examples"},{"type":"function","doc":"Retrieves all aliases for a given object (i.e target).","title":"Bonfire.Social.Graph.Aliases.all_by_object/2","ref":"Bonfire.Social.Graph.Aliases.html#all_by_object/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.all_by_object(object)\n    [%Alias{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.all_by_object/2","ref":"Bonfire.Social.Graph.Aliases.html#all_by_object/2-examples"},{"type":"function","doc":"Retrieves all aliases for a given subject.","title":"Bonfire.Social.Graph.Aliases.all_by_subject/2","ref":"Bonfire.Social.Graph.Aliases.html#all_by_subject/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.all_by_subject(user)\n    [%Alias{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.all_by_subject/2","ref":"Bonfire.Social.Graph.Aliases.html#all_by_subject/2-examples"},{"type":"function","doc":"Retrieves all aliased objects for a given subject.","title":"Bonfire.Social.Graph.Aliases.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Aliases.html#all_objects_by_subject/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.all_objects_by_subject(user)\n    [%Object{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Aliases.html#all_objects_by_subject/2-examples"},{"type":"function","doc":"Retrieves all alias subjects for a given object (i.e target).","title":"Bonfire.Social.Graph.Aliases.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Aliases.html#all_subjects_by_object/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.all_subjects_by_object(object)\n    [%Subject{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Aliases.html#all_subjects_by_object/2-examples"},{"type":"function","doc":"Checks if a local user is also known as the target.","title":"Bonfire.Social.Graph.Aliases.also_known_as?/2","ref":"Bonfire.Social.Graph.Aliases.html#also_known_as?/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.also_known_as?(\"http://example.com/user\", target)\n    true\n\n    iex> Bonfire.Social.Graph.Aliases.also_known_as?(%User{}, target)\n    true","title":"Examples - Bonfire.Social.Graph.Aliases.also_known_as?/2","ref":"Bonfire.Social.Graph.Aliases.html#also_known_as?/2-examples"},{"type":"function","doc":"Publishes an ActivityPub activity for a move operation.","title":"Bonfire.Social.Graph.Aliases.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Aliases.html#ap_publish_activity/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.ap_publish_activity(subject, :move, target)","title":"Examples - Bonfire.Social.Graph.Aliases.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Aliases.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Processes an incoming ActivityPub Move activity.","title":"Bonfire.Social.Graph.Aliases.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Aliases.html#ap_receive_activity/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.ap_receive_activity(subject, activity, origin_object)\n    {:ok, :moved}","title":"Examples - Bonfire.Social.Graph.Aliases.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Aliases.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Checks if an alias relationship exists between a subject and a target.","title":"Bonfire.Social.Graph.Aliases.exists?/2","ref":"Bonfire.Social.Graph.Aliases.html#exists?/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.exists?(subject, target)\n    true","title":"Examples - Bonfire.Social.Graph.Aliases.exists?/2","ref":"Bonfire.Social.Graph.Aliases.html#exists?/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.federation_module/0","ref":"Bonfire.Social.Graph.Aliases.html#federation_module/0"},{"type":"function","doc":"Retrieves an alias between a subject and an object, if one exists","title":"Bonfire.Social.Graph.Aliases.get/3","ref":"Bonfire.Social.Graph.Aliases.html#get/3"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.get(subject, object)\n    {:ok, %Alias{}}","title":"Examples - Bonfire.Social.Graph.Aliases.get/3","ref":"Bonfire.Social.Graph.Aliases.html#get/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.get!/3","ref":"Bonfire.Social.Graph.Aliases.html#get!/3"},{"type":"function","doc":"Lists entities who aliased a a given user.","title":"Bonfire.Social.Graph.Aliases.list_aliased/2","ref":"Bonfire.Social.Graph.Aliases.html#list_aliased/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.list_aliased(user)\n    [%AliasedEntity{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.list_aliased/2","ref":"Bonfire.Social.Graph.Aliases.html#list_aliased/2-examples"},{"type":"function","doc":"Lists aliases for a given user.","title":"Bonfire.Social.Graph.Aliases.list_aliases/2","ref":"Bonfire.Social.Graph.Aliases.html#list_aliases/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.list_aliases(user)\n    [%Alias{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.list_aliases/2","ref":"Bonfire.Social.Graph.Aliases.html#list_aliases/2-examples"},{"type":"function","doc":"Lists entities who aliased the current user.","title":"Bonfire.Social.Graph.Aliases.list_my_aliased/2","ref":"Bonfire.Social.Graph.Aliases.html#list_my_aliased/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.list_my_aliased(current_user)\n    [%AliasedEntity{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.list_my_aliased/2","ref":"Bonfire.Social.Graph.Aliases.html#list_my_aliased/2-examples"},{"type":"function","doc":"Lists aliases for the current user.","title":"Bonfire.Social.Graph.Aliases.list_my_aliases/2","ref":"Bonfire.Social.Graph.Aliases.html#list_my_aliases/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.list_my_aliases(current_user)\n    [%Alias{}, ...]","title":"Examples - Bonfire.Social.Graph.Aliases.list_my_aliases/2","ref":"Bonfire.Social.Graph.Aliases.html#list_my_aliases/2-examples"},{"type":"function","doc":"Initiates a move operation for migrating a local user to another instance.","title":"Bonfire.Social.Graph.Aliases.move/2","ref":"Bonfire.Social.Graph.Aliases.html#move/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.move(subject, target)\n    {:ok, :moved}","title":"Examples - Bonfire.Social.Graph.Aliases.move/2","ref":"Bonfire.Social.Graph.Aliases.html#move/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.query/2","ref":"Bonfire.Social.Graph.Aliases.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.query_module/0","ref":"Bonfire.Social.Graph.Aliases.html#query_module/0"},{"type":"function","doc":"Removes an alias relationship between a user and a target.","title":"Bonfire.Social.Graph.Aliases.remove/2","ref":"Bonfire.Social.Graph.Aliases.html#remove/2"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Aliases.remove(user, target)","title":"Examples - Bonfire.Social.Graph.Aliases.remove/2","ref":"Bonfire.Social.Graph.Aliases.html#remove/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.schema_module/0","ref":"Bonfire.Social.Graph.Aliases.html#schema_module/0"},{"type":"module","doc":"","title":"Bonfire.Social.Graph.Aliases.LiveHandler","ref":"Bonfire.Social.Graph.Aliases.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Aliases.LiveHandler.handle_event/3","ref":"Bonfire.Social.Graph.Aliases.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Graph.Aliases.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Graph.Aliases.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"","title":"Bonfire.Social.Graph.Fake","ref":"Bonfire.Social.Graph.Fake.html"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Fake.fake_follow!/0","ref":"Bonfire.Social.Graph.Fake.html#fake_follow!/0"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Fake.fake_incoming_follow!/0","ref":"Bonfire.Social.Graph.Fake.html#fake_incoming_follow!/0"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Fake.fake_outgoing_follow!/0","ref":"Bonfire.Social.Graph.Fake.html#fake_outgoing_follow!/0"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Fake.fake_remote_user!/0","ref":"Bonfire.Social.Graph.Fake.html#fake_remote_user!/0"},{"type":"module","doc":"Module for handling follow relationships in the Bonfire social graph.","title":"Bonfire.Social.Graph.Follows","ref":"Bonfire.Social.Graph.Follows.html"},{"type":"function","doc":"Accepts a follow request, publishes to feeds and federates.","title":"Bonfire.Social.Graph.Follows.accept/2","ref":"Bonfire.Social.Graph.Follows.html#accept/2"},{"type":"function","doc":"- `request`: A `Request` struct or its ID\n- `opts`: Additional options including the current user","title":"Parameters - Bonfire.Social.Graph.Follows.accept/2","ref":"Bonfire.Social.Graph.Follows.html#accept/2-parameters"},{"type":"function","doc":"`{:ok, follow}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Social.Graph.Follows.accept/2","ref":"Bonfire.Social.Graph.Follows.html#accept/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.accept(request, current_user: acceptor)\n    {:ok, %Follow{}}","title":"Examples - Bonfire.Social.Graph.Follows.accept/2","ref":"Bonfire.Social.Graph.Follows.html#accept/2-examples"},{"type":"function","doc":"Accepts a follow request, publishes to feeds and federates.","title":"Bonfire.Social.Graph.Follows.accept_from/2","ref":"Bonfire.Social.Graph.Follows.html#accept_from/2"},{"type":"function","doc":"- `subject`: The requester\n- `opts`: Additional options including the current user","title":"Parameters - Bonfire.Social.Graph.Follows.accept_from/2","ref":"Bonfire.Social.Graph.Follows.html#accept_from/2-parameters"},{"type":"function","doc":"`{:ok, follow}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Social.Graph.Follows.accept_from/2","ref":"Bonfire.Social.Graph.Follows.html#accept_from/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.accept_from(requester, current_user: acceptor)\n    {:ok, %Follow{}}","title":"Examples - Bonfire.Social.Graph.Follows.accept_from/2","ref":"Bonfire.Social.Graph.Follows.html#accept_from/2-examples"},{"type":"function","doc":"Lists all follows for an object.","title":"Bonfire.Social.Graph.Follows.all_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_object/2"},{"type":"function","doc":"- `user`: The object whose followers to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.all_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_object/2-parameters"},{"type":"function","doc":"List of follows.","title":"Returns - Bonfire.Social.Graph.Follows.all_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_object/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.all_by_object(user)\n    [%Follow{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.all_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_object/2-examples"},{"type":"function","doc":"Lists all follows by a subject.","title":"Bonfire.Social.Graph.Follows.all_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_subject/2"},{"type":"function","doc":"- `user`: The user whose follows to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.all_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_subject/2-parameters"},{"type":"function","doc":"List of follows.","title":"Returns - Bonfire.Social.Graph.Follows.all_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_subject/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.all_by_subject(user)\n    [%Follow{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.all_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_by_subject/2-examples"},{"type":"function","doc":"Lists all followed outboxes for a user.","title":"Bonfire.Social.Graph.Follows.all_followed_outboxes/2","ref":"Bonfire.Social.Graph.Follows.html#all_followed_outboxes/2"},{"type":"function","doc":"- `user`: The user whose followed outboxes to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.all_followed_outboxes/2","ref":"Bonfire.Social.Graph.Follows.html#all_followed_outboxes/2-parameters"},{"type":"function","doc":"List of followed outbox IDs.","title":"Returns - Bonfire.Social.Graph.Follows.all_followed_outboxes/2","ref":"Bonfire.Social.Graph.Follows.html#all_followed_outboxes/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.all_followed_outboxes(user)\n    [\"outbox_id_1\", ...]\n\n    iex> Bonfire.Social.Graph.Follows.all_followed_outboxes(user, include_followed_categories: true)\n    [\"outbox_id_1\", \"category_outbox_id_1\", ...]","title":"Examples - Bonfire.Social.Graph.Follows.all_followed_outboxes/2","ref":"Bonfire.Social.Graph.Follows.html#all_followed_outboxes/2-examples"},{"type":"function","doc":"Lists all objects followed by a subject.","title":"Bonfire.Social.Graph.Follows.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_objects_by_subject/2"},{"type":"function","doc":"- `user`: The user whose followed objects to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_objects_by_subject/2-parameters"},{"type":"function","doc":"List of followed objects.","title":"Returns - Bonfire.Social.Graph.Follows.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_objects_by_subject/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.all_objects_by_subject(user)\n    [%FollowedObject{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.all_objects_by_subject/2","ref":"Bonfire.Social.Graph.Follows.html#all_objects_by_subject/2-examples"},{"type":"function","doc":"Lists all subjects following an object.","title":"Bonfire.Social.Graph.Follows.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_subjects_by_object/2"},{"type":"function","doc":"- `user`: The object whose followers to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_subjects_by_object/2-parameters"},{"type":"function","doc":"List of follower subjects.","title":"Returns - Bonfire.Social.Graph.Follows.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_subjects_by_object/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.all_subjects_by_object(user)\n    [%FollowerSubject{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.all_subjects_by_object/2","ref":"Bonfire.Social.Graph.Follows.html#all_subjects_by_object/2-examples"},{"type":"function","doc":"Publishes an ActivityPub activity for a follow-related action.","title":"Bonfire.Social.Graph.Follows.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_publish_activity/3"},{"type":"function","doc":"- `subject`: The subject of the activity\n- `verb`: The verb of the activity (e.g., :delete)\n- `follow`: The follow object or ID","title":"Parameters - Bonfire.Social.Graph.Follows.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_publish_activity/3-parameters"},{"type":"function","doc":"`{:ok, activity}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Social.Graph.Follows.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_publish_activity/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.ap_publish_activity(user, :delete, follow)\n    {:ok, %ActivityPub.Activity{}}","title":"Examples - Bonfire.Social.Graph.Follows.ap_publish_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives and processes an ActivityPub activity related to follows.","title":"Bonfire.Social.Graph.Follows.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_receive_activity/3"},{"type":"function","doc":"- `follower`: The follower\n- `activity`: The ActivityPub activity\n- `object`: The object of the activity","title":"Parameters - Bonfire.Social.Graph.Follows.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_receive_activity/3-parameters"},{"type":"function","doc":"`{:ok, result}` on success, `{:ignore, reason}` on failure or when ignored.","title":"Returns - Bonfire.Social.Graph.Follows.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_receive_activity/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.ap_receive_activity(follower, activity, object)\n    {:ok, %Follow{}}","title":"Examples - Bonfire.Social.Graph.Follows.ap_receive_activity/3","ref":"Bonfire.Social.Graph.Follows.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Follows multiple objects at once, optimizing some operations.","title":"Bonfire.Social.Graph.Follows.batch_follow/3","ref":"Bonfire.Social.Graph.Follows.html#batch_follow/3"},{"type":"function","doc":"- `follower`: The user who wants to follow\n- `objects`: List of objects to be followed\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.batch_follow/3","ref":"Bonfire.Social.Graph.Follows.html#batch_follow/3-parameters"},{"type":"function","doc":"`[{\"object1_id\", {:ok, result}}, {\"object2_id\", {:error, msg}}, ...]`","title":"Returns - Bonfire.Social.Graph.Follows.batch_follow/3","ref":"Bonfire.Social.Graph.Follows.html#batch_follow/3-returns"},{"type":"function","doc":"iex> batch_follow(me, [user1, user2])\n    [{:ok, %Follow{}, ...], {:ok, %Request{}}]","title":"Examples - Bonfire.Social.Graph.Follows.batch_follow/3","ref":"Bonfire.Social.Graph.Follows.html#batch_follow/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.do_side_effects/4","ref":"Bonfire.Social.Graph.Follows.html#do_side_effects/4"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.federation_module/0","ref":"Bonfire.Social.Graph.Follows.html#federation_module/0"},{"type":"function","doc":"Follows someone or something. In case of success, publishes to feeds and federates.\n\nIf the user is not permitted to follow the object, or the object is\na remote actor, it will instead send a request to follow.","title":"Bonfire.Social.Graph.Follows.follow/3","ref":"Bonfire.Social.Graph.Follows.html#follow/3"},{"type":"function","doc":"- `user`: The user who wants to follow\n- `object`: The object to be followed\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.follow/3","ref":"Bonfire.Social.Graph.Follows.html#follow/3-parameters"},{"type":"function","doc":"`{:ok, result}` on success, `{:error, reason}` on failure.","title":"Returns - Bonfire.Social.Graph.Follows.follow/3","ref":"Bonfire.Social.Graph.Follows.html#follow/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.follow(me, user2)\n    {:ok, %Follow{}}\n\n    iex> Bonfire.Social.Graph.Follows.follow(me, user3)\n    {:ok, %Request{}}","title":"Examples - Bonfire.Social.Graph.Follows.follow/3","ref":"Bonfire.Social.Graph.Follows.html#follow/3-examples"},{"type":"function","doc":"Checks if a subject is following an object.","title":"Bonfire.Social.Graph.Follows.following?/2","ref":"Bonfire.Social.Graph.Follows.html#following?/2"},{"type":"function","doc":"- `subject`: The subject (follower)\n- `object`: The object (followed)","title":"Parameters - Bonfire.Social.Graph.Follows.following?/2","ref":"Bonfire.Social.Graph.Follows.html#following?/2-parameters"},{"type":"function","doc":"Boolean indicating if the subject is following the object.","title":"Returns - Bonfire.Social.Graph.Follows.following?/2","ref":"Bonfire.Social.Graph.Follows.html#following?/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.following?(user, profile)\n    true","title":"Examples - Bonfire.Social.Graph.Follows.following?/2","ref":"Bonfire.Social.Graph.Follows.html#following?/2-examples"},{"type":"function","doc":"Gets a follow relationship between a subject and an object, if one exists.","title":"Bonfire.Social.Graph.Follows.get/3","ref":"Bonfire.Social.Graph.Follows.html#get/3"},{"type":"function","doc":"- `subject`: The subject (follower)\n- `object`: The object (followed)\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.get/3","ref":"Bonfire.Social.Graph.Follows.html#get/3-parameters"},{"type":"function","doc":"`{:ok, follow}` if found, `{:error, :not_found}` otherwise.","title":"Returns - Bonfire.Social.Graph.Follows.get/3","ref":"Bonfire.Social.Graph.Follows.html#get/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.get(user, profile)\n    {:ok, %Follow{}}","title":"Examples - Bonfire.Social.Graph.Follows.get/3","ref":"Bonfire.Social.Graph.Follows.html#get/3-examples"},{"type":"function","doc":"Gets a follow relationship between a subject and an object, raising an error if not found.","title":"Bonfire.Social.Graph.Follows.get!/3","ref":"Bonfire.Social.Graph.Follows.html#get!/3"},{"type":"function","doc":"Ignores a follow request.","title":"Bonfire.Social.Graph.Follows.ignore/2","ref":"Bonfire.Social.Graph.Follows.html#ignore/2"},{"type":"function","doc":"- `request`: The request to ignore\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.ignore/2","ref":"Bonfire.Social.Graph.Follows.html#ignore/2-parameters"},{"type":"function","doc":"Result of the ignore operation.","title":"Returns - Bonfire.Social.Graph.Follows.ignore/2","ref":"Bonfire.Social.Graph.Follows.html#ignore/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.ignore(request, current_user: user)\n    {:ok, ignored_request}","title":"Examples - Bonfire.Social.Graph.Follows.ignore/2","ref":"Bonfire.Social.Graph.Follows.html#ignore/2-examples"},{"type":"function","doc":"Lists followed objects for a given user.","title":"Bonfire.Social.Graph.Follows.list_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_followed/2"},{"type":"function","doc":"- `user`: The user whose followed objects to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.list_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_followed/2-parameters"},{"type":"function","doc":"List of followed objects.","title":"Returns - Bonfire.Social.Graph.Follows.list_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_followed/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.list_followed(user)\n    [%Object{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.list_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_followed/2-examples"},{"type":"function","doc":"Lists followers for a given user.","title":"Bonfire.Social.Graph.Follows.list_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_followers/2"},{"type":"function","doc":"- `user`: The user whose followers to list\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.list_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_followers/2-parameters"},{"type":"function","doc":"List of followers.","title":"Returns - Bonfire.Social.Graph.Follows.list_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_followers/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.list_followers(user)\n    [%User{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.list_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_followers/2-examples"},{"type":"function","doc":"Lists followed objects for the current user.","title":"Bonfire.Social.Graph.Follows.list_my_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followed/2"},{"type":"function","doc":"- `current_user`: The current user\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.list_my_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followed/2-parameters"},{"type":"function","doc":"List of followed objects.","title":"Returns - Bonfire.Social.Graph.Follows.list_my_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followed/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.list_my_followed(current_user)\n    [%Object{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.list_my_followed/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followed/2-examples"},{"type":"function","doc":"Lists followers for the current user.","title":"Bonfire.Social.Graph.Follows.list_my_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followers/2"},{"type":"function","doc":"- `current_user`: The current user\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.list_my_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followers/2-parameters"},{"type":"function","doc":"List of followers.","title":"Returns - Bonfire.Social.Graph.Follows.list_my_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followers/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.list_my_followers(current_user)\n    [%User{}, ...]","title":"Examples - Bonfire.Social.Graph.Follows.list_my_followers/2","ref":"Bonfire.Social.Graph.Follows.html#list_my_followers/2-examples"},{"type":"function","doc":"Queries follows based on filters and options.","title":"Bonfire.Social.Graph.Follows.query/2","ref":"Bonfire.Social.Graph.Follows.html#query/2"},{"type":"function","doc":"- `filters`: List of filters to apply to the query\n- `opts`: Additional query options","title":"Parameters - Bonfire.Social.Graph.Follows.query/2","ref":"Bonfire.Social.Graph.Follows.html#query/2-parameters"},{"type":"function","doc":"An Ecto query for follows.","title":"Returns - Bonfire.Social.Graph.Follows.query/2","ref":"Bonfire.Social.Graph.Follows.html#query/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.query([my: :objects], current_user: user)\n    # following\n\n    iex> Bonfire.Social.Graph.Follows.query([my: :followers], current_user: user)\n    # followers","title":"Examples - Bonfire.Social.Graph.Follows.query/2","ref":"Bonfire.Social.Graph.Follows.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.query_module/0","ref":"Bonfire.Social.Graph.Follows.html#query_module/0"},{"type":"function","doc":"Checks if a follow request has been made.","title":"Bonfire.Social.Graph.Follows.requested?/2","ref":"Bonfire.Social.Graph.Follows.html#requested?/2"},{"type":"function","doc":"- `subject`: The subject (requester)\n- `object`: The object (requested)","title":"Parameters - Bonfire.Social.Graph.Follows.requested?/2","ref":"Bonfire.Social.Graph.Follows.html#requested?/2-parameters"},{"type":"function","doc":"Boolean indicating if a follow request exists.","title":"Returns - Bonfire.Social.Graph.Follows.requested?/2","ref":"Bonfire.Social.Graph.Follows.html#requested?/2-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.requested?(user, profile)\n    true","title":"Examples - Bonfire.Social.Graph.Follows.requested?/2","ref":"Bonfire.Social.Graph.Follows.html#requested?/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.schema_module/0","ref":"Bonfire.Social.Graph.Follows.html#schema_module/0"},{"type":"function","doc":"Unfollows someone or something.","title":"Bonfire.Social.Graph.Follows.unfollow/3","ref":"Bonfire.Social.Graph.Follows.html#unfollow/3"},{"type":"function","doc":"- `user`: The user who wants to unfollow\n- `object`: The object to be unfollowed\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Graph.Follows.unfollow/3","ref":"Bonfire.Social.Graph.Follows.html#unfollow/3-parameters"},{"type":"function","doc":"Result of the unfollow operation.","title":"Returns - Bonfire.Social.Graph.Follows.unfollow/3","ref":"Bonfire.Social.Graph.Follows.html#unfollow/3-returns"},{"type":"function","doc":"iex> Bonfire.Social.Graph.Follows.unfollow(me, user2)\n    {:ok, deleted_follow}","title":"Examples - Bonfire.Social.Graph.Follows.unfollow/3","ref":"Bonfire.Social.Graph.Follows.html#unfollow/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Graph.Follows.LiveHandler","ref":"Bonfire.Social.Graph.Follows.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.LiveHandler.handle_event/3","ref":"Bonfire.Social.Graph.Follows.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Graph.Follows.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Graph.Follows.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.LiveHandler.update_many/2","ref":"Bonfire.Social.Graph.Follows.LiveHandler.html#update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Follows.LiveHandler.update_many_opts/1","ref":"Bonfire.Social.Graph.Follows.LiveHandler.html#update_many_opts/1"},{"type":"module","doc":"","title":"Bonfire.Social.Graph.Import","ref":"Bonfire.Social.Graph.Import.html"},{"type":"function","doc":"Import follows, ghosts, silences, or blocks from a CSV file.","title":"Bonfire.Social.Graph.Import.import_from_csv_file/3","ref":"Bonfire.Social.Graph.Import.html#import_from_csv_file/3"},{"type":"function","doc":"iex> import_from_csv_file(:follows, scope, \"path/to/file.csv\")","title":"Examples - Bonfire.Social.Graph.Import.import_from_csv_file/3","ref":"Bonfire.Social.Graph.Import.html#import_from_csv_file/3-examples"},{"type":"function","doc":"Perform the queued job based on the operation and scope.","title":"Bonfire.Social.Graph.Import.perform/1","ref":"Bonfire.Social.Graph.Import.html#perform/1"},{"type":"function","doc":"iex> perform(%{args: %{\"op\" => \"follows_import\", \"user_id\" => \"user1\", \"identifier\" => \"id1\"}})\n    :ok\n\n    iex> perform(%{args: %{\"op\" => \"blocks_import\", \"user_id\" => \"instance_wide\", \"identifier\" => \"id1\"}})\n    :ok","title":"Examples - Bonfire.Social.Graph.Import.perform/1","ref":"Bonfire.Social.Graph.Import.html#perform/1-examples"},{"type":"function","doc":"Perform an import operation for the scope.","title":"Bonfire.Social.Graph.Import.perform/3","ref":"Bonfire.Social.Graph.Import.html#perform/3"},{"type":"function","doc":"iex> perform(\"follows_import\", scope, \"identifier\")","title":"Examples - Bonfire.Social.Graph.Import.perform/3","ref":"Bonfire.Social.Graph.Import.html#perform/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Graph.Integration","ref":"Bonfire.Social.Graph.Integration.html"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Integration.declared_extension/0","ref":"Bonfire.Social.Graph.Integration.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Integration.mailer/0","ref":"Bonfire.Social.Graph.Integration.html#mailer/0"},{"type":"function","doc":"","title":"Bonfire.Social.Graph.Integration.repo/0","ref":"Bonfire.Social.Graph.Integration.html#repo/0"},{"type":"module","doc":"Mutate, query, and federate likes (indicating appreciation for an activity or object).\n\nThis module provides functionality to manage and query likes, including creating, deleting, and listing likes.\nIt also handles federation of likes using ActivityPub.\n\nLikes are implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions)","title":"Bonfire.Social.Likes","ref":"Bonfire.Social.Likes.html"},{"type":"function","doc":"Publishes an ActivityPub activity for a like.","title":"Bonfire.Social.Likes.ap_publish_activity/3","ref":"Bonfire.Social.Likes.html#ap_publish_activity/3"},{"type":"function","doc":"- subject: The subject of the like activity.\n  - verb: The verb of the activity (:delete or other).\n  - like: The like object.","title":"Parameters - Bonfire.Social.Likes.ap_publish_activity/3","ref":"Bonfire.Social.Likes.html#ap_publish_activity/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.ap_publish_activity(%User{id: \"user123\"}, :create, %Like{})\n    {:ok, %ActivityPub.Object{}}","title":"Examples - Bonfire.Social.Likes.ap_publish_activity/3","ref":"Bonfire.Social.Likes.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Receives and processes an ActivityPub like activity.","title":"Bonfire.Social.Likes.ap_receive_activity/3","ref":"Bonfire.Social.Likes.html#ap_receive_activity/3"},{"type":"function","doc":"- liker: The user performing the like action.\n  - activity: The ActivityPub activity data.\n  - object: The object being liked.","title":"Parameters - Bonfire.Social.Likes.ap_receive_activity/3","ref":"Bonfire.Social.Likes.html#ap_receive_activity/3-parameters"},{"type":"function","doc":"iex> activity = %{data: %{\"type\" => \"Like\"}}\n    iex> object = %ActivityPub.Object{}\n    iex> Bonfire.Social.Likes.ap_receive_activity(%User{id: \"user123\"}, activity, object)\n    {:ok, %Like{}}","title":"Examples - Bonfire.Social.Likes.ap_receive_activity/3","ref":"Bonfire.Social.Likes.html#ap_receive_activity/3-examples"},{"type":"function","doc":"Lists likes for a specific object.","title":"Bonfire.Social.Likes.by_liked/2","ref":"Bonfire.Social.Likes.html#by_liked/2"},{"type":"function","doc":"- object: The object that was liked.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Likes.by_liked/2","ref":"Bonfire.Social.Likes.html#by_liked/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.by_liked(%Post{id: \"post456\"})\n    [%Like{}, ...]","title":"Examples - Bonfire.Social.Likes.by_liked/2","ref":"Bonfire.Social.Likes.html#by_liked/2-examples"},{"type":"function","doc":"Lists likes created by a specific subject.","title":"Bonfire.Social.Likes.by_liker/2","ref":"Bonfire.Social.Likes.html#by_liker/2"},{"type":"function","doc":"- subject: The subject (usually a user) who created the likes.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Likes.by_liker/2","ref":"Bonfire.Social.Likes.html#by_liker/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.by_liker(%User{id: \"user123\"})\n    [%Like{}, ...]","title":"Examples - Bonfire.Social.Likes.by_liker/2","ref":"Bonfire.Social.Likes.html#by_liker/2-examples"},{"type":"function","doc":"Counts likes based on filters or for a specific user-object pair.","title":"Bonfire.Social.Likes.count/2","ref":"Bonfire.Social.Likes.html#count/2"},{"type":"function","doc":"- filters: A list of filters to apply when counting likes.\n  - opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Likes.count/2","ref":"Bonfire.Social.Likes.html#count/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.count([object: %Post{id: \"post456\"}])\n    5\n\n    iex> Bonfire.Social.Likes.count(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    1","title":"Examples - Bonfire.Social.Likes.count/2","ref":"Bonfire.Social.Likes.html#count/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.do_like/3","ref":"Bonfire.Social.Likes.html#do_like/3"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.federation_module/0","ref":"Bonfire.Social.Likes.html#federation_module/0"},{"type":"function","doc":"Retrieves a Like edge between a subject and an object.","title":"Bonfire.Social.Likes.get/3","ref":"Bonfire.Social.Likes.html#get/3"},{"type":"function","doc":"- subject: The subject (usually a user) of the Like edge.\n  - object: The object that was liked.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Likes.get/3","ref":"Bonfire.Social.Likes.html#get/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.get(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, %Like{}}","title":"Examples - Bonfire.Social.Likes.get/3","ref":"Bonfire.Social.Likes.html#get/3-examples"},{"type":"function","doc":"Similar to `get/3`, but raises an error if the Like edge is not found.","title":"Bonfire.Social.Likes.get!/3","ref":"Bonfire.Social.Likes.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.get_or_create_emoji/2","ref":"Bonfire.Social.Likes.html#get_or_create_emoji/2"},{"type":"function","doc":"Records a like for an object.","title":"Bonfire.Social.Likes.like/3","ref":"Bonfire.Social.Likes.html#like/3"},{"type":"function","doc":"- liker: The user creating the like.\n  - object: The object to be liked.\n  - opts: Additional options for creating the like (optional).","title":"Parameters - Bonfire.Social.Likes.like/3","ref":"Bonfire.Social.Likes.html#like/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.like(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, %Like{}}","title":"Examples - Bonfire.Social.Likes.like/3","ref":"Bonfire.Social.Likes.html#like/3-examples"},{"type":"function","doc":"Checks if a user has liked an object.","title":"Bonfire.Social.Likes.liked?/2","ref":"Bonfire.Social.Likes.html#liked?/2"},{"type":"function","doc":"- user: The user to check.\n  - object: The object to check for likes.","title":"Parameters - Bonfire.Social.Likes.liked?/2","ref":"Bonfire.Social.Likes.html#liked?/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.liked?(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    true","title":"Examples - Bonfire.Social.Likes.liked?/2","ref":"Bonfire.Social.Likes.html#liked?/2-examples"},{"type":"function","doc":"Lists likes created by a specific user.","title":"Bonfire.Social.Likes.list_by/2","ref":"Bonfire.Social.Likes.html#list_by/2"},{"type":"function","doc":"- by_user: The user whose likes to list.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Likes.list_by/2","ref":"Bonfire.Social.Likes.html#list_by/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.list_by(%User{id: \"user123\"})\n    %{edges: [%Like{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Likes.list_by/2","ref":"Bonfire.Social.Likes.html#list_by/2-examples"},{"type":"function","doc":"List the current user's likes.","title":"Bonfire.Social.Likes.list_my/1","ref":"Bonfire.Social.Likes.html#list_my/1"},{"type":"function","doc":"- opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Likes.list_my/1","ref":"Bonfire.Social.Likes.html#list_my/1-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.list_my(current_user: %User{id: \"user123\"})\n    %{edges: [%Like{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Likes.list_my/1","ref":"Bonfire.Social.Likes.html#list_my/1-examples"},{"type":"function","doc":"Lists likers of a specific object or objects.","title":"Bonfire.Social.Likes.list_of/2","ref":"Bonfire.Social.Likes.html#list_of/2"},{"type":"function","doc":"- object: The object or objects to find likers for.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Likes.list_of/2","ref":"Bonfire.Social.Likes.html#list_of/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.list_of(%Post{id: \"post456\"})\n    %{edges: [%Like{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Likes.list_of/2","ref":"Bonfire.Social.Likes.html#list_of/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.list_paginated/2","ref":"Bonfire.Social.Likes.html#list_paginated/2"},{"type":"function","doc":"Creates a query for Like edges based on the given filters and options.","title":"Bonfire.Social.Likes.query/2","ref":"Bonfire.Social.Likes.html#query/2"},{"type":"function","doc":"- filters: A keyword list of filters to apply to the query.\n  - opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Likes.query/2","ref":"Bonfire.Social.Likes.html#query/2-parameters"},{"type":"function","doc":"iex> filters = [subjects: %User{id: \"user123\"}]\n    iex> opts = [limit: 10]\n    iex> Bonfire.Social.Likes.query(filters, opts)\n    #Ecto.Query<...>","title":"Examples - Bonfire.Social.Likes.query/2","ref":"Bonfire.Social.Likes.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.query_module/0","ref":"Bonfire.Social.Likes.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.schema_module/0","ref":"Bonfire.Social.Likes.html#schema_module/0"},{"type":"function","doc":"Removes a like for an object.","title":"Bonfire.Social.Likes.unlike/3","ref":"Bonfire.Social.Likes.html#unlike/3"},{"type":"function","doc":"- liker: The user removing the like.\n  - object: The object to be unliked.\n  - opts: Additional options (optional).","title":"Parameters - Bonfire.Social.Likes.unlike/3","ref":"Bonfire.Social.Likes.html#unlike/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Likes.unlike(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, nil}","title":"Examples - Bonfire.Social.Likes.unlike/3","ref":"Bonfire.Social.Likes.html#unlike/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Likes.LiveHandler","ref":"Bonfire.Social.Likes.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.LiveHandler.do_like/3","ref":"Bonfire.Social.Likes.LiveHandler.html#do_like/3"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.LiveHandler.handle_event/3","ref":"Bonfire.Social.Likes.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.LiveHandler.liker_count/1","ref":"Bonfire.Social.Likes.LiveHandler.html#liker_count/1"},{"type":"macro","doc":"","title":"Bonfire.Social.Likes.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Likes.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.LiveHandler.update_many/2","ref":"Bonfire.Social.Likes.LiveHandler.html#update_many/2"},{"type":"function","doc":"","title":"Bonfire.Social.Likes.LiveHandler.update_many_opts/1","ref":"Bonfire.Social.Likes.LiveHandler.html#update_many_opts/1"},{"type":"module","doc":"Handles pushing activities (via PubSub and/or email) to active feeds and notifications","title":"Bonfire.Social.LivePush","ref":"Bonfire.Social.LivePush.html"},{"type":"function","doc":"","title":"Bonfire.Social.LivePush.hide_activity/2","ref":"Bonfire.Social.LivePush.html#hide_activity/2"},{"type":"function","doc":"","title":"Bonfire.Social.LivePush.notify/2","ref":"Bonfire.Social.LivePush.html#notify/2"},{"type":"function","doc":"","title":"Bonfire.Social.LivePush.notify/4","ref":"Bonfire.Social.LivePush.html#notify/4"},{"type":"function","doc":"","title":"Bonfire.Social.LivePush.notify_of_message/4","ref":"Bonfire.Social.LivePush.html#notify_of_message/4"},{"type":"function","doc":"Sends a notification about an activity to a list of users, excluding the author/subject","title":"Bonfire.Social.LivePush.notify_users/4","ref":"Bonfire.Social.LivePush.html#notify_users/4"},{"type":"function","doc":"","title":"Bonfire.Social.LivePush.prepare_activity/2","ref":"Bonfire.Social.LivePush.html#prepare_activity/2"},{"type":"function","doc":"Receives an activity with a nested object, or vice versa, uses PubSub to pushes to feeds and optionally notifications","title":"Bonfire.Social.LivePush.push_activity/3","ref":"Bonfire.Social.LivePush.html#push_activity/3"},{"type":"function","doc":"Receives an activity *and* object, uses PubSub to pushes to feeds and optionally notifications, and returns an Activity.","title":"Bonfire.Social.LivePush.push_activity_object/4","ref":"Bonfire.Social.LivePush.html#push_activity_object/4"},{"type":"module","doc":"Generic helpers for querying and mutating objects.\n\nThis module provides functions for working with social objects, including:\n- Casting common associations when creating objects\n- Reading and querying objects\n- Deleting objects\n- Publishing and setting boundaries\n- Handling ActivityPub federation","title":"Bonfire.Social.Objects","ref":"Bonfire.Social.Objects.html"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.ap_maybe_delete/2","ref":"Bonfire.Social.Objects.html#ap_maybe_delete/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.ap_receive_activity/3","ref":"Bonfire.Social.Objects.html#ap_receive_activity/3"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.as_permitted_for/3","ref":"Bonfire.Social.Objects.html#as_permitted_for/3"},{"type":"function","doc":"Retrieves care closures for the given IDs.","title":"Bonfire.Social.Objects.care_closures/1","ref":"Bonfire.Social.Objects.html#care_closures/1"},{"type":"function","doc":"- `ids`: A list of IDs to find care closures for.","title":"Parameters - Bonfire.Social.Objects.care_closures/1","ref":"Bonfire.Social.Objects.html#care_closures/1-parameters"},{"type":"function","doc":"iex> care_closures([\"id1\", \"id2\"])","title":"Examples - Bonfire.Social.Objects.care_closures/1","ref":"Bonfire.Social.Objects.html#care_closures/1-examples"},{"type":"function","doc":"Retrieves a list of objects that are taken care of by the given caretaker IDs.","title":"Bonfire.Social.Objects.care_taken/1","ref":"Bonfire.Social.Objects.html#care_taken/1"},{"type":"function","doc":"- `ids`: A list of caretaker IDs.","title":"Parameters - Bonfire.Social.Objects.care_taken/1","ref":"Bonfire.Social.Objects.html#care_taken/1-parameters"},{"type":"function","doc":"iex> care_taken([\"caretaker1\", \"caretaker2\"])\n    [%Object{}, %Object{}]","title":"Examples - Bonfire.Social.Objects.care_taken/1","ref":"Bonfire.Social.Objects.html#care_taken/1-examples"},{"type":"function","doc":"Casts various attributes for an object changeset.\n\nHandles casting:\n- Creator\n- Caretaker\n- Threaded replies (when present)\n- Tags/Mentions (when present)\n- ACLs\n- Activity","title":"Bonfire.Social.Objects.cast/4","ref":"Bonfire.Social.Objects.html#cast/4"},{"type":"function","doc":"iex> cast(changeset, %{}, user, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Objects.cast/4","ref":"Bonfire.Social.Objects.html#cast/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.cast_acl/3","ref":"Bonfire.Social.Objects.html#cast_acl/3"},{"type":"function","doc":"Casts basic attributes for an object changeset.\n\nHandles casting:\n- Creator\n- Caretaker\n- ACLs","title":"Bonfire.Social.Objects.cast_basic/4","ref":"Bonfire.Social.Objects.html#cast_basic/4"},{"type":"function","doc":"iex> cast_basic(changeset, %{}, user, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Objects.cast_basic/4","ref":"Bonfire.Social.Objects.html#cast_basic/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.cast_caretaker/2","ref":"Bonfire.Social.Objects.html#cast_caretaker/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.cast_creator/2","ref":"Bonfire.Social.Objects.html#cast_creator/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.cast_creator_caretaker/2","ref":"Bonfire.Social.Objects.html#cast_creator_caretaker/2"},{"type":"function","doc":"Casts minimal attributes for an object changeset.\n\nHandles casting:\n- ACLs","title":"Bonfire.Social.Objects.cast_mini/4","ref":"Bonfire.Social.Objects.html#cast_mini/4"},{"type":"function","doc":"iex> cast_mini(changeset, %{}, user, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Objects.cast_mini/4","ref":"Bonfire.Social.Objects.html#cast_mini/4-examples"},{"type":"function","doc":"Casts attributes for publishing an object.\n\nHandles casting:\n- ACLs\n- Activity\n- Feed Publishes","title":"Bonfire.Social.Objects.cast_publish/4","ref":"Bonfire.Social.Objects.html#cast_publish/4"},{"type":"function","doc":"iex> cast_publish(changeset, %{}, user, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Objects.cast_publish/4","ref":"Bonfire.Social.Objects.html#cast_publish/4-examples"},{"type":"function","doc":"Casts the object sensitivity on a changeset.","title":"Bonfire.Social.Objects.cast_sensitivity/2","ref":"Bonfire.Social.Objects.html#cast_sensitivity/2"},{"type":"function","doc":"iex> cast_sensitivity(%Changeset{}, true)\n    %Changeset{}","title":"Examples - Bonfire.Social.Objects.cast_sensitivity/2","ref":"Bonfire.Social.Objects.html#cast_sensitivity/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.changeset_named/2","ref":"Bonfire.Social.Objects.html#changeset_named/2"},{"type":"function","doc":"Deletes an object if the current users (provided in opts) has permission to, along with related associations (such as mixins).","title":"Bonfire.Social.Objects.delete/2","ref":"Bonfire.Social.Objects.html#delete/2"},{"type":"function","doc":"iex> delete(%Object{}, current_user: me)\n    {:ok, %Object{}}","title":"Examples - Bonfire.Social.Objects.delete/2","ref":"Bonfire.Social.Objects.html#delete/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.delete_apply_error/2","ref":"Bonfire.Social.Objects.html#delete_apply_error/2"},{"type":"function","doc":"Deletes objects that are taken care of by the given main object(s).\n\nThis function recursively deletes caretakers and their objects, except for the original object (i.e if Alice is a user who takes care of some posts but also a group that in turn takes care of some posts or boosts, it will delete all of those except Alice herself).","title":"Bonfire.Social.Objects.delete_caretaken/1","ref":"Bonfire.Social.Objects.html#delete_caretaken/1"},{"type":"function","doc":"- `main`: The main object or list of objects to start the deletion from.","title":"Parameters - Bonfire.Social.Objects.delete_caretaken/1","ref":"Bonfire.Social.Objects.html#delete_caretaken/1-parameters"},{"type":"function","doc":"iex> delete_caretaken(%Object{id: \"main_id\"})\n    {:ok, [%Object{}, %Object{}]}","title":"Examples - Bonfire.Social.Objects.delete_caretaken/1","ref":"Bonfire.Social.Objects.html#delete_caretaken/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.do_delete/2","ref":"Bonfire.Social.Objects.html#do_delete/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.federation_module/0","ref":"Bonfire.Social.Objects.html#federation_module/0"},{"type":"function","doc":"Lists objects in a paginated manner.","title":"Bonfire.Social.Objects.list_paginated/2","ref":"Bonfire.Social.Objects.html#list_paginated/2"},{"type":"function","doc":"iex> list_paginated([object_types: :post], [])\n    %Page{}","title":"Examples - Bonfire.Social.Objects.list_paginated/2","ref":"Bonfire.Social.Objects.html#list_paginated/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.list_query/2","ref":"Bonfire.Social.Objects.html#list_query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.maybe_filter/3","ref":"Bonfire.Social.Objects.html#maybe_filter/3"},{"type":"function","doc":"Attempts a generic deletion of an object, to be used when no specific delete function is defined for a schema.","title":"Bonfire.Social.Objects.maybe_generic_delete/3","ref":"Bonfire.Social.Objects.html#maybe_generic_delete/3"},{"type":"function","doc":"- `type`: The type of the object to delete.\n- `object`: The object to delete.\n- `options`: A keyword list of options for the deletion.","title":"Parameters - Bonfire.Social.Objects.maybe_generic_delete/3","ref":"Bonfire.Social.Objects.html#maybe_generic_delete/3-parameters"},{"type":"function","doc":"iex> maybe_generic_delete(MyApp.SomeType, %MyApp.SomeType{}, [])\n    {:ok, %MyApp.SomeType{}}","title":"Examples - Bonfire.Social.Objects.maybe_generic_delete/3","ref":"Bonfire.Social.Objects.html#maybe_generic_delete/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.maybe_preload_activity_object/2","ref":"Bonfire.Social.Objects.html#maybe_preload_activity_object/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.maybe_unindex/1","ref":"Bonfire.Social.Objects.html#maybe_unindex/1"},{"type":"function","doc":"Gets the creator of an object (if preloaded)","title":"Bonfire.Social.Objects.object_creator/1","ref":"Bonfire.Social.Objects.html#object_creator/1"},{"type":"function","doc":"iex> object_creator(%Object{})\n    %User{}","title":"Examples - Bonfire.Social.Objects.object_creator/1","ref":"Bonfire.Social.Objects.html#object_creator/1-examples"},{"type":"function","doc":"Gets the permalink for an object.","title":"Bonfire.Social.Objects.permalink/1","ref":"Bonfire.Social.Objects.html#permalink/1"},{"type":"function","doc":"iex> permalink(%{canonical_uri: \"https://example.com/object/123\"})\n    \"https://example.com/object/123\"","title":"Examples - Bonfire.Social.Objects.permalink/1","ref":"Bonfire.Social.Objects.html#permalink/1-examples"},{"type":"function","doc":"Preloads the creator for an object.","title":"Bonfire.Social.Objects.preload_creator/1","ref":"Bonfire.Social.Objects.html#preload_creator/1"},{"type":"function","doc":"iex> preload_creator(%Object{})\n    %Object{}","title":"Examples - Bonfire.Social.Objects.preload_creator/1","ref":"Bonfire.Social.Objects.html#preload_creator/1-examples"},{"type":"function","doc":"Preloads the reply creator for an object.","title":"Bonfire.Social.Objects.preload_reply_creator/1","ref":"Bonfire.Social.Objects.html#preload_reply_creator/1"},{"type":"function","doc":"iex> preload_reply_creator(%Object{})\n    %Object{replied: %{reply_to: ...}}","title":"Examples - Bonfire.Social.Objects.preload_reply_creator/1","ref":"Bonfire.Social.Objects.html#preload_reply_creator/1-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.prepare_exclude_object_types/2","ref":"Bonfire.Social.Objects.html#prepare_exclude_object_types/2"},{"type":"function","doc":"Publishes an object.","title":"Bonfire.Social.Objects.publish/5","ref":"Bonfire.Social.Objects.html#publish/5"},{"type":"function","doc":"iex> publish(%User{}, :create, %Object{}, [], __MODULE__)\n    {:ok, %Activity{}}","title":"Examples - Bonfire.Social.Objects.publish/5","ref":"Bonfire.Social.Objects.html#publish/5-examples"},{"type":"function","doc":"Returns a basic query over undeleted pointable objects in the system,\noptionally limited to one or more types.","title":"Bonfire.Social.Objects.query_base/1","ref":"Bonfire.Social.Objects.html#query_base/1"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.query_maybe_time_limit/2","ref":"Bonfire.Social.Objects.html#query_maybe_time_limit/2"},{"type":"function","doc":"Reads an object by its ID.","title":"Bonfire.Social.Objects.read/2","ref":"Bonfire.Social.Objects.html#read/2"},{"type":"function","doc":"iex> read(\"123\", [])\n    {:ok, %{id: \"123\", activity: %{}}}","title":"Examples - Bonfire.Social.Objects.read/2","ref":"Bonfire.Social.Objects.html#read/2-examples"},{"type":"function","doc":"Resets the preset boundary for an object.","title":"Bonfire.Social.Objects.reset_preset_boundary/5","ref":"Bonfire.Social.Objects.html#reset_preset_boundary/5"},{"type":"function","doc":"iex> reset_preset_boundary(%User{}, %Object{}, \"public\", [], __MODULE__)\n    {:ok, %Boundary{}}","title":"Examples - Bonfire.Social.Objects.reset_preset_boundary/5","ref":"Bonfire.Social.Objects.html#reset_preset_boundary/5-examples"},{"type":"function","doc":"Runs an epic for a given type and options.","title":"Bonfire.Social.Objects.run_epic/3","ref":"Bonfire.Social.Objects.html#run_epic/3"},{"type":"function","doc":"- `type`: The type of epic to run.\n- `options`: A keyword list of options for the epic.\n- `on`: The key in the epic's assigns to return (default: `:object`).","title":"Parameters - Bonfire.Social.Objects.run_epic/3","ref":"Bonfire.Social.Objects.html#run_epic/3-parameters"},{"type":"function","doc":"iex> run_epic(:delete, [object: %Object{}])\n    {:ok, %Object{}}","title":"Examples - Bonfire.Social.Objects.run_epic/3","ref":"Bonfire.Social.Objects.html#run_epic/3-examples"},{"type":"function","doc":"Sets boundaries for an object.","title":"Bonfire.Social.Objects.set_boundaries/4","ref":"Bonfire.Social.Objects.html#set_boundaries/4"},{"type":"function","doc":"iex> set_boundaries(%User{}, %Object{}, [], __MODULE__)\n    [boundary: \"public\", to_circles: [], to_feeds: []]","title":"Examples - Bonfire.Social.Objects.set_boundaries/4","ref":"Bonfire.Social.Objects.html#set_boundaries/4-examples"},{"type":"function","doc":"Sets the name/title of an object.","title":"Bonfire.Social.Objects.set_name/3","ref":"Bonfire.Social.Objects.html#set_name/3"},{"type":"function","doc":"iex> set_name(\"123\", \"New Name\", [])\n    {:ok, %Object{id: \"123\", named: %{name: \"New Name\"}}}","title":"Examples - Bonfire.Social.Objects.set_name/3","ref":"Bonfire.Social.Objects.html#set_name/3-examples"},{"type":"function","doc":"Sets the sensitivity of an existing object.","title":"Bonfire.Social.Objects.set_sensitivity/2","ref":"Bonfire.Social.Objects.html#set_sensitivity/2"},{"type":"function","doc":"iex> set_sensitivity(%Object{sensitive: %{}}, true)\n    {:ok, %Object{}}","title":"Examples - Bonfire.Social.Objects.set_sensitivity/2","ref":"Bonfire.Social.Objects.html#set_sensitivity/2-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Objects.LiveHandler","ref":"Bonfire.Social.Objects.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.LiveHandler.handle_event/3","ref":"Bonfire.Social.Objects.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.LiveHandler.load_object_assigns/1","ref":"Bonfire.Social.Objects.LiveHandler.html#load_object_assigns/1"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.LiveHandler.load_object_assigns/2","ref":"Bonfire.Social.Objects.LiveHandler.html#load_object_assigns/2"},{"type":"function","doc":"","title":"Bonfire.Social.Objects.LiveHandler.not_found_fallback/3","ref":"Bonfire.Social.Objects.LiveHandler.html#not_found_fallback/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Objects.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Objects.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Mutate or query pins (which make an activity or object appear at the beginning of feeds or other lists).\n\nThis module provides functionality to manage and query pins, including creating, deleting, and listing pins. \n\nPins are implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions)","title":"Bonfire.Social.Pins","ref":"Bonfire.Social.Pins.html"},{"type":"function","doc":"Publishes an ActivityPub activity for a pin.","title":"Bonfire.Social.Pins.ap_publish_activity/3","ref":"Bonfire.Social.Pins.html#ap_publish_activity/3"},{"type":"function","doc":"- subject: The subject of the pin activity.\n  - verb: The verb of the activity (not used - currently pins are federated out as likes)\n  - pin: The `Pin` object.","title":"Parameters - Bonfire.Social.Pins.ap_publish_activity/3","ref":"Bonfire.Social.Pins.html#ap_publish_activity/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.ap_publish_activity(%User{id: \"user123\"}, :create, %Pin{})\n    {:ok, %ActivityPub.Object{}}","title":"Examples - Bonfire.Social.Pins.ap_publish_activity/3","ref":"Bonfire.Social.Pins.html#ap_publish_activity/3-examples"},{"type":"function","doc":"Lists pins of a specific object.","title":"Bonfire.Social.Pins.by_pinned/2","ref":"Bonfire.Social.Pins.html#by_pinned/2"},{"type":"function","doc":"- object: The object that was pinned.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Pins.by_pinned/2","ref":"Bonfire.Social.Pins.html#by_pinned/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.by_pinned(%Post{id: \"post456\"})\n    [%Pin{}, ...]","title":"Examples - Bonfire.Social.Pins.by_pinned/2","ref":"Bonfire.Social.Pins.html#by_pinned/2-examples"},{"type":"function","doc":"Lists pins by a specific subject.","title":"Bonfire.Social.Pins.by_pinner/2","ref":"Bonfire.Social.Pins.html#by_pinner/2"},{"type":"function","doc":"- subject: The subject (usually a user) who created the pins.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Pins.by_pinner/2","ref":"Bonfire.Social.Pins.html#by_pinner/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.by_pinner(%User{id: \"user123\"})\n    [%Pin{}, ...]","title":"Examples - Bonfire.Social.Pins.by_pinner/2","ref":"Bonfire.Social.Pins.html#by_pinner/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.federation_module/0","ref":"Bonfire.Social.Pins.html#federation_module/0"},{"type":"function","doc":"Retrieves a Pin edge between a subject and an object.","title":"Bonfire.Social.Pins.get/3","ref":"Bonfire.Social.Pins.html#get/3"},{"type":"function","doc":"- subject: The subject (usually a user) of the Pin edge.\n  - object: The object that was pinned.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Pins.get/3","ref":"Bonfire.Social.Pins.html#get/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.get(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, %Pin{}}","title":"Examples - Bonfire.Social.Pins.get/3","ref":"Bonfire.Social.Pins.html#get/3-examples"},{"type":"function","doc":"Similar to `get/3`, but raises an error if the Pin edge is not found.","title":"Bonfire.Social.Pins.get!/3","ref":"Bonfire.Social.Pins.html#get!/3"},{"type":"function","doc":"Lists pins by a specific user.","title":"Bonfire.Social.Pins.list_by/2","ref":"Bonfire.Social.Pins.html#list_by/2"},{"type":"function","doc":"- by_user: The user whose pins to list.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Pins.list_by/2","ref":"Bonfire.Social.Pins.html#list_by/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.list_by(%User{id: \"user123\"})\n    %{edges: [%Pin{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Pins.list_by/2","ref":"Bonfire.Social.Pins.html#list_by/2-examples"},{"type":"function","doc":"Lists pins for the instance.","title":"Bonfire.Social.Pins.list_instance_pins/1","ref":"Bonfire.Social.Pins.html#list_instance_pins/1"},{"type":"function","doc":"- opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Pins.list_instance_pins/1","ref":"Bonfire.Social.Pins.html#list_instance_pins/1-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.list_instance_pins(limit: 10)\n    %{edges: [%Pin{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Pins.list_instance_pins/1","ref":"Bonfire.Social.Pins.html#list_instance_pins/1-examples"},{"type":"function","doc":"Lists pins for the current user.","title":"Bonfire.Social.Pins.list_my/1","ref":"Bonfire.Social.Pins.html#list_my/1"},{"type":"function","doc":"- opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Pins.list_my/1","ref":"Bonfire.Social.Pins.html#list_my/1-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.list_my(current_user: %User{id: \"user123\"})\n    %{edges: [%Pin{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Pins.list_my/1","ref":"Bonfire.Social.Pins.html#list_my/1-examples"},{"type":"function","doc":"Lists pinners of a specific object or objects.","title":"Bonfire.Social.Pins.list_of/2","ref":"Bonfire.Social.Pins.html#list_of/2"},{"type":"function","doc":"- object: The object or objects to find pinners for.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Pins.list_of/2","ref":"Bonfire.Social.Pins.html#list_of/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.list_of(%Post{id: \"post456\"})\n    %{edges: [%Pin{}, ...], page_info: %{}}","title":"Examples - Bonfire.Social.Pins.list_of/2","ref":"Bonfire.Social.Pins.html#list_of/2-examples"},{"type":"function","doc":"Creates a pin for an object.","title":"Bonfire.Social.Pins.pin/4","ref":"Bonfire.Social.Pins.html#pin/4"},{"type":"function","doc":"- pinner: The user creating the pin.\n  - object: The object to be pinned.\n  - scope: The scope of the pin (eg. `:instance`, optional).\n  - opts: Additional options for creating the pin (optional).","title":"Parameters - Bonfire.Social.Pins.pin/4","ref":"Bonfire.Social.Pins.html#pin/4-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.pin(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, %Pin{}}\n\n    iex> Bonfire.Social.Pins.pin(%User{id: \"user123\"}, %Post{id: \"post456\"}, :instance)\n    {:ok, %Pin{}}","title":"Examples - Bonfire.Social.Pins.pin/4","ref":"Bonfire.Social.Pins.html#pin/4-examples"},{"type":"function","doc":"Checks if an object is pinned by the instance.","title":"Bonfire.Social.Pins.pinned?/2","ref":"Bonfire.Social.Pins.html#pinned?/2"},{"type":"function","doc":"- scope: The scope to check for pinning (eg. `:instance` or a user)\n  - object: The object to check for pinning.","title":"Parameters - Bonfire.Social.Pins.pinned?/2","ref":"Bonfire.Social.Pins.html#pinned?/2-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.pinned?(:instance, %Post{id: \"post123\"})\n    true\n\n    iex> Bonfire.Social.Pins.pinned?(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    false","title":"Examples - Bonfire.Social.Pins.pinned?/2","ref":"Bonfire.Social.Pins.html#pinned?/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.query/2","ref":"Bonfire.Social.Pins.html#query/2"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.query_module/0","ref":"Bonfire.Social.Pins.html#query_module/0"},{"type":"function","doc":"Sets the rank/position of a pin within a specific scope.","title":"Bonfire.Social.Pins.rank_pin/3","ref":"Bonfire.Social.Pins.html#rank_pin/3"},{"type":"function","doc":"- pin: The pin to be ranked.\n  - scope: The scope for ranking (eg. `:instance`).\n  - position: The desired position/rank for the pin.","title":"Parameters - Bonfire.Social.Pins.rank_pin/3","ref":"Bonfire.Social.Pins.html#rank_pin/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.rank_pin(\"pin123\", :instance, 1)\n    {:ok, %Bonfire.Data.Assort.Ranked{}}\n\n    iex> Bonfire.Social.Pins.rank_pin(\"pin123\", %User{id: \"user456\"}, 2)\n    {:ok, %Bonfire.Data.Assort.Ranked{}}","title":"Examples - Bonfire.Social.Pins.rank_pin/3","ref":"Bonfire.Social.Pins.html#rank_pin/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.schema_module/0","ref":"Bonfire.Social.Pins.html#schema_module/0"},{"type":"function","doc":"Removes a pin for an object.","title":"Bonfire.Social.Pins.unpin/3","ref":"Bonfire.Social.Pins.html#unpin/3"},{"type":"function","doc":"- user: The user removing the pin.\n  - object: The object to be unpinned.\n  - scope: The scope of the pin (eg. `:instance`, optional).","title":"Parameters - Bonfire.Social.Pins.unpin/3","ref":"Bonfire.Social.Pins.html#unpin/3-parameters"},{"type":"function","doc":"iex> Bonfire.Social.Pins.unpin(%User{id: \"user123\"}, %Post{id: \"post456\"})\n    {:ok, nil}\n\n    iex> Bonfire.Social.Pins.unpin(%User{id: \"user123\"}, %Post{id: \"post456\"}, :instance)\n    {:ok, nil}","title":"Examples - Bonfire.Social.Pins.unpin/3","ref":"Bonfire.Social.Pins.html#unpin/3-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Pins.LiveHandler","ref":"Bonfire.Social.Pins.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.LiveHandler.do_pin/3","ref":"Bonfire.Social.Pins.LiveHandler.html#do_pin/3"},{"type":"function","doc":"","title":"Bonfire.Social.Pins.LiveHandler.handle_event/3","ref":"Bonfire.Social.Pins.LiveHandler.html#handle_event/3"},{"type":"macro","doc":"","title":"Bonfire.Social.Pins.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Pins.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Query, manipulate, and federate post contents. See also `Bonfire.Social.Posts` for directly handling posts.\n\nContext for `Bonfire.Data.Social.PostContent` which has the following fields:\n- name (eg. title)\n- summary (eg. description)\n- html_body (NOTE: can also contain markdown or plaintext)","title":"Bonfire.Social.PostContents","ref":"Bonfire.Social.PostContents.html"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.all_text_content/1","ref":"Bonfire.Social.PostContents.html#all_text_content/1"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.ap_receive_activity/3","ref":"Bonfire.Social.PostContents.html#ap_receive_activity/3"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.ap_receive_attrs_prepare/4","ref":"Bonfire.Social.PostContents.html#ap_receive_attrs_prepare/4"},{"type":"function","doc":"Returns the base query for post contents.","title":"Bonfire.Social.PostContents.base_query/0","ref":"Bonfire.Social.PostContents.html#base_query/0"},{"type":"function","doc":"iex> Bonfire.Social.PostContents.base_query()\n    #Ecto.Query","title":"Examples - Bonfire.Social.PostContents.base_query/0","ref":"Bonfire.Social.PostContents.html#base_query/0-examples"},{"type":"function","doc":"Given a changeset, post content attributes, creator, boundary and options, returns a changeset prepared with relevant attributes and associations.","title":"Bonfire.Social.PostContents.cast/5","ref":"Bonfire.Social.PostContents.html#cast/5"},{"type":"function","doc":"iex> attrs = %{name: \"Test Post\", html_body: \"Content\"}\n    iex> creator = %Bonfire.Data.Identity.User{id: \"01FXYZ123ABC\"}\n    iex> boundary = \"public\"\n    iex> opts = []\n    iex> changeset = %Ecto.Changeset{}\n    iex> Bonfire.Social.PostContents.cast(changeset, attrs, creator, boundary, opts)\n    #Ecto.Changeset<...>","title":"Examples - Bonfire.Social.PostContents.cast/5","ref":"Bonfire.Social.PostContents.html#cast/5-examples"},{"type":"function","doc":"Creates a changeset for a PostContent struct.","title":"Bonfire.Social.PostContents.changeset/2","ref":"Bonfire.Social.PostContents.html#changeset/2"},{"type":"function","doc":"iex> attrs = %{name: \"Test Post\", html_body: \"Content\"}\n    iex> Bonfire.Social.PostContents.changeset(%Bonfire.Data.Social.PostContent{}, attrs)\n    #Ecto.Changeset<...>","title":"Examples - Bonfire.Social.PostContents.changeset/2","ref":"Bonfire.Social.PostContents.html#changeset/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.diff/2","ref":"Bonfire.Social.PostContents.html#diff/2"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.edit/3","ref":"Bonfire.Social.PostContents.html#edit/3"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.editor_output_content_type/1","ref":"Bonfire.Social.PostContents.html#editor_output_content_type/1"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.federation_module/0","ref":"Bonfire.Social.PostContents.html#federation_module/0"},{"type":"function","doc":"Given a post content ID, returns the corresponding post content.","title":"Bonfire.Social.PostContents.get/2","ref":"Bonfire.Social.PostContents.html#get/2"},{"type":"function","doc":"iex> Bonfire.Social.PostContents.get(\"01FXYZ123ABC\")\n    %Bonfire.Data.Social.PostContent{id: \"01FXYZ123ABC\", ...}","title":"Examples - Bonfire.Social.PostContents.get/2","ref":"Bonfire.Social.PostContents.html#get/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.get_versions/2","ref":"Bonfire.Social.PostContents.html#get_versions/2"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.get_versions_diffed/2","ref":"Bonfire.Social.PostContents.html#get_versions_diffed/2"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.indexing_object_format/1","ref":"Bonfire.Social.PostContents.html#indexing_object_format/1"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.maybe_detect_languages/2","ref":"Bonfire.Social.PostContents.html#maybe_detect_languages/2"},{"type":"function","doc":"Given post content attributes, creator, boundary, and options, prepares the post contents for processing by detecting languages, mentions, hashtags, and urls.","title":"Bonfire.Social.PostContents.maybe_prepare_contents/4","ref":"Bonfire.Social.PostContents.html#maybe_prepare_contents/4"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.merge_with_body_or_nil/2","ref":"Bonfire.Social.PostContents.html#merge_with_body_or_nil/2"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.no_known_output/2","ref":"Bonfire.Social.PostContents.html#no_known_output/2"},{"type":"function","doc":"Given a set of filters, returns a single post content matching those filters.","title":"Bonfire.Social.PostContents.one/2","ref":"Bonfire.Social.PostContents.html#one/2"},{"type":"function","doc":"iex> Bonfire.Social.PostContents.one(%{name: \"Test Post\"})\n    %Bonfire.Data.Social.PostContent{name: \"Test Post\", ...}","title":"Examples - Bonfire.Social.PostContents.one/2","ref":"Bonfire.Social.PostContents.html#one/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.prepare_text/3","ref":"Bonfire.Social.PostContents.html#prepare_text/3"},{"type":"function","doc":"Given a set of filters, returns an Ecto.Query for matching post contents.","title":"Bonfire.Social.PostContents.query/2","ref":"Bonfire.Social.PostContents.html#query/2"},{"type":"function","doc":"iex> Bonfire.Social.PostContents.query(%{name: \"Test Post\"})\n    #Ecto.Query","title":"Examples - Bonfire.Social.PostContents.query/2","ref":"Bonfire.Social.PostContents.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.query_base/0","ref":"Bonfire.Social.PostContents.html#query_base/0"},{"type":"function","doc":"Performs a search query on post contents based on the given text.","title":"Bonfire.Social.PostContents.search_query/2","ref":"Bonfire.Social.PostContents.html#search_query/2"},{"type":"function","doc":"iex> Bonfire.Social.PostContents.search_query(\"test\", %{})\n    #Ecto.Query","title":"Examples - Bonfire.Social.PostContents.search_query/2","ref":"Bonfire.Social.PostContents.html#search_query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.PostContents.versioning_enabled?/1","ref":"Bonfire.Social.PostContents.html#versioning_enabled?/1"},{"type":"module","doc":"Handles social requests (e.g. follows requests), including creating, accepting, ignoring, and managing requests.","title":"Bonfire.Social.Requests","ref":"Bonfire.Social.Requests.html"},{"type":"function","doc":"Accepts a request.","title":"Bonfire.Social.Requests.accept/2","ref":"Bonfire.Social.Requests.html#accept/2"},{"type":"function","doc":"iex> accept(request, opts)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.accept/2","ref":"Bonfire.Social.Requests.html#accept/2-examples"},{"type":"function","doc":"Retrieves all requests by object.","title":"Bonfire.Social.Requests.all_by_object/3","ref":"Bonfire.Social.Requests.html#all_by_object/3"},{"type":"function","doc":"iex> all_by_object(user, type, opts)\n    [{:ok, request}]","title":"Examples - Bonfire.Social.Requests.all_by_object/3","ref":"Bonfire.Social.Requests.html#all_by_object/3-examples"},{"type":"function","doc":"Retrieves all requests by subject.","title":"Bonfire.Social.Requests.all_by_subject/3","ref":"Bonfire.Social.Requests.html#all_by_subject/3"},{"type":"function","doc":"iex> all_by_subject(user, type, opts)\n    [{:ok, request}]","title":"Examples - Bonfire.Social.Requests.all_by_subject/3","ref":"Bonfire.Social.Requests.html#all_by_subject/3-examples"},{"type":"function","doc":"Retrieves all request objects by subject.","title":"Bonfire.Social.Requests.all_objects_by_subject/3","ref":"Bonfire.Social.Requests.html#all_objects_by_subject/3"},{"type":"function","doc":"iex> all_objects_by_subject(user, type, opts)\n    [object]","title":"Examples - Bonfire.Social.Requests.all_objects_by_subject/3","ref":"Bonfire.Social.Requests.html#all_objects_by_subject/3-examples"},{"type":"function","doc":"Retrieves all requested outboxes by user and type.","title":"Bonfire.Social.Requests.all_requested_outboxes/3","ref":"Bonfire.Social.Requests.html#all_requested_outboxes/3"},{"type":"function","doc":"iex> all_requested_outboxes(user, type, opts)\n    [outbox_id]","title":"Examples - Bonfire.Social.Requests.all_requested_outboxes/3","ref":"Bonfire.Social.Requests.html#all_requested_outboxes/3-examples"},{"type":"function","doc":"Retrieves all subjects by object.","title":"Bonfire.Social.Requests.all_subjects_by_object/3","ref":"Bonfire.Social.Requests.html#all_subjects_by_object/3"},{"type":"function","doc":"iex> all_subjects_by_object(user, type, opts)\n    [subject]","title":"Examples - Bonfire.Social.Requests.all_subjects_by_object/3","ref":"Bonfire.Social.Requests.html#all_subjects_by_object/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.ap_publish_activity/3","ref":"Bonfire.Social.Requests.html#ap_publish_activity/3"},{"type":"function","doc":"Checks if a request exists.","title":"Bonfire.Social.Requests.exists?/4","ref":"Bonfire.Social.Requests.html#exists?/4"},{"type":"function","doc":"iex> exists?(subject, Follow, object, opts)\n    true","title":"Examples - Bonfire.Social.Requests.exists?/4","ref":"Bonfire.Social.Requests.html#exists?/4-examples"},{"type":"function","doc":"Retrieves a request by filters.","title":"Bonfire.Social.Requests.get/2","ref":"Bonfire.Social.Requests.html#get/2"},{"type":"function","doc":"iex> get(filters, opts)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.get/2","ref":"Bonfire.Social.Requests.html#get/2-examples"},{"type":"function","doc":"Retrieves a request.","title":"Bonfire.Social.Requests.get/4","ref":"Bonfire.Social.Requests.html#get/4"},{"type":"function","doc":"iex> get(subject, Follow, object, opts)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.get/4","ref":"Bonfire.Social.Requests.html#get/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.get!/4","ref":"Bonfire.Social.Requests.html#get!/4"},{"type":"function","doc":"Ignores a request.","title":"Bonfire.Social.Requests.ignore/2","ref":"Bonfire.Social.Requests.html#ignore/2"},{"type":"function","doc":"iex> ignore(request, opts)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.ignore/2","ref":"Bonfire.Social.Requests.html#ignore/2-examples"},{"type":"function","doc":"Lists all requests made by the current user.","title":"Bonfire.Social.Requests.list_my_requested/1","ref":"Bonfire.Social.Requests.html#list_my_requested/1"},{"type":"function","doc":"iex> list_my_requested(opts)\n    [{:ok, request}]","title":"Examples - Bonfire.Social.Requests.list_my_requested/1","ref":"Bonfire.Social.Requests.html#list_my_requested/1-examples"},{"type":"function","doc":"Lists all requesters for the current user.","title":"Bonfire.Social.Requests.list_my_requesters/1","ref":"Bonfire.Social.Requests.html#list_my_requesters/1"},{"type":"function","doc":"iex> list_my_requesters(opts)\n    [{:ok, requester}]","title":"Examples - Bonfire.Social.Requests.list_my_requesters/1","ref":"Bonfire.Social.Requests.html#list_my_requesters/1-examples"},{"type":"function","doc":"Lists all requests made by the given user.","title":"Bonfire.Social.Requests.list_requested/2","ref":"Bonfire.Social.Requests.html#list_requested/2"},{"type":"function","doc":"iex> list_requested(user, opts)\n    [{:ok, request}]","title":"Examples - Bonfire.Social.Requests.list_requested/2","ref":"Bonfire.Social.Requests.html#list_requested/2-examples"},{"type":"function","doc":"Lists all requesters for the given user.","title":"Bonfire.Social.Requests.list_requesters/2","ref":"Bonfire.Social.Requests.html#list_requesters/2"},{"type":"function","doc":"iex> list_requesters(user, opts)\n    [{:ok, requester}]","title":"Examples - Bonfire.Social.Requests.list_requesters/2","ref":"Bonfire.Social.Requests.html#list_requesters/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.many/2","ref":"Bonfire.Social.Requests.html#many/2"},{"type":"function","doc":"Prepares a DB query based on filters and type.","title":"Bonfire.Social.Requests.query/3","ref":"Bonfire.Social.Requests.html#query/3"},{"type":"function","doc":"iex> query(filters, type, opts)\n    {:ok, query}","title":"Examples - Bonfire.Social.Requests.query/3","ref":"Bonfire.Social.Requests.html#query/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.query_module/0","ref":"Bonfire.Social.Requests.html#query_module/0"},{"type":"function","doc":"Requests to do something, and federates it.","title":"Bonfire.Social.Requests.request/4","ref":"Bonfire.Social.Requests.html#request/4"},{"type":"function","doc":"iex> request(subject, Follow, object)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.request/4","ref":"Bonfire.Social.Requests.html#request/4-examples"},{"type":"function","doc":"Retrieves a request.","title":"Bonfire.Social.Requests.requested/2","ref":"Bonfire.Social.Requests.html#requested/2"},{"type":"function","doc":"iex> requested(request, current_user: me)\n    {:ok, request}","title":"Examples - Bonfire.Social.Requests.requested/2","ref":"Bonfire.Social.Requests.html#requested/2-examples"},{"type":"function","doc":"Checks if a request has been made.","title":"Bonfire.Social.Requests.requested?/3","ref":"Bonfire.Social.Requests.html#requested?/3"},{"type":"function","doc":"iex> requested?(subject, type, object)\n    true","title":"Examples - Bonfire.Social.Requests.requested?/3","ref":"Bonfire.Social.Requests.html#requested?/3-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.schema_module/0","ref":"Bonfire.Social.Requests.html#schema_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Requests.unrequest/3","ref":"Bonfire.Social.Requests.html#unrequest/3"},{"type":"module","doc":"","title":"Bonfire.Social.RuntimeConfig","ref":"Bonfire.Social.RuntimeConfig.html"},{"type":"function","doc":"","title":"Bonfire.Social.RuntimeConfig.config/0","ref":"Bonfire.Social.RuntimeConfig.html#config/0"},{"type":"function","doc":"","title":"Bonfire.Social.RuntimeConfig.config_module/0","ref":"Bonfire.Social.RuntimeConfig.html#config_module/0"},{"type":"module","doc":"Track seen/unseen status of things (usually `Activities`).\n\nThis module implements functionality to manage the seen/unseen status of objects (similar to read/unread status in other apps, but only indicates that it was displayed in a feed or other listing for the user, not that they actually read it). \n\nSeen is implemented on top of the `Bonfire.Data.Edges.Edge` schema (see `Bonfire.Social.Edges` for shared functions).","title":"Bonfire.Social.Seen","ref":"Bonfire.Social.Seen.html"},{"type":"function","doc":"Retrieves a Seen edge between a subject and an object.","title":"Bonfire.Social.Seen.get/3","ref":"Bonfire.Social.Seen.html#get/3"},{"type":"function","doc":"- subject: The subject (usually a user) of the Seen edge.\n  - object: The object that was seen.\n  - opts: Additional options for the query (optional).","title":"Parameters - Bonfire.Social.Seen.get/3","ref":"Bonfire.Social.Seen.html#get/3-parameters"},{"type":"function","doc":"iex> subject = %User{id: \"user123\"}\n    iex> object = %Post{id: \"post456\"}\n    iex> Bonfire.Social.Seen.get(subject, object)\n    {:ok, %Seen{}}","title":"Examples - Bonfire.Social.Seen.get/3","ref":"Bonfire.Social.Seen.html#get/3-examples"},{"type":"function","doc":"Similar to `get/3`, but raises an error if the Seen edge is not found.","title":"Bonfire.Social.Seen.get!/3","ref":"Bonfire.Social.Seen.html#get!/3"},{"type":"function","doc":"","title":"Bonfire.Social.Seen.last_date/2","ref":"Bonfire.Social.Seen.html#last_date/2"},{"type":"function","doc":"Marks an object as seen by a user.","title":"Bonfire.Social.Seen.mark_seen/3","ref":"Bonfire.Social.Seen.html#mark_seen/3"},{"type":"function","doc":"- subject: The user marking the object as seen.\n  - object: The object(s) or ID(s) being marked as seen.","title":"Parameters - Bonfire.Social.Seen.mark_seen/3","ref":"Bonfire.Social.Seen.html#mark_seen/3-parameters"},{"type":"function","doc":"iex> user = %User{id: \"user123\"}\n    iex> object = %Post{id: \"post456\"}\n    iex> Bonfire.Social.Seen.mark_seen(user, object)\n    {:ok, %Seen{}}\n\n    iex> Bonfire.Social.Seen.mark_seen(user, \"456\")\n    {:ok, %Seen{}}","title":"Examples - Bonfire.Social.Seen.mark_seen/3","ref":"Bonfire.Social.Seen.html#mark_seen/3-examples"},{"type":"function","doc":"Marks an object as unseen by a user.","title":"Bonfire.Social.Seen.mark_unseen/2","ref":"Bonfire.Social.Seen.html#mark_unseen/2"},{"type":"function","doc":"- subject: The user marking the object as unseen.\n- object: The object or ID being marked as unseen.","title":"Parameters - Bonfire.Social.Seen.mark_unseen/2","ref":"Bonfire.Social.Seen.html#mark_unseen/2-parameters"},{"type":"function","doc":"iex> user = %User{id: \"user123\"}\niex> object = %Post{id: \"post456\"}\niex> Bonfire.Social.Seen.mark_unseen(user, object)\n{:ok, nil}\n\niex> Bonfire.Social.Seen.mark_unseen(user, \"456\")","title":"Examples - Bonfire.Social.Seen.mark_unseen/2","ref":"Bonfire.Social.Seen.html#mark_unseen/2-examples"},{"type":"function","doc":"Creates a query for Seen edges based on the given filters and options.","title":"Bonfire.Social.Seen.query/2","ref":"Bonfire.Social.Seen.html#query/2"},{"type":"function","doc":"- filters: A keyword list of filters to apply to the query.\n  - opts: Additional options for the query.","title":"Parameters - Bonfire.Social.Seen.query/2","ref":"Bonfire.Social.Seen.html#query/2-parameters"},{"type":"function","doc":"iex> filters = [subjects: %User{id: \"123\"}]\n    iex> opts = [limit: 10]\n    iex> Bonfire.Social.Seen.query(filters, opts)\n    #Ecto.Query<...>","title":"Examples - Bonfire.Social.Seen.query/2","ref":"Bonfire.Social.Seen.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Seen.query_module/0","ref":"Bonfire.Social.Seen.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Social.Seen.schema_module/0","ref":"Bonfire.Social.Seen.html#schema_module/0"},{"type":"function","doc":"Checks if a user has seen an object.","title":"Bonfire.Social.Seen.seen?/2","ref":"Bonfire.Social.Seen.html#seen?/2"},{"type":"function","doc":"- user: The user to check.\n  - object: The object to check if seen.","title":"Parameters - Bonfire.Social.Seen.seen?/2","ref":"Bonfire.Social.Seen.html#seen?/2-parameters"},{"type":"function","doc":"iex> user = %User{id: \"user123\"}\n    iex> object = %Post{id: \"post456\"}\n    iex> Bonfire.Social.Seen.seen?(user, object)\n    true","title":"Examples - Bonfire.Social.Seen.seen?/2","ref":"Bonfire.Social.Seen.html#seen?/2-examples"},{"type":"module","doc":"Helpers for tagging things. Mostly wrappers around functions in `Bonfire.Tag` and `Bonfire.Classify` extensions.\n\nThis module provides functionality for processing tags, handling categories, and auto-boosting content.","title":"Bonfire.Social.Tags","ref":"Bonfire.Social.Tags.html"},{"type":"function","doc":"Auto-boosts an object to some categories' feed.","title":"Bonfire.Social.Tags.auto_boost/2","ref":"Bonfire.Social.Tags.html#auto_boost/2"},{"type":"function","doc":"iex> auto_boost([%Bonfire.Classify.Category{id: \"123\"}], %Post{id: \"456\"})\n    :ok","title":"Examples - Bonfire.Social.Tags.auto_boost/2","ref":"Bonfire.Social.Tags.html#auto_boost/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Tags.indexing_format_tags/1","ref":"Bonfire.Social.Tags.html#indexing_format_tags/1"},{"type":"function","doc":"Attempts to auto-boost an object to categories, based on which ones a user has permission to publish to.","title":"Bonfire.Social.Tags.maybe_auto_boost/3","ref":"Bonfire.Social.Tags.html#maybe_auto_boost/3"},{"type":"function","doc":"iex> maybe_auto_boost(%User{}, [%Bonfire.Classify.Category{id: \"123\"}], %Post{id: \"456\"})\n    :ok","title":"Examples - Bonfire.Social.Tags.maybe_auto_boost/3","ref":"Bonfire.Social.Tags.html#maybe_auto_boost/3-examples"},{"type":"function","doc":"Filters a list of categories, returning those that are auto-boostable for a user.","title":"Bonfire.Social.Tags.maybe_boostable_categories/2","ref":"Bonfire.Social.Tags.html#maybe_boostable_categories/2"},{"type":"function","doc":"iex> maybe_boostable_categories(%User{}, [%Bonfire.Classify.Category{id: \"123\"}])\n    [%Bonfire.Classify.Category{id: \"123\", tree: nil}]","title":"Examples - Bonfire.Social.Tags.maybe_boostable_categories/2","ref":"Bonfire.Social.Tags.html#maybe_boostable_categories/2-examples"},{"type":"function","doc":"Casts tags if the Bonfire.Tag module is enabled for the creator.","title":"Bonfire.Social.Tags.maybe_cast/4","ref":"Bonfire.Social.Tags.html#maybe_cast/4"},{"type":"function","doc":"iex> maybe_cast(%Ecto.Changeset{}, %{tags: [\"tag1\", \"tag2\"]}, %User{}, [])\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Tags.maybe_cast/4","ref":"Bonfire.Social.Tags.html#maybe_cast/4-examples"},{"type":"function","doc":"Processes text to extract mentions, hashtags, and URLs if the Bonfire.Tag module is enabled.","title":"Bonfire.Social.Tags.maybe_process/3","ref":"Bonfire.Social.Tags.html#maybe_process/3"},{"type":"function","doc":"iex> maybe_process(%User{}, \"Hello @user #hashtag https://example.com\", [])\n    {:ok, %{text: \"Hello @user #hashtag https://example.com\", mentions: [], hashtags: [], urls: []}}","title":"Examples - Bonfire.Social.Tags.maybe_process/3","ref":"Bonfire.Social.Tags.html#maybe_process/3-examples"},{"type":"module","doc":"Handle mutating and querying discussion threads and replies.\n\nProvides functionality for managing threaded discussions, including creating replies, querying threads, and handling participants.\n\nIt is the context module for `Bonfire.Data.Social.Replied` which contains these fields:\n- id: object \n- reply_to: what object or activity are we replying to\n- thread: what discussion thread we're in, if any (usually same as the ID of the original object that started the thread)\n- direct_replies_count: number of direct replies to this object (automatically counted and updated)\n- nested_replies_count: number of nested replies to this object and any replies to it (automatically aggregated, counted and updated)\n- total_replies_count: direct replies + nested replies (automatically summed)\n- path: breadcrumbs leading from the `reply_to` all the way to the original object that started the thread. Powered by `EctoMaterializedPath`.","title":"Bonfire.Social.Threads","ref":"Bonfire.Social.Threads.html"},{"type":"function","doc":"Prepares a thread or reply for federation with ActivityPub.","title":"Bonfire.Social.Threads.ap_prepare/2","ref":"Bonfire.Social.Threads.html#ap_prepare/2"},{"type":"function","doc":"- `object_or_thread_or_reply_to_id`: The object, thread, or reply ID\n- `key`: The key to use for preparation (`:thread_id` or `:reply_to_id`, default is `:thread_id`)","title":"Parameters - Bonfire.Social.Threads.ap_prepare/2","ref":"Bonfire.Social.Threads.html#ap_prepare/2-parameters"},{"type":"function","doc":"iex> ap_prepare(\"thread_123\")\n    \"https://example.com/ap/objects/thread_123\"","title":"Examples - Bonfire.Social.Threads.ap_prepare/2","ref":"Bonfire.Social.Threads.html#ap_prepare/2-examples"},{"type":"function","doc":"Arranges replies. \n\nTODOC: how is it different than `arrange_replies_tree/2`?","title":"Bonfire.Social.Threads.arrange_replies/2","ref":"Bonfire.Social.Threads.html#arrange_replies/2"},{"type":"function","doc":"- `replies`: List of replies\n- `opts`: Arrangement options","title":"Parameters - Bonfire.Social.Threads.arrange_replies/2","ref":"Bonfire.Social.Threads.html#arrange_replies/2-parameters"},{"type":"function","doc":"iex> arrange_replies([%{id: \"1\"}, %{id: \"2\", path: [\"1\"]}])\n    %{\"1\" => %{id: \"1\", children: %{\"2\" => %{id: \"2\", path: [\"1\"]}}}}","title":"Examples - Bonfire.Social.Threads.arrange_replies/2","ref":"Bonfire.Social.Threads.html#arrange_replies/2-examples"},{"type":"function","doc":"Arranges replies into a tree structure.\n\nPowered by https://github.com/bonfire-networks/ecto_materialized_path","title":"Bonfire.Social.Threads.arrange_replies_tree/2","ref":"Bonfire.Social.Threads.html#arrange_replies_tree/2"},{"type":"function","doc":"- `replies`: List of replies\n- `opts`: Arrangement options","title":"Parameters - Bonfire.Social.Threads.arrange_replies_tree/2","ref":"Bonfire.Social.Threads.html#arrange_replies_tree/2-parameters"},{"type":"function","doc":"iex> arrange_replies_tree([%{id: \"1\"}, %{id: \"2\", reply_to_id: \"1\"}])\n    %{\"1\" => %{id: \"1\", direct_replies: [%{id: \"2\", reply_to_id: \"1\"}]}}","title":"Examples - Bonfire.Social.Threads.arrange_replies_tree/2","ref":"Bonfire.Social.Threads.html#arrange_replies_tree/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.base_query/0","ref":"Bonfire.Social.Threads.html#base_query/0"},{"type":"function","doc":"Casts a changeset with reply_to and threading info.\n\nIf it's not a reply or the user is not permitted to reply to the thing, a new thread will be created.","title":"Bonfire.Social.Threads.cast/4","ref":"Bonfire.Social.Threads.html#cast/4"},{"type":"function","doc":"- `changeset`: The changeset to be updated\n- `attrs`: Attributes for the reply\n- `user`: The user creating the reply\n- `_preset_or_custom_boundary`: Boundary setting (currently unused)","title":"Parameters - Bonfire.Social.Threads.cast/4","ref":"Bonfire.Social.Threads.html#cast/4-parameters"},{"type":"function","doc":"iex> cast(changeset, %{reply_to_id: \"123\"}, user, nil)\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Threads.cast/4","ref":"Bonfire.Social.Threads.html#cast/4-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.changeset/2","ref":"Bonfire.Social.Threads.html#changeset/2"},{"type":"function","doc":"Counts participants in a thread.","title":"Bonfire.Social.Threads.count_participants/2","ref":"Bonfire.Social.Threads.html#count_participants/2"},{"type":"function","doc":"- `thread_id`: The ID of the thread\n- `opts`: Additional options, should contain `current_user` to check for permission","title":"Parameters - Bonfire.Social.Threads.count_participants/2","ref":"Bonfire.Social.Threads.html#count_participants/2-parameters"},{"type":"function","doc":"iex> count_participants(\"thread_123\")\n    5","title":"Examples - Bonfire.Social.Threads.count_participants/2","ref":"Bonfire.Social.Threads.html#count_participants/2-examples"},{"type":"function","doc":"Creates a parent replied record within a changeset.","title":"Bonfire.Social.Threads.create_parent_replied/3","ref":"Bonfire.Social.Threads.html#create_parent_replied/3"},{"type":"function","doc":"- `changeset` or `object`: The changeset to update\n- `replied`: The replied struct\n- `replied_attrs`: Attributes for the replied record","title":"Parameters - Bonfire.Social.Threads.create_parent_replied/3","ref":"Bonfire.Social.Threads.html#create_parent_replied/3-parameters"},{"type":"function","doc":"iex> create_parent_replied(changeset, %Replied{}, %{id: \"789\", thread_id: \"456\"})\n    %Ecto.Changeset{}","title":"Examples - Bonfire.Social.Threads.create_parent_replied/3","ref":"Bonfire.Social.Threads.html#create_parent_replied/3-examples"},{"type":"function","doc":"Group per-thread","title":"Bonfire.Social.Threads.filter/3","ref":"Bonfire.Social.Threads.html#filter/3"},{"type":"function","doc":"Finds the object being replied to.","title":"Bonfire.Social.Threads.find_reply_to/2","ref":"Bonfire.Social.Threads.html#find_reply_to/2"},{"type":"function","doc":"- `attrs`: Attributes containing reply information\n- `user`: The user attempting to reply","title":"Parameters - Bonfire.Social.Threads.find_reply_to/2","ref":"Bonfire.Social.Threads.html#find_reply_to/2-parameters"},{"type":"function","doc":"- `{:ok, reply}` if the reply object is found and the user has permission\n- `{:error, reason}` otherwise, where reason may be `:not_found` or `:not_permitted`","title":"Returns - Bonfire.Social.Threads.find_reply_to/2","ref":"Bonfire.Social.Threads.html#find_reply_to/2-returns"},{"type":"function","doc":"iex> find_reply_to(%{reply_to_id: \"123\"}, user)\n    {:ok, %{id: \"123\", ...}}","title":"Examples - Bonfire.Social.Threads.find_reply_to/2","ref":"Bonfire.Social.Threads.html#find_reply_to/2-examples"},{"type":"function","doc":"Finds the thread for a reply.","title":"Bonfire.Social.Threads.find_thread/2","ref":"Bonfire.Social.Threads.html#find_thread/2"},{"type":"function","doc":"- `attrs`: Attributes containing thread information\n- `user`: The user attempting to access the thread","title":"Parameters - Bonfire.Social.Threads.find_thread/2","ref":"Bonfire.Social.Threads.html#find_thread/2-parameters"},{"type":"function","doc":"iex> find_thread(%{thread_id: \"456\"}, user)\n    {:ok, %{id: \"456\", ...}}","title":"Examples - Bonfire.Social.Threads.find_thread/2","ref":"Bonfire.Social.Threads.html#find_thread/2-examples"},{"type":"function","doc":"Initializes a parent replied record.","title":"Bonfire.Social.Threads.init_parent_replied/1","ref":"Bonfire.Social.Threads.html#init_parent_replied/1"},{"type":"function","doc":"- `replied_attrs`: Attributes for the replied record","title":"Parameters - Bonfire.Social.Threads.init_parent_replied/1","ref":"Bonfire.Social.Threads.html#init_parent_replied/1-parameters"},{"type":"function","doc":"iex> init_parent_replied(%{id: \"789\", thread_id: \"456\"})\n    {:ok, %Replied{}}","title":"Examples - Bonfire.Social.Threads.init_parent_replied/1","ref":"Bonfire.Social.Threads.html#init_parent_replied/1-examples"},{"type":"function","doc":"Lists participants of a thread or individual object.","title":"Bonfire.Social.Threads.list_participants/3","ref":"Bonfire.Social.Threads.html#list_participants/3"},{"type":"function","doc":"- `activity_or_object`: The activity or object to list participants for\n- `thread_or_object_id`: Optional thread or object ID\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Threads.list_participants/3","ref":"Bonfire.Social.Threads.html#list_participants/3-parameters"},{"type":"function","doc":"iex> list_participants(activity, \"thread_123\", limit: 10)\n    [%{id: \"user1\", ...}, %{id: \"user2\", ...}]","title":"Examples - Bonfire.Social.Threads.list_participants/3","ref":"Bonfire.Social.Threads.html#list_participants/3-examples"},{"type":"function","doc":"Lists replies in a thread.","title":"Bonfire.Social.Threads.list_replies/2","ref":"Bonfire.Social.Threads.html#list_replies/2"},{"type":"function","doc":"- `thread`: The thread or thread ID\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Threads.list_replies/2","ref":"Bonfire.Social.Threads.html#list_replies/2-parameters"},{"type":"function","doc":"iex> list_replies(\"thread_123\", limit: 10)\n    %{edges: [%{id: \"reply1\", ...}, %{id: \"reply2\", ...}]}","title":"Examples - Bonfire.Social.Threads.list_replies/2","ref":"Bonfire.Social.Threads.html#list_replies/2-examples"},{"type":"function","doc":"Marks all unseen replies as seen.","title":"Bonfire.Social.Threads.mark_all_seen/2","ref":"Bonfire.Social.Threads.html#mark_all_seen/2"},{"type":"function","doc":"- `filters`: Filter criteria\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Threads.mark_all_seen/2","ref":"Bonfire.Social.Threads.html#mark_all_seen/2-parameters"},{"type":"function","doc":"iex> mark_all_seen([thread_id: \"123\"], current_user: user)\n    {:ok, [%{id: \"reply1\"}, %{id: \"reply2\"}]}","title":"Examples - Bonfire.Social.Threads.mark_all_seen/2","ref":"Bonfire.Social.Threads.html#mark_all_seen/2-examples"},{"type":"function","doc":"re-order distinct threads after DISTINCT ON ordered them by thread_id - Note: does not support pagination","title":"Bonfire.Social.Threads.maybe_re_order_result/2","ref":"Bonfire.Social.Threads.html#maybe_re_order_result/2"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.maybe_with_pins/3","ref":"Bonfire.Social.Threads.html#maybe_with_pins/3"},{"type":"function","doc":"Builds a query for thread replies.","title":"Bonfire.Social.Threads.query/2","ref":"Bonfire.Social.Threads.html#query/2"},{"type":"function","doc":"- `filter`: Filter criteria (e.g., `[thread_id: \"123\"]`)\n- `opts`: Additional query options","title":"Parameters - Bonfire.Social.Threads.query/2","ref":"Bonfire.Social.Threads.html#query/2-parameters"},{"type":"function","doc":"iex> query([thread_id: \"123\"], preload: [:posts])\n    %Ecto.Query{}","title":"Examples - Bonfire.Social.Threads.query/2","ref":"Bonfire.Social.Threads.html#query/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.query_module/0","ref":"Bonfire.Social.Threads.html#query_module/0"},{"type":"function","doc":"re-order distinct threads after DISTINCT ON ordered them by thread_id - Note: this results in (Ecto.QueryError) cannot preload associations in subquery in query","title":"Bonfire.Social.Threads.re_order_using_subquery/2","ref":"Bonfire.Social.Threads.html#re_order_using_subquery/2"},{"type":"function","doc":"Reads a thread by its ID.","title":"Bonfire.Social.Threads.read/2","ref":"Bonfire.Social.Threads.html#read/2"},{"type":"function","doc":"- `object_id`: The ID of the object to read\n- `opts`: should contain `current_user` to check for read permissions","title":"Parameters - Bonfire.Social.Threads.read/2","ref":"Bonfire.Social.Threads.html#read/2-parameters"},{"type":"function","doc":"- `{:ok, object}` if the object is found and readable\n- `{:error, reason}` otherwise","title":"Returns - Bonfire.Social.Threads.read/2","ref":"Bonfire.Social.Threads.html#read/2-returns"},{"type":"function","doc":"iex> read(\"123\", current_user: me)\n    {:ok, %{id: \"123\", ...}}","title":"Examples - Bonfire.Social.Threads.read/2","ref":"Bonfire.Social.Threads.html#read/2-examples"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.schema_module/0","ref":"Bonfire.Social.Threads.html#schema_module/0"},{"type":"function","doc":"Counts unseen replies.","title":"Bonfire.Social.Threads.unseen_count/2","ref":"Bonfire.Social.Threads.html#unseen_count/2"},{"type":"function","doc":"- `filters`: Filter criteria\n- `opts`: Additional options","title":"Parameters - Bonfire.Social.Threads.unseen_count/2","ref":"Bonfire.Social.Threads.html#unseen_count/2-parameters"},{"type":"function","doc":"iex> unseen_count([thread_id: \"123\"], current_user: user)\n    5","title":"Examples - Bonfire.Social.Threads.unseen_count/2","ref":"Bonfire.Social.Threads.html#unseen_count/2-examples"},{"type":"function","doc":"Builds a query for unseen replies.","title":"Bonfire.Social.Threads.unseen_query/2","ref":"Bonfire.Social.Threads.html#unseen_query/2"},{"type":"function","doc":"- `filters`: Filter criteria\n- `opts`: Additional query options","title":"Parameters - Bonfire.Social.Threads.unseen_query/2","ref":"Bonfire.Social.Threads.html#unseen_query/2-parameters"},{"type":"function","doc":"- `{:ok, query}` if the query can be built\n- `{:error, reason}` otherwise","title":"Returns - Bonfire.Social.Threads.unseen_query/2","ref":"Bonfire.Social.Threads.html#unseen_query/2-returns"},{"type":"function","doc":"iex> unseen_query([thread_id: \"123\"], current_user: user)\n    {:ok, %Ecto.Query{}}","title":"Examples - Bonfire.Social.Threads.unseen_query/2","ref":"Bonfire.Social.Threads.html#unseen_query/2-examples"},{"type":"module","doc":"","title":"Bonfire.Social.Threads.LiveHandler","ref":"Bonfire.Social.Threads.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.handle_event/3","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.handle_info/2","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_info/2"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.handle_params/3","ref":"Bonfire.Social.Threads.LiveHandler.html#handle_params/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.insert_comments/3","ref":"Bonfire.Social.Threads.LiveHandler.html#insert_comments/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.live_more/3","ref":"Bonfire.Social.Threads.LiveHandler.html#live_more/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.load_thread/1","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread/1"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.load_thread_assigns/2","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread_assigns/2"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.load_thread_maybe_async/3","ref":"Bonfire.Social.Threads.LiveHandler.html#load_thread_maybe_async/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.max_depth/1","ref":"Bonfire.Social.Threads.LiveHandler.html#max_depth/1"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.maybe_subscribe/2","ref":"Bonfire.Social.Threads.LiveHandler.html#maybe_subscribe/2"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.reply/3","ref":"Bonfire.Social.Threads.LiveHandler.html#reply/3"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.send_thread_updates/4","ref":"Bonfire.Social.Threads.LiveHandler.html#send_thread_updates/4"},{"type":"macro","doc":"","title":"Bonfire.Social.Threads.LiveHandler.sigil_p/2","ref":"Bonfire.Social.Threads.LiveHandler.html#sigil_p/2"},{"type":"function","doc":"","title":"Bonfire.Social.Threads.LiveHandler.thread_init/1","ref":"Bonfire.Social.Threads.LiveHandler.html#thread_init/1"},{"type":"module","doc":"An extension for [Bonfire](https://bonfire.cafe/) that handles tagging posts or other things:\n- @ mentions \n- #hashtags\n- others (e.g. with a Category from Bonfire.Classify or a location from Bonfire.Geolocate)","title":"Bonfire.Tag","ref":"Bonfire.Tag.html"},{"type":"module","doc":"","title":"Handy commands - Bonfire.Tag","ref":"Bonfire.Tag.html#module-handy-commands"},{"type":"module","doc":"Copyright (c) 2020 Bonfire, Haha Academy, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Tag","ref":"Bonfire.Tag.html#module-copyright-and-license"},{"type":"function","doc":"For using on changesets (eg in epics)","title":"Bonfire.Tag.cast/4","ref":"Bonfire.Tag.html#cast/4"},{"type":"function","doc":"","title":"Bonfire.Tag.context_module/0","ref":"Bonfire.Tag.html#context_module/0"},{"type":"function","doc":"","title":"Bonfire.Tag.find/2","ref":"Bonfire.Tag.html#find/2"},{"type":"function","doc":"","title":"Bonfire.Tag.format_tag/1","ref":"Bonfire.Tag.html#format_tag/1"},{"type":"function","doc":"","title":"Bonfire.Tag.format_tags/1","ref":"Bonfire.Tag.html#format_tags/1"},{"type":"function","doc":"","title":"Bonfire.Tag.get/2","ref":"Bonfire.Tag.html#get/2"},{"type":"function","doc":"","title":"Bonfire.Tag.get_hashtag/1","ref":"Bonfire.Tag.html#get_hashtag/1"},{"type":"function","doc":"","title":"Bonfire.Tag.get_hashtags_from_changeset/1","ref":"Bonfire.Tag.html#get_hashtags_from_changeset/1"},{"type":"function","doc":"","title":"Bonfire.Tag.get_mentions_from_changeset/1","ref":"Bonfire.Tag.html#get_mentions_from_changeset/1"},{"type":"function","doc":"","title":"Bonfire.Tag.get_or_create_hashtag/1","ref":"Bonfire.Tag.html#get_or_create_hashtag/1"},{"type":"function","doc":"","title":"Bonfire.Tag.indexing_object_format/1","ref":"Bonfire.Tag.html#indexing_object_format/1"},{"type":"function","doc":"","title":"Bonfire.Tag.indexing_object_format_name/1","ref":"Bonfire.Tag.html#indexing_object_format_name/1"},{"type":"function","doc":"","title":"Bonfire.Tag.list_trending/2","ref":"Bonfire.Tag.html#list_trending/2"},{"type":"function","doc":"","title":"Bonfire.Tag.list_trending_reset/2","ref":"Bonfire.Tag.html#list_trending_reset/2"},{"type":"function","doc":"","title":"Bonfire.Tag.list_trending_without_cache/2","ref":"Bonfire.Tag.html#list_trending_without_cache/2"},{"type":"function","doc":"Retrieves a list of tags by arbitrary filters.\nUsed by:\n* Various parts of the codebase that need to query for tags (inc. tests)","title":"Bonfire.Tag.many/2","ref":"Bonfire.Tag.html#many/2"},{"type":"function","doc":"Try to find one (best-match) tag","title":"Bonfire.Tag.maybe_find_tag/3","ref":"Bonfire.Tag.html#maybe_find_tag/3"},{"type":"function","doc":"Search / autocomplete for tags by name","title":"Bonfire.Tag.maybe_find_tags/3","ref":"Bonfire.Tag.html#maybe_find_tags/3"},{"type":"function","doc":"Lookup a single for a tag by its name/username","title":"Bonfire.Tag.maybe_lookup_tag/2","ref":"Bonfire.Tag.html#maybe_lookup_tag/2"},{"type":"function","doc":"","title":"Bonfire.Tag.maybe_put_tree_parent/3","ref":"Bonfire.Tag.html#maybe_put_tree_parent/3"},{"type":"function","doc":"Maybe tag something","title":"Bonfire.Tag.maybe_tag/4","ref":"Bonfire.Tag.html#maybe_tag/4"},{"type":"function","doc":"","title":"Bonfire.Tag.maybe_taxonomy_tag/2","ref":"Bonfire.Tag.html#maybe_taxonomy_tag/2"},{"type":"function","doc":"Retrieves a single tag by arbitrary filters.\nUsed by:\n* GraphQL Item queries\n* ActivityPub integration\n* Various parts of the codebase that need to query for tags (inc. tests)","title":"Bonfire.Tag.one/2","ref":"Bonfire.Tag.html#one/2"},{"type":"function","doc":"","title":"Bonfire.Tag.query_module/0","ref":"Bonfire.Tag.html#query_module/0"},{"type":"function","doc":"","title":"Bonfire.Tag.search_hashtag/2","ref":"Bonfire.Tag.html#search_hashtag/2"},{"type":"function","doc":"","title":"Bonfire.Tag.search_hashtag_query/2","ref":"Bonfire.Tag.html#search_hashtag_query/2"},{"type":"function","doc":"","title":"Bonfire.Tag.tag_ids/1","ref":"Bonfire.Tag.html#tag_ids/1"},{"type":"function","doc":"tag existing thing with one or multiple Tags, Needle, or anything that can be made into a tag","title":"Bonfire.Tag.tag_something/4","ref":"Bonfire.Tag.html#tag_something/4"},{"type":"function","doc":"Add things (Pointer objects) to a tag. You usually want to add tags to a thing instead, see `thing_tags_changeset`","title":"Bonfire.Tag.tag_things_changeset/2","ref":"Bonfire.Tag.html#tag_things_changeset/2"},{"type":"function","doc":"Add tags to a thing (any Pointer object which defines a many_to_many relation to tag). This function applies to your object schema but is here for convenience.","title":"Bonfire.Tag.thing_tags_changeset/2","ref":"Bonfire.Tag.html#thing_tags_changeset/2"},{"type":"module","doc":"An act that optionally tags an object. \n\nEpic Options:\n  * ...\n\nAct Options:\n  * `:on` - key to find changeset, required.","title":"Bonfire.Tag.Acts.Tag","ref":"Bonfire.Tag.Acts.Tag.html"},{"type":"function","doc":"","title":"Bonfire.Tag.Acts.Tag.run/2","ref":"Bonfire.Tag.Acts.Tag.html#run/2"},{"type":"module","doc":"Functions to lookup and autocomplete tag names","title":"Bonfire.Tag.Autocomplete","ref":"Bonfire.Tag.Autocomplete.html"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.api_tag_lookup/3","ref":"Bonfire.Tag.Autocomplete.html#api_tag_lookup/3"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.api_tag_lookup_public/4","ref":"Bonfire.Tag.Autocomplete.html#api_tag_lookup_public/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.filter_results/1","ref":"Bonfire.Tag.Autocomplete.html#filter_results/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.find_all_tags/1","ref":"Bonfire.Tag.Autocomplete.html#find_all_tags/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.maybe_find_tags/2","ref":"Bonfire.Tag.Autocomplete.html#maybe_find_tags/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.maybe_search/4","ref":"Bonfire.Tag.Autocomplete.html#maybe_search/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.prefix_index/1","ref":"Bonfire.Tag.Autocomplete.html#prefix_index/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.search_or_lookup/3","ref":"Bonfire.Tag.Autocomplete.html#search_or_lookup/3"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.search_prefix/2","ref":"Bonfire.Tag.Autocomplete.html#search_prefix/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.search_type/2","ref":"Bonfire.Tag.Autocomplete.html#search_type/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_add_field/4","ref":"Bonfire.Tag.Autocomplete.html#tag_add_field/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_hit_prepare/4","ref":"Bonfire.Tag.Autocomplete.html#tag_hit_prepare/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_lookup_public/4","ref":"Bonfire.Tag.Autocomplete.html#tag_lookup_public/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_search/2","ref":"Bonfire.Tag.Autocomplete.html#tag_search/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_search_from_tags/1","ref":"Bonfire.Tag.Autocomplete.html#tag_search_from_tags/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tag_search_from_text/2","ref":"Bonfire.Tag.Autocomplete.html#tag_search_from_text/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.tags_split/1","ref":"Bonfire.Tag.Autocomplete.html#tags_split/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.try_all_prefixes/1","ref":"Bonfire.Tag.Autocomplete.html#try_all_prefixes/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.try_prefixes/1","ref":"Bonfire.Tag.Autocomplete.html#try_prefixes/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.try_tag_search/1","ref":"Bonfire.Tag.Autocomplete.html#try_tag_search/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Autocomplete.try_tag_search/2","ref":"Bonfire.Tag.Autocomplete.html#try_tag_search/2"},{"type":"module","doc":"GraphQL tag/category queries","title":"Bonfire.Tag.GraphQL.TagResolver","ref":"Bonfire.Tag.GraphQL.TagResolver.html"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.fetch_tag/2","ref":"Bonfire.Tag.GraphQL.TagResolver.html#fetch_tag/2"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.name/3","ref":"Bonfire.Tag.GraphQL.TagResolver.html#name/3"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.summary/3","ref":"Bonfire.Tag.GraphQL.TagResolver.html#summary/3"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.tag/2","ref":"Bonfire.Tag.GraphQL.TagResolver.html#tag/2"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.tag_prepare/3","ref":"Bonfire.Tag.GraphQL.TagResolver.html#tag_prepare/3"},{"type":"function","doc":"","title":"Bonfire.Tag.GraphQL.TagResolver.tag_something/2","ref":"Bonfire.Tag.GraphQL.TagResolver.html#tag_something/2"},{"type":"function","doc":"Things associated with a Tag","title":"Bonfire.Tag.GraphQL.TagResolver.tagged_things_edges/3","ref":"Bonfire.Tag.GraphQL.TagResolver.html#tagged_things_edges/3"},{"type":"function","doc":"Tags associated with a Thing","title":"Bonfire.Tag.GraphQL.TagResolver.tags_edges/3","ref":"Bonfire.Tag.GraphQL.TagResolver.html#tags_edges/3"},{"type":"module","doc":"A virtual schema used for hashtags","title":"Bonfire.Tag.Hashtag","ref":"Bonfire.Tag.Hashtag.html"},{"type":"function","doc":"","title":"Bonfire.Tag.Hashtag.changeset/2","ref":"Bonfire.Tag.Hashtag.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Hashtag.delete/2","ref":"Bonfire.Tag.Hashtag.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Hashtag.get/3","ref":"Bonfire.Tag.Hashtag.html#get/3"},{"type":"function","doc":"","title":"Bonfire.Tag.Hashtag.normalize_name/1","ref":"Bonfire.Tag.Hashtag.html#normalize_name/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Hashtag.put/3","ref":"Bonfire.Tag.Hashtag.html#put/3"},{"type":"module","doc":"","title":"Bonfire.Tag.LiveHandler","ref":"Bonfire.Tag.LiveHandler.html"},{"type":"function","doc":"","title":"Bonfire.Tag.LiveHandler.declared_extension/0","ref":"Bonfire.Tag.LiveHandler.html#declared_extension/0"},{"type":"function","doc":"","title":"Bonfire.Tag.LiveHandler.handle_event/3","ref":"Bonfire.Tag.LiveHandler.html#handle_event/3"},{"type":"function","doc":"","title":"Bonfire.Tag.LiveHandler.maybe_tag/4","ref":"Bonfire.Tag.LiveHandler.html#maybe_tag/4"},{"type":"macro","doc":"","title":"Bonfire.Tag.LiveHandler.sigil_p/2","ref":"Bonfire.Tag.LiveHandler.html#sigil_p/2"},{"type":"module","doc":"Queries for `Bonfire.Tag`","title":"Bonfire.Tag.Queries","ref":"Bonfire.Tag.Queries.html"},{"type":"function","doc":"Filter the query according to arbitrary criteria","title":"Bonfire.Tag.Queries.filter/2","ref":"Bonfire.Tag.Queries.html#filter/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Queries.join_to/3","ref":"Bonfire.Tag.Queries.html#join_to/3"},{"type":"function","doc":"","title":"Bonfire.Tag.Queries.list_trending/2","ref":"Bonfire.Tag.Queries.html#list_trending/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Queries.queries/4","ref":"Bonfire.Tag.Queries.html#queries/4"},{"type":"function","doc":"","title":"Bonfire.Tag.Queries.query/1","ref":"Bonfire.Tag.Queries.html#query/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Queries.query/2","ref":"Bonfire.Tag.Queries.html#query/2"},{"type":"module","doc":"","title":"Bonfire.Tag.Simulate","ref":"Bonfire.Tag.Simulate.html"},{"type":"module","doc":"A mixin used for associating tags with an object","title":"Bonfire.Tag.Tagged","ref":"Bonfire.Tag.Tagged.html"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.all/0","ref":"Bonfire.Tag.Tagged.html#all/0"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.changeset/2","ref":"Bonfire.Tag.Tagged.html#changeset/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.delete/2","ref":"Bonfire.Tag.Tagged.html#delete/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.get/3","ref":"Bonfire.Tag.Tagged.html#get/3"},{"type":"function","doc":"Get the latest tag added to a thing","title":"Bonfire.Tag.Tagged.latest/1","ref":"Bonfire.Tag.Tagged.html#latest/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.put/3","ref":"Bonfire.Tag.Tagged.html#put/3"},{"type":"function","doc":"List the things tagged with a certain tag","title":"Bonfire.Tag.Tagged.q_with_tag/1","ref":"Bonfire.Tag.Tagged.html#q_with_tag/1"},{"type":"function","doc":"List the tags of a thing","title":"Bonfire.Tag.Tagged.q_with_thing/1","ref":"Bonfire.Tag.Tagged.html#q_with_thing/1"},{"type":"function","doc":"List by type of tagged thing","title":"Bonfire.Tag.Tagged.q_with_type/1","ref":"Bonfire.Tag.Tagged.html#q_with_type/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.search_query/2","ref":"Bonfire.Tag.Tagged.html#search_query/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.thing_tags_insert/2","ref":"Bonfire.Tag.Tagged.html#thing_tags_insert/2"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.with_tag/1","ref":"Bonfire.Tag.Tagged.html#with_tag/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.with_thing/1","ref":"Bonfire.Tag.Tagged.html#with_thing/1"},{"type":"function","doc":"","title":"Bonfire.Tag.Tagged.with_type/1","ref":"Bonfire.Tag.Tagged.html#with_type/1"},{"type":"type","doc":"","title":"Bonfire.Tag.Tagged.t/0","ref":"Bonfire.Tag.Tagged.html#t:t/0"},{"type":"module","doc":"","title":"Bonfire.Tag.TextContent.Formatter","ref":"Bonfire.Tag.TextContent.Formatter.html"},{"type":"function","doc":"Parses a text and replace plain text links with HTML. Returns a tuple with a result text, mentions, and hashtags.\n\nIf the 'safe_mention' option is given, only consecutive mentions at the start the post are actually mentioned.","title":"Bonfire.Tag.TextContent.Formatter.linkify/2","ref":"Bonfire.Tag.TextContent.Formatter.html#linkify/2"},{"type":"function","doc":"","title":"Bonfire.Tag.TextContent.Formatter.nothing_handler/3","ref":"Bonfire.Tag.TextContent.Formatter.html#nothing_handler/3"},{"type":"function","doc":"","title":"Bonfire.Tag.TextContent.Formatter.tag_handler/4","ref":"Bonfire.Tag.TextContent.Formatter.html#tag_handler/4"},{"type":"function","doc":"","title":"Bonfire.Tag.TextContent.Formatter.url_handler/3","ref":"Bonfire.Tag.TextContent.Formatter.html#url_handler/3"},{"type":"module","doc":"","title":"Bonfire.Tag.TextContent.Process","ref":"Bonfire.Tag.TextContent.Process.html"},{"type":"function","doc":"","title":"Bonfire.Tag.TextContent.Process.html_escape/2","ref":"Bonfire.Tag.TextContent.Process.html#html_escape/2"},{"type":"function","doc":"For use for things like a bio, where we want links but not to actually trigger mentions.","title":"Bonfire.Tag.TextContent.Process.process/3","ref":"Bonfire.Tag.TextContent.Process.html#process/3"},{"type":"module","doc":"","title":"Bonfire.Tag.Web.Routes","ref":"Bonfire.Tag.Web.Routes.html"},{"type":"module","doc":"An act that optionally boosts an activity as a category. This is a way to auto-post in a category/group when tagged (and the author has permission).\n\nEpic Options:\n  * ...\n\nAct Options:\n  * `:on` - key to find changeset, required.","title":"Bonfire.Tags.Acts.AutoBoost","ref":"Bonfire.Tags.Acts.AutoBoost.html"},{"type":"function","doc":"","title":"Bonfire.Tags.Acts.AutoBoost.run/2","ref":"Bonfire.Tags.Acts.AutoBoost.html#run/2"},{"type":"module","doc":"ActivityPub Library for elixir.\n\n**WORK IN PROGRESS, TESTING FEDERATION WITH DIFFERENT IMPLEMENTATIONS IS UNDERWAY**","title":"ActivityPub","ref":"ActivityPub.html"},{"type":"module","doc":"1. Add this library to your dependencies in `mix.exs`\n\n```\ndefp deps do\n  [...]\n  {:activity_pub, git: \"https://github.com/bonfire-networks/activity_pub.git\", branch: \"stable\"} # branch can \"stable\", or \"develop\" for the bleeding edge\nend\n```\n\n2. Create an adapter module. To start, one created at\n   `lib/my_app/adapter.ex` might look like\n\n```elixir\ndefmodule MyApp.Adapter do\n  @moduledoc \"\"\"\n  Adapter functions delegated from the `ActivityPub` Library\n  \"\"\"\n\n  @behaviour ActivityPub.Federator.Adapter\nend\n```\n\nNote that, due to the defined `@behavior`, Elixir will warn you that\nthe required functions\n\n  * `base_url/0`\n  * `get_actor_by_id/1`\n  * `get_actor_by_username/1`\n  * `get_follower_local_ids/1`\n  * `get_following_local_ids/1`\n  * `get_redirect_url/1`\n  * `handle_activity/1`\n  * `maybe_create_remote_actor/1`\n  * `maybe_publish_object/2`\n  * `update_local_actor/2`\n  * `update_remote_actor/1`\n\nhave not yet been implemented though you will be able to start your\napp. Defining these allows `ActivityPub` to handle ActivityPub HTTP\nand database calls and operations. An example of an implemented\nadaptor can be found\n[here](https://github.com/bonfire-networks/bonfire_federate_activitypub/tree/main/lib/adapter\n\"Link to file hosted on GitHub\").\n\nThen set it in config\n\n```\nconfig :activity_pub, :adapter, MyApp.Adapter\n```\n\n3. Set your application repo in config\n\n```\nconfig :activity_pub, :repo, MyApp.Repo\n```\n\n4. Create a new ecto migration and call `ActivityPub.Migration.up/0` from it\n\n5. Inject AP routes to your router by adding `use ActivityPub.Web.Router` to your app's router module\n\n6. Copy the default AP config to your app's confix.exs\n\n```\nconfig :activity_pub, :mrf_simple,\n  media_removal: [],\n  media_nsfw: [],\n  report_removal: [],\n  accept: [],\n  avatar_removal: [],\n  banner_removal: []\n\nconfig :activity_pub, :instance,\n  hostname: \"example.com\",\n  federation_publisher_modules: [ActivityPub.Federator.APPublisher],\n  federation_reachability_timeout_days: 7,\n  federating: true,\n  rewrite_policy: []\n\nconfig :activity_pub, :http,\n  proxy_url: nil,\n  user_agent: \"Your app name\",\n  send_user_agent: true,\n  adapter: [\n    ssl_options: [\n      # Workaround for remote server certificate chain issues\n      partial_chain: &:hackney_connect.partial_chain/1,\n      # We don't support TLS v1.3 yet\n      versions: [:tlsv1, :\"tlsv1.1\", :\"tlsv1.2\"]\n    ]\n  ]\n  ```\n\n7. Change the hostname value in the instance config block to your instance's hostname \n\n8. If you don't already have Oban set up, follow the [Oban installation intructions](https://hexdocs.pm/oban/installation.html#content) and add the AP queues:\n\n```\nconfig :my_app, Oban, queues: [federator_incoming: 50, federator_outgoing: 50, remote_fetcher: 20]\n```\n\nNow you should be able to compile and run your app and move over to integration.\n\n\nThis module is the entrypoint to the ActivityPub API for processing incoming and outgoing federated objects (normalising, saving the the Object storage, passing them to the adapter, and queueing outgoing activities to be pushed out).\n\nIn general, the functions in this module take object-like map.\nThat includes a struct as the input for actor parameters.  Use the functions in the `ActivityPub.Actor` module (`ActivityPub.Actor.get_cached/1` for example) to retrieve those.","title":"Installation - ActivityPub","ref":"ActivityPub.html#module-installation"},{"type":"function","doc":"Generates and federates an Accept activity via the data passed through `params`.","title":"ActivityPub.accept/1","ref":"ActivityPub.html#accept/1"},{"type":"function","doc":"","title":"ActivityPub.accept_activity/1","ref":"ActivityPub.html#accept_activity/1"},{"type":"function","doc":"","title":"ActivityPub.announce/1","ref":"ActivityPub.html#announce/1"},{"type":"function","doc":"","title":"ActivityPub.block/1","ref":"ActivityPub.html#block/1"},{"type":"function","doc":"Generates and federates a Create activity via the data passed through `params`.","title":"ActivityPub.create/1","ref":"ActivityPub.html#create/1"},{"type":"function","doc":"","title":"ActivityPub.delete/3","ref":"ActivityPub.html#delete/3"},{"type":"function","doc":"","title":"ActivityPub.flag/1","ref":"ActivityPub.html#flag/1"},{"type":"function","doc":"Generates and federates a Follow activity.\n\nNote: the follow should be reflected as a Follow on the host database side only after receiving an `Accept` activity in response (though you could register it as a Request if your app has that concept)","title":"ActivityPub.follow/1","ref":"ActivityPub.html#follow/1"},{"type":"function","doc":"Record a Like","title":"ActivityPub.like/1","ref":"ActivityPub.html#like/1"},{"type":"function","doc":"","title":"ActivityPub.move/4","ref":"ActivityPub.html#move/4"},{"type":"function","doc":"Generates and federates a Reject activity via the data passed through `params`.","title":"ActivityPub.reject/1","ref":"ActivityPub.html#reject/1"},{"type":"function","doc":"","title":"ActivityPub.unannounce/1","ref":"ActivityPub.html#unannounce/1"},{"type":"function","doc":"","title":"ActivityPub.unblock/1","ref":"ActivityPub.html#unblock/1"},{"type":"function","doc":"Generates and federates an Unfollow activity.","title":"ActivityPub.unfollow/1","ref":"ActivityPub.html#unfollow/1"},{"type":"function","doc":"","title":"ActivityPub.unlike/1","ref":"ActivityPub.html#unlike/1"},{"type":"function","doc":"","title":"ActivityPub.update/1","ref":"ActivityPub.html#update/1"},{"type":"module","doc":"An ActivityPub Actor type and functions for dealing with actors.\n\nSee [4. Actors](https://www.w3.org/TR/activitypub/#actors) in the\nActivityPub specification for more information on Actors.","title":"ActivityPub.Actor","ref":"ActivityPub.Actor.html"},{"type":"function","doc":"","title":"ActivityPub.Actor.actor?/1","ref":"ActivityPub.Actor.html#actor?/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.actor_url/1","ref":"ActivityPub.Actor.html#actor_url/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.also_known_as?/2","ref":"ActivityPub.Actor.html#also_known_as?/2"},{"type":"function","doc":"","title":"ActivityPub.Actor.check_actor_is_active/1","ref":"ActivityPub.Actor.html#check_actor_is_active/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.deactivate/1","ref":"ActivityPub.Actor.html#deactivate/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.delete/2","ref":"ActivityPub.Actor.html#delete/2"},{"type":"function","doc":"Fetches a remote actor by username in `username@domain.tld` format","title":"ActivityPub.Actor.fetch_by_username/2","ref":"ActivityPub.Actor.html#fetch_by_username/2"},{"type":"function","doc":"","title":"ActivityPub.Actor.format_remote_actor/1","ref":"ActivityPub.Actor.html#format_remote_actor/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.format_username/1","ref":"ActivityPub.Actor.html#format_username/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.format_username/2","ref":"ActivityPub.Actor.html#format_username/2"},{"type":"function","doc":"Fetches an actor given its AP ID / URI, or username@domain, or by a pointer id \n\nRemote actors are just checked if they exist in AP or adapter's database and are NOT fetched remotely if they don't.\n\nRemote actors are also automatically updated every X hours (defaults to 24h).","title":"ActivityPub.Actor.get_cached/1","ref":"ActivityPub.Actor.html#get_cached/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.get_cached!/1","ref":"ActivityPub.Actor.html#get_cached!/1"},{"type":"function","doc":"Tries to get a local or cache actor, or fetches it given its AP ID / URI, or username@domain, or by a pointer id.\n\nRemote actors are first checked if they exist in in AP or adapter's database and ARE fetched remotely if they don't.\n\nRemote actors are also automatically updated every X hours (defaults to 24h).","title":"ActivityPub.Actor.get_cached_or_fetch/1","ref":"ActivityPub.Actor.html#get_cached_or_fetch/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.get_external_followers/1","ref":"ActivityPub.Actor.html#get_external_followers/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.get_followers/1","ref":"ActivityPub.Actor.html#get_followers/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.get_followings/1","ref":"ActivityPub.Actor.html#get_followings/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.get_non_cached/1","ref":"ActivityPub.Actor.html#get_non_cached/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.invalidate_cache/1","ref":"ActivityPub.Actor.html#invalidate_cache/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.maybe_create_actor_from_object/1","ref":"ActivityPub.Actor.html#maybe_create_actor_from_object/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.reactivate/1","ref":"ActivityPub.Actor.html#reactivate/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.save_actor_tombstone/2","ref":"ActivityPub.Actor.html#save_actor_tombstone/2"},{"type":"function","doc":"","title":"ActivityPub.Actor.set_cache/1","ref":"ActivityPub.Actor.html#set_cache/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.swap_or_create_actor_tombstone/1","ref":"ActivityPub.Actor.html#swap_or_create_actor_tombstone/1"},{"type":"function","doc":"Updates an existing actor struct by its AP ID.","title":"ActivityPub.Actor.update_actor/1","ref":"ActivityPub.Actor.html#update_actor/1"},{"type":"function","doc":"","title":"ActivityPub.Actor.update_actor/2","ref":"ActivityPub.Actor.html#update_actor/2"},{"type":"type","doc":"The ActivityPub ID of an object, which must be a publicly-dereferencable URI,\nor `nil` if the object is anonymous.\n\nNote that since the URI must be publicly-dereferencable,\nyou should set this value to `ActivityPub.Federator.Adapter.base_url() <> ~p\"/pub/actors/#{username}\"`.\nThis path is defined in `ActivityPub.Web.Endpoint` and serves data provided\nby the functions in `ActivityPub.Federator.Adapter`.\n\nSee section [3.1 Object Identifiers](https://www.w3.org/TR/activitypub/#obj-id)\nin the ActivityPub spec for more information on the format.","title":"ActivityPub.Actor.ap_id/0","ref":"ActivityPub.Actor.html#t:ap_id/0"},{"type":"type","doc":"\"https://kenzoishii.example.com/\"\n\n    \"http://localhost:4000/pub/actors/rosa\"","title":"Examples - ActivityPub.Actor.ap_id/0","ref":"ActivityPub.Actor.html#t:ap_id/0-examples"},{"type":"type","doc":"Your app's internal ID for an `Actor`.","title":"ActivityPub.Actor.id/0","ref":"ActivityPub.Actor.html#t:id/0"},{"type":"type","doc":"\"c1688a22-4e9c-42d7-935b-1f17e1d0cf58\"\n\n    \"1234\"","title":"Examples - ActivityPub.Actor.id/0","ref":"ActivityPub.Actor.html#t:id/0-examples"},{"type":"type","doc":"An association (by default a `Needle.Pointer`) that references an `Actor`.\n\nPointers consist of a table ID, referencing a database table,\nand a pointer ID, referencing a row in that table.\nTable and pointer IDs are both `Pointers.ULID` strings, which is UUID-like.","title":"ActivityPub.Actor.pointer/0","ref":"ActivityPub.Actor.html#t:pointer/0"},{"type":"type","doc":"A ULID ID (eg. using the `Needle.ULID`library) that links an `Actor` to its object in the app's database.","title":"ActivityPub.Actor.pointer_id/0","ref":"ActivityPub.Actor.html#t:pointer_id/0"},{"type":"type","doc":"An ActivityPub Actor.","title":"ActivityPub.Actor.t/0","ref":"ActivityPub.Actor.html#t:t/0"},{"type":"type","doc":"An `Actor`'s user name, used as part of its ActivityPub ID.","title":"ActivityPub.Actor.username/0","ref":"ActivityPub.Actor.html#t:username/0"},{"type":"type","doc":"\"alyssa\"\n\n    \"ben\"","title":"Examples - ActivityPub.Actor.username/0","ref":"ActivityPub.Actor.html#t:username/0-examples"},{"type":"module","doc":"","title":"ActivityPub.Config","ref":"ActivityPub.Config.html"},{"type":"function","doc":"","title":"ActivityPub.Config.actors_and_collections/0","ref":"ActivityPub.Config.html#actors_and_collections/0"},{"type":"function","doc":"","title":"ActivityPub.Config.collection_types/0","ref":"ActivityPub.Config.html#collection_types/0"},{"type":"function","doc":"","title":"ActivityPub.Config.delete/1","ref":"ActivityPub.Config.html#delete/1"},{"type":"function","doc":"","title":"ActivityPub.Config.env/0","ref":"ActivityPub.Config.html#env/0"},{"type":"function","doc":"","title":"ActivityPub.Config.federating?/0","ref":"ActivityPub.Config.html#federating?/0"},{"type":"function","doc":"","title":"ActivityPub.Config.get/1","ref":"ActivityPub.Config.html#get/1"},{"type":"function","doc":"","title":"ActivityPub.Config.get/2","ref":"ActivityPub.Config.html#get/2"},{"type":"function","doc":"","title":"ActivityPub.Config.get!/1","ref":"ActivityPub.Config.html#get!/1"},{"type":"macro","doc":"For matching against the above list in guards TODO: use runtime config","title":"ActivityPub.Config.is_in/2","ref":"ActivityPub.Config.html#is_in/2"},{"type":"function","doc":"","title":"ActivityPub.Config.public_uri/0","ref":"ActivityPub.Config.html#public_uri/0"},{"type":"function","doc":"","title":"ActivityPub.Config.public_uris/0","ref":"ActivityPub.Config.html#public_uris/0"},{"type":"function","doc":"","title":"ActivityPub.Config.put/2","ref":"ActivityPub.Config.html#put/2"},{"type":"function","doc":"","title":"ActivityPub.Config.supported_activity_types/0","ref":"ActivityPub.Config.html#supported_activity_types/0"},{"type":"function","doc":"","title":"ActivityPub.Config.supported_actor_types/0","ref":"ActivityPub.Config.html#supported_actor_types/0"},{"type":"exception","doc":"","title":"ActivityPub.Config.Error","ref":"ActivityPub.Config.Error.html"},{"type":"module","doc":"","title":"ActivityPub.Federator","ref":"ActivityPub.Federator.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.perform/3","ref":"ActivityPub.Federator.html#perform/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.publish/2","ref":"ActivityPub.Federator.html#publish/2"},{"type":"module","doc":"","title":"ActivityPub.Federator.APPublisher","ref":"ActivityPub.Federator.APPublisher.html"},{"type":"function","doc":"Determine a user inbox to use based on heuristics.  These heuristics\nare based on an approximation of the ``sharedInbox`` rules in the\n[ActivityPub specification][ap-sharedinbox].\n\n   [ap-sharedinbox]: https://www.w3.org/TR/activitypub/#shared-inbox-delivery","title":"ActivityPub.Federator.APPublisher.determine_inbox/4","ref":"ActivityPub.Federator.APPublisher.html#determine_inbox/4"},{"type":"function","doc":"","title":"ActivityPub.Federator.APPublisher.gather_webfinger_links/1","ref":"ActivityPub.Federator.APPublisher.html#gather_webfinger_links/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.APPublisher.is_representable?/1","ref":"ActivityPub.Federator.APPublisher.html#is_representable?/1"},{"type":"function","doc":"If you put the URL of the shared inbox of an ActivityPub instance in the following env variable, all public content will be pushed there via AP federation for search indexing purposes: PUSH_ALL_PUBLIC_CONTENT_TO_INSTANCE\n#TODO: move to adapter","title":"ActivityPub.Federator.APPublisher.maybe_federate_to_search_index/2","ref":"ActivityPub.Federator.APPublisher.html#maybe_federate_to_search_index/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.APPublisher.publish/3","ref":"ActivityPub.Federator.APPublisher.html#publish/3"},{"type":"function","doc":"Publish a single message to a peer.  Takes a struct with the following\nparameters set:\n\n* `inbox`: the inbox to publish to\n* `json`: the JSON message body representing the ActivityPub message\n* `actor`: the actor which is signing the message\n* `id`: the ActivityStreams URI of the message","title":"ActivityPub.Federator.APPublisher.publish_one/1","ref":"ActivityPub.Federator.APPublisher.html#publish_one/1"},{"type":"behaviour","doc":"Contract for ActivityPub module adapters","title":"ActivityPub.Federator.Adapter","ref":"ActivityPub.Federator.Adapter.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.adapter/0","ref":"ActivityPub.Federator.Adapter.html#adapter/0"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.base_url/0","ref":"ActivityPub.Federator.Adapter.html#base_url/0"},{"type":"callback","doc":"The base URL of the application serving `ActivityPub.Web.Endpoint`.","title":"ActivityPub.Federator.Adapter.base_url/0","ref":"ActivityPub.Federator.Adapter.html#c:base_url/0"},{"type":"function","doc":"Run function from adapter if defined, otherwise return fallback value","title":"ActivityPub.Federator.Adapter.call_or/3","ref":"ActivityPub.Federator.Adapter.html#call_or/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.external_followers_for_activity/2","ref":"ActivityPub.Federator.Adapter.html#external_followers_for_activity/2"},{"type":"callback","doc":"Compute and return a subset of followers that should receive a specific activity (optional)","title":"ActivityPub.Federator.Adapter.external_followers_for_activity/2","ref":"ActivityPub.Federator.Adapter.html#c:external_followers_for_activity/2"},{"type":"function","doc":"Whether this (local or remote) actor has federation enabled and/or is blocked on this instance\n\nactor: the actor to check (eg. Alice)\ndirection: :in or :out - whether we're dealing with incoming federation or outgoing (optional)\nby_actor: optionally another actor (eg. if Alice is sending something to Bob, this would be Bob)","title":"ActivityPub.Federator.Adapter.federate_actor?/3","ref":"ActivityPub.Federator.Adapter.html#federate_actor?/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_actor_by_ap_id/1","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_ap_id/1"},{"type":"callback","doc":"Fetch an `Actor` by its full ActivityPub ID.","title":"ActivityPub.Federator.Adapter.get_actor_by_ap_id/1","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_actor_by_id/1","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_id/1"},{"type":"callback","doc":"Fetch an `Actor` by its ID in the host application database.","title":"ActivityPub.Federator.Adapter.get_actor_by_id/1","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_id/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_actor_by_username/1","ref":"ActivityPub.Federator.Adapter.html#get_actor_by_username/1"},{"type":"callback","doc":"Fetch an `Actor` given its preferred username","title":"ActivityPub.Federator.Adapter.get_actor_by_username/1","ref":"ActivityPub.Federator.Adapter.html#c:get_actor_by_username/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_follower_local_ids/1","ref":"ActivityPub.Federator.Adapter.html#get_follower_local_ids/1"},{"type":"callback","doc":"Get the host application IDs for all `Actor`s following the given `Actor`.","title":"ActivityPub.Federator.Adapter.get_follower_local_ids/1","ref":"ActivityPub.Federator.Adapter.html#c:get_follower_local_ids/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_following_local_ids/1","ref":"ActivityPub.Federator.Adapter.html#get_following_local_ids/1"},{"type":"callback","doc":"Get the host application IDs for all `Actor`s that the given `Actor` is following.","title":"ActivityPub.Federator.Adapter.get_following_local_ids/1","ref":"ActivityPub.Federator.Adapter.html#c:get_following_local_ids/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_locale/0","ref":"ActivityPub.Federator.Adapter.html#get_locale/0"},{"type":"callback","doc":"Get the default locale of the host application.","title":"ActivityPub.Federator.Adapter.get_locale/0","ref":"ActivityPub.Federator.Adapter.html#c:get_locale/0"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_or_create_service_actor/0","ref":"ActivityPub.Federator.Adapter.html#get_or_create_service_actor/0"},{"type":"callback","doc":"Creates an internal service actor by username, if missing.","title":"ActivityPub.Federator.Adapter.get_or_create_service_actor/0","ref":"ActivityPub.Federator.Adapter.html#c:get_or_create_service_actor/0"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.get_redirect_url/1","ref":"ActivityPub.Federator.Adapter.html#get_redirect_url/1"},{"type":"callback","doc":"Gets local url of an AP object to redirect in browser. Can take pointer id or an actor username.","title":"ActivityPub.Federator.Adapter.get_redirect_url/1","ref":"ActivityPub.Federator.Adapter.html#c:get_redirect_url/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.handle_activity/1","ref":"ActivityPub.Federator.Adapter.html#handle_activity/1"},{"type":"callback","doc":"Passes data to be handled by the host application","title":"ActivityPub.Federator.Adapter.handle_activity/1","ref":"ActivityPub.Federator.Adapter.html#c:handle_activity/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.maybe_create_remote_actor/1","ref":"ActivityPub.Federator.Adapter.html#maybe_create_remote_actor/1"},{"type":"callback","doc":"","title":"ActivityPub.Federator.Adapter.maybe_create_remote_actor/1","ref":"ActivityPub.Federator.Adapter.html#c:maybe_create_remote_actor/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.maybe_handle_activity/1","ref":"ActivityPub.Federator.Adapter.html#maybe_handle_activity/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.maybe_publish_object/2","ref":"ActivityPub.Federator.Adapter.html#maybe_publish_object/2"},{"type":"callback","doc":"","title":"ActivityPub.Federator.Adapter.maybe_publish_object/2","ref":"ActivityPub.Federator.Adapter.html#c:maybe_publish_object/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.update_local_actor/2","ref":"ActivityPub.Federator.Adapter.html#update_local_actor/2"},{"type":"callback","doc":"Commit new fields to the host application database for the given `Actor`.","title":"ActivityPub.Federator.Adapter.update_local_actor/2","ref":"ActivityPub.Federator.Adapter.html#c:update_local_actor/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.update_remote_actor/1","ref":"ActivityPub.Federator.Adapter.html#update_remote_actor/1"},{"type":"callback","doc":"","title":"ActivityPub.Federator.Adapter.update_remote_actor/1","ref":"ActivityPub.Federator.Adapter.html#c:update_remote_actor/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Adapter.update_remote_actor/2","ref":"ActivityPub.Federator.Adapter.html#update_remote_actor/2"},{"type":"module","doc":"Handles fetching AS2 objects from remote instances.","title":"ActivityPub.Federator.Fetcher","ref":"ActivityPub.Federator.Fetcher.html"},{"type":"function","doc":"Returns `true` if the distance to target object does not exceed max configured value.\nServes to prevent fetching of very long threads, especially useful on smaller instances.\nAddresses memory leaks on recursive replies fetching.\nApplies to fetching of both ancestor (reply-to) and child (reply) objects.","title":"ActivityPub.Federator.Fetcher.allowed_recursion?/2","ref":"ActivityPub.Federator.Fetcher.html#allowed_recursion?/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.cache_fetch_error/1","ref":"ActivityPub.Federator.Fetcher.html#cache_fetch_error/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.enqueue_fetch/2","ref":"ActivityPub.Federator.Fetcher.html#enqueue_fetch/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_collection/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_collection/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_fresh_object_from_id/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_fresh_object_from_id/2"},{"type":"function","doc":"Checks if an object exists in the AP and Adapter databases and fetches and creates it if not.","title":"ActivityPub.Federator.Fetcher.fetch_object_from_id/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_object_from_id/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_objects_from_id/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_objects_from_id/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_outbox/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_outbox/2"},{"type":"function","doc":"Fetches an AS2 object from remote AP ID.","title":"ActivityPub.Federator.Fetcher.fetch_remote_object_from_id/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_remote_object_from_id/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_replies/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_replies/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.fetch_thread/2","ref":"ActivityPub.Federator.Fetcher.html#fetch_thread/2"},{"type":"function","doc":"Checks if an object exists in the AP database and fetches it if not (but does not send to Adapter).","title":"ActivityPub.Federator.Fetcher.get_cached_object_or_fetch_ap_id/2","ref":"ActivityPub.Federator.Fetcher.html#get_cached_object_or_fetch_ap_id/2"},{"type":"function","doc":"Checks if an object exists in the AP database and prepares it if not (local objects only).","title":"ActivityPub.Federator.Fetcher.get_cached_object_or_fetch_pointer_id/2","ref":"ActivityPub.Federator.Fetcher.html#get_cached_object_or_fetch_pointer_id/2"},{"type":"function","doc":"Fetch a list of objects within recursion limits. Used for reply_to/context, and replies or similar collections.","title":"ActivityPub.Federator.Fetcher.maybe_fetch/2","ref":"ActivityPub.Federator.Fetcher.html#maybe_fetch/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Fetcher.maybe_parse_header_url/2","ref":"ActivityPub.Federator.Fetcher.html#maybe_parse_header_url/2"},{"type":"module","doc":"Module for building and performing HTTP requests.","title":"ActivityPub.Federator.HTTP","ref":"ActivityPub.Federator.HTTP.html"},{"type":"function","doc":"Makes a DELETE request\n\nsee `ActivityPub.Federator.HTTP.http_request/5`","title":"ActivityPub.Federator.HTTP.delete/4","ref":"ActivityPub.Federator.HTTP.html#delete/4"},{"type":"function","doc":"Makes a GET request\n\nsee `ActivityPub.Federator.HTTP.http_request/5`","title":"ActivityPub.Federator.HTTP.get/3","ref":"ActivityPub.Federator.HTTP.html#get/3"},{"type":"function","doc":"Builds and perform http request.\n\n# Arguments:\n`method` - :get, :post, :put, :delete\n`url`\n`body`\n`headers` - a keyworld list of headers, e.g. `[{\"content-type\", \"text/plain\"}]`\n`options` - custom, per-request middleware or adapter options\n\n# Returns:\n`{:ok, %Tesla.Env{}}` or `{:error, error}`","title":"ActivityPub.Federator.HTTP.http_request/5","ref":"ActivityPub.Federator.HTTP.html#http_request/5"},{"type":"function","doc":"Makes a POST request\n\nsee `ActivityPub.Federator.HTTP.http_request/5`","title":"ActivityPub.Federator.HTTP.post/4","ref":"ActivityPub.Federator.HTTP.html#post/4"},{"type":"function","doc":"Makes a PUT request\n\nsee `ActivityPub.Federator.HTTP.http_request/5`","title":"ActivityPub.Federator.HTTP.put/4","ref":"ActivityPub.Federator.HTTP.html#put/4"},{"type":"type","doc":"","title":"ActivityPub.Federator.HTTP.t/0","ref":"ActivityPub.Federator.HTTP.html#t:t/0"},{"type":"module","doc":"Specifies connection options for HTTP requests","title":"ActivityPub.Federator.HTTP.Connection","ref":"ActivityPub.Federator.HTTP.Connection.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.Connection.adapter_options/2","ref":"ActivityPub.Federator.HTTP.Connection.html#adapter_options/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.Connection.new/1","ref":"ActivityPub.Federator.HTTP.Connection.html#new/1"},{"type":"module","doc":"Rate limit middleware for Tesla using Hammer\nBased on `TeslaExtra.RateLimit` and `TeslaExtra.RetryAfter`","title":"ActivityPub.Federator.HTTP.RateLimit","ref":"ActivityPub.Federator.HTTP.RateLimit.html"},{"type":"module","doc":"Helper functions for building HTTP requests","title":"ActivityPub.Federator.HTTP.RequestBuilder","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.RequestBuilder.add_param/4","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#add_param/4"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.RequestBuilder.headers/2","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#headers/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.RequestBuilder.method/2","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#method/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.RequestBuilder.opts/2","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#opts/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.HTTP.RequestBuilder.url/2","ref":"ActivityPub.Federator.HTTP.RequestBuilder.html#url/2"},{"type":"module","doc":"Takes into account the Retry-After header returned by the server when the rate limit is exceeded.\n\nBased on `TeslaExtra.RetryAfter`","title":"ActivityPub.Federator.HTTP.RetryAfter","ref":"ActivityPub.Federator.HTTP.RetryAfter.html"},{"type":"module","doc":"","title":"ActivityPub.Federator.HTTP.Tesla","ref":"ActivityPub.Federator.HTTP.Tesla.html"},{"type":"function","doc":"Perform a DELETE request.\n\nSee `request/1` or `request/2` for options definition.\n\n    delete(\"/users\")\n    delete(\"/users\", query: [scope: \"admin\"])\n    delete(client, \"/users\")\n    delete(client, \"/users\", query: [scope: \"admin\"])\n    delete(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.delete/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#delete/3"},{"type":"function","doc":"Perform a DELETE request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    delete!(\"/users\")\n    delete!(\"/users\", query: [scope: \"admin\"])\n    delete!(client, \"/users\")\n    delete!(client, \"/users\", query: [scope: \"admin\"])\n    delete!(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.delete!/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#delete!/3"},{"type":"function","doc":"Perform a GET request.\n\nSee `request/1` or `request/2` for options definition.\n\n    get(\"/users\")\n    get(\"/users\", query: [scope: \"admin\"])\n    get(client, \"/users\")\n    get(client, \"/users\", query: [scope: \"admin\"])\n    get(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.get/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#get/3"},{"type":"function","doc":"Perform a GET request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    get!(\"/users\")\n    get!(\"/users\", query: [scope: \"admin\"])\n    get!(client, \"/users\")\n    get!(client, \"/users\", query: [scope: \"admin\"])\n    get!(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.get!/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#get!/3"},{"type":"function","doc":"Perform a HEAD request.\n\nSee `request/1` or `request/2` for options definition.\n\n    head(\"/users\")\n    head(\"/users\", query: [scope: \"admin\"])\n    head(client, \"/users\")\n    head(client, \"/users\", query: [scope: \"admin\"])\n    head(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.head/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#head/3"},{"type":"function","doc":"Perform a HEAD request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    head!(\"/users\")\n    head!(\"/users\", query: [scope: \"admin\"])\n    head!(client, \"/users\")\n    head!(client, \"/users\", query: [scope: \"admin\"])\n    head!(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.head!/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#head!/3"},{"type":"function","doc":"Perform a OPTIONS request.\n\nSee `request/1` or `request/2` for options definition.\n\n    options(\"/users\")\n    options(\"/users\", query: [scope: \"admin\"])\n    options(client, \"/users\")\n    options(client, \"/users\", query: [scope: \"admin\"])\n    options(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.options/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#options/3"},{"type":"function","doc":"Perform a OPTIONS request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    options!(\"/users\")\n    options!(\"/users\", query: [scope: \"admin\"])\n    options!(client, \"/users\")\n    options!(client, \"/users\", query: [scope: \"admin\"])\n    options!(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.options!/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#options!/3"},{"type":"function","doc":"Perform a PATCH request.\n\nSee `request/1` or `request/2` for options definition.\n\n    patch(\"/users\", %{name: \"Jon\"})\n    patch(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    patch(client, \"/users\", %{name: \"Jon\"})\n    patch(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.patch/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#patch/4"},{"type":"function","doc":"Perform a PATCH request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    patch!(\"/users\", %{name: \"Jon\"})\n    patch!(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    patch!(client, \"/users\", %{name: \"Jon\"})\n    patch!(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.patch!/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#patch!/4"},{"type":"function","doc":"Perform a POST request.\n\nSee `request/1` or `request/2` for options definition.\n\n    post(\"/users\", %{name: \"Jon\"})\n    post(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    post(client, \"/users\", %{name: \"Jon\"})\n    post(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.post/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#post/4"},{"type":"function","doc":"Perform a POST request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    post!(\"/users\", %{name: \"Jon\"})\n    post!(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    post!(client, \"/users\", %{name: \"Jon\"})\n    post!(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.post!/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#post!/4"},{"type":"function","doc":"Perform a PUT request.\n\nSee `request/1` or `request/2` for options definition.\n\n    put(\"/users\", %{name: \"Jon\"})\n    put(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    put(client, \"/users\", %{name: \"Jon\"})\n    put(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.put/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#put/4"},{"type":"function","doc":"Perform a PUT request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    put!(\"/users\", %{name: \"Jon\"})\n    put!(\"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])\n    put!(client, \"/users\", %{name: \"Jon\"})\n    put!(client, \"/users\", %{name: \"Jon\"}, query: [scope: \"admin\"])","title":"ActivityPub.Federator.HTTP.Tesla.put!/4","ref":"ActivityPub.Federator.HTTP.Tesla.html#put!/4"},{"type":"function","doc":"Perform a request.","title":"ActivityPub.Federator.HTTP.Tesla.request/2","ref":"ActivityPub.Federator.HTTP.Tesla.html#request/2"},{"type":"function","doc":"- `:method` - the request method, one of [`:head`, `:get`, `:delete`, `:trace`, `:options`, `:post`, `:put`, `:patch`]\n- `:url` - either full url e.g. \"http://example.com/some/path\" or just \"/some/path\" if using `Tesla.Middleware.BaseUrl`\n- `:query` - a keyword list of query params, e.g. `[page: 1, per_page: 100]`\n- `:headers` - a keyword list of headers, e.g. `[{\"content-type\", \"text/plain\"}]`\n- `:body` - depends on used middleware:\n    - by default it can be a binary\n    - if using e.g. JSON encoding middleware it can be a nested map\n    - if adapter supports it it can be a Stream with any of the above\n- `:opts` - custom, per-request middleware or adapter options","title":"Options - ActivityPub.Federator.HTTP.Tesla.request/2","ref":"ActivityPub.Federator.HTTP.Tesla.html#request/2-options"},{"type":"function","doc":"ExampleApi.request(method: :get, url: \"/users/path\")\n\n    # use shortcut methods\n    ExampleApi.get(\"/users/1\")\n    ExampleApi.post(client, \"/users\", %{name: \"Jon\"})","title":"Examples - ActivityPub.Federator.HTTP.Tesla.request/2","ref":"ActivityPub.Federator.HTTP.Tesla.html#request/2-examples"},{"type":"function","doc":"Perform request and raise in case of error.\n\nThis is similar to `request/2` behaviour from Tesla 0.x\n\nSee `request/2` for list of available options.","title":"ActivityPub.Federator.HTTP.Tesla.request!/2","ref":"ActivityPub.Federator.HTTP.Tesla.html#request!/2"},{"type":"function","doc":"Perform a TRACE request.\n\nSee `request/1` or `request/2` for options definition.\n\n    trace(\"/users\")\n    trace(\"/users\", query: [scope: \"admin\"])\n    trace(client, \"/users\")\n    trace(client, \"/users\", query: [scope: \"admin\"])\n    trace(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.trace/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#trace/3"},{"type":"function","doc":"Perform a TRACE request.\n\nSee `request!/1` or `request!/2` for options definition.\n\n    trace!(\"/users\")\n    trace!(\"/users\", query: [scope: \"admin\"])\n    trace!(client, \"/users\")\n    trace!(client, \"/users\", query: [scope: \"admin\"])\n    trace!(client, \"/users\", body: %{name: \"Jon\"})","title":"ActivityPub.Federator.HTTP.Tesla.trace!/3","ref":"ActivityPub.Federator.HTTP.Tesla.html#trace!/3"},{"type":"type","doc":"Options that may be passed to a request function. See `request/2` for detailed descriptions.","title":"ActivityPub.Federator.HTTP.Tesla.option/0","ref":"ActivityPub.Federator.HTTP.Tesla.html#t:option/0"},{"type":"behaviour","doc":"Defines the contract used by federation implementations to publish messages to\ntheir peers.\n# TODO: why not use `APPublisher` directly instead?","title":"ActivityPub.Federator.Publisher","ref":"ActivityPub.Federator.Publisher.html"},{"type":"function","doc":"Enqueue publishing a single activity.","title":"ActivityPub.Federator.Publisher.enqueue_one/2","ref":"ActivityPub.Federator.Publisher.html#enqueue_one/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Publisher.gather_webfinger_links/1","ref":"ActivityPub.Federator.Publisher.html#gather_webfinger_links/1"},{"type":"callback","doc":"Gathers links used by an outgoing federation module for WebFinger output.","title":"ActivityPub.Federator.Publisher.gather_webfinger_links/1","ref":"ActivityPub.Federator.Publisher.html#c:gather_webfinger_links/1"},{"type":"callback","doc":"Determine whether an activity can be relayed using the federation module.","title":"ActivityPub.Federator.Publisher.is_representable?/1","ref":"ActivityPub.Federator.Publisher.html#c:is_representable?/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Publisher.publish/2","ref":"ActivityPub.Federator.Publisher.html#publish/2"},{"type":"callback","doc":"Relays an activity to all specified peers.","title":"ActivityPub.Federator.Publisher.publish/2","ref":"ActivityPub.Federator.Publisher.html#c:publish/2"},{"type":"callback","doc":"Relays an activity to a specified peer, determined by the parameters.  The\nparameters used are controlled by the federation module.","title":"ActivityPub.Federator.Publisher.publish_one/1","ref":"ActivityPub.Federator.Publisher.html#c:publish_one/1"},{"type":"module","doc":"This module normalises outgoing data to conform with AS2/AP specs\nand handles incoming objects and activities","title":"ActivityPub.Federator.Transformer","ref":"ActivityPub.Federator.Transformer.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.add_emoji_tags/1","ref":"ActivityPub.Federator.Transformer.html#add_emoji_tags/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_actor/1","ref":"ActivityPub.Federator.Transformer.html#fix_actor/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_addressing/1","ref":"ActivityPub.Federator.Transformer.html#fix_addressing/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_attachments/1","ref":"ActivityPub.Federator.Transformer.html#fix_attachments/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_content_map/1","ref":"ActivityPub.Federator.Transformer.html#fix_content_map/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_context/2","ref":"ActivityPub.Federator.Transformer.html#fix_context/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_emoji/1","ref":"ActivityPub.Federator.Transformer.html#fix_emoji/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_in_reply_to/2","ref":"ActivityPub.Federator.Transformer.html#fix_in_reply_to/2"},{"type":"function","doc":"Modifies an incoming AP object (mastodon format) to our internal format.","title":"ActivityPub.Federator.Transformer.fix_object/2","ref":"ActivityPub.Federator.Transformer.html#fix_object/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_quote_url/2","ref":"ActivityPub.Federator.Transformer.html#fix_quote_url/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_replies/2","ref":"ActivityPub.Federator.Transformer.html#fix_replies/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_summary/1","ref":"ActivityPub.Federator.Transformer.html#fix_summary/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_tag/1","ref":"ActivityPub.Federator.Transformer.html#fix_tag/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.fix_url/1","ref":"ActivityPub.Federator.Transformer.html#fix_url/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.format_input/3","ref":"ActivityPub.Federator.Transformer.html#format_input/3"},{"type":"function","doc":"Handles incoming data, inserts it into the database and triggers side effects if the data is a supported activity type.","title":"ActivityPub.Federator.Transformer.handle_incoming/2","ref":"ActivityPub.Federator.Transformer.html#handle_incoming/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.maybe_handle_other_activity/1","ref":"ActivityPub.Federator.Transformer.html#maybe_handle_other_activity/1"},{"type":"function","doc":"Translates MN Entity to an AP compatible format","title":"ActivityPub.Federator.Transformer.prepare_outgoing/1","ref":"ActivityPub.Federator.Transformer.html#prepare_outgoing/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.preserve_privacy_of_outgoing/2","ref":"ActivityPub.Federator.Transformer.html#preserve_privacy_of_outgoing/2"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.replies/1","ref":"ActivityPub.Federator.Transformer.html#replies/1"},{"type":"function","doc":"Serialized Mastodon-compatible `replies` collection containing _self-replies_.\nBased on Mastodon's ActivityPub::NoteSerializer#replies.","title":"ActivityPub.Federator.Transformer.set_replies/1","ref":"ActivityPub.Federator.Transformer.html#set_replies/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.Transformer.take_emoji_tags/1","ref":"ActivityPub.Federator.Transformer.html#take_emoji_tags/1"},{"type":"module","doc":"Serves and fetches data (mainly actor URI) necessary for federation when only the username and host is known.","title":"ActivityPub.Federator.WebFinger","ref":"ActivityPub.Federator.WebFinger.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.WebFinger.base_url/1","ref":"ActivityPub.Federator.WebFinger.html#base_url/1"},{"type":"function","doc":"Fetches webfinger data for an account given in \"@username@domain.tld\" format.","title":"ActivityPub.Federator.WebFinger.finger/1","ref":"ActivityPub.Federator.WebFinger.html#finger/1"},{"type":"function","doc":"Serves a webfinger response for the requested username.","title":"ActivityPub.Federator.WebFinger.output/1","ref":"ActivityPub.Federator.WebFinger.html#output/1"},{"type":"function","doc":"Formats gathered data into a JRD format.","title":"ActivityPub.Federator.WebFinger.represent_user/1","ref":"ActivityPub.Federator.WebFinger.html#represent_user/1"},{"type":"function","doc":"","title":"ActivityPub.Federator.WebFinger.webfinger_from_json/1","ref":"ActivityPub.Federator.WebFinger.html#webfinger_from_json/1"},{"type":"module","doc":"Helpers for workers to `use`","title":"ActivityPub.Federator.Worker","ref":"ActivityPub.Federator.Worker.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Worker.worker_args/1","ref":"ActivityPub.Federator.Worker.html#worker_args/1"},{"type":"module","doc":"","title":"ActivityPub.Federator.Workers.PublisherWorker","ref":"ActivityPub.Federator.Workers.PublisherWorker.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.PublisherWorker.enqueue/3","ref":"ActivityPub.Federator.Workers.PublisherWorker.html#enqueue/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.PublisherWorker.enqueueable/3","ref":"ActivityPub.Federator.Workers.PublisherWorker.html#enqueueable/3"},{"type":"module","doc":"","title":"ActivityPub.Federator.Workers.ReceiverWorker","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.ReceiverWorker.enqueue/3","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html#enqueue/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.ReceiverWorker.enqueueable/3","ref":"ActivityPub.Federator.Workers.ReceiverWorker.html#enqueueable/3"},{"type":"module","doc":"","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker.enqueue/3","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html#enqueue/3"},{"type":"function","doc":"","title":"ActivityPub.Federator.Workers.RemoteFetcherWorker.enqueueable/3","ref":"ActivityPub.Federator.Workers.RemoteFetcherWorker.html#enqueueable/3"},{"type":"module","doc":"","title":"ActivityPub.Fixtures","ref":"ActivityPub.Fixtures.html"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.file/1","ref":"ActivityPub.Fixtures.html#file/1"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.fixtures/0","ref":"ActivityPub.Fixtures.html#fixtures/0"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.fixtures_generic/0","ref":"ActivityPub.Fixtures.html#fixtures_generic/0"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.fixtures_get/0","ref":"ActivityPub.Fixtures.html#fixtures_get/0"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.get/4","ref":"ActivityPub.Fixtures.html#get/4"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.head/4","ref":"ActivityPub.Fixtures.html#head/4"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.insert/1","ref":"ActivityPub.Fixtures.html#insert/1"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.insert_all/0","ref":"ActivityPub.Fixtures.html#insert_all/0"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.insert_file/1","ref":"ActivityPub.Fixtures.html#insert_file/1"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.insert_json/1","ref":"ActivityPub.Fixtures.html#insert_json/1"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.maybe_get_local/4","ref":"ActivityPub.Fixtures.html#maybe_get_local/4"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.mock_global/1","ref":"ActivityPub.Fixtures.html#mock_global/1"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.none/4","ref":"ActivityPub.Fixtures.html#none/4"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.post/4","ref":"ActivityPub.Fixtures.html#post/4"},{"type":"function","doc":"","title":"ActivityPub.Fixtures.request/1","ref":"ActivityPub.Fixtures.html#request/1"},{"type":"module","doc":"Instances context.","title":"ActivityPub.Instances","ref":"ActivityPub.Instances.html"},{"type":"function","doc":"","title":"ActivityPub.Instances.filter_reachable/1","ref":"ActivityPub.Instances.html#filter_reachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.host/1","ref":"ActivityPub.Instances.html#host/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.reachability_datetime_threshold/0","ref":"ActivityPub.Instances.html#reachability_datetime_threshold/0"},{"type":"function","doc":"","title":"ActivityPub.Instances.reachable?/1","ref":"ActivityPub.Instances.html#reachable?/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.scrape_nodeinfo/1","ref":"ActivityPub.Instances.html#scrape_nodeinfo/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.set_consistently_unreachable/1","ref":"ActivityPub.Instances.html#set_consistently_unreachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.set_reachable/1","ref":"ActivityPub.Instances.html#set_reachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.set_unreachable/2","ref":"ActivityPub.Instances.html#set_unreachable/2"},{"type":"module","doc":"Instance.","title":"ActivityPub.Instances.Instance","ref":"ActivityPub.Instances.Instance.html"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.changeset/2","ref":"ActivityPub.Instances.Instance.html#changeset/2"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.do_set_reachable/1","ref":"ActivityPub.Instances.Instance.html#do_set_reachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.filter_reachable/1","ref":"ActivityPub.Instances.Instance.html#filter_reachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.host/1","ref":"ActivityPub.Instances.Instance.html#host/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.reachable?/1","ref":"ActivityPub.Instances.Instance.html#reachable?/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.set_reachable/1","ref":"ActivityPub.Instances.Instance.html#set_reachable/1"},{"type":"function","doc":"","title":"ActivityPub.Instances.Instance.set_unreachable/2","ref":"ActivityPub.Instances.Instance.html#set_unreachable/2"},{"type":"behaviour","doc":"Message Rewrite Facility\n\n**WARNING: Due to how this app currently handles its configuration, MRF is only usable if you're building your own docker image.**\n\nThe Message Rewrite Facility (MRF) is a subsystem that is implemented as a series of hooks that allows the administrator to rewrite or discard messages.\n\nPossible uses include:\n\n- marking incoming messages with media from a given account or instance as sensitive\n- rejecting messages from a specific instance\n- rejecting reports (flags) from a specific instance\n- removing/unlisting messages from the public timelines\n- removing media from messages\n- sending only public messages to a specific instance\n\nThe MRF provides user-configurable policies. The default policy is `NoOpPolicy`, which disables the MRF functionality. Bonfire also includes an easy to use policy called `SimplePolicy` which maps messages matching certain pre-defined criterion to actions built into the policy module. It is possible to use multiple, active MRF policies at the same time.\n\n> See the docs of `ActivityPub.MRF.SimplePolicy` for details about how to use it.","title":"ActivityPub.MRF","ref":"ActivityPub.MRF.html"},{"type":"behaviour","doc":"The effects of MRF policies can be very drastic. It is important to use this functionality carefully. Always try to talk to an admin before writing an MRF policy concerning their instance.","title":"Use with Care - ActivityPub.MRF","ref":"ActivityPub.MRF.html#module-use-with-care"},{"type":"behaviour","doc":"As discussed above, the MRF system is a modular system that supports pluggable policies. This means that an admin may write a custom MRF policy in Elixir or any other language that runs on the Erlang VM, by specifying the module name in the `rewrite_policy` config setting.\n\nFor example, here is a sample policy module which rewrites all messages to \"new message content\":\n\n```elixir\n# This is a sample MRF policy which rewrites all Notes to have \"new message\n# content.\"\ndefmodule Site.RewritePolicy do\n  @behavior ActivityPub.MRF\n\n  # Catch messages which contain Note objects with actual data to filter.\n  # Capture the object as `object`, the message content as `content` and the\n  # entire activity itself as `activity`.\n  @impl true\n  def filter(%{\"type\" => \"Create\", \"object\" => %{\"type\" => \"Note\", \"content\" => content} = object} = message)\n      when is_binary(content) do\n    # Subject / CW is stored as summary instead of `name` like other AS2 objects\n    # because of Mastodon doing it that way.\n    summary = object[\"summary\"]\n\n    # edits go here.\n    content = \"new message content\"\n\n    # Assemble the mutated object.\n    object =\n      object\n      |> Map.put(\"content\", content)\n      |> Map.put(\"summary\", summary)\n\n    # Assemble the mutated activity.\n    {:ok, Map.put(activity, \"object\", object)}\n  end\n\n  # Let all other messages through without modifying them.\n  @impl true\n  def filter(message), do: {:ok, message}\nend\n```\n\nIf you save this file as `lib/site/mrf/rewrite_policy.ex`, it will be included when you next rebuild Bonfire. You can enable it in the configuration like so:\n\n```\nconfig :activity_pub, :instance,\n  rewrite_policy: [\n    ActivityPub.MRF.SimplePolicy,\n    Site.RewritePolicy\n  ]\n```","title":"Writing your own MRF Policy - ActivityPub.MRF","ref":"ActivityPub.MRF.html#module-writing-your-own-mrf-policy"},{"type":"function","doc":"","title":"ActivityPub.MRF.filter/2","ref":"ActivityPub.MRF.html#filter/2"},{"type":"callback","doc":"","title":"ActivityPub.MRF.filter/2","ref":"ActivityPub.MRF.html#c:filter/2"},{"type":"function","doc":"","title":"ActivityPub.MRF.filter/3","ref":"ActivityPub.MRF.html#filter/3"},{"type":"function","doc":"","title":"ActivityPub.MRF.get_policies/0","ref":"ActivityPub.MRF.html#get_policies/0"},{"type":"function","doc":"","title":"ActivityPub.MRF.subdomain_match?/2","ref":"ActivityPub.MRF.html#subdomain_match?/2"},{"type":"function","doc":"","title":"ActivityPub.MRF.subdomains_regex/1","ref":"ActivityPub.MRF.html#subdomains_regex/1"},{"type":"module","doc":"Filter activities depending on their origin instance or other criteria.\n\n`SimplePolicy` is capable of handling most common admin tasks.\n\nTo use `SimplePolicy`, you must enable it. Do so by adding the following to your `:instance` config object, so that it looks like this:\n\n```\nconfig :bonfire, :instance,\n  [...]\n  rewrite_policy: ActivityPub.MRF.SimplePolicy\n```\n\nOnce `SimplePolicy` is enabled, you can configure various groups in the `:mrf_simple` config object. These groups are:\n\n- `media_removal`: Servers in this group will have media stripped from incoming messages.\n- `media_nsfw`: Servers in this group will have the #nsfw tag and sensitive setting injected into incoming messages which contain media.\n- `reject`: Servers in this group will have their messages rejected.\n- `report_removal`: Servers in this group will have their reports (flags) rejected.\n\nServers should be configured as lists.","title":"ActivityPub.MRF.SimplePolicy","ref":"ActivityPub.MRF.SimplePolicy.html"},{"type":"module","doc":"This example will enable `SimplePolicy`, block media from `illegalporn.biz`, mark media as NSFW from `porn.biz` and `porn.business`, reject messages from `spam.com` and block reports (flags) from `troll.mob`:\n\n```\nconfig :activity_pub, :instance,\n  rewrite_policy: [ActivityPub.MRF.SimplePolicy]\n\nconfig :activity_pub, :mrf_simple,\n  media_removal: [\"illegalporn.biz\"],\n  media_nsfw: [\"porn.biz\", \"porn.business\"],\n  reject: [\"spam.com\"],\n  report_removal: [\"troll.mob\"]\n\n```","title":"Example - ActivityPub.MRF.SimplePolicy","ref":"ActivityPub.MRF.SimplePolicy.html#module-example"},{"type":"function","doc":"","title":"ActivityPub.MRF.SimplePolicy.check_reject/2","ref":"ActivityPub.MRF.SimplePolicy.html#check_reject/2"},{"type":"module","doc":"","title":"ActivityPub.Object","ref":"ActivityPub.Object.html"},{"type":"function","doc":"","title":"ActivityPub.Object.actor_from_data/1","ref":"ActivityPub.Object.html#actor_from_data/1"},{"type":"function","doc":"","title":"ActivityPub.Object.actor_id_from_data/1","ref":"ActivityPub.Object.html#actor_id_from_data/1"},{"type":"function","doc":"","title":"ActivityPub.Object.all/1","ref":"ActivityPub.Object.html#all/1"},{"type":"function","doc":"","title":"ActivityPub.Object.changeset/1","ref":"ActivityPub.Object.html#changeset/1"},{"type":"function","doc":"","title":"ActivityPub.Object.changeset/2","ref":"ActivityPub.Object.html#changeset/2"},{"type":"function","doc":"","title":"ActivityPub.Object.common_changeset/1","ref":"ActivityPub.Object.html#common_changeset/1"},{"type":"function","doc":"","title":"ActivityPub.Object.delete/1","ref":"ActivityPub.Object.html#delete/1"},{"type":"function","doc":"","title":"ActivityPub.Object.do_insert/1","ref":"ActivityPub.Object.html#do_insert/1"},{"type":"function","doc":"","title":"ActivityPub.Object.do_update_existing/2","ref":"ActivityPub.Object.html#do_update_existing/2"},{"type":"function","doc":"","title":"ActivityPub.Object.fetch_latest_block/2","ref":"ActivityPub.Object.html#fetch_latest_block/2"},{"type":"function","doc":"","title":"ActivityPub.Object.fetch_latest_follow/2","ref":"ActivityPub.Object.html#fetch_latest_follow/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_activity_for_object_ap_id/2","ref":"ActivityPub.Object.html#get_activity_for_object_ap_id/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_ap_id/1","ref":"ActivityPub.Object.html#get_ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Object.get_cached/1","ref":"ActivityPub.Object.html#get_cached/1"},{"type":"function","doc":"","title":"ActivityPub.Object.get_cached!/1","ref":"ActivityPub.Object.html#get_cached!/1"},{"type":"function","doc":"Retruns an existing announce activity if the notice has already been announced","title":"ActivityPub.Object.get_existing_announce/2","ref":"ActivityPub.Object.html#get_existing_announce/2"},{"type":"function","doc":"Returns an existing like if a user already liked an object","title":"ActivityPub.Object.get_existing_like/2","ref":"ActivityPub.Object.html#get_existing_like/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_follow_activity/2","ref":"ActivityPub.Object.html#get_follow_activity/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_inbox/2","ref":"ActivityPub.Object.html#get_inbox/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_outbox_for_actor/2","ref":"ActivityPub.Object.html#get_outbox_for_actor/2"},{"type":"function","doc":"","title":"ActivityPub.Object.get_outbox_for_instance/1","ref":"ActivityPub.Object.html#get_outbox_for_instance/1"},{"type":"function","doc":"","title":"ActivityPub.Object.get_uncached/1","ref":"ActivityPub.Object.html#get_uncached/1"},{"type":"function","doc":"","title":"ActivityPub.Object.hard_delete/1","ref":"ActivityPub.Object.html#hard_delete/1"},{"type":"function","doc":"","title":"ActivityPub.Object.hashtags/1","ref":"ActivityPub.Object.html#hashtags/1"},{"type":"function","doc":"","title":"ActivityPub.Object.invalidate_cache/1","ref":"ActivityPub.Object.html#invalidate_cache/1"},{"type":"function","doc":"","title":"ActivityPub.Object.is_deleted?/1","ref":"ActivityPub.Object.html#is_deleted?/1"},{"type":"function","doc":"","title":"ActivityPub.Object.make_tombstone/2","ref":"ActivityPub.Object.html#make_tombstone/2"},{"type":"function","doc":"","title":"ActivityPub.Object.maybe_fetch/2","ref":"ActivityPub.Object.html#maybe_fetch/2"},{"type":"function","doc":"","title":"ActivityPub.Object.maybe_upsert/3","ref":"ActivityPub.Object.html#maybe_upsert/3"},{"type":"function","doc":"","title":"ActivityPub.Object.normalise_tos/1","ref":"ActivityPub.Object.html#normalise_tos/1"},{"type":"function","doc":"","title":"ActivityPub.Object.normalize/3","ref":"ActivityPub.Object.html#normalize/3"},{"type":"function","doc":"","title":"ActivityPub.Object.normalize_actors/1","ref":"ActivityPub.Object.html#normalize_actors/1"},{"type":"function","doc":"","title":"ActivityPub.Object.normalize_params/3","ref":"ActivityPub.Object.html#normalize_params/3"},{"type":"function","doc":"","title":"ActivityPub.Object.object_url/1","ref":"ActivityPub.Object.html#object_url/1"},{"type":"function","doc":"Prepares a struct to be inserted into the objects table","title":"ActivityPub.Object.prepare_data/4","ref":"ActivityPub.Object.html#prepare_data/4"},{"type":"function","doc":"","title":"ActivityPub.Object.query/1","ref":"ActivityPub.Object.html#query/1"},{"type":"function","doc":"","title":"ActivityPub.Object.self_replies_ids/2","ref":"ActivityPub.Object.html#self_replies_ids/2"},{"type":"function","doc":"","title":"ActivityPub.Object.set_cache/1","ref":"ActivityPub.Object.html#set_cache/1"},{"type":"function","doc":"","title":"ActivityPub.Object.swap_object_with_tombstone/1","ref":"ActivityPub.Object.html#swap_object_with_tombstone/1"},{"type":"function","doc":"","title":"ActivityPub.Object.update_and_set_cache/1","ref":"ActivityPub.Object.html#update_and_set_cache/1"},{"type":"function","doc":"","title":"ActivityPub.Object.update_changeset/2","ref":"ActivityPub.Object.html#update_changeset/2"},{"type":"function","doc":"","title":"ActivityPub.Object.update_existing/2","ref":"ActivityPub.Object.html#update_existing/2"},{"type":"function","doc":"Updates a follow activity's state (for locked accounts).","title":"ActivityPub.Object.update_state/3","ref":"ActivityPub.Object.html#update_state/3"},{"type":"type","doc":"","title":"ActivityPub.Object.t/0","ref":"ActivityPub.Object.html#t:t/0"},{"type":"module","doc":"Prunes objects from the database.","title":"ActivityPub.Pruner","ref":"ActivityPub.Pruner.html"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_all/1","ref":"ActivityPub.Pruner.html#prune_all/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_deletes/1","ref":"ActivityPub.Pruner.html#prune_deletes/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_objects/1","ref":"ActivityPub.Pruner.html#prune_objects/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_orphaned_activities/0","ref":"ActivityPub.Pruner.html#prune_orphaned_activities/0"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_removes/1","ref":"ActivityPub.Pruner.html#prune_removes/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_stale_follow_requests/1","ref":"ActivityPub.Pruner.html#prune_stale_follow_requests/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_tombstones/1","ref":"ActivityPub.Pruner.html#prune_tombstones/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.prune_undos/1","ref":"ActivityPub.Pruner.html#prune_undos/1"},{"type":"function","doc":"","title":"ActivityPub.Pruner.remove_embedded_objects/0","ref":"ActivityPub.Pruner.html#remove_embedded_objects/0"},{"type":"module","doc":"The worker to prune old data from the database.","title":"ActivityPub.Pruner.PruneDatabaseWorker","ref":"ActivityPub.Pruner.PruneDatabaseWorker.html"},{"type":"module","doc":"Contains queries for Object.","title":"ActivityPub.Queries","ref":"ActivityPub.Queries.html"},{"type":"function","doc":"","title":"ActivityPub.Queries.activity_by_object_ap_id/2","ref":"ActivityPub.Queries.html#activity_by_object_ap_id/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_actor/2","ref":"ActivityPub.Queries.html#by_actor/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_ap_id/2","ref":"ActivityPub.Queries.html#by_ap_id/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_id/2","ref":"ActivityPub.Queries.html#by_id/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_object_id/2","ref":"ActivityPub.Queries.html#by_object_id/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_object_in_reply_to_id/3","ref":"ActivityPub.Queries.html#by_object_in_reply_to_id/3"},{"type":"function","doc":"","title":"ActivityPub.Queries.by_type/2","ref":"ActivityPub.Queries.html#by_type/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.exclude_type/2","ref":"ActivityPub.Queries.html#exclude_type/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.find_by_object_ap_id/2","ref":"ActivityPub.Queries.html#find_by_object_ap_id/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.last_follow/2","ref":"ActivityPub.Queries.html#last_follow/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.ordered/1","ref":"ActivityPub.Queries.html#ordered/1"},{"type":"function","doc":"","title":"ActivityPub.Queries.replies/2","ref":"ActivityPub.Queries.html#replies/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.self_replies/1","ref":"ActivityPub.Queries.html#self_replies/1"},{"type":"function","doc":"","title":"ActivityPub.Queries.with_joined_activity/3","ref":"ActivityPub.Queries.html#with_joined_activity/3"},{"type":"function","doc":"","title":"ActivityPub.Queries.with_joined_object/2","ref":"ActivityPub.Queries.html#with_joined_object/2"},{"type":"function","doc":"","title":"ActivityPub.Queries.with_preloaded_object/2","ref":"ActivityPub.Queries.html#with_preloaded_object/2"},{"type":"type","doc":"","title":"ActivityPub.Queries.query/0","ref":"ActivityPub.Queries.html#t:query/0"},{"type":"module","doc":"This module contains some useful functions for containing objects to specific\norigins and determining those origins.  They previously lived in the\nActivityPub `Transformer` module.\n\nObject containment is an important step in validating remote objects to prevent\nspoofing, therefore removal of object containment functions is NOT recommended.","title":"ActivityPub.Safety.Containment","ref":"ActivityPub.Safety.Containment.html"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.contain_child/1","ref":"ActivityPub.Safety.Containment.html#contain_child/1"},{"type":"function","doc":"Checks that an imported AP object's actor matches the host it came from.","title":"ActivityPub.Safety.Containment.contain_origin/2","ref":"ActivityPub.Safety.Containment.html#contain_origin/2"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.contain_origin_from_id/2","ref":"ActivityPub.Safety.Containment.html#contain_origin_from_id/2"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.contain_uri/2","ref":"ActivityPub.Safety.Containment.html#contain_uri/2"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.get_object/1","ref":"ActivityPub.Safety.Containment.html#get_object/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.restrict_unauthenticated_access?/1","ref":"ActivityPub.Safety.Containment.html#restrict_unauthenticated_access?/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.restrict_unauthenticated_access?/2","ref":"ActivityPub.Safety.Containment.html#restrict_unauthenticated_access?/2"},{"type":"function","doc":"","title":"ActivityPub.Safety.Containment.visible_for_user?/2","ref":"ActivityPub.Safety.Containment.html#visible_for_user?/2"},{"type":"module","doc":"Provides encryption and decryption functionality using RSA keys managed by ActivityPub.Safety.Keys.\n\nNOTE: not used at the moment, simply intended as a proof-of-concept","title":"ActivityPub.Safety.Encryption","ref":"ActivityPub.Safety.Encryption.html"},{"type":"function","doc":"Decrypts data for a given actor using their private key.","title":"ActivityPub.Safety.Encryption.decrypt/2","ref":"ActivityPub.Safety.Encryption.html#decrypt/2"},{"type":"function","doc":"- encrypted_data: The data to decrypt (binary)\n  - actor: The Actor struct with private keys","title":"Parameters - ActivityPub.Safety.Encryption.decrypt/2","ref":"ActivityPub.Safety.Encryption.html#decrypt/2-parameters"},{"type":"function","doc":"- {:ok, decrypted_data} on success\n  - {:error, reason} on failure","title":"Returns - ActivityPub.Safety.Encryption.decrypt/2","ref":"ActivityPub.Safety.Encryption.html#decrypt/2-returns"},{"type":"function","doc":"Encrypts data for a given actor using their public key.","title":"ActivityPub.Safety.Encryption.encrypt/2","ref":"ActivityPub.Safety.Encryption.html#encrypt/2"},{"type":"function","doc":"- data: The data to encrypt (binary or string)\n  - actor: The Actor struct or AP ID of the recipient","title":"Parameters - ActivityPub.Safety.Encryption.encrypt/2","ref":"ActivityPub.Safety.Encryption.html#encrypt/2-parameters"},{"type":"function","doc":"- {:ok, encrypted_data} on success\n  - {:error, reason} on failure","title":"Returns - ActivityPub.Safety.Encryption.encrypt/2","ref":"ActivityPub.Safety.Encryption.html#encrypt/2-returns"},{"type":"module","doc":"Implementation for behaviour from `HTTPSignatures` library","title":"ActivityPub.Safety.HTTP.Signatures","ref":"ActivityPub.Safety.HTTP.Signatures.html"},{"type":"function","doc":"Fetch public key from remote actor","title":"ActivityPub.Safety.HTTP.Signatures.fetch_fresh_public_key/1","ref":"ActivityPub.Safety.HTTP.Signatures.html#fetch_fresh_public_key/1"},{"type":"function","doc":"Get or fetch public key from local cache/DB","title":"ActivityPub.Safety.HTTP.Signatures.fetch_public_key/1","ref":"ActivityPub.Safety.HTTP.Signatures.html#fetch_public_key/1"},{"type":"function","doc":"Get public key from local cache/DB","title":"ActivityPub.Safety.HTTP.Signatures.get_public_key/1","ref":"ActivityPub.Safety.HTTP.Signatures.html#get_public_key/1"},{"type":"module","doc":"Handles RSA keys for Actors & helpers for HTTP signatures","title":"ActivityPub.Safety.Keys","ref":"ActivityPub.Safety.Keys.html"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.add_public_key/2","ref":"ActivityPub.Safety.Keys.html#add_public_key/2"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.cast_uri/1","ref":"ActivityPub.Safety.Keys.html#cast_uri/1"},{"type":"function","doc":"Checks if an actor struct has a non-nil keys field and generates a PEM if it doesn't.","title":"ActivityPub.Safety.Keys.ensure_keys_present/1","ref":"ActivityPub.Safety.Keys.html#ensure_keys_present/1"},{"type":"function","doc":"Fetches the remote public key for given actor AP ID.","title":"ActivityPub.Safety.Keys.fetch_public_key_for_ap_id/1","ref":"ActivityPub.Safety.Keys.html#fetch_public_key_for_ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.generate_rsa_pem/0","ref":"ActivityPub.Safety.Keys.html#generate_rsa_pem/0"},{"type":"function","doc":"Get the public key for given actor AP ID.","title":"ActivityPub.Safety.Keys.get_public_key_for_ap_id/1","ref":"ActivityPub.Safety.Keys.html#get_public_key_for_ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.http_host/1","ref":"ActivityPub.Safety.Keys.html#http_host/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.key_id_to_actor_id/1","ref":"ActivityPub.Safety.Keys.html#key_id_to_actor_id/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.keypair_from_pem/1","ref":"ActivityPub.Safety.Keys.html#keypair_from_pem/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.maybe_add_fetch_signature_headers/3","ref":"ActivityPub.Safety.Keys.html#maybe_add_fetch_signature_headers/3"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.public_key_decode/1","ref":"ActivityPub.Safety.Keys.html#public_key_decode/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.public_key_from_data/1","ref":"ActivityPub.Safety.Keys.html#public_key_from_data/1"},{"type":"function","doc":"","title":"ActivityPub.Safety.Keys.sign/2","ref":"ActivityPub.Safety.Keys.html#sign/2"},{"type":"module","doc":"Misc functions used for federation","title":"ActivityPub.Utils","ref":"ActivityPub.Utils.html"},{"type":"function","doc":"","title":"ActivityPub.Utils.activitypub_object_headers/0","ref":"ActivityPub.Utils.html#activitypub_object_headers/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.adapter_fallback/0","ref":"ActivityPub.Utils.html#adapter_fallback/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.ap_base_url/0","ref":"ActivityPub.Utils.html#ap_base_url/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.ap_id/1","ref":"ActivityPub.Utils.html#ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.as_local_public/0","ref":"ActivityPub.Utils.html#as_local_public/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.cache_clear/0","ref":"ActivityPub.Utils.html#cache_clear/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.cachex_fetch/4","ref":"ActivityPub.Utils.html#cachex_fetch/4"},{"type":"function","doc":"","title":"ActivityPub.Utils.error_json/3","ref":"ActivityPub.Utils.html#error_json/3"},{"type":"function","doc":"","title":"ActivityPub.Utils.format_date/1","ref":"ActivityPub.Utils.html#format_date/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.generate_id/1","ref":"ActivityPub.Utils.html#generate_id/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.generate_object_id/0","ref":"ActivityPub.Utils.html#generate_object_id/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.get_with_cache/4","ref":"ActivityPub.Utils.html#get_with_cache/4"},{"type":"function","doc":"","title":"ActivityPub.Utils.has_as_public?/1","ref":"ActivityPub.Utils.html#has_as_public?/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.is_uid?/1","ref":"ActivityPub.Utils.html#is_uid?/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.is_ulid?/1","ref":"ActivityPub.Utils.html#is_ulid?/1"},{"type":"function","doc":"Takes a string and returns true if it is a valid UUID (Universally Unique Identifier)","title":"ActivityPub.Utils.is_uuid?/1","ref":"ActivityPub.Utils.html#is_uuid?/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.json_with_cache/6","ref":"ActivityPub.Utils.html#json_with_cache/6"},{"type":"function","doc":"","title":"ActivityPub.Utils.label_in_collection?/2","ref":"ActivityPub.Utils.html#label_in_collection?/2"},{"type":"function","doc":"","title":"ActivityPub.Utils.make_date/0","ref":"ActivityPub.Utils.html#make_date/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.make_json_ld_header/1","ref":"ActivityPub.Utils.html#make_json_ld_header/1"},{"type":"function","doc":"conditionally update a map","title":"ActivityPub.Utils.maybe_put/3","ref":"ActivityPub.Utils.html#maybe_put/3"},{"type":"function","doc":"","title":"ActivityPub.Utils.maybe_to_atom/1","ref":"ActivityPub.Utils.html#maybe_to_atom/1"},{"type":"function","doc":"Handles multiple cases where the input value is of a different type (atom, list, tuple, etc.) and returns a string representation of it.","title":"ActivityPub.Utils.maybe_to_string/1","ref":"ActivityPub.Utils.html#maybe_to_string/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.ok_unwrap/2","ref":"ActivityPub.Utils.html#ok_unwrap/2"},{"type":"function","doc":"","title":"ActivityPub.Utils.public?/1","ref":"ActivityPub.Utils.html#public?/1"},{"type":"function","doc":"Determines if an object or an activity is public.","title":"ActivityPub.Utils.public?/2","ref":"ActivityPub.Utils.html#public?/2"},{"type":"function","doc":"","title":"ActivityPub.Utils.put_if_present/4","ref":"ActivityPub.Utils.html#put_if_present/4"},{"type":"function","doc":"","title":"ActivityPub.Utils.repo/0","ref":"ActivityPub.Utils.html#repo/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.request_ip/1","ref":"ActivityPub.Utils.html#request_ip/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.return_json/4","ref":"ActivityPub.Utils.html#return_json/4"},{"type":"function","doc":"","title":"ActivityPub.Utils.safe_put_in/3","ref":"ActivityPub.Utils.html#safe_put_in/3"},{"type":"function","doc":"","title":"ActivityPub.Utils.service_actor/0","ref":"ActivityPub.Utils.html#service_actor/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.service_actor!/0","ref":"ActivityPub.Utils.html#service_actor!/0"},{"type":"function","doc":"","title":"ActivityPub.Utils.set_repo/1","ref":"ActivityPub.Utils.html#set_repo/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.single_ap_id/1","ref":"ActivityPub.Utils.html#single_ap_id/1"},{"type":"function","doc":"","title":"ActivityPub.Utils.single_ap_id_or_object/1","ref":"ActivityPub.Utils.html#single_ap_id_or_object/1"},{"type":"function","doc":"Takes a map or keyword list, and returns a map with any atom keys converted to string keys. It can optionally do so recursively.","title":"ActivityPub.Utils.stringify_keys/2","ref":"ActivityPub.Utils.html#stringify_keys/2"},{"type":"function","doc":"","title":"ActivityPub.Utils.uid/1","ref":"ActivityPub.Utils.html#uid/1"},{"type":"module","doc":"The entrypoint for defining your web interface, such\nas controllers, views, channels and so on.\n\nThis can be used in your application as:\n\n    use ActivityPub.Web, :controller\n    use ActivityPub.Web, :view\n\nThe definitions below will be executed for every view,\ncontroller, etc, so keep them short and clean, focused\non imports, uses and aliases.\n\nDo NOT define functions inside the quoted expressions\nbelow. Instead, define any helper function in modules\nand import those modules here.","title":"ActivityPub.Web","ref":"ActivityPub.Web.html"},{"type":"macro","doc":"When used, dispatch to the appropriate controller/view/etc.","title":"ActivityPub.Web.__using__/1","ref":"ActivityPub.Web.html#__using__/1"},{"type":"function","doc":"","title":"ActivityPub.Web.base_url/0","ref":"ActivityPub.Web.html#base_url/0"},{"type":"function","doc":"","title":"ActivityPub.Web.channel/0","ref":"ActivityPub.Web.html#channel/0"},{"type":"function","doc":"","title":"ActivityPub.Web.controller/0","ref":"ActivityPub.Web.html#controller/0"},{"type":"function","doc":"","title":"ActivityPub.Web.rate_limit_reached/2","ref":"ActivityPub.Web.html#rate_limit_reached/2"},{"type":"function","doc":"","title":"ActivityPub.Web.router/0","ref":"ActivityPub.Web.html#router/0"},{"type":"function","doc":"","title":"ActivityPub.Web.view/0","ref":"ActivityPub.Web.html#view/0"},{"type":"module","doc":"Endpoints for serving objects and collections, so the ActivityPub API can be used to read information from the server.\n\nEven though we store the data in AS format, some changes need to be applied to the entity before serving it in the AP REST response. This is done in `ActivityPub.Web.ActivityPubView`.","title":"ActivityPub.Web.ActivityPubController","ref":"ActivityPub.Web.ActivityPubController.html"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.actor/2","ref":"ActivityPub.Web.ActivityPubController.html#actor/2"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.ap_route_helper/1","ref":"ActivityPub.Web.ActivityPubController.html#ap_route_helper/1"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.followers/2","ref":"ActivityPub.Web.ActivityPubController.html#followers/2"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.following/2","ref":"ActivityPub.Web.ActivityPubController.html#following/2"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.json_object_with_cache/3","ref":"ActivityPub.Web.ActivityPubController.html#json_object_with_cache/3"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.maybe_inbox/2","ref":"ActivityPub.Web.ActivityPubController.html#maybe_inbox/2"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.object/2","ref":"ActivityPub.Web.ActivityPubController.html#object/2"},{"type":"function","doc":"","title":"ActivityPub.Web.ActivityPubController.outbox/2","ref":"ActivityPub.Web.ActivityPubController.html#outbox/2"},{"type":"module","doc":"","title":"ActivityPub.Web.ActorView","ref":"ActivityPub.Web.ActorView.html"},{"type":"function","doc":"","title":"ActivityPub.Web.ActorView.actor_json/1","ref":"ActivityPub.Web.ActorView.html#actor_json/1"},{"type":"function","doc":"","title":"ActivityPub.Web.ActorView.collection/4","ref":"ActivityPub.Web.ActorView.html#collection/4"},{"type":"function","doc":"","title":"ActivityPub.Web.ActorView.render/2","ref":"ActivityPub.Web.ActorView.html#render/2"},{"type":"module","doc":"","title":"ActivityPub.Web.Endpoint","ref":"ActivityPub.Web.Endpoint.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.broadcast/3","ref":"ActivityPub.Web.Endpoint.html#broadcast/3"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.broadcast!/3","ref":"ActivityPub.Web.Endpoint.html#broadcast!/3"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.broadcast_from/4","ref":"ActivityPub.Web.Endpoint.html#broadcast_from/4"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.broadcast_from!/4","ref":"ActivityPub.Web.Endpoint.html#broadcast_from!/4"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.call/2","ref":"ActivityPub.Web.Endpoint.html#call/2"},{"type":"function","doc":"Returns the child specification to start the endpoint\nunder a supervision tree.","title":"ActivityPub.Web.Endpoint.child_spec/1","ref":"ActivityPub.Web.Endpoint.html#child_spec/1"},{"type":"function","doc":"Returns the endpoint configuration for `key`\n\nReturns `default` if the key does not exist.","title":"ActivityPub.Web.Endpoint.config/2","ref":"ActivityPub.Web.Endpoint.html#config/2"},{"type":"function","doc":"Reloads the configuration given the application environment changes.","title":"ActivityPub.Web.Endpoint.config_change/2","ref":"ActivityPub.Web.Endpoint.html#config_change/2"},{"type":"function","doc":"Returns the host for the given endpoint.","title":"ActivityPub.Web.Endpoint.host/0","ref":"ActivityPub.Web.Endpoint.html#host/0"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.init/1","ref":"ActivityPub.Web.Endpoint.html#init/1"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.local_broadcast/3","ref":"ActivityPub.Web.Endpoint.html#local_broadcast/3"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.local_broadcast_from/4","ref":"ActivityPub.Web.Endpoint.html#local_broadcast_from/4"},{"type":"function","doc":"Generates the path information when routing to this endpoint.","title":"ActivityPub.Web.Endpoint.path/1","ref":"ActivityPub.Web.Endpoint.html#path/1"},{"type":"function","doc":"Generates the script name.","title":"ActivityPub.Web.Endpoint.script_name/0","ref":"ActivityPub.Web.Endpoint.html#script_name/0"},{"type":"function","doc":"Returns the address and port that the server is running on","title":"ActivityPub.Web.Endpoint.server_info/1","ref":"ActivityPub.Web.Endpoint.html#server_info/1"},{"type":"function","doc":"Starts the endpoint supervision tree.\n\nAll other options are merged into the endpoint configuration.","title":"ActivityPub.Web.Endpoint.start_link/1","ref":"ActivityPub.Web.Endpoint.html#start_link/1"},{"type":"function","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file\nin `priv/static`. Meant to be used for Subresource Integrity with CDNs.","title":"ActivityPub.Web.Endpoint.static_integrity/1","ref":"ActivityPub.Web.Endpoint.html#static_integrity/1"},{"type":"function","doc":"Returns a two item tuple with the first item being the `static_path`\nand the second item being the `static_integrity`.","title":"ActivityPub.Web.Endpoint.static_lookup/1","ref":"ActivityPub.Web.Endpoint.html#static_lookup/1"},{"type":"function","doc":"Generates a route to a static file in `priv/static`.","title":"ActivityPub.Web.Endpoint.static_path/1","ref":"ActivityPub.Web.Endpoint.html#static_path/1"},{"type":"function","doc":"Generates the static URL without any path information.\n\nIt uses the configuration under `:static_url` to generate\nsuch. It falls back to `:url` if `:static_url` is not set.","title":"ActivityPub.Web.Endpoint.static_url/0","ref":"ActivityPub.Web.Endpoint.html#static_url/0"},{"type":"function","doc":"Generates the endpoint base URL but as a `URI` struct.\n\nIt uses the configuration under `:url` to generate such.\nUseful for manipulating the URL data and passing it to\nURL helpers.","title":"ActivityPub.Web.Endpoint.struct_url/0","ref":"ActivityPub.Web.Endpoint.html#struct_url/0"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.subscribe/2","ref":"ActivityPub.Web.Endpoint.html#subscribe/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Endpoint.unsubscribe/1","ref":"ActivityPub.Web.Endpoint.html#unsubscribe/1"},{"type":"function","doc":"Generates the endpoint base URL without any path information.\n\nIt uses the configuration under `:url` to generate such.","title":"ActivityPub.Web.Endpoint.url/0","ref":"ActivityPub.Web.Endpoint.html#url/0"},{"type":"module","doc":"Conveniences for translating and building error messages.","title":"ActivityPub.Web.ErrorHelpers","ref":"ActivityPub.Web.ErrorHelpers.html"},{"type":"function","doc":"Generates tag for inlined form input errors.","title":"ActivityPub.Web.ErrorHelpers.error_tag/2","ref":"ActivityPub.Web.ErrorHelpers.html#error_tag/2"},{"type":"module","doc":"Standard error view","title":"ActivityPub.Web.ErrorView","ref":"ActivityPub.Web.ErrorView.html"},{"type":"function","doc":"","title":"ActivityPub.Web.ErrorView.render/2","ref":"ActivityPub.Web.ErrorView.html#render/2"},{"type":"function","doc":"By default, Phoenix returns the status message from the template name. For example, \"404.html\" becomes \"Not Found\".","title":"ActivityPub.Web.ErrorView.template_not_found/2","ref":"ActivityPub.Web.ErrorView.html#template_not_found/2"},{"type":"module","doc":"Endpoints for the ActivityPub inbox","title":"ActivityPub.Web.IncomingActivityPubController","ref":"ActivityPub.Web.IncomingActivityPubController.html"},{"type":"function","doc":"","title":"ActivityPub.Web.IncomingActivityPubController.inbox/2","ref":"ActivityPub.Web.IncomingActivityPubController.html#inbox/2"},{"type":"function","doc":"","title":"ActivityPub.Web.IncomingActivityPubController.outbox_info/2","ref":"ActivityPub.Web.IncomingActivityPubController.html#outbox_info/2"},{"type":"module","doc":"","title":"ActivityPub.Web.LayoutView","ref":"ActivityPub.Web.LayoutView.html"},{"type":"function","doc":"","title":"ActivityPub.Web.LayoutView.render/2","ref":"ActivityPub.Web.LayoutView.html#render/2"},{"type":"module","doc":"","title":"ActivityPub.Web.ObjectView","ref":"ActivityPub.Web.ObjectView.html"},{"type":"function","doc":"","title":"ActivityPub.Web.ObjectView.collection/4","ref":"ActivityPub.Web.ObjectView.html#collection/4"},{"type":"function","doc":"","title":"ActivityPub.Web.ObjectView.render/2","ref":"ActivityPub.Web.ObjectView.html#render/2"},{"type":"module","doc":"","title":"ActivityPub.Web.Plugs.DigestPlug","ref":"ActivityPub.Web.Plugs.DigestPlug.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.DigestPlug.read_body/2","ref":"ActivityPub.Web.Plugs.DigestPlug.html#read_body/2"},{"type":"module","doc":"Ensures HTTP signature has been validated by previous plugs on ActivityPub requests.","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.call/2","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#call/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.ignore/1","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#ignore/1"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.init/1","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#init/1"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.maybe_reject!/2","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#maybe_reject!/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.unauthorized/1","ref":"ActivityPub.Web.Plugs.EnsureHTTPSignaturePlug.html#unauthorized/1"},{"type":"module","doc":"","title":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug","ref":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug.call/2","ref":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug.html#call/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug.init/1","ref":"ActivityPub.Web.Plugs.FetchHTTPSignaturePlug.html#init/1"},{"type":"module","doc":"","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug.call/2","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html#call/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.HTTPSignaturePlug.init/1","ref":"ActivityPub.Web.Plugs.HTTPSignaturePlug.html#init/1"},{"type":"module","doc":"","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.call/2","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html#call/2"},{"type":"function","doc":"","title":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.init/1","ref":"ActivityPub.Web.Plugs.MappedSignatureToIdentityPlug.html#init/1"},{"type":"module","doc":"","title":"ActivityPub.Web.RedirectController","ref":"ActivityPub.Web.RedirectController.html"},{"type":"function","doc":"","title":"ActivityPub.Web.RedirectController.actor/2","ref":"ActivityPub.Web.RedirectController.html#actor/2"},{"type":"function","doc":"","title":"ActivityPub.Web.RedirectController.object/2","ref":"ActivityPub.Web.RedirectController.html#object/2"},{"type":"function","doc":"","title":"ActivityPub.Web.RedirectController.remote_interaction/2","ref":"ActivityPub.Web.RedirectController.html#remote_interaction/2"},{"type":"module","doc":"","title":"ActivityPub.Web.Router","ref":"ActivityPub.Web.Router.html"},{"type":"module","doc":"","title":"ActivityPub.Web.Telemetry","ref":"ActivityPub.Web.Telemetry.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"ActivityPub.Web.Telemetry.child_spec/1","ref":"ActivityPub.Web.Telemetry.html#child_spec/1"},{"type":"function","doc":"","title":"ActivityPub.Web.Telemetry.metrics/0","ref":"ActivityPub.Web.Telemetry.html#metrics/0"},{"type":"function","doc":"","title":"ActivityPub.Web.Telemetry.start_link/1","ref":"ActivityPub.Web.Telemetry.html#start_link/1"},{"type":"module","doc":"","title":"ActivityPub.Web.UserSocket","ref":"ActivityPub.Web.UserSocket.html"},{"type":"module","doc":"","title":"ActivityPub.Web.WebFingerController","ref":"ActivityPub.Web.WebFingerController.html"},{"type":"function","doc":"","title":"ActivityPub.Web.WebFingerController.webfinger/2","ref":"ActivityPub.Web.WebFingerController.html#webfinger/2"},{"type":"module","doc":"Handy aliases and imports to add to your iex CLI session","title":"ConsoleHelpers","ref":"ConsoleHelpers.html"},{"type":"module","doc":"","title":"DaisyTheme","ref":"DaisyTheme.html"},{"type":"function","doc":"","title":"DaisyTheme.adjust/5","ref":"DaisyTheme.html#adjust/5"},{"type":"function","doc":"","title":"DaisyTheme.clamp/3","ref":"DaisyTheme.html#clamp/3"},{"type":"function","doc":"","title":"DaisyTheme.darken/2","ref":"DaisyTheme.html#darken/2"},{"type":"function","doc":"","title":"DaisyTheme.darker/5","ref":"DaisyTheme.html#darker/5"},{"type":"function","doc":"","title":"DaisyTheme.default_theme/0","ref":"DaisyTheme.html#default_theme/0"},{"type":"function","doc":"","title":"DaisyTheme.generate/1","ref":"DaisyTheme.html#generate/1"},{"type":"function","doc":"","title":"DaisyTheme.is_dark?/1","ref":"DaisyTheme.html#is_dark?/1"},{"type":"function","doc":"","title":"DaisyTheme.keys/0","ref":"DaisyTheme.html#keys/0"},{"type":"function","doc":"","title":"DaisyTheme.lighten/2","ref":"DaisyTheme.html#lighten/2"},{"type":"function","doc":"","title":"DaisyTheme.style_attr/1","ref":"DaisyTheme.html#style_attr/1"},{"type":"function","doc":"","title":"DaisyTheme.theme/1","ref":"DaisyTheme.html#theme/1"},{"type":"module","doc":"","title":"DummyAdapter","ref":"DummyAdapter.html"},{"type":"module","doc":"Minimal, composable file upload, storage, and streamed data migrations for Elixir apps, flexibly and with minimal dependencies.\n\n[![hex package](https://img.shields.io/hexpm/v/entrepot.svg)](https://hex.pm/packages/entrepot)\n[![CI status](https://github.com/bonfire-networks/entrepot/workflows/CI/badge.svg)](https://github.com/bonfire-networks/entrepot/actions)\n\n:warning: Although it's been used in production for over a year without issue, Entrepôt is experimental and still in active development. Accepting file uploads introduces specific security vulnerabilities. Use at your own risk.","title":"Entrepot","ref":"Entrepot.html"},{"type":"module","doc":"Entrepôt intentionally strips file storage logic down to its most composable parts and lets you decide how you want to use them. These components are: [storage](#storage), [upload](#upload), [locator](#locator), and optionally, [uploader](#uploader), which provides a more ergonomic API for the other 3.\n\nIt is intentionally agnostic about versions, transformation, validations, etc. Most of the convenience offered by other libraries around these features comes at the cost of locking in dependence on specific tools and hiding complexity. Entrepôt puts a premium on simplicity and explicitness.\n\nSo what does it do? Here's a theoretical example of a use case with an Ecto 1  schema, which stores the file retrieved from a URL, along with some additional metadata:\n\n```\n  def create_attachment(upload, user) do\n    Multi.new()\n    |> Multi.run(:upload, fn _, _ ->\n      YourStorage.put(upload, prefix: :crypto.hash(:md5, [user.id, url]) |> Base.encode16())\n    end)\n    |> Multi.insert(:attachment, fn %{upload: file_id} ->\n      %Attachment{file_data: Locator.new!(id: file_id, storage: YourStorage, metadata: %{type: \"document\"})\n    end)\n    |> Repo.transaction()\n  end\n```\n\nThen to access the file:\n\n```\n%Attachment{file_data: file} = attachment\n\n{:ok, contents} = Disk.read(file.id)\n```\n\n 1  *See [integrations](#integrations) for streamlined use with Ecto.*","title":"Concepts - Entrepot","ref":"Entrepot.html#module-concepts"},{"type":"module","doc":"A \"storage\" is a [behaviour](https://elixirschool.com/en/lessons/advanced/behaviours/) that implements the following \"file-like\" callbacks:\n\n* read\n* put\n* delete\n\nImplementing your own storage is as easy as creating a module that quacks this way. Each callback should accept an optional list of options as the last arg. Which options are supported is up to the module that implements the callbacks.","title":"Storage - Entrepot","ref":"Entrepot.html#module-storage"},{"type":"module","doc":"Upload is a [protocol](https://elixir-lang.org/getting-started/protocols.html) consisting of the following two functions:\n\n* contents\n* name\n\nA storage uses this interface to figure how to extract the file data from a given struct and how to identify it. See `Entrepot.Locator` for an example of how this protocol can be implemented.","title":"Upload - Entrepot","ref":"Entrepot.html#module-upload"},{"type":"module","doc":"Locators are the mediators between storages and uploads. They represent where an uploaded file was stored so it can be retrieved. They contain a unique id, the name of the storage to which the file was uploaded, and a map of user defined metadata.\n\nLocator also implements the upload protocol, which means moving a file from one storage to another is straightforward, and very useful for \"promoting\" a file from temporary (e.g. Disk) to permanent (e.g. S3) storage 2 :\n\n```\nold_file_data = %Locator{id: \"/path/to/file.jpg\", storage: Disk, metadata: %{}}\n{:ok, new_id} = S3.put(old_file_data)`\n```\n\nNote: always remember to take care of cleaning up the old file as Entrepot *never* automatically removes files:\n\n`Disk.delete(old_file_data.id)`","title":"Locator - Entrepot","ref":"Entrepot.html#module-locator"},{"type":"module","doc":"This helper was added in order to support DRYing up storage access. In most apps, there are certain types of assets that will be uploaded and handled in a similar, if not the same way, if only when it comes to where they are stored. You can `use` the uploader to codify the handling for specific types of assets.\n\n```\ndefmodule AvatarUploader do\n  use Entrepot.Uploader, storages: [cache: Disk, store: S3]\n\n  def build_options(upload, :cache, opts) do\n    Keyword.put(opts, :prefix, \"cache/#{Date.utc_today()}\")\n  end\n\n  def build_options(upload, :store, opts) do\n    opts\n    |> Keyword.put(:prefix, \"users/#{opts[:user_id]}/avatar\")\n    |> Keyword.drop([:user_id])\n  end\n\n  def build_metadata(upload, :store, _), do: [uploaded_at: DateTime.utc_now()]\nend\n```\n\nThen you can get the files where they need to be without constructing all the options everywhere they might be uploaded: `AvatarUploader.store(upload, :store, user_id: 1)`\n\nNote: as this example demonstrates, the function can receive arbitrary data and use it to customize how it builds the storage options before they are passed on.","title":"Uploader - Entrepot","ref":"Entrepot.html#module-uploader"},{"type":"module","doc":"Entrepôt's module design is intended to make it easy to implement your own custom utilities for handling files in the way you need. However, anticipating the most common use cases, that is facilitated with the following optional modules and add-on library.\n\nThere are several implementations some common file storages (including S3/Digital Ocean) and uploads (including `Plug.Upload`).","title":"Built-in Integrations - Entrepot","ref":"Entrepot.html#module-built-in-integrations"},{"type":"module","doc":"Entrepôt ships with the following storage implementations:\n\n- [Disk](#Disk)\n- [S3](#S3)\n- [RAM](#RAM)","title":"Storages - Entrepot","ref":"Entrepot.html#module-storages"},{"type":"module","doc":"This saves uploaded files to a local disk. It is useful for caching uploads while you validate other data, and/or perform some file processing.\n\n#### configuration\n\n- To set the root directory where files will be stored: `Application.put_env(:entrepot, Entrepot.Storages.Disk, root_dir: \"tmp\")`\n\n#### options\n\n- `prefix`: This should be a valid system path that will be appended to the root. If it does not exist, Disk will create it.\n- `force`: If this option is set to a truthy value, Disk will overwrite any existing file at the derived path. Use with caution!\n\n#### notes\n\nSince it is possible for files with the same name to be uploaded multiple times, Disk needs some additional info to uniquely identify the file. Disk _does not_ overwrite files with the same name by default. To ensure an upload can be stored, the combination of the `Upload.name` and `prefix` should be unique.","title":"Disk - Entrepot","ref":"Entrepot.html#module-disk"},{"type":"module","doc":"This storage uploads files to [AWS's S3](https://aws.amazon.com/s3/) service. It also works with [Digital Ocean Spaces](https://www.digitalocean.com/products/spaces/).\n\n#### configuration\n\n- To set the bucket where files will be stored: `Application.put_env(:entrepot, Entrepot.Storages.S3, bucket: \"whatever\")`\n\n#### options\n\n- prefix: A string to prepend to the upload's key\n- s3_options: Keyword list of option that will passed directly to ex_aws_s3\n\n#### dependencies\n\nSome of the implementations might require further dependencies (currently only [S3](#s3)-compatible storage) that you will also need to add to your project's deps\n```\n{:ex_aws, \"~> 2.0\"}\n{:ex_aws_s3, \"~> 2.0\"}\n```","title":"S3 - Entrepot","ref":"Entrepot.html#module-s3"},{"type":"module","doc":"Uses Elixir's [StringIO](https://hexdocs.pm/elixir/StringIO.html) module to store file contents in memory. Since the \"files\" are essentially just strings, they will not be persisted and will error if they are read back from a database, for example. However, operations are correspondingly very fast and thus suitable for tests or other temporary file operations.","title":"RAM - Entrepot","ref":"Entrepot.html#module-ram"},{"type":"module","doc":"There are implementation of the `Entrepot.Upload` protocol for the following modules:\n\n- [URI](#URI)\n- [Plug.Upload](#plugupload)","title":"uploads - Entrepot","ref":"Entrepot.html#module-uploads"},{"type":"module","doc":"This is useful for transferring files already hosted elsewhere, for example in cloud storage not controlled by your application, or a [TUS server](https://tus.io/).\n\nYou can use it to allow users to post a url string in lieu of downloading and reuploading a file. A Phoenix controller action implementing this feature might look like this:\n\n```\ndef attach(conn, %{\"attachment\" => %{\"url\" => url}}) when url != \"\" do\n  URI.parse(url)\n  |> Disk.put(upload)\n\n  # ...redirect, etc\nend\n```\n\n#### notes\n\nThis implementation imposes a hard timeout limit of 15 seconds to download the file from the remote location.","title":"URI - Entrepot","ref":"Entrepot.html#module-uri"},{"type":"module","doc":"This supports multi-part form submissions handled by [Plug](https://hexdocs.pm/plug/Plug.Upload.html#content).\n\n## [EntrepôtEcto](https://github.com/bonfire-networks/entrepot_ecto)\n\nThere is an external library (because it needs Ecto as a dependency) which provides `Entrepot.Ecto.Type` for Ecto schema fields to easily handle persisting Locator data in your repository.\n\n---\n\nNote: Entrepôt was originally forked from [Capsule](https://github.com/elixir-capsule)","title":"Plug.Upload - Entrepot","ref":"Entrepot.html#module-plug-upload"},{"type":"function","doc":"","title":"Entrepot.add_metadata/2","ref":"Entrepot.html#add_metadata/2"},{"type":"function","doc":"Adds metadata to a Locator.","title":"Entrepot.add_metadata/3","ref":"Entrepot.html#add_metadata/3"},{"type":"function","doc":"- `locator`: A `Locator` struct to which metadata will be added.\n- `key`: A key for the metadata (when adding a single key-value pair).\n- `val`: A value for the metadata (when adding a single key-value pair).\n- `data`: A map or keyword list of metadata to be added.","title":"Parameters - Entrepot.add_metadata/3","ref":"Entrepot.html#add_metadata/3-parameters"},{"type":"function","doc":"- `{:ok, Locator.t()}`: An updated `Locator` struct with the new metadata.\n- `{:error, term()}`: The original error tuple if given an error tuple.","title":"Returns - Entrepot.add_metadata/3","ref":"Entrepot.html#add_metadata/3-returns"},{"type":"function","doc":"iex> Entrepot.add_metadata(%Locator{}, :key, \"value\")\n    {:ok, %Locator{metadata: %{key: \"value\"}}}\n\n    iex> Entrepot.add_metadata(%Locator{key: \"value\"}, %{key2: \"value2\"})\n    {:ok, %Locator{metadata: %{key: \"value1\", key2: \"value2\"}}}","title":"Examples - Entrepot.add_metadata/3","ref":"Entrepot.html#add_metadata/3-examples"},{"type":"function","doc":"Copies a file from one storage to another.","title":"Entrepot.copy/3","ref":"Entrepot.html#copy/3"},{"type":"function","doc":"- `locator`: A `Locator` struct representing the file to be copied.\n- `dest_storage`: The destination storage module.\n- `opts`: Optional keyword list of options to be passed to the storage modules.","title":"Parameters - Entrepot.copy/3","ref":"Entrepot.html#copy/3-parameters"},{"type":"function","doc":"- `{:ok, Locator.t()}`: A new `Locator` struct for the copied file.\n- `{:error, term()}`: An error tuple if the copy operation fails.","title":"Returns - Entrepot.copy/3","ref":"Entrepot.html#copy/3-returns"},{"type":"function","doc":"- Raises an error if attempting to copy a file to the same storage.","title":"Raises - Entrepot.copy/3","ref":"Entrepot.html#copy/3-raises"},{"type":"function","doc":"iex> Entrepot.copy(%Locator{id: \"file.txt\", storage: Disk}, S3)\n    {:ok, %Locator{id: \"new_id\", storage: S3, metadata: %{copied_from: Disk}}}","title":"Examples - Entrepot.copy/3","ref":"Entrepot.html#copy/3-examples"},{"type":"function","doc":"Resolves the storage module from a Locator.","title":"Entrepot.storage!/1","ref":"Entrepot.html#storage!/1"},{"type":"function","doc":"- `locator`: A `Locator` struct containing the storage information.","title":"Parameters - Entrepot.storage!/1","ref":"Entrepot.html#storage!/1-parameters"},{"type":"function","doc":"- The resolved storage module as an atom.","title":"Returns - Entrepot.storage!/1","ref":"Entrepot.html#storage!/1-returns"},{"type":"function","doc":"- `InvalidStorage`: If the storage module cannot be resolved.","title":"Raises - Entrepot.storage!/1","ref":"Entrepot.html#storage!/1-raises"},{"type":"function","doc":"iex> Entrepot.storage!(%Locator{storage: Disk})\n    Disk\n\n    iex> Entrepot.storage!(%Locator{storage: \"Elixir.Disk\"})\n    Disk","title":"Examples - Entrepot.storage!/1","ref":"Entrepot.html#storage!/1-examples"},{"type":"module","doc":"Ecto integration for [Entrepôt](https://github.com/bonfire-networks/entrepot)\n\n[![hex package](https://img.shields.io/hexpm/v/entrepot_ecto.svg)](https://hex.pm/packages/entrepot_ecto)\n[![CI status](https://github.com/bonfire-networks/entrepot_ecto/workflows/CI/badge.svg)](https://github.com/bonfire-networks/capsulei_ecto/actions)\n\nThis package adds the following two features to support the use of Entrepôt with Ecto:\n\n1. Custom Type\n2. Changeset helper\n\n## `Entrepot.Ecto.Type`\n\nIn your Ecto schema specify your file field with the following type to get serialization of uploads (`Entrepot.Locator`) to maps:\n\n```\ndefmodule Attachment\n  use Ecto.Schema\n\n  schema \"attachments\" do\n    field :file_data, Entrepot.Ecto.Type\n  end\nend\n```\n\n## `Entrepot.Ecto.upload`\n\nCast params to uploaded data with `Entrepot.Ecto.upload`. In the style of Ecto.Multi, it accepts either an anonymous function or a module and function name, both with arity(2). The first argument passed will be a 2 element tuple representing the key/param pair and the second value will be the changeset.\n\nIt is expected to return either a success tuple with the `Locator` struct or the changeset. In the latter case the changeset will simply be passed on down the pipe.\n\nEven if you want to extract some metadata and apply a validation after you store the file, then the anonymous function may be all you need:\n\n  ```\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(%{\"file_data\" => some_upload}, [:file_data], fn {_field, upload}, changeset ->\n      case Entrepot.Storages.Disk.put(upload) do\n        {:ok, id} -> Entrepot.Locator.new!(id: id, storage: Entrepot.Storages.Disk)\n        error_tuple -> add_error(changeset, \"upload just...failed\")\n      end\n  end)\n  |> validate_attachment\n\n  ```\n\nHowever, if you want to do more complicated things with the upload before storing it (such as resizing, encrypting, etc) then creating a module is probably the way to go.\n\n  ```\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(%{\"file_data\" => some_upload}, [:file_data], MyApp.Attacher, :attach)\n  ```\n---","title":"Entrepot.Ecto","ref":"Entrepot.Ecto.html"},{"type":"module","doc":"Since the file is written to disk as part of the changeset, you will probably want to do some cleanup depending on the error status. On success you may want to move the file from a temporary location to permanent storage (especially if the latter is in the cloud and costs a network request). On failure you may want to delete the file (unless you are handling that with some sort of periodic task).\n\nOne good option is to wrap your Repo operation in another function to handle both as asynchronous Tasks so they don't block the parent process:\n\n  ```\n  def create_attachment(user, attrs) do\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(attrs, [:file_data], MyApp.Attacher, :attach)\n  |> Repo.insert()\n  |> case do\n    {:ok, attachment} = success_tuple ->\n      Task.Supervisor.start_child(\n        YourApp.Supervisor,\n        fn -> Attachment.promote_upload(attachment) end\n      )\n\n      success_tuple\n\n    {:error, %{changes: %{file_data: file_data}}} = error_tuple ->\n      Task.Supervisor.start_child(\n        YourApp.Supervisor,\n        fn -> Disk.delete(file_data.id) end\n      )\n\n      error_tuple\n  end\n  ```\n\nIn this example, `Attachment.promote_upload(attachment)` would handle moving the file and updating the file data in the db. It uses `Multi` to ensure all operations succeed or fail together:\n\n  ```\n  def promote_upload(attachment) do\n    Multi.new()\n    |> Multi.run(:copy_file, fn _, _ ->\n      NetworkStorage.put(attachment.file_data.id)\n    end)\n    |> Multi.update(:updated_schema, fn %{move_file: new_data} ->\n      Attachment.changeset(attachment, %{file_data: new_data })\n    end)\n    |> Multi.run(:delete_old_file, fn _, _ ->\n      Disk.delete(attachment.file_data.id)\n    end)\n    |> Repo.transaction()\n  end\n  ```","title":"Upload cleanup - Entrepot.Ecto","ref":"Entrepot.Ecto.html#module-upload-cleanup"},{"type":"module","doc":"Since Locators are serialized as plain maps, it is easy to stub out file operations in fixtures/factories by inserting data directly into the db without going through a changeset:\n\n  ```\n  %Attachment{\n    file_data: %{\n      id: \"fake.jpg\",\n      metadata: %{name: \"fake\"}, size: 100\n    }\n  }\n  |> Repo.insert!()\n  ```\n\nIf you want to run tests on the actual file operations, you will need to make sure the id points to an actual file location that the configured storage understands.\n\nYou can configure your test environment to use the RAM storage:\n\n  ```\n  {:ok, id} = Entrepot.Storages.RAM.put(some_upload)\n\n  Repo.insert!(%Attachment{file_data: %{id: id, storage: Entrepot.Storages.RAM}})\n  ```\n\nOr, for maximum performance, you can a simple struct that implements the `Upload` protocol:\n\n  ```\n  defmodule Entrepot.MockUpload do\n    defstruct content: \"Hi, I'm a file\", name: \"hi\"\n\n    defimpl Entrepot.Upload do\n      def contents(mock), do: {:ok, mock.content}\n\n      def name(mock), do: mock.name\n    end\n  end\n  ```\n\n---\nNote: Entrepôt was originally forked from [Capsule](https://github.com/elixir-capsule)","title":"Testing - Entrepot.Ecto","ref":"Entrepot.Ecto.html#module-testing"},{"type":"function","doc":"Uploads data with `Entrepot` using a function.","title":"Entrepot.Ecto.upload/4","ref":"Entrepot.Ecto.html#upload/4"},{"type":"function","doc":"- `changeset`: The changeset to update.\n- `params`: Parameters to upload.\n- `permitted`: List of permitted fields.\n- `function`: A function with arity 2 that handles the upload.","title":"Parameters - Entrepot.Ecto.upload/4","ref":"Entrepot.Ecto.html#upload/4-parameters"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{}\n    iex> fun = fn (_params, _changeset) -> %Entrepot.Locator{} end\n    iex> Entrepot.Ecto.upload(changeset, %{\"field\" => \"value\"}, [\"field\"], fun)\n    %Ecto.Changeset{}","title":"Examples - Entrepot.Ecto.upload/4","ref":"Entrepot.Ecto.html#upload/4-examples"},{"type":"function","doc":"Uploads data with `Entrepot` using a module and function name.","title":"Entrepot.Ecto.upload/5","ref":"Entrepot.Ecto.html#upload/5"},{"type":"function","doc":"- `changeset`: The changeset to update.\n- `params`: Parameters to upload.\n- `permitted`: List of permitted fields.\n- `module`: The module containing the function.\n- `function`: The function name within the module.","title":"Parameters - Entrepot.Ecto.upload/5","ref":"Entrepot.Ecto.html#upload/5-parameters"},{"type":"function","doc":"iex> changeset = %Ecto.Changeset{}\n    iex> Entrepot.Ecto.upload(changeset, %{\"field\" => \"value\"}, [\"field\"], SomeModule, :some_function)\n    %Ecto.Changeset{}","title":"Examples - Entrepot.Ecto.upload/5","ref":"Entrepot.Ecto.html#upload/5-examples"},{"type":"module","doc":"","title":"Entrepot.Ecto.Type","ref":"Entrepot.Ecto.Type.html"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.cast/1","ref":"Entrepot.Ecto.Type.html#cast/1"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.dump/1","ref":"Entrepot.Ecto.Type.html#dump/1"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.embed_as/1","ref":"Entrepot.Ecto.Type.html#embed_as/1"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.equal?/2","ref":"Entrepot.Ecto.Type.html#equal?/2"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.load/1","ref":"Entrepot.Ecto.Type.html#load/1"},{"type":"function","doc":"","title":"Entrepot.Ecto.Type.type/0","ref":"Entrepot.Ecto.Type.html#type/0"},{"type":"exception","doc":"","title":"Entrepot.Errors.InvalidLocator","ref":"Entrepot.Errors.InvalidLocator.html"},{"type":"exception","doc":"","title":"Entrepot.Errors.InvalidStorage","ref":"Entrepot.Errors.InvalidStorage.html"},{"type":"module","doc":"A struct representing a stored file's location and metadata.\n\nThe `Locator` struct contains information about where a file is stored,\nincluding its unique identifier, the storage backend used, and any\nadditional metadata.","title":"Entrepot.Locator","ref":"Entrepot.Locator.html"},{"type":"function","doc":"Creates a new Locator struct.","title":"Entrepot.Locator.new/1","ref":"Entrepot.Locator.html#new/1"},{"type":"function","doc":"- `attrs`: A map or keyword list of attributes for the Locator.","title":"Parameters - Entrepot.Locator.new/1","ref":"Entrepot.Locator.html#new/1-parameters"},{"type":"function","doc":"- `{:ok, Locator.t()}`: A new `Locator` struct.\n- `{:error, String.t()}`: An error message if the input is invalid.","title":"Returns - Entrepot.Locator.new/1","ref":"Entrepot.Locator.html#new/1-returns"},{"type":"function","doc":"iex> Entrepot.Locator.new(id: \"file.txt\", storage: Disk)\n    {:ok, %Entrepot.Locator{id: \"file.txt\", storage: Disk, metadata: %{}}}\n\n    iex> Entrepot.Locator.new(id: 123, storage: Disk)\n    {:error, \"id must be binary\"}","title":"Examples - Entrepot.Locator.new/1","ref":"Entrepot.Locator.html#new/1-examples"},{"type":"function","doc":"Creates a new Locator struct, raising an error if the input is invalid.","title":"Entrepot.Locator.new!/1","ref":"Entrepot.Locator.html#new!/1"},{"type":"function","doc":"- `attrs`: A map or keyword list of attributes for the Locator.","title":"Parameters - Entrepot.Locator.new!/1","ref":"Entrepot.Locator.html#new!/1-parameters"},{"type":"function","doc":"- A new `Locator` struct.","title":"Returns - Entrepot.Locator.new!/1","ref":"Entrepot.Locator.html#new!/1-returns"},{"type":"function","doc":"- `Entrepot.Errors.InvalidLocator`: If the input is invalid.","title":"Raises - Entrepot.Locator.new!/1","ref":"Entrepot.Locator.html#new!/1-raises"},{"type":"function","doc":"iex> Entrepot.Locator.new!(id: \"file.txt\", storage: Disk)\n    %Entrepot.Locator{id: \"file.txt\", storage: Disk, metadata: %{}}\n\n    iex> Entrepot.Locator.new!(id: 123, storage: Disk)\n    ** (Entrepot.Errors.InvalidLocator) id must be binary","title":"Examples - Entrepot.Locator.new!/1","ref":"Entrepot.Locator.html#new!/1-examples"},{"type":"type","doc":"","title":"Entrepot.Locator.t/0","ref":"Entrepot.Locator.html#t:t/0"},{"type":"behaviour","doc":"A behaviour module defining the interface for storage backends.\n\nThis module specifies the callbacks that must be implemented by any storage backend\nused with Entrepôt.","title":"Entrepot.Storage","ref":"Entrepot.Storage.html"},{"type":"callback","doc":"","title":"Entrepot.Storage.delete/1","ref":"Entrepot.Storage.html#c:delete/1"},{"type":"callback","doc":"Deletes a file from the storage backend.","title":"Entrepot.Storage.delete/2","ref":"Entrepot.Storage.html#c:delete/2"},{"type":"callback","doc":"- `locator_id`: The unique identifier of the file to be deleted.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.delete/2","ref":"Entrepot.Storage.html#c:delete/2-parameters"},{"type":"callback","doc":"- `:ok`: If the file was successfully deleted.\n- `{:error, String.t()}`: An error message if the file cannot be deleted.","title":"Returns - Entrepot.Storage.delete/2","ref":"Entrepot.Storage.html#c:delete/2-returns"},{"type":"callback","doc":"","title":"Entrepot.Storage.path/1","ref":"Entrepot.Storage.html#c:path/1"},{"type":"callback","doc":"Retrieves the local filesystem path of the stored file, if applicable.","title":"Entrepot.Storage.path/2","ref":"Entrepot.Storage.html#c:path/2"},{"type":"callback","doc":"- `locator_id`: The unique identifier of the stored file.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.path/2","ref":"Entrepot.Storage.html#c:path/2-parameters"},{"type":"callback","doc":"- `binary()`: The local filesystem path of the file.\n- `nil`: If a local path is not applicable or available.","title":"Returns - Entrepot.Storage.path/2","ref":"Entrepot.Storage.html#c:path/2-returns"},{"type":"callback","doc":"","title":"Entrepot.Storage.put/1","ref":"Entrepot.Storage.html#c:put/1"},{"type":"callback","doc":"Stores a file in the storage backend.","title":"Entrepot.Storage.put/2","ref":"Entrepot.Storage.html#c:put/2"},{"type":"callback","doc":"- `upload`: An `Upload` struct representing the file to be stored.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.put/2","ref":"Entrepot.Storage.html#c:put/2-parameters"},{"type":"callback","doc":"- `{:ok, locator_id}`: The unique identifier of the stored file.\n- `{:error, String.t()}`: An error message if the file cannot be stored.","title":"Returns - Entrepot.Storage.put/2","ref":"Entrepot.Storage.html#c:put/2-returns"},{"type":"callback","doc":"","title":"Entrepot.Storage.read/1","ref":"Entrepot.Storage.html#c:read/1"},{"type":"callback","doc":"Reads the contents of the stored file.","title":"Entrepot.Storage.read/2","ref":"Entrepot.Storage.html#c:read/2"},{"type":"callback","doc":"- `locator_id`: The unique identifier of the stored file.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.read/2","ref":"Entrepot.Storage.html#c:read/2-parameters"},{"type":"callback","doc":"- `{:ok, binary()}`: The contents of the file.\n- `{:error, String.t()}`: An error message if the file cannot be read.","title":"Returns - Entrepot.Storage.read/2","ref":"Entrepot.Storage.html#c:read/2-returns"},{"type":"callback","doc":"","title":"Entrepot.Storage.stream/1","ref":"Entrepot.Storage.html#c:stream/1"},{"type":"callback","doc":"Creates a stream for reading the contents of the stored file.","title":"Entrepot.Storage.stream/2","ref":"Entrepot.Storage.html#c:stream/2"},{"type":"callback","doc":"- `locator_id`: The unique identifier of the stored file.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.stream/2","ref":"Entrepot.Storage.html#c:stream/2-parameters"},{"type":"callback","doc":"- `IO.Stream.t()` | `File.Stream.t()` | `Stream.t()`: A stream for reading the file contents.","title":"Returns - Entrepot.Storage.stream/2","ref":"Entrepot.Storage.html#c:stream/2-returns"},{"type":"callback","doc":"","title":"Entrepot.Storage.url/1","ref":"Entrepot.Storage.html#c:url/1"},{"type":"callback","doc":"Generates a URL for accessing the stored file.","title":"Entrepot.Storage.url/2","ref":"Entrepot.Storage.html#c:url/2"},{"type":"callback","doc":"- `locator_id`: The unique identifier of the stored file.\n- `opts`: Optional list of options.","title":"Parameters - Entrepot.Storage.url/2","ref":"Entrepot.Storage.html#c:url/2-parameters"},{"type":"callback","doc":"- `binary()`: The URL for accessing the file.\n- `nil`: If a URL cannot be generated.","title":"Returns - Entrepot.Storage.url/2","ref":"Entrepot.Storage.html#c:url/2-returns"},{"type":"type","doc":"","title":"Entrepot.Storage.locator_id/0","ref":"Entrepot.Storage.html#t:locator_id/0"},{"type":"type","doc":"","title":"Entrepot.Storage.option/0","ref":"Entrepot.Storage.html#t:option/0"},{"type":"module","doc":"","title":"Entrepot.Storages.Disk","ref":"Entrepot.Storages.Disk.html"},{"type":"function","doc":"","title":"Entrepot.Storages.Disk.clone/3","ref":"Entrepot.Storages.Disk.html#clone/3"},{"type":"module","doc":"","title":"Entrepot.Storages.RAM","ref":"Entrepot.Storages.RAM.html"},{"type":"function","doc":"","title":"Entrepot.Storages.RAM.clone/3","ref":"Entrepot.Storages.RAM.html#clone/3"},{"type":"module","doc":"","title":"Entrepot.Storages.S3","ref":"Entrepot.Storages.S3.html"},{"type":"function","doc":"","title":"Entrepot.Storages.S3.clone/3","ref":"Entrepot.Storages.S3.html#clone/3"},{"type":"protocol","doc":"A protocol defining the interface for file uploads.\n\nThis protocol should be implemented by any struct that represents an uploadable file.\n\nThere are built-in implementations for `Plug.Upload`, `File.Stream, `Stream`, `URI` and `Entrepot.Locator`.","title":"Entrepot.Upload","ref":"Entrepot.Upload.html"},{"type":"function","doc":"Retrieves the contents of the upload.","title":"Entrepot.Upload.contents/1","ref":"Entrepot.Upload.html#contents/1"},{"type":"function","doc":"- `{:ok, iodata()}`: The contents of the upload.\n- `{:error, String.t()}`: An error message if the contents cannot be retrieved.","title":"Returns - Entrepot.Upload.contents/1","ref":"Entrepot.Upload.html#contents/1-returns"},{"type":"function","doc":"Retrieves the name of the upload.","title":"Entrepot.Upload.name/1","ref":"Entrepot.Upload.html#name/1"},{"type":"function","doc":"- `String.t()`: The name of the upload.","title":"Returns - Entrepot.Upload.name/1","ref":"Entrepot.Upload.html#name/1-returns"},{"type":"function","doc":"Retrieves the path of the upload, if available.","title":"Entrepot.Upload.path/1","ref":"Entrepot.Upload.html#path/1"},{"type":"function","doc":"- `String.t()`: The path of the upload.\n- `nil`: If no path is available.","title":"Returns - Entrepot.Upload.path/1","ref":"Entrepot.Upload.html#path/1-returns"},{"type":"type","doc":"All the types that implement this protocol.","title":"Entrepot.Upload.t/0","ref":"Entrepot.Upload.html#t:t/0"},{"type":"behaviour","doc":"A behaviour module for implementing custom uploaders.\n\nThis module provides a set of callbacks and a macro for easily defining uploaders\nthat work with different storage backends.","title":"Entrepot.Uploader","ref":"Entrepot.Uploader.html"},{"type":"callback","doc":"Builds metadata for the stored file.","title":"Entrepot.Uploader.build_metadata/3","ref":"Entrepot.Uploader.html#c:build_metadata/3"},{"type":"callback","doc":"- `locator`: The `Locator` struct representing the stored file.\n- `storage`: The storage backend used.\n- `opts`: The options used in the storage operation.","title":"Parameters - Entrepot.Uploader.build_metadata/3","ref":"Entrepot.Uploader.html#c:build_metadata/3-parameters"},{"type":"callback","doc":"- A keyword list or map of metadata to be added to the `Locator`.","title":"Returns - Entrepot.Uploader.build_metadata/3","ref":"Entrepot.Uploader.html#c:build_metadata/3-returns"},{"type":"callback","doc":"Builds options for the storage operation.","title":"Entrepot.Uploader.build_options/3","ref":"Entrepot.Uploader.html#c:build_options/3"},{"type":"callback","doc":"- `upload`: The upload to be stored.\n- `storage`: The storage backend to use.\n- `opts`: Initial list of options.","title":"Parameters - Entrepot.Uploader.build_options/3","ref":"Entrepot.Uploader.html#c:build_options/3-parameters"},{"type":"callback","doc":"- A list of options to be used in the storage operation.","title":"Returns - Entrepot.Uploader.build_options/3","ref":"Entrepot.Uploader.html#c:build_options/3-returns"},{"type":"callback","doc":"Stores an upload in the specified storage.","title":"Entrepot.Uploader.store/3","ref":"Entrepot.Uploader.html#c:store/3"},{"type":"callback","doc":"- `upload`: The upload to be stored.\n- `storage`: The storage backend to use.\n- `opts`: Optional list of options for the storage operation.","title":"Parameters - Entrepot.Uploader.store/3","ref":"Entrepot.Uploader.html#c:store/3-parameters"},{"type":"callback","doc":"- `{:ok, Locator.t()}`: A `Locator` struct representing the stored file.\n- `{:error, any()}`: An error tuple if the storage operation fails.","title":"Returns - Entrepot.Uploader.store/3","ref":"Entrepot.Uploader.html#c:store/3-returns"},{"type":"type","doc":"","title":"Entrepot.Uploader.option/0","ref":"Entrepot.Uploader.html#t:option/0"},{"type":"type","doc":"","title":"Entrepot.Uploader.storage/0","ref":"Entrepot.Uploader.html#t:storage/0"},{"type":"module","doc":"","title":"Import2Alias","ref":"Import2Alias.html"},{"type":"function","doc":"","title":"Import2Alias.import2alias/2","ref":"Import2Alias.html#import2alias/2"},{"type":"module","doc":"","title":"Import2Alias.CallerTracer","ref":"Import2Alias.CallerTracer.html"},{"type":"function","doc":"","title":"Import2Alias.CallerTracer.trace/2","ref":"Import2Alias.CallerTracer.html#trace/2"},{"type":"module","doc":"","title":"Import2Alias.Server","ref":"Import2Alias.Server.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Import2Alias.Server.child_spec/1","ref":"Import2Alias.Server.html#child_spec/1"},{"type":"function","doc":"","title":"Import2Alias.Server.entries/0","ref":"Import2Alias.Server.html#entries/0"},{"type":"function","doc":"","title":"Import2Alias.Server.record/6","ref":"Import2Alias.Server.html#record/6"},{"type":"function","doc":"","title":"Import2Alias.Server.start_link/1","ref":"Import2Alias.Server.html#start_link/1"},{"type":"task","doc":"Creates an account in the database, automatically activated","title":"mix bonfire.account.new","ref":"Mix.Tasks.Bonfire.Account.New.html"},{"type":"task","doc":"```\njust mix bonfire.account.new [email@address]\n```\n\nYou will be prompted for a password and an email if it was not provided.","title":"Usage - mix bonfire.account.new","ref":"Mix.Tasks.Bonfire.Account.New.html#module-usage"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Account.New.get/4","ref":"Mix.Tasks.Bonfire.Account.New.html#get/4"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Account.New.password/1","ref":"Mix.Tasks.Bonfire.Account.New.html#password/1"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Account.New.password/3","ref":"Mix.Tasks.Bonfire.Account.New.html#password/3"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Account.New.run/1","ref":"Mix.Tasks.Bonfire.Account.New.html#run/1"},{"type":"task","doc":"(re)compiles dependencies.\n\nTODO: check if we still need this now that we treat extensions as umbrella apps in dev...\n\nThis is a modified version of Elixir's `Mix.Tasks.Deps.Compile` which was needed to compile dependencies and extract localisable strings in `Mix.Tasks.Bonfire.Localise.Extract`\n\nBy default, compile all dependencies. A list of dependencies\ncan be given compile multiple dependencies in order.\n\nThis task attempts to detect if the project contains one of\nthe following files and act accordingly:\n\n  * `mix.exs`      - invokes `mix compile`\n  * otherwise skip\n\nIf a list of dependencies is given, Mix will attempt to compile\nthem as is. For example, if project `a` depends on `b`, calling\n`mix deps.compile a` will compile `a` even if `b` is out of\ndate. This is to allow parts of the dependency tree to be\nrecompiled without propagating those changes upstream. To ensure\n`b` is included in the compilation step, pass `--include-children`.","title":"mix bonfire.extension.compile","ref":"Mix.Tasks.Bonfire.Extension.Compile.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Extension.Compile.force_compile/2","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#force_compile/2"},{"type":"function","doc":"Receives a list of dependency names and returns loaded `Mix.Dep`s.\nLogs a message if the dependency could not be found.","title":"Mix.Tasks.Bonfire.Extension.Compile.loaded_by_name/3","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#loaded_by_name/3"},{"type":"function","doc":"This function raises an exception if any of the dependencies\nprovided in the project are in the wrong format.","title":"Exceptions - Mix.Tasks.Bonfire.Extension.Compile.loaded_by_name/3","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#loaded_by_name/3-exceptions"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Extension.Compile.run/1","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#run/1"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Extension.Compile.touch_manifests/0","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#touch_manifests/0"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Extension.Compile.try_compile/2","ref":"Mix.Tasks.Bonfire.Extension.Compile.html#try_compile/2"},{"type":"task","doc":"","title":"mix bonfire.extension.copy_migrations","ref":"Mix.Tasks.Bonfire.Extension.CopyMigrations.html"},{"type":"function","doc":"Usage:\n`just mix bonfire.extension.copy_migrations my_extension`\nor\n`just mix bonfire.extension.copy_migrations` \n\nNOTE: if you don't specify what extension(s) to include, it will automatically include all extensions which:\n- start with `bonfire_`\n- and are included in the top-level app (not dependencies of dependencies)\n\nOptional args:\n\n--force (to not ask for confirmation before copying, or to overwrite existing migration files)\n--from priv/repo/migrations (to change the source repo paths, relative to each extension path)\n--to repo/migrations (to change the target repo path (defaults to current flavour's migrations) relative to working directory)\n--repo MyRepo (to specify what repo to migrate after)","title":"Mix.Tasks.Bonfire.Extension.CopyMigrations.run/1","ref":"Mix.Tasks.Bonfire.Extension.CopyMigrations.html#run/1"},{"type":"task","doc":"","title":"mix bonfire.extension.installer","ref":"Mix.Tasks.Bonfire.Extension.Installer.html"},{"type":"function","doc":"Usage:\n`just mix bonfire.install.extension my_extension`","title":"Mix.Tasks.Bonfire.Extension.Installer.igniter/2","ref":"Mix.Tasks.Bonfire.Extension.Installer.html#igniter/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Extension.Installer.install/2","ref":"Mix.Tasks.Bonfire.Extension.Installer.html#install/2"},{"type":"task","doc":"Generates docs for your app and *all* of its deps","title":"mix bonfire.full_docs","ref":"Mix.Tasks.Bonfire.FullDocs.html"},{"type":"task","doc":"* `--only` - the environment to include dependencies for\n  * `--target` - the target to include dependencies for\n  * `--exclude` - exclude dependencies which you do not want to see in docs.\n  * any arguments supported by `mix docs` will be passed along","title":"Command line options - mix bonfire.full_docs","ref":"Mix.Tasks.Bonfire.FullDocs.html#module-command-line-options"},{"type":"task","doc":"`just mix bonfire.gen.component stateless Bonfire.MyUIExtension MyComponent`\nor\n`just mix bonfire.gen.component stateful Bonfire.MyUIExtension MyComponent`\n\nwill present you with a diff and create new files","title":"mix bonfire.gen.component","ref":"Mix.Tasks.Bonfire.Gen.Component.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Gen.Component.gen_component/4","ref":"Mix.Tasks.Bonfire.Gen.Component.html#gen_component/4"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Gen.Component.igniter/2","ref":"Mix.Tasks.Bonfire.Gen.Component.html#igniter/2"},{"type":"task","doc":"`just mix bonfire.gen.extension Bonfire.MyExtension`\n\nwill present you with a diff of new files to create your new extension and create a repo for it in `extensions/`","title":"mix bonfire.gen.extension","ref":"Mix.Tasks.Bonfire.Gen.Extension.html"},{"type":"task","doc":"`just mix bonfire.gen.extension.ui Bonfire.MyExtension`\n\nwill present you with a diff of new files to create your new extension and create a repo for it in `extensions/`","title":"mix bonfire.gen.extension.ui","ref":"Mix.Tasks.Bonfire.Gen.Extension.Ui.html"},{"type":"task","doc":"`just mix bonfire.gen.routes_module Bonfire.MyUIExtension`\n\nwill present you with a diff and create new file(s)","title":"mix bonfire.gen.routes_module","ref":"Mix.Tasks.Bonfire.Gen.RoutesModule.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Gen.RoutesModule.igniter/2","ref":"Mix.Tasks.Bonfire.Gen.RoutesModule.html#igniter/2"},{"type":"task","doc":"`just mix bonfire.gen.ui Bonfire.MyExtension`\n\nwill present you with a diff of new files to create your new extension and create a repo for it in `extensions/`","title":"mix bonfire.gen.ui","ref":"Mix.Tasks.Bonfire.Gen.Ui.html"},{"type":"task","doc":"`just mix bonfire.gen.view Bonfire.MyUIExtension MyView`\n\nwill present you with a diff and create new files","title":"mix bonfire.gen.view","ref":"Mix.Tasks.Bonfire.Gen.View.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Gen.View.igniter/2","ref":"Mix.Tasks.Bonfire.Gen.View.html#igniter/2"},{"type":"task","doc":"`just mix bonfire.gen.widget Bonfire.MyUIExtension MyWidget`\n\nwill present you with a diff and create new files","title":"mix bonfire.gen.widget","ref":"Mix.Tasks.Bonfire.Gen.Widget.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Gen.Widget.igniter/2","ref":"Mix.Tasks.Bonfire.Gen.Widget.html#igniter/2"},{"type":"task","doc":"","title":"mix bonfire.install.copy_configs","ref":"Mix.Tasks.Bonfire.Install.CopyConfigs.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyConfigs.copy_all/2","ref":"Mix.Tasks.Bonfire.Install.CopyConfigs.html#copy_all/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyConfigs.copy_for_extensions/3","ref":"Mix.Tasks.Bonfire.Install.CopyConfigs.html#copy_for_extensions/3"},{"type":"function","doc":"Usage:\n`just mix bonfire.install.copy_migrations my_extension`\nor\n`just mix bonfire.install.copy_migrations` \n\nNOTE: if you don't specify what extension(s) to include, it will automatically include all extensions which:\n- start with `bonfire_`\n- and are included in the top-level app (not dependencies of dependencies)\n\nOptional args:\n\n--force (to not ask for confirmation before copying, or to overwrite existing config files - only applies when not using Igniter)\n--from config (to change the source repo paths, relative to each extension path)\n--to config/ (to change the target repo path (defaults to current flavour's configs) relative to working directory)","title":"Mix.Tasks.Bonfire.Install.CopyConfigs.igniter/2","ref":"Mix.Tasks.Bonfire.Install.CopyConfigs.html#igniter/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyConfigs.simple_copy/3","ref":"Mix.Tasks.Bonfire.Install.CopyConfigs.html#simple_copy/3"},{"type":"task","doc":"","title":"mix bonfire.install.copy_migrations","ref":"Mix.Tasks.Bonfire.Install.CopyMigrations.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyMigrations.copy_all/2","ref":"Mix.Tasks.Bonfire.Install.CopyMigrations.html#copy_all/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyMigrations.copy_for_extensions/3","ref":"Mix.Tasks.Bonfire.Install.CopyMigrations.html#copy_for_extensions/3"},{"type":"function","doc":"Usage:\n`just mix bonfire.install.copy_migrations my_extension`\nor\n`just mix bonfire.install.copy_migrations` \n\nNOTE: if you don't specify what extension(s) to include, it will automatically include all extensions which:\n- start with `bonfire_`\n- and are included in the top-level app (not dependencies of dependencies)\n\nOptional args:\n\n--force (to not ask for confirmation before copying, or to overwrite existing migration files - only applies when not using Igniter)\n--from priv/repo/migrations (to change the source repo paths, relative to each extension path)\n--to repo/ (to change the target repo path (defaults to current flavour's migrations) relative to working directory)","title":"Mix.Tasks.Bonfire.Install.CopyMigrations.igniter/2","ref":"Mix.Tasks.Bonfire.Install.CopyMigrations.html#igniter/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.CopyMigrations.simple_copy/3","ref":"Mix.Tasks.Bonfire.Install.CopyMigrations.html#simple_copy/3"},{"type":"task","doc":"","title":"mix bonfire.install.extension","ref":"Mix.Tasks.Bonfire.Install.Extension.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.Extension.add_dep/4","ref":"Mix.Tasks.Bonfire.Install.Extension.html#add_dep/4"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.Extension.fetch_and_run_installers/3","ref":"Mix.Tasks.Bonfire.Install.Extension.html#fetch_and_run_installers/3"},{"type":"function","doc":"Usage:\n`just mix bonfire.install.extension hex my_extension@1.0`\nor\n`just mix bonfire.install.extension git my_extension@https://my.git/extension_repo`\nor\n`just mix bonfire.install.extension clone my_extension@https://my.git/extension_repo`","title":"Mix.Tasks.Bonfire.Install.Extension.igniter/2","ref":"Mix.Tasks.Bonfire.Install.Extension.html#igniter/2"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Install.Extension.install/4","ref":"Mix.Tasks.Bonfire.Install.Extension.html#install/4"},{"type":"task","doc":"Extracts translations by recompiling the Elixir source code.\n\n    mix gettext.extract [OPTIONS]\n\nTranslations are extracted into POT (Portable Object Template) files (with a\n`.pot` extension). The location of these files is determined by the `:otp_app`\nand `:priv` options given by Gettext modules when they call `use Gettext`. One\nPOT file is generated for each translation domain.\n\nIt is possible to give the `--merge` option to perform merging\nfor every Gettext backend updated during merge:\n\n    mix gettext.extract --merge\n\nAll other options passed to `gettext.extract` are forwarded to the\n`gettext.merge` task (`Mix.Tasks.Gettext.Merge`), which is called internally\nby this task. For example:\n\n    mix gettext.extract --merge --no-fuzzy","title":"mix bonfire.localise.extract","ref":"Mix.Tasks.Bonfire.Localise.Extract.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Localise.Extract.run/1","ref":"Mix.Tasks.Bonfire.Localise.Extract.html#run/1"},{"type":"task","doc":"","title":"mix bonfire.release","ref":"Mix.Tasks.Bonfire.Release.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Release.main/1","ref":"Mix.Tasks.Bonfire.Release.html#main/1"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Release.run/1","ref":"Mix.Tasks.Bonfire.Release.html#run/1"},{"type":"task","doc":"Generates secrets and prints to the terminal.\n    mix bonfire.secrets [length]\nBy default, it generates keys 64 characters long.\nThe minimum value for `length` is 32.","title":"mix bonfire.secrets","ref":"Mix.Tasks.Bonfire.Secrets.html"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Secrets.main/1","ref":"Mix.Tasks.Bonfire.Secrets.html#main/1"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.Secrets.print/1","ref":"Mix.Tasks.Bonfire.Secrets.html#print/1"},{"type":"task","doc":"Promotes a user to an administrator","title":"mix bonfire.user.admin.promote","ref":"Mix.Tasks.Bonfire.User.Admin.Promote.html"},{"type":"task","doc":"```\nmix bonfire.user.admin.promote username\n```","title":"Usage - mix bonfire.user.admin.promote","ref":"Mix.Tasks.Bonfire.User.Admin.Promote.html#module-usage"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.User.Admin.Promote.run/1","ref":"Mix.Tasks.Bonfire.User.Admin.Promote.html#run/1"},{"type":"task","doc":"Creates an user in the database (and an account, automatically activated)","title":"mix bonfire.user.new","ref":"Mix.Tasks.Bonfire.User.New.html"},{"type":"task","doc":"```\njust mix bonfire.user.new [username] [email@address]\n```\n\nYou will be prompted for a password, and username/email if not provided.","title":"Usage - mix bonfire.user.new","ref":"Mix.Tasks.Bonfire.User.New.html#module-usage"},{"type":"function","doc":"","title":"Mix.Tasks.Bonfire.User.New.run/1","ref":"Mix.Tasks.Bonfire.User.New.html#run/1"},{"type":"task","doc":"","title":"mix import2alias","ref":"Mix.Tasks.Import2alias.html"},{"type":"module","doc":"WIP: Nebulex disk adapter based on https://hexdocs.pm/nebulex/creating-new-adapter.html and https://hexdocs.pm/cachex/Cachex.Disk.html","title":"Nebulex.DiskAdapter","ref":"Nebulex.DiskAdapter.html"},{"type":"module","doc":"WIP: Nebulex disk adapter based on https://hexdocs.pm/nebulex/creating-new-adapter.html and https://hexdocs.pm/cachex/Cachex.Disk.html","title":"Nebulex.DiskAdapter.DiskCacheHelper","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.cache_path/3","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#cache_path/3"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"Nebulex.DiskAdapter.DiskCacheHelper.child_spec/1","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#child_spec/1"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.disk_clear/2","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#disk_clear/2"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.disk_delete/3","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#disk_delete/3"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.disk_get/4","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#disk_get/4"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.disk_list/2","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#disk_list/2"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.disk_put/4","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#disk_put/4"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.init/1","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#init/1"},{"type":"function","doc":"","title":"Nebulex.DiskAdapter.DiskCacheHelper.start_link/1","ref":"Nebulex.DiskAdapter.DiskCacheHelper.html#start_link/1"},{"type":"behaviour","doc":"Defines a paginator.\n\nThis module adds a `paginate/3` function to your `Ecto.Repo` so that you can\npaginate through results using opaque cursors.","title":"Paginator","ref":"Paginator.html"},{"type":"behaviour","doc":"defmodule MyApp.Repo do\n      use Ecto.Repo, otp_app: :my_app\n      use Paginator\n    end","title":"Usage - Paginator","ref":"Paginator.html#module-usage"},{"type":"behaviour","doc":"`Paginator` can take any options accepted by `paginate/3`. This is useful when\nyou want to enforce some options globally across your project.","title":"Options - Paginator","ref":"Paginator.html#module-options"},{"type":"behaviour","doc":"defmodule MyApp.Repo do\n      use Ecto.Repo, otp_app: :my_app\n      use Paginator,\n        limit: 10,                           # sets the default limit to 10\n        maximum_limit: 100,                  # sets the maximum limit to 100\n        include_total_count: true,           # include total count by default\n        total_count_primary_key_field: :uuid # sets the total_count_primary_key_field to uuid for calculate total_count\n    end\n\nNote that these values can be still be overriden when `paginate/3` is called.","title":"Example - Paginator","ref":"Paginator.html#module-example"},{"type":"behaviour","doc":"If you wish to avoid use of macros or you wish to use a different name for\nthe pagination function you can define your own function like so:\n\n    defmodule MyApp.Repo do\n      use Ecto.Repo, otp_app: :my_app\n\n      def my_paginate_function(queryable, opts \\ [], repo_opts \\ []) do\n        defaults = [limit: 10] # Default options of your choice here\n        opts = Keyword.merge(defaults, opts)\n        Paginator.paginate(queryable, opts, __MODULE__, repo_opts)\n      end\n    end","title":"Use without macros - Paginator","ref":"Paginator.html#module-use-without-macros"},{"type":"function","doc":"Generate a cursor for the supplied record, in the same manner as the\n`before` and `after` cursors generated by `paginate/3`.\n\nFor the cursor to be compatible with `paginate/3`, `cursor_fields`\nmust have the same value as the `cursor_fields` option passed to it.","title":"Paginator.cursor_for_record/3","ref":"Paginator.html#cursor_for_record/3"},{"type":"function","doc":"iex> Paginator.cursor_for_record(%Paginator.Customer{id: 1}, [:id])\n    \"g3QAAAABZAACaWRhAQ==\"\n\n    iex> Paginator.cursor_for_record(%Paginator.Customer{id: 1, name: \"Alice\"}, [id: :asc, name: :desc])\n    \"g3QAAAACZAACaWRhAWQABG5hbWVtAAAABUFsaWNl\"","title":"Example - Paginator.cursor_for_record/3","ref":"Paginator.html#cursor_for_record/3-example"},{"type":"function","doc":"Default function used to get the value of a cursor field from the supplied\nmap. This function can be overriden in the `Paginator.Config` using the\n`fetch_cursor_value_fun` key.\n\nWhen using named bindings to sort on joined columns it will attempt to get\nthe value of joined column by using the named binding as the name of the\nrelationship on the original Ecto.Schema.","title":"Paginator.default_fetch_cursor_value/2","ref":"Paginator.html#default_fetch_cursor_value/2"},{"type":"function","doc":"iex> Paginator.default_fetch_cursor_value(%Paginator.Customer{id: 1}, :id)\n    1\n\n    iex> Paginator.default_fetch_cursor_value(%Paginator.Customer{id: 1, address: %Paginator.Address{city: \"London\"}}, {:address, :city})\n    \"London\"","title":"Example - Paginator.default_fetch_cursor_value/2","ref":"Paginator.html#default_fetch_cursor_value/2-example"},{"type":"callback","doc":"Fetches all the results matching the query within the cursors.","title":"Paginator.paginate/3","ref":"Paginator.html#c:paginate/3"},{"type":"callback","doc":"* `:after` - Fetch the records after this cursor.\n  * `:before` - Fetch the records before this cursor.\n  * `:cursor_fields` - The fields with sorting direction used to determine the\n  cursor. In most cases, this should be the same fields as the ones used for sorting in the query.\n  When you use named bindings in your query they can also be provided.\n  * `:fetch_cursor_value_fun` function of arity 2 to lookup cursor values on returned records.\n  Defaults to `Paginator.default_fetch_cursor_value/2`\n  * `:include_total_count` - Set this to true to return the total number of\n  records matching the query. Note that this number will be capped by\n  `:total_count_limit`. Defaults to `false`.\n  * `:total_count_primary_key_field` - Running count queries on specified column of the table\n  * `:limit` - Limits the number of records returned per page. Note that this\n  number will be capped by `:maximum_limit`. Defaults to `50`.\n  * `:maximum_limit` - Sets a maximum cap for `:limit`. This option can be useful when `:limit`\n  is set dynamically (e.g from a URL param set by a user) but you still want to\n  enforce a maximum. Defaults to `500`.\n  * `:total_count_limit` - Running count queries on tables with a large number\n  of records is expensive so it is capped by default. Can be set to `:infinity`\n  in order to count all the records. Defaults to `10,000`.","title":"Options - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-options"},{"type":"callback","doc":"This will be passed directly to `Ecto.Repo.all/2`, as such any option supported\nby this function can be used here.","title":"Repo options - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-repo-options"},{"type":"callback","doc":"query = from(p in Post, order_by: [asc: p.inserted_at, asc: p.id], select: p)\n\n    Repo.paginate(query, cursor_fields: [:inserted_at, :id], limit: 50)","title":"Simple example - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-simple-example"},{"type":"callback","doc":"query = from(p in Post, order_by: [asc: p.inserted_at, desc: p.id], select: p)\n\n    Repo.paginate(query, cursor_fields: [inserted_at: :asc, id: :desc], limit: 50)","title":"Example with using custom sort directions per field - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-example-with-using-custom-sort-directions-per-field"},{"type":"callback","doc":"from(\n      p in Post,\n      as: :posts,\n      join: a in assoc(p, :author),\n      as: :author,\n      preload: [author: a],\n      select: p,\n      order_by: [\n        {:asc, a.name},\n        {:asc, p.id}\n      ]\n    )\n\n    Repo.paginate(query, cursor_fields: [{{:author, :name}, :asc}, id: :asc], limit: 50)\n\nWhen sorting on columns in joined tables it is necessary to use named bindings. In\nthis case we name it `author`. In the `cursor_fields` we refer to this named binding\nand its column name.\n\nTo build the cursor Paginator uses the returned Ecto.Schema. When using a joined\ncolumn the returned Ecto.Schema won't have the value of the joined column\nunless we preload it. E.g. in this case the cursor will be build up from\n`post.id` and `post.author.name`. This presupposes that the named of the\nbinding is the same as the name of the relationship on the original struct.\n\nOne level deep joins are supported out of the box but if we join on a second\nlevel, e.g. `post.author.company.name` a custom function can be supplied to\nhandle the cursor value retrieval. This also applies when the named binding\ndoes not map to the name of the relationship.","title":"Example with sorting on columns in joined tables - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-example-with-sorting-on-columns-in-joined-tables"},{"type":"callback","doc":"from(\n      p in Post,\n      as: :posts,\n      join: a in assoc(p, :author),\n      as: :author,\n      join: c in assoc(a, :company),\n      as: :company,\n      preload: [author: a],\n      select: p,\n      order_by: [\n        {:asc, a.name},\n        {:asc, p.id}\n      ]\n    )\n\n    Repo.paginate(query,\n      cursor_fields: [{{:company, :name}, :asc}, id: :asc],\n      fetch_cursor_value_fun: fn\n        post, {{:company, name}, _} ->\n          post.author.company.name\n\n        post, field ->\n          Paginator.default_fetch_cursor_value(post, field)\n      end,\n      limit: 50\n    )","title":"Example - Paginator.paginate/3","ref":"Paginator.html#c:paginate/3-example"},{"type":"function","doc":"","title":"Paginator.paginated_query/2","ref":"Paginator.html#paginated_query/2"},{"type":"module","doc":"Defines a page.","title":"Paginator.Page","ref":"Paginator.Page.html"},{"type":"module","doc":"* `edges` - a list of entries contained in this page.\n* `page_info` - meta-data attached to this page.","title":"Fields - Paginator.Page","ref":"Paginator.Page.html#module-fields"},{"type":"type","doc":"","title":"Paginator.Page.t/0","ref":"Paginator.Page.html#t:t/0"},{"type":"module","doc":"Defines page page_info.","title":"Paginator.PageInfo","ref":"Paginator.PageInfo.html"},{"type":"module","doc":"* `start_cursor` - an opaque cursor representing the first row of the current page, to be used with the `before` query parameter.\n* `end_cursor` - an opaque cursor representing the last row of the current page, to be used with the `after` query parameter.\n* `limit` - the maximum number of edges that can be contained in this page.\n* `page_count` - the number of edges on the current page.\n* `total_count` - the total number of edges matching the query.\n* `total_count_cap_exceeded` - a boolean indicating whether the `:total_count_limit` was exceeded.","title":"Fields - Paginator.PageInfo","ref":"Paginator.PageInfo.html#module-fields"},{"type":"type","doc":"","title":"Paginator.PageInfo.opaque_cursor/0","ref":"Paginator.PageInfo.html#t:opaque_cursor/0"},{"type":"type","doc":"","title":"Paginator.PageInfo.t/0","ref":"Paginator.PageInfo.html#t:t/0"},{"type":"module","doc":"","title":"UserAuthLiveMount","ref":"UserAuthLiveMount.html"},{"type":"function","doc":"","title":"UserAuthLiveMount.on_mount/4","ref":"UserAuthLiveMount.html#on_mount/4"},{"type":"extras","doc":"<!--      -->\n\n\n# Bonfire Networks \n\n[Bonfire](https://bonfirenetworks.org/) is an open-source framework for building federated digital spaces where people can gather, interact, and form communities online.\n\n![Bonfire wallpaper](https://i.imgur.com/dbRT0Z1.png)\n\n> #### Info {: .info}\n>\n> This project is in the beta stage - you're welcome to try out it out (specifically the social features in the classic flavour), but APIs may still change and no guarantees are given about stability. You can keep track of progress [in our milestones](https://github.com/bonfire-networks/bonfire-app/milestones?direction=asc&sort=due_date&state=open)","title":"Bonfire Networks","ref":"readme.html"},{"type":"extras","doc":"1. **Modular architecture**: Bonfire consists of extensions that shape the functionality and user experience of each digital space. Communities can enable or disable these extensions to customize their space according to their needs and vision.\n2. **Extensibility**: Developers can create new extensions to expand the capabilities of digital spaces, such as adding new activities or introducing innovative user experiences for existing functions.\n3. **Federation**: Bonfire allows digital spaces to connect and communicate with each other, enabling users to interact across different communities while maintaining their unique identities and preferences.\n4. **Flexibility**: Whether you're an individual developer or part of a larger team, Bonfire provides a flexible framework for building and customizing digital spaces that cater to a wide range of communities and purposes.\n\nBonfire empowers developers and communities to create engaging, customizable, and interconnected digital spaces that foster collaboration, creativity, and social interaction online.","title":"Main characteristics - Bonfire Networks","ref":"readme.html#main-characteristics"},{"type":"extras","doc":"This repo includes configurations to run a few main [flavours of Bonfire](https://bonfirenetworks.org/apps/) you can choose from. Each flavour (see above) includes different extensions and default settings. \n\n* [Ember](https://github.com/bonfire-networks/ember) for just the basics\n* [Social](https://github.com/bonfire-networks/social) for classical social networking (beta)\n* [Community](https://github.com/bonfire-networks/community) with groups and topics functionality (alpha)\n* [Open Science](https://github.com/bonfire-networks/open-science) building the next generation of open science platforms (alpha)\n* [Coordination](https://github.com/bonfire-networks/coordination) for organising work and collaborating around projects and tasks (pre-alpha)\n* [Cooperation](https://github.com/bonfire-networks/cooperation) for cooperative production, distribution, and exchange of economic resources (pre-alpha)\n\n<!-- As well as app flavours being built by others, including: \n* [Upcycle](https://github.com/bonfire-networks/upcycle) by MSOE \n-->","title":"🔥 Flavours - Bonfire Networks","ref":"readme.html#flavours"},{"type":"extras","doc":"All of the features and user interface elements in Bonfire are implemented in [extensions](https://bonfirenetworks.org/extensions/), with the code for each being in a separate repository.","title":"🧩 Extensions - Bonfire Networks","ref":"readme.html#extensions"},{"type":"extras","doc":"- **Developers**: You'll probably be interested in understanding how to build on Bonfire. The [dev setup](/docs/HACKING.md) will guide you through the installation of bonfire on your local machine. In the [Just commands](/docs/topics/JUST.md) page you will gain familiarities with the basic Bonfire CLI commands. From there you may want to continue [developing a new extension](/docs/building/create-a-new-extension.md), or learning more about the internals and the [Bonfire architecture](/docs/topics/ARCHITECTURE.md).\n\n- **Users**: Whether you are a user who is looking for an existing digital place to join, or want to understand more about how Bonfire works and how to get the most out of it, the [Community Manual](https://bonfirenetworks.org/#TODO) is a good place to start. There you can learn about how to customize your experience, what boundaries are and how to experience a new and safer way to interact with federated social networks.\n\n- **Community organisers & sysadmins**: Ready to launch your digital space? We got you covered on our [hosting guide](/docs/DEPLOY.md).","title":"How to get the most out of the documentation - Bonfire Networks","ref":"readme.html#how-to-get-the-most-out-of-the-documentation"},{"type":"extras","doc":"Bonfire aims to be beginner-friendly, but to keep the documentation focused on the framework's functionalities, we assume a basic understanding of the following technologies:\n\n- **Elixir**: If you're new to Elixir or need a refresher, start with the [Elixir guide](https://hexdocs.pm/elixir/introduction.html).\n- **Phoenix/LiveView** and **Surface**: Bonfire's official web UI is built with the Surface framework, which itself is based on Phoenix LiveView. If you're unfamiliar with them, check out the [Phoenix overview](https://hexdocs.pm/phoenix/overview.html), [Phoenix LiveView guide](https://hexdocs.pm/phoenix_live_view/welcome.html), and [Surface docs](https://surface-ui.org). You may also be interested in the [Phoenix LiveView video course by Pragmatic Studio](https://pragmaticstudio.com/phoenix-liveview).\n- **PostgreSQL**: Bonfire uses PostgreSQL as its primary database. Basic knowledge of SQL and PostgreSQL is helpful.\n\nBonfire also provides a [GraphQL API](/docs/topics/GRAPHQL.md) for developers who want to build custom frontends.\n\nThroughout the documentation, we'll make sure to provide links to relevant resources when introducing new concepts to help you along the way. We have a strong affinity for Elixir and believe it's a powerful language for building scalable and maintainable social networks.","title":"Prerequisite knowledge - Bonfire Networks","ref":"readme.html#prerequisite-knowledge"},{"type":"extras","doc":"If you have questions about anything related to Bonfire, you're always welcome to ask our community on [Matrix](https://matrix.to/#/#bonfire-networks:matrix.org), [Slack](https://join.slack.com/t/elixir-lang/shared_invite/zt-2ko4792lz-28XosraCTaYZKOyuZ80hrg), [Elixir Forum](https://elixirforum.com) and the [Fediverse](https://indieweb.social/@bonfire) or send us an email at team@bonfire.cafe.","title":"Join our community - Bonfire Networks","ref":"readme.html#join-our-community"},{"type":"extras","doc":"This project has received funding from [NGI0 Discovery](https://nlnet.nl/discovery) and [NGI0 Entrust](https://nlnet.nl/entrust), funds established by [NLnet](https://nlnet.nl) with financial support from the European Commission's [Next Generation Internet](https://ngi.eu) programme. Learn more at the [NLnet project page](https://nlnet.nl/project/Bonfire-Framework) (also for [previous](https://nlnet.nl/project/Bonfire-FederatedGroups) [projects](https://nlnet.nl/project/Bonfire) )\n\n[ ](https://nlnet.nl)\n[ ](https://nlnet.nl/entrust)\n[ ](https://nlnet.nl/discovery)","title":"Funding - Bonfire Networks","ref":"readme.html#funding"},{"type":"extras","doc":"Copyright (c) 2020-2024 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire Networks","ref":"readme.html#copyright-and-license"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Development setup\n\n> #### Info {: .info}\n>\n> These instructions are for hacking on Bonfire. If you wish to deploy in production, please refer to our [Hosting Guide](./DEPLOY.md) instead.\n\n\nHello, potential contributor! :-)\n\nThis is a work in progress guide to getting up and running as a developer. Please ask questions in the issue tracker if something is not clear and we'll try to improve it.\n\nHappy hacking!","title":"Development setup","ref":"hacking.html"},{"type":"extras","doc":"Bonfire is currently beta software. While it's fun to play with it, we would not recommend running any production instances (meaning not using it for your primary fediverse identity) yet because it's not quite ready for that today.","title":"Status: beta - have fun and provide feedback 🙏 - Development setup","ref":"hacking.html#status-beta-have-fun-and-provide-feedback"},{"type":"extras","doc":"- [Just](https://github.com/casey/just#packages): a handy tool (a `make` alternative) to run commands defined in `./justfile`.","title":"System Requirements - Development setup","ref":"hacking.html#system-requirements"},{"type":"extras","doc":"Either way, you need to first clone this repository and change into the directory and then do some configuration:\n\n```sh\n$ git clone https://github.com/bonfire-networks/bonfire-app bonfire\n$ cd bonfire\n```","title":"Download - Development setup","ref":"hacking.html#download"},{"type":"extras","doc":"","title":"Configure - Development setup","ref":"hacking.html#configure"},{"type":"extras","doc":"Bonfire is a flexible platform that powers a variety of social networks. The first thing you have to choose is which app (or \"flavour\") you want to hack on:\n\n- `ember` (just the basics)\n- `social` (a classical social network that interoperates with the fediverse)\n- `community` (for topics and groups)\n- `open-science` (for next-gen scientific communities)\n- `coordination` (for coordinating around tasks and projects)\n- `cooperation` (for building cooperative economic networks)\n\nNote that at the current time, the core team are focusing most of their efforts on the `social` flavour and this is where we **recommend** you start.\n\n\nSo for example if you want to run the `social` flavour run:\n\n```sh\nexport FLAVOUR=social\n``` \n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)","title":"Pick a flavour - Development setup","ref":"hacking.html#pick-a-flavour"},{"type":"extras","doc":"You can choose to run bonfire in a variety of ways, from fully managed via docker-compose, to bare metal with local postgres and elixir, to a combination of the two, we also offer the possibility to run Bonfire with nix.\n\n<!-- tabs-open -->","title":"Choose your development environment - Development setup","ref":"hacking.html#choose-your-development-environment"},{"type":"extras","doc":"The easy way consist in using bare-metal elixir, and docker-managed tooling, database & search index, recommended for active development.\n\n> #### Info {: .info}\n>\n> Note: the simplest way to handle dependencies is using a tool like [mise](https://mise.jdx.dev/) or asdf to setup the environment (simply run `mise install` in the root directory).\n\n#### Dependencies:\n  - Recent versions of [Elixir](https://elixir-lang.org/install.html) (1.15+) and OTP/erlang (25+)\n  - [yarn](https://yarnpkg.com)\n  - Recent versions of Docker & [docker-compose](https://docs.docker.com/compose/install/)\n\n- Make sure you've set the env to indicate your choice\n\n```bash\nexport WITH_DOCKER=easy\n```\n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)","title":"Easy - Development setup","ref":"hacking.html#easy"},{"type":"extras","doc":"Fully managed via docker-compose, recommended when you're first exploring and don't want to install Elixir.\n\n> NOTE: not recommended on MacOS, as it is significantly slower.\n\n#### Dependencies \n\n- Recent versions of Docker & [docker-compose](https://docs.docker.com/compose/install/)\n- Make sure you've set the environment variable to indicate your choice:\n\n```bash\nexport WITH_DOCKER=total\n```\n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)\n\n<!--","title":"All containers - Development setup","ref":"hacking.html#all-containers"},{"type":"extras","doc":"The partial way consist in using bare-metal elixir and tooling, and docker-managed database & search index.\n\n> #### Info {: .info}\n>\n> Note: you can use a tool like [mise](https://mise.jdx.dev/) or asdf to setup the environment (run `mise install` in the root directory).\n\n\n#### Dependencies:\n\n- Recent versions of [Elixir](https://elixir-lang.org/install.html) (1.15+) and OTP/erlang (25+)\n- Recent versions of [Rust](https://www.rust-lang.org/tools/install) and Cargo\n- [yarn](https://yarnpkg.com)\n- Recent versions of Docker & [docker-compose](https://docs.docker.com/compose/install/)\n\n- Make sure you've set the environment variable to indicate your choice\n\n```bash\nexport WITH_DOCKER=partial\n``` \n-->","title":"Partial - Development setup","ref":"hacking.html#partial"},{"type":"extras","doc":"> #### Info {: .info}\n>\n> Note: you can use a tool like [mise](https://mise.jdx.dev/) or asdf to setup the environment (run `mise install` in the root directory). You will still need to install Postgres and Meili seperately though.\n\n- Dependencies:\n  - Recent versions of [Elixir](https://elixir-lang.org/install.html) (1.15+) and OTP/erlang (25+)\n  <!-- - Recent versions of [Rust](https://www.rust-lang.org/tools/install) and Cargo -->\n  - [yarn](https://yarnpkg.com)\n  - Postgres 12+ (or rather [Postgis](https://postgis.net/install/) if using the bonfire_geolocate extension)\n  - [Meili Search](https://docs.meilisearch.com/learn/getting_started/installation.html) (optional)\n\n- If you want search capabilities, you'll also need to setup a Meili server and set the relevant env variables as well.\n\n- Make sure you've set the environment variable to indicate your choice\n\n```bash\nexport WITH_DOCKER=no\n```\n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)","title":"Bare-metal - Development setup","ref":"hacking.html#bare-metal"},{"type":"extras","doc":"You can also choose to use nix to setup your development environment.\n\n#### Dependencies:\n\n- Run a recent version of Nix or NixOS: https://nixos.org/download.html\n- Enable Flakes: https://nixos.wiki/wiki/Flakes#Installing_flakes\n- Install [direnv](https://direnv.net/) through nix if you don't have the tool already: `nix profile install nixpkgs#direnv` and add it to your shell: https://direnv.net/docs/hook.html\n- Clone the bonfire-app repo if you haven't already and allow direnv to use environment variables:\n  ```bash\n  git clone https://github.com/bonfire-networks/bonfire-app\n  cd `bonfire-app`\n  direnv allow\n  ```\n\nThe tool direnv is necessary for the nix setup as the nix shell environment will use variables defined on `.envrc` to set itself up.\n\nNote: when you run `direnv allow` on the bonfire-app directory for the first time, nix will automatically fetch the dependencies for bonfire. The process will take a while as it's downloading everything needed to use the development environment. Afterwards you will be able to use just fine. Proceeding times you enter the directory, the shell with automatically set up for your use without downloading the packages again.\n\nYou will need to update the db directory which is automatically created by nix the first time you initialized the shell with `direnv allow`. You can do so with the following steps:\n- Update `props.nix` to the settings you want.\n- Run `just nix-db-init` to create the database and user for postgres defined on `props.nix`.\n- Modify the `.env` file to comment out all `POSTGRES_*` variables. These are populated automatically by nix. So if the variables are set here, you may get issues with overriding your settings in `props.nix` when using bonfire.\n- You can now proceed to Hello World!\n\nNote: if you ever want to shut off the postgres server in nix, simply run the nix-db targets in just:\n\n```\n# stop postgres server running locally\njust nix-db stop\n# start postgres server running locally\njust nix-db start\n```\n\n<!-- tabs-close -->","title":"Nix - Development setup","ref":"hacking.html#nix"},{"type":"extras","doc":"Run `just config` to initialise the needed config.\n\n```sh\njust config\n```\n\nThen you can edit the config for the current flavour in `./.env`\n\n> For example, you can set `TEST_LOG_LEVEL=debug` in your `.env` to show full debug logs when running unit tests.\n\nThe only required config to startup bonfire are the secrets for sessions/cookies (`SECRET_KEY_BASE`, `SIGNING_SALT`, `ENCRYPTION_SALT`), you can generate strings for these by running:\n\n```sh\njust secrets\n```","title":"Configure - Development setup","ref":"hacking.html#configure"},{"type":"extras","doc":"From a fresh checkout of this repository, this command will fetch the app's dependencies and setup the database (the same commands apply for all three options above):\n\n```\njust setup-dev\n```\n\nThis command will take a while to complete. Soon we will streamiline the setup process to be more lightway, bear with us for the moment.\n\nYou should now be able to run the app with:\n\n```\njust dev\n```\n\nRead more about the available `just` commands in the [`just` commands](./topics/JUST.md) page.","title":"Light a fire! - Development setup","ref":"hacking.html#light-a-fire"},{"type":"extras","doc":"","title":"Onboarding - Development setup","ref":"hacking.html#onboarding"},{"type":"extras","doc":"The back-end server runs on port 4000 (TCP) by default. Access it by navigating to http://localhost:4000/ in your web browser.","title":"Getting Started - Development setup","ref":"hacking.html#getting-started"},{"type":"extras","doc":"To create an account, go to http://localhost:4000/signup and enter your email address and password.\nWhen running the server locally and signing up for the first time, you won't need a confirmation email. However, for any future signups know you can find the confirmation link in the server logs.\n\n> You can also sign up via CLI by entering something like this in your app's Elixir console: `Bonfire.Me.make_account_only(\"my@email.net\", \"my pw\")`","title":"Creating an account - Development setup","ref":"hacking.html#creating-an-account"},{"type":"extras","doc":"The first user registered on the platform is automatically granted Admin permissions.","title":"Admin permissions - Development setup","ref":"hacking.html#admin-permissions"},{"type":"extras","doc":"After successfully creating and confirming your account, you should see an empty dashboard.\n\nThat's it! You have now successfully onboarded and can start using the application.","title":"Successful onboarding - Development setup","ref":"hacking.html#successful-onboarding"},{"type":"extras","doc":"We like to think of bonfire as a comfortable way of developing software - there are a lot of conveniences built in once you know how they all work. The gotcha is that while you don't know them, it can be a bit overwhelming. Don't worry, we've got your back.\n\n- [Architecture](./topics/ARCHITECTURE.md) - an overview of the stack and code structure.\n- [Bonfire-flavoured Elixir](./topics/BONFIRE-FLAVOURED-ELIXIR.md) - an introduction to the way we write Elixir.\n- [Bonfire's Database: an Introduction](./topics/DATABASE.md) - an overview of how our database is designed.\n- [Boundaries](./topics/BOUNDARIES.md) - an introduction to our access control system.\n\nNote: these are still at the early draft stage, we expect to gradually improve documentation over time.","title":"The Bonfire environment - Development setup","ref":"hacking.html#the-bonfire-environment"},{"type":"extras","doc":"The code is somewhat documented inline. You can generate HTML docs (using `Exdoc`) by running `just docs`.","title":"Documentation - Development setup","ref":"hacking.html#documentation"},{"type":"extras","doc":"<!-- - `messctl` is a little utility for programmatically updating the .deps files from which the final elixir dependencies list is compiled by the mess script. The only use of it is in the dep-\\* tasks of the Makefile. It is used by some of the project developers and the build does not rely on it. -->\n\n- `./extensions/` is used to hack on local copies of Bonfire extensions. You can clone an extension from its git repo and use the local version during development, eg: `just dep-clone-local bonfire_me https://github.com/bonfire-networks/bonfire_me`\n\n- `./forks/` is used to hack on local copies of any other dependencies.\n\n- You can migrate the DB when the app is running (also runs automatically on startup): `Bonfire.Common.Repo.migrate`\n\n- You can generate a dependency graph using `just xref-graph` which will generate a DOT file at `docs/` (if Graphviz is installed it will also generate an SVG visualisation using `dot`).","title":"Additional information - Development setup","ref":"hacking.html#additional-information"},{"type":"extras","doc":"By default, the `justfile` requires symlinks, which can be enabled with the help of [this link](https://stackoverflow.com/a/59761201).\n\nSee the [pull request adding WSL support](https://github.com/bonfire-networks/bonfire-app/pull/111) for details about usage without symlinks.","title":"Usage under Windows (WSL, MSYS or CYGWIN) - Development setup","ref":"hacking.html#usage-under-windows-wsl-msys-or-cygwin"},{"type":"extras","doc":"","title":"Troubleshooting - Development setup","ref":"hacking.html#troubleshooting"},{"type":"extras","doc":"If you get a permissions error when following any of the steps, run the following command and it should be fixed:\n\n```shell\ncd bonfire && sudo chown -R yourusername:yourusername .\n```\n\nNote that the command should be modified so your shell is pointing to wherever you have bonfire installed. If you are already in the bonfire directory then you only need to worry about running the `chown` portion of the command.","title":"EACCES Permissions Error - Development setup","ref":"hacking.html#eacces-permissions-error"},{"type":"extras","doc":"If you are getting any `:nxdomain` errors, check if you have any firewalls that may be blocking the port on your system.\n\nFor example, if you are running UFW (a lot of Linux distros do), run the following command to allow access to port 4000:\n\n```shell\nsudo ufw allow 4000\n```\n\n### (Mix) Package fetch failed\n\nExample:\n\n```\n** (Mix) Package fetch failed and no cached copy available (https://repo.hex.pm/tarballs/distillery-2.0.12.tar)\n```\n\nIn this case, distillery (as an example of a dependency) made a new release and retired the old release from hex. The new version (`2.0.14`) is quite close to the version we were depending on (`2.0.12`), so we chose to upgrade:\n\n```shell\nmix deps.update distillery\n```\n\nThis respects the version bounds in `mix.exs` (`~> 2.0`), so increment that if required.\n\n### `(DBConnection.ConnectionError) tcp recv: closed`\n\nExample:\n\n```\n** (DBConnection.ConnectionError) tcp recv: closed (the connection was closed by the pool, possibly due to a timeout or because the pool has been terminated)\n```\n\nIn this case, the seeds were unable to complete because a query took too long to execute on your machine. You can configure the timeout to be larger in the `dev` environment:\n\n1. Open `config/dev.exs` in your editor.\n2. Find the database configuration (search for `Bonfire.Common.Repo`).\n3. Add `timeout: 60_000` to the list of options:\n\n```\nconfig :bonfire, Bonfire.Common.Repo,\n  timeout: 60_000,\n  [...]\n```","title":"Unable to access Postgres database - Development setup","ref":"hacking.html#unable-to-access-postgres-database"},{"type":"extras","doc":"This seems to be an issue with the order of compilation, you can usually work around it by cleaning the deps it complains about, eg: `just deps-clean needle_ulid` or `just deps-clean poison` or `just deps-clean jason`","title":"Compilation errors like `(ArgumentError) could not load module Needle.ULID due to reason :unavailable` or `(ArgumentError) could not load module Poison.Encoder due to reason :unavailable` - Development setup","ref":"hacking.html#compilation-errors-like-argumenterror-could-not-load-module-needle-ulid-due-to-reason-unavailable-or-argumenterror-could-not-load-module-poison-encoder-due-to-reason-unavailable"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Hosting guide\n\nA short guide to running Bonfire in a production environment and setting up a digital space connected to the fediverse.\n\n> #### Warning {: .warning}\n>\n> Bonfire is currently beta software. While it's fun to play with it, we would not recommend running any production instances yet (meaning not using it for your primary fediverse identity) because it's not quite ready for that today. \n\n\n_These instructions are for setting up Bonfire in production. If you want to run the backend in development, please refer to our [Installation guide](./HACKING.md) instead._","title":"Hosting guide","ref":"deploy.html"},{"type":"extras","doc":"We recommend only granting an account to people you trust to minimise the attack surface. Accordingly, Bonfire ships with public registration disabled. The admin panel has an `invite` facility. \n\n---","title":"Security Warning - Hosting guide","ref":"deploy.html#security-warning"},{"type":"extras","doc":"<!-- tabs-open -->","title":"Step 1 - Decide how you want to deploy and manage the app - Hosting guide","ref":"deploy.html#step-1-decide-how-you-want-to-deploy-and-manage-the-app"},{"type":"extras","doc":"Install using [Co-op Cloud](https://coopcloud.tech) (recommended) which is an alternative to corporate cloud services built by tech co-ops, and provides handy tools for setting up and managing many self-hosted free software tools using ready-to-use \"recipes\". Very useful if you'd like to host Bonfire alongside other open and/or federated projects. \n\n1. Install [Abra](https://docs.coopcloud.tech/abra/) on your machine\n2. [Set up a server with co-op cloud](https://docs.coopcloud.tech/operators/) \n3. Use the [Bonfire recipe](https://recipes.coopcloud.tech/bonfire) and follow the instructions there, including editing the config in the env file at `~/.abra/servers/your_server/your_app.env` (see [prepare the config](#preparing-the-config-in-env) for details about what to edit)\n4. Run the abra deploy command and done!","title":"Co-op Cloud - Hosting guide","ref":"deploy.html#co-op-cloud"},{"type":"extras","doc":"1. Install dependencies. \n\nThe easiest way to manage the docker image is using just commands.\n\nThe `docker-compose.release.yml` uses `config/prod/.env` to launch a container with the necessary environment variables along with its dependencies, currently that means an extra postgres container, along with a reverse proxy (Caddy server, which you may want to replace with nginx or whatever you prefer).\n\nMake sure you have [Docker](https://www.docker.com/), with the [compose](https://docs.docker.com/compose/install/#install-compose) plugin, and [just](https://github.com/casey/just#packages) installed:\n\n```sh\n$ docker version\nDocker Engine - Community - 23.0.1\n\n$ docker compose version\nDocker Compose version v2.16.0\n\n$ just --version\njust 1.13.0\n...\n```\n\n2. Clone this repository and change into the directory:\n\n```sh\ngit clone --depth 1 https://github.com/bonfire-networks/bonfire-app.git bonfire && cd bonfire\n```\n\n3. Specify what flavour you want to run in production:\n\nThe first thing to do is choose what flavour of Bonfire (eg. ember, social, community, or cooperation) you want to deploy, as each flavour uses different Docker images and set of configs. For example if you want to run the `social` flavour:\n\n- `export MIX_ENV=prod FLAVOUR=social WITH_DOCKER=yes` \n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)\n\n4. Run `just config` to initialise some default config and then edit the config in the `./.env` file (see [prepare the config](#preparing-the-config-in-env) for details about what to edit).\n\n> Now that your tooling is set up, you have the choice of using pre-built images or building your own. For example if your flavour does not have a prebuilt image on Docker Hub, or if you want to customise any of the extensions, you can build one yourself. \n\n\n#### Using pre-built Docker images (easy mode)\n\n- The `image` entry in `docker-compose.release.yml` will by default use the image on Docker Hub which corresponds to your chosen flavour (see step 1 above for choosing your flavour).\n\nYou can see the images available per flavour, version (we currently recommend using the `latest` tag), and architecture at https://hub.docker.com/r/bonfirenetworks/bonfire/tags \n\n5. Try [running the app](#running-with-docker)!\n\n\n#### Custom Docker build\n\nBuilding your own Docker image is useful if you want to make code changes or add your own extensions.\n\n`Dockerfile.release` uses the [multistage build](https://docs.docker.com/develop/develop-images/multistage-build/) feature to just the image as small as possible. It generates the OTP release which is later copied into the final image packaged in an Alpine linux container.\n\nThere is a `justfile` with relevant commands (make sure set the `MIX_ENV=prod` env variable):\n\n- `just rel-build-locked` which builds the docker image of the latest release\n- `just rel-build` which builds the docker image, including local changes to any cloned extensions in `./extensions/` \n- `just rel-tag` adds the \"latest\" tag to your last build, so that it will be used when running\n\nOnce you've built and tagged your image, you may need to update the `image` name in `docker-compose.release.release.yml` to match (either your local image name if running on the same machine you used for the build, or a remote image on Docker Hub if you pushed it) and then follow the same steps as for option A1.\n\nFor production, we recommend to set up a CI workflow to automate this, for an example you can look at the one [we currently use](../github/workflows/release.yaml).\n\nFinally, try [running the app](#running-with-docker)!\n\n\n#### Running with Docker\n\n1. Before running the app for the first time, but after having [prepared the config](#preparing-the-config-in-env), you should run `just setup-prod` which will get the instance ready.\n\n2. The you can start the docker containers with docker-compose: `just rel-run`\n\nYou can run this at the prompt `bin/bonfire remote` to enter Elixir's iex environment. Once there in case migrations have not run automatically you can run `Bonfire.Common.Repo.migrate` to initialise your database.\n\n3. The backend should now be running at [http://localhost:4000/](http://localhost:4000/). [Yay, you're up and running!](#notes-on-running-the-app)\n\n4. If that worked, start the app as a daemon to it stays running in the background: `just rel-run-bg`\n\n> Alternatively, `just rel-run-bg db` if you want to run the backend + db but not the web proxy, or `just rel-run-bg db search` if you want to run the full-text search index.","title":"Docker containers - Hosting guide","ref":"deploy.html#docker-containers"},{"type":"extras","doc":"Running a custom build without Docker.\n\n1. Install dependencies. \n\n- Postgres (or Postgis) version 12 or newer\n- [just](https://github.com/casey/just#packages)\n- Elixir version 1.15+ with OTP 25+ (see the `.tool-versions` to double check the versions we're currently using). If your distribution only has an old version available, check [Elixir's install page](https://elixir-lang.org/install.html) or use a tool like [mise](https://github.com/jdx/mise) (run `mise install` in this directory) or asdf. **Note: Source versions of Elixir >=1.17 and <1.17.3 have bugs that can freeze compilation when using the Pathex library, which bonfire does,** so please use 1.16 or 1.17.3+ (or you can set `WITH_PATHEX=0` in env to disabled the use of that library).\n\n2. Clone this repository and change into the directory:\n\n```sh\ngit clone --depth 1 https://github.com/bonfire-networks/bonfire-app.git bonfire && cd bonfire\n```\n\n3. Specify what flavour you want to run in production:\n\nThe first thing to do is choose what flavour of Bonfire (eg. ember, social, community, or cooperation) you want to deploy, as each flavour uses different Docker images and set of configs. For example if you want to run the `social` flavour:\n\n- `export FLAVOUR=social MIX_ENV=prod WITH_DOCKER=no` \n\nYou may also want to put this in the appropriate place in your system so your choice of flavour is remembered for next time (eg. `~/.bashrc` or `~/.zshrc`)\n\n4. Run `just config` to initialise some default config and then edit the config in the `./.env` file (see [prepare the config](#preparing-the-config-in-env) for details about what to edit).\n \n5. Run `just setup-prod`\n\n6. Run `just rel-build` to create an elixir release. This will create an executable in your `_build/prod/rel/bonfire` directory. Note that you will need `just` to pass in the `.env` file to the executable, like so: `just cmd _build/prod/rel/bonfire/bin/bonfire  `. Alternatively, this file can be sourced by `source .env` instead. We will be using the `bin/bonfire` executable as called from `just` from here on. \n\n7. Running the release\n\n- Create a database, and a user, fill out the `.env` with your credentials and secrets\n\n- You will need to use `just` in order to pass the `.env` file to the executable. This can be accomplished by running `just cmd _build/prod/rel/bonfire/bin/bonfire  `. Just works from the root directory of the `justfile`, not your current directory.\n\n- If you’re using RDS or some other locked down DB, you may need to run `CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;` on your database with elevated privileges.\n\n- You may also need to enable the `postgis` extension manually by running `CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;` on your database with elevated privileges.\n\n- You can check if your instance is configured correctly and get to the iex console by running `bin/bonfire start`\n\n- The migrations should automatically run on first boot, but if you run into troubles the migration command is: `Bonfire.Common.Repo.migrate()` in the iex console. \n\n- To run the instance as a daemon, use `bin/bonfire start daemon`. [Yay, you're up and running!](#notes-on-running-the-app)\n\n8. Adding HTTPS\n\nThe common and convenient way for adding HTTPS is by using a reverse proxy like Nginx or Caddyserver (the latter of which is bundled as part of the docker compose setup).\n\nSome web servers (like Caddy or Traefik) can handle generating and setting up HTTPS certificates automatically, but if you need TLS/SSL certificates for nginx, you can look get some for free with [letsencrypt](https://letsencrypt.org/). The simplest way to obtain and install a certificate is to use [Certbot.](https://certbot.eff.org). Depending on your specific setup, certbot may be able to get a certificate and configure your web server automatically.\n\nThere is an example nginx configuration provided at `config/deploy/nginx.conf` and one for Caddy at `config/deploy/Caddyfile2-https`\n\n> NOTE: If you've built from source, you should point the web server root directory to be `_build/prod/rel/bonfire/lib/bonfire-[current-version]/priv/static`","title":"Bare-metal - Hosting guide","ref":"deploy.html#bare-metal"},{"type":"extras","doc":"This repo contains an experimental Flake and Nix module. These are not ready for production.\n\nHere are the detailed steps to deploy it:\n\n- run a recent version of Nix or NixOS: https://nixos.wiki\n- enable Flakes: https://nixos.wiki/wiki/Flakes#Installing_flakes\n- add `sandbox = false` in your nix.conf\n- fetch and build the app and dependencies: `nix run github:bonfire-networks/bonfire-app start_iex`\n- add it as an input to your system flake.\n- add an overlay to just the package available\n- add the required configuration in your system\n\nYour `flake.nix` file would look like the following. Remember to replace `myHostName` with your actual hostname or however your deployed system is called.\n\n```nix\n{\n  inputs.bonfire.url = \"github:bonfire-networks/bonfire-app/main\";\n  outputs = { self, nixpkgs, bonfire }: {\n    overlay = final: prev: with final;{\n      # a package named bonfire already exists on nixpkgs so we put it under a different name\n      elixirBonfire = bonfire.packages.x86_64-linux.default;\n    };\n    nixosConfigurations.myHostName = nixpkgs.lib.nixosSystem {\n      system = \"x86_64-linux\";\n      modules = [\n        {\n          environment.systemPackages = [ agenix.defaultPackage.x86_64-linux ];\n          nixpkgs.overlays = [ self.overlay ];\n        }\n        ./myHostName.nix\n        bonfire.nixosModules.bonfire\n      ];\n    };\n  };\n}\n```\n\nThen your `myHostName.nix` would look like the following:\n\n```nix\n{ config, lib, pkgs, ... }:\n\n{\n  services.bonfire = {\n    # you will additionally need to expose bonfire with a reverse proxy, for example caddy\n    port = 4000;\n    package = pkgs.elixirBonfire;\n    dbName = \"bonfire\";\n    # the environment should contain a minimum of\n    #   SECRET_KEY_BASE\n    #   SIGNING_SALT\n    #   ENCRYPTION_SALT\n    #   RELEASE_COOKIE\n    # have a look into nix/module.nix for more details\n    # the way to deploy secrets is beyond this readme, but I would recommend agenix\n    environmentFile = \"/run/secrets/bonfireEnv\";\n    dbSocketDir = \"/var/run/postgresql\";\n  };\n\t\n\t# this is specifically for a reverse proxy, which is primarily used for SSL certs\n\tservices.ngnix = {\n\t\tenable = true;\n\t\tforceSSL = true;\n\t\tenableACME = true;\n\t\tvirtualHosts.\"myHostName\".locations.proxyPass = \"http://localhost:4000\";\n\t};\n\t\n\t# You will need to accept ACME's terms and conditions if you haven't elsewhere in your configuration\n\tsecurity.acme.defaults.email = \"you@myHostName.com\";\n\tsecurity.acme.acceptTerms = true;\n\n  # this is uniquely for database backup purposes\n  # replace myBackupUserName with the user name that will do the backups\n  # if you want to do backups differently, feel free to remove this part of the config\n  services.postgresql = {\n    ensureDatabases = [ \"bonfire\" ];\n    ensureUsers = [{\n      name = \"myBackupUserName\";\n      ensurePermissions = { \"DATABASE bonfire\" = \"ALL PRIVILEGES\"; };\n    }];\n  };\n}\n```\n\n\n<!-- tabs-close -->\n\n\n## Preparing the config (in .env)","title":"Nix - Hosting guide","ref":"deploy.html#nix"},{"type":"extras","doc":"The app needs these environment variables to be configured in order to work.\n\n- `FLAVOUR` should reflect your chosen flavour\n- `HOSTNAME` (your domain name, eg: `bonfire.example.com`)\n- `PUBLIC_PORT` (usually 443)\n- `MAIL_DOMAIN` and `MAIL_KEY` and related keys to configure transactional email, for example set `MAIL_BACKEND=mailgun` and sign up at [Mailgun](https://www.mailgun.com/) and then configure the domain name and key (you may also need to set `MAIL_BASE_URI` if your domain is not setup in EU, as the default `MAIL_BASE_URI` is set as `https://api.eu.mailgun.net/v3`). \n- SMTP is supported as well, through the following env vars \n```\nMAIL_SERVER (smtp domain of the mail server)\nMAIL_DOMAIN (the bit after the @ in your email)\nMAIL_USER\nMAIL_PASSWORD\nMAIL_FROM\nMAIL_PORT (optional)\nMAIL_SSL (optional)\n```\n- `UPLOADS_S3_BUCKET` and the related API key and secret for uploads. WARNING: If you want to store uploads in an object storage rather than directly on your server (which you probably want, to not run out of space), you need to configure that up front, otherwise URLs will break if you change it later. See `config/runtime.exs` for extra variables to set if you're not using the default service and region (which is [Scaleway](https://www.scaleway.com/en/object-storage/) Paris).","title":"Config keys you should pay special attention to: - Hosting guide","ref":"deploy.html#config-keys-you-should-pay-special-attention-to"},{"type":"extras","doc":"You can run `just secrets` to generate some for you.\n\n- `SECRET_KEY_BASE`\n- `SIGNING_SALT`\n- `ENCRYPTION_SALT`\n- `POSTGRES_PASSWORD`\n- `MEILI_MASTER_KEY`","title":"Secret keys for which you should put random secrets. - Hosting guide","ref":"deploy.html#secret-keys-for-which-you-should-put-random-secrets"},{"type":"extras","doc":"In the `./config/` (which is a symbolic link to the config of the flavour you choose to run) directory of the codebase, there are following config files:\n\n- `config.exs`: default base configuration, which itself loads many other config files, such as one for each installed Bonfire extension.\n- `prod.exs`: default extra configuration for `MIX_ENV=prod`\n- `runtime.exs`: extra configuration which is loaded at runtime (vs the others which are only loaded once at compile time, i.e. when you build a release)\n- `bonfire_*.exs`: configs specific to different extensions, which are automatically imported by `config.exs`\n\nYou should *not* have to modify the files above. Instead, overload any settings from the above files using env variables or in `./.env`. If any settings in the `.exs` config files are not available in env or in the instance settings UI, please open an issue or PR.","title":"Further information on config - Hosting guide","ref":"deploy.html#further-information-on-config"},{"type":"extras","doc":"> NOTE: If you are running in a restricted environment such as Amazon RDS, you will need to execute some sql against the database before migrations can run: `CREATE EXTENSION IF NOT EXISTS citext;`\n\nBy default, the backend listens on port 4000 (TCP), so you can access it on http://localhost:4000/ (if you are on the same machine). In case of an error it will restart automatically.\n\nOnce you've signed up, you will automatically be an instance admin if you were the first to register.\n\n> You can also sign up via CLI (accessed via `just rel-shell`) by entering something like this in your app's Elixir console: `Bonfire.Me.make_account_only(\"my@email.net\", \"my pw\")`","title":"Notes on running the app - Hosting guide","ref":"deploy.html#notes-on-running-the-app"},{"type":"extras","doc":"- `just update` to update to the latest release of Bonfire \n- `just rel-run`                        Run the app in Docker, in the foreground\n- `just rel-run-bg`                     Run the app in Docker, and keep running in the background\n- `just rel-stop`                       Stop the running release\n- `just rel-shell`                      Runs a simple shell inside of the container, useful to explore the image \n\nOnce in the shell, you can run `bin/bonfire` with the following commands:\nUsage: `bonfire COMMAND [ARGS]`\n\nThe known commands are:\n- `start`          Starts the system\n- `start_iex`      Starts the system with IEx attached\n- `daemon`         Starts the system as a daemon\n- `daemon_iex`     Starts the system as a daemon with IEx attached\n- `eval \"EXPR\"`    Executes the given expression on a new, non-booted system\n- `rpc \"EXPR\"`     Executes the given expression remotely on the running system\n- `remote`         Connects to the running system via a IEx remote shell\n- `restart`        Restarts the running system via a remote command\n- `stop`           Stops the running system via a remote command\n- `pid`            Prints the operating system PID of the running system via a remote command\n- `version`        Prints the release name and version to be booted\n\nThere are some useful database-related release tasks under `EctoSparkles.Migrator.` that can be run in an `iex` console (which you get to with `just rel.shell` followed by `bin/bonfire remote`, assuming the app is already running):\n\n- `migrate` runs all up migrations\n- `rollback(step)` roll back to step X\n- `rollback_to(version)` roll back to a specific version\n- `rollback_all` rolls back all migrations back to zero (caution: this means losing all data)\n\nYou can also directly call some functions in the code from the command line, for example:\n- to migrate: `docker exec bonfire_web bin/bonfire rpc 'Bonfire.Common.Repo.migrate'`\n- to just yourself an admin: `docker exec bonfire_web bin/bonfire rpc 'Bonfire.Me.Users.make_admin(\"my_username\")'`","title":"Handy commands - Hosting guide","ref":"deploy.html#handy-commands"},{"type":"extras","doc":"- LiveDashboard for viewing real-time metrics and logs at `/admin/system/`\n- Oban logs for viewing queued jobs (e.g. for processing federated activities) `/admin/system/oban_queues`\n- LiveAdmin for browsing data in the database at `/admin/system/data`\n- Orion for dynamic distributed performance profiling at `/admin/system/orion`\n- Web Observer as an alternative way to view metrics at `/admin/system/wobserver`","title":"Admin tools - Hosting guide","ref":"deploy.html#admin-tools"},{"type":"extras","doc":"Some common issues that may arise during deployment and our suggestions for resolving them.\n\n#### WebSocket connections not establishing behind a reverse proxy\n\nIf you are running Bonfire behind your own reverse proxy (e.g. nginx), you might experience issues with WebSocket connections not establishing. WebSocket connections require specific configuration to work, in nginx the following configuration is necessary for websockets to work:\n\n```\nlocation /live/websocket {\n    proxy_pass http://127.0.0.1:4000;\n    \n    # these configurations are necessary to proxy WebSocket requests\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```","title":"Troubleshooting - Hosting guide","ref":"deploy.html#troubleshooting"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Bonfire Changelog\n\n## [0.3.5-beta (2022-09-23)]","title":"Bonfire Changelog","ref":"changelog.html"},{"type":"extras","doc":"- Coordination MVP [#445](https://github.com/bonfire-networks/bonfire-app/issues/445) by mayel & ivanminutillo\n- UI to enable/disable extensions in settings [#448](https://github.com/bonfire-networks/bonfire-app/issues/448) \n- Static page generator [#444](https://github.com/bonfire-networks/bonfire-app/issues/444) \n- Publish creation of sub-topic in the topic's feed [#439](https://github.com/bonfire-networks/bonfire-app/issues/439) by mayel","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- Refactor navs/sidebars to use dynamic navigation & widgets provided by extensions [#447](https://github.com/bonfire-networks/bonfire-app/issues/447)","title":"Changed - Bonfire Changelog","ref":"changelog.html#changed"},{"type":"extras","doc":"- When I reply to a task, the activity in the feed does not show the parent activity [#449](https://github.com/bonfire-networks/bonfire-app/issues/449) \n- Use same composer for create post / topic / create a new list / create task\n\n## [0.3.4-beta.8 (2022-08-26)]","title":"Other - Bonfire Changelog","ref":"changelog.html#other"},{"type":"extras","doc":"- Remember position in timeline [#392](https://github.com/bonfire-networks/bonfire-app/issues/392) by mayel\n- Should be able to click on a notification to see the related activity [#412](https://github.com/bonfire-networks/bonfire-app/issues/412) by mayel\n- Actions when someone clicks on follow/boost/like/reply buttons on a profile or feed while logged out [#441](https://github.com/bonfire-networks/bonfire-app/issues/441) \n- Combine duplicate posts [#396](https://github.com/bonfire-networks/bonfire-app/issues/396) by mayel","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- User preferences missing a consistent UX structure [#430](https://github.com/bonfire-networks/bonfire-app/issues/430) \n- Bug: pop-ups from compose box are hidden if close to edge [#394](https://github.com/bonfire-networks/bonfire-app/issues/394) \n- reset the CW field after posting [#378](https://github.com/bonfire-networks/bonfire-app/issues/378) \n- On mobile, there should be an obvious way to reply to a single post when viewing it by itself [#371](https://github.com/bonfire-networks/bonfire-app/issues/371) \n- Alerts and feedback messages need to adopt a solid pattern [#305](https://github.com/bonfire-networks/bonfire-app/issues/305)","title":"Changed - Bonfire Changelog","ref":"changelog.html#changed"},{"type":"extras","doc":"- i can't see what i'm typing past a certain amount of text. Like rivht now i dont' see what i'm typing. Might be some typos then^^ [#425](https://github.com/bonfire-networks/bonfire-app/issues/425) \n- Bug: When you switch user it *sometimes* stays on the switch user page [#377](https://github.com/bonfire-networks/bonfire-app/issues/377) by mayel","title":"Fixed - Bonfire Changelog","ref":"changelog.html#fixed"},{"type":"extras","doc":"- Make push notification system more solid [#180](https://github.com/bonfire-networks/bonfire-app/issues/180) \n- Test/fix/improve graceful degradation (usage without JS, or without a LiveView websocket, i.e. when logged out) [#365](https://github.com/bonfire-networks/bonfire-app/issues/365) by mayel\n- use @prop in Surface views/components instead of e(assigns, :prop, default) and declare defaults in props or mount/1 [#414](https://github.com/bonfire-networks/bonfire-app/issues/414) \n\n\n## [0.3.4-beta.6 (2022-08-19)]","title":"Other - Bonfire Changelog","ref":"changelog.html#other"},{"type":"extras","doc":"- 3 options for smart input (sidebar, modal, floating) and improve responsive (modal on small screens) [#443](https://github.com/bonfire-networks/bonfire-app/issues/443) \n- Improve feeds async loading [#437](https://github.com/bonfire-networks/bonfire-app/issues/437) by mayel\n- Improve media/link attachments [#440](https://github.com/bonfire-networks/bonfire-app/issues/440)","title":"Changed - Bonfire Changelog","ref":"changelog.html#changed"},{"type":"extras","doc":"- Show and count only local users in user directory [#438](https://github.com/bonfire-networks/bonfire-app/issues/438) by mayel\n\n## [0.3.4 (2022-08-09)]","title":"Fixed - Bonfire Changelog","ref":"changelog.html#fixed"},{"type":"extras","doc":"- Define & implement granular role & permission system for instance administration and moderation [#406](https://github.com/bonfire-networks/bonfire-app/issues/406) \n\n## [0.3.3 (2022-08-02)]","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- Define & implement granular role & permission system for instance administration and moderation [#406](https://github.com/bonfire-networks/bonfire-app/issues/406) \n\n## [0.3.2 (2022-07-30)]","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- Pagination topics list & feeds within topics [#431](https://github.com/bonfire-networks/bonfire-app/issues/431) \n- Check boundaries of a topic when tagging and if allowed auto-boost the tagged object in the topic's outbox [#428](https://github.com/bonfire-networks/bonfire-app/issues/428) \n- Show followed topics on a list [#424](https://github.com/bonfire-networks/bonfire-app/issues/424) \n- Topic settings [#423](https://github.com/bonfire-networks/bonfire-app/issues/423) \n- Topic activity preview [#422](https://github.com/bonfire-networks/bonfire-app/issues/422) \n- Browse topics [#421](https://github.com/bonfire-networks/bonfire-app/issues/421) \n- Tag something (eg. post/user) with a topic at any time (depending on boundaries) [#416](https://github.com/bonfire-networks/bonfire-app/issues/416) \n- Tag a post with a topic when writing a new post (or reply) [#415](https://github.com/bonfire-networks/bonfire-app/issues/415) \n- CRUD topics [#410](https://github.com/bonfire-networks/bonfire-app/issues/410) \n- Create a users directory [#159](https://github.com/bonfire-networks/bonfire-app/issues/159)","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- Optimise LiveView rendering [#426](https://github.com/bonfire-networks/bonfire-app/issues/426) \n- Allow us to scroll from anywhere [#391](https://github.com/bonfire-networks/bonfire-app/issues/391)","title":"Changed - Bonfire Changelog","ref":"changelog.html#changed"},{"type":"extras","doc":"- Add unique key to encircle [#248](https://github.com/bonfire-networks/bonfire-app/issues/248) \n- Database Question [#3](https://github.com/bonfire-networks/activity_pub/issues/3) \n- Being able to change activity type from the composer [#429](https://github.com/bonfire-networks/bonfire-app/issues/429) \n- use created and extra_info mixins on Category [#433](https://github.com/bonfire-networks/bonfire-app/issues/433) \n- check boundaries for edit and archive topic [#434](https://github.com/bonfire-networks/bonfire-app/issues/434)","title":"Other - Bonfire Changelog","ref":"changelog.html#other"},{"type":"extras","doc":"","title":"0.3.1-beta.9 (2022-07-22) - Bonfire Changelog","ref":"changelog.html#0-3-1-beta-9-2022-07-22"},{"type":"extras","doc":"- BUG:Responsive, navigation goes under the mobile bottom tab [#420](https://github.com/bonfire-networks/bonfire-app/issues/420) by ivanminutillo","title":"Fixed - Bonfire Changelog","ref":"changelog.html#fixed"},{"type":"extras","doc":"","title":"0.3.1-beta (2022-07-19) - Bonfire Changelog","ref":"changelog.html#0-3-1-beta-2022-07-19"},{"type":"extras","doc":"- Circles & flexible boundaries [#223](https://github.com/bonfire-networks/bonfire-app/issues/223) by mayel & ivanminutillo\n- Compose box at the bottom of the screen as an alternative to the standard microblogging input box [#419](https://github.com/bonfire-networks/bonfire-app/issues/419) \n- \"Compact layout\" in user preferences [#418](https://github.com/bonfire-networks/bonfire-app/issues/418) \n- Fetch metadata of links included in a post and show previews (of images, videos, etc) in feeds [#314](https://github.com/bonfire-networks/bonfire-app/issues/314)","title":"Added - Bonfire Changelog","ref":"changelog.html#added"},{"type":"extras","doc":"- Pasting images into the editor should upload them [#411](https://github.com/bonfire-networks/bonfire-app/issues/411) \n- Bug: When starting from the feed page, clicking back would exit the site [#400](https://github.com/bonfire-networks/bonfire-app/issues/400) \n- /write page was missing the boundary selector [#398](https://github.com/bonfire-networks/bonfire-app/issues/398) \n- Keep me logged in [#395](https://github.com/bonfire-networks/bonfire-app/issues/395) \n- Font size is too small in compose window [#388](https://github.com/bonfire-networks/bonfire-app/issues/388) \n- UI: moved topbar in the header to sidebar [#362](https://github.com/bonfire-networks/bonfire-app/issues/362) \n- Improved responsive UI for use on small screens","title":"Changed - Bonfire Changelog","ref":"changelog.html#changed"},{"type":"extras","doc":"- Bug: some notifications / live feed updates were making all other activities in the feed disappear [#383](https://github.com/bonfire-networks/bonfire-app/issues/383) by mayel\n- Bug: followed/followers pages remained empty despite having followed people [#373](https://github.com/bonfire-networks/bonfire-app/issues/373) by mayel\n- Bug: followed activity missing the person (in main feeds) [#372](https://github.com/bonfire-networks/bonfire-app/issues/372) by mayel\n- Bug: follow notification clears the home feed except for the \"new follow\" post [#366](https://github.com/bonfire-networks/bonfire-app/issues/366) by mayel\n- Bug: images attached to a post should appear in the feed [#364](https://github.com/bonfire-networks/bonfire-app/issues/364)","title":"Fixed - Bonfire Changelog","ref":"changelog.html#fixed"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Add a new widget\n\nWidgets are reusable components that encapsulate data and provide context-specific information to users based on the pages they are currently visiting. They are typically placed in the right sidebar ( refers to the [Design Guidelines](../topics/DESIGN.md) section to learn more about Bonfire user experience), and developers can define which widgets should appear on each page and in what order. \n\nDevelopers can include options for users to enable, disable, or rearrange the order of widgets when possible.\n\nA widget usually consists of a title and data formatted in various ways, such as links, data visualizations, actions, or information fetched from third-party apps. In this section, we will create a new widget that utilizes the user's location (if provided) and the [bonfire_geolocate](https://github.com/bonfire-networks/bonfire_geolocate) library to obtain the correct coordinates. These coordinates will then be used to retrieve the location's weather information using an external library. Additionally, we will create a setting that allows users to optionally include the widget on their profile.\n\nThis example is simple yet meaningful because it touches upon different parts of the Bonfire framework during the tutorial. The code for this widget is available [here](https://github.com/bonfire-networks/bonfire_geolocate/tree/main/lib/web/components/widgets).\n\n![weather widget](https://i.imgur.com/S6OaPGg.png)","title":"Add a new widget","ref":"add-a-new-widget.html"},{"type":"extras","doc":"The first step is to identify the most appropriate extension for this widget. In this case, we can include the widget in the `bonfire_geolocate` extension, which already handles all the necessary logic for dealing with geolocations.\n\nWidgets are typically included in `lib/web/components/widgets`. Bonfire uses Surface on the frontend, so we'll create two files:\n\n- `widget_forecast_live.ex`\n- `widget_forecast_live.sface`\n\nThis forecast widget is a stateless component, meaning it won't handle any internal state. Therefore, the `widget_forecast_live.ex` code will be quite basic:\n\n```elixir\ndefmodule Bonfire.Geolocate.WidgetForecastLive do\n  use Bonfire.UI.Common.Web, :stateless_component\n\n  prop location, :string, default: nil\nend\n\n```\n\nWe use `:stateless_component`, a [function](https://github.com/bonfire-networks/bonfire_ui_common/blob/main/lib/web.ex#L543) that wraps the `Surface.Component` and includes a list of [helpers](https://github.com/bonfire-networks/bonfire_ui_common/blob/main/lib/web.ex#L575) widely used across most components.\n\nSince we want to include the widget on the user profile, we can gather the location data from there, so we define the `location` prop.\n\nWidgets are wrapped in a [WidgetBlockLive](https://github.com/bonfire-networks/bonfire_ui_common/blob/main/lib/components/widgets/widget_block_live.ex) component that takes care of injecting a style and the basic prop as the title. The initial implementation of our `widget_forecast_live.sface` looks like this:\n\n```elixir\n \n  hello world\n \n\n```\n\nTo see our widget, we need to include it in a page. Widgets are included in our right sidebar and are defined within a prop called `sidebar_widgets`, which is a list that includes guest and user lists (respectively, the widgets to show when the user is visiting a page while not logged in or when the user is logged in).\n\nWe'll include our widget in the logged list, specifying it is in the secondary widget section. The final look of our `sidebar_widget` prop looks like this:\n\n```elixir\nsidebar_widgets = [\n  users: [\n    secondary: [\n      Bonfire.Geolocate.WidgetForecastLive, [location: \"Naples, Italy\"]\n    ]\n  ]\n]\n\n```\n\nWe'll include our widget in the user profile page, located in the [Bonfire.UI.Me](https://github.com/bonfire-networks/bonfire_ui_me) extension, a library that deals with all the views related to user profiles and settings.\n\nThe `Bonfire.UI.Me.ProfileLive` [mount function](https://github.com/bonfire-networks/bonfire_ui_me/blob/main/lib/views/profile/profile_live.ex#L34) looks like:\n\n```elixir\n  def mount(_params, _session, socket) do\n    {:ok,\n     socket\n     |> assign(LiveHandler.default_assigns(is_nil(current_user_id(assigns(socket)))))}\n  end\n\n```\n\nThe `default_assigns` function includes data needed for dealing with multiple kinds of interactions and permissions. It also fetches the user from the database and ensures all the data is loaded correctly. The location data is fetched in [profiles_live_handler.ex:95](https://github.com/bonfire-networks/bonfire_ui_me/blob/main/lib/live_handlers/profiles_live_handler.ex#L95), and the widget is included in [profiles_live_handler.ex:274](https://github.com/bonfire-networks/bonfire_ui_me/blob/main/lib/live_handlers/profiles_live_handler.ex#L274).","title":"Let’s code! - Add a new widget","ref":"add-a-new-widget.html#let-s-code"},{"type":"extras","doc":"To ensure the user can decide whether they want to include the widget when visiting any user page, we're creating a new setting that optionally shows the widget based on user input.\n\nIn `profiles_live_handler.ex:274`, the widget is preceded by `weather_widget_enabled`, a boolean that controls whether the widget should be displayed or not. It makes use of the `Settings.get` function. You can learn more about defining and returning settings in our [Add an Extension Settings](/building/add-an-extension-settings.md) section.\n\nWe're adding the settings in the [edit_profile_info_live.sface](https://github.com/bonfire-networks/bonfire_ui_me/blob/main/lib/components/settings/profile/edit_profile_info_live.sface#L99) component (we may later refactor this to add the setting in the defined extension, but this is still a work in progress):\n\n```elixir\n \n     \n   \n\n```\n\nAt this point, we should be able to see our basic weather widget on our profile page and decide to switch it on and off.\n\nWhat remains is to include the logic for returning and displaying the weather. We will use the Forecastr library, which is already used in our application and added in the [bonfire](https://github.com/bonfire-networks/bonfire) extension.\n\nThe Forecastr library makes use of the Pirate Weather service, so we need a Pirate Weather API KEY. You can generate one on [pirateweather.net](http://pirateweather.net/) and add it at the bottom of your `.env` file:\n\n```elixir\nPIRATE_WEATHER_API=***********************\n\n```\n\nThe final component code looks like:\n\n```elixir\n{#if e(@location, nil)}\n   \n    {#case Forecastr.forecast(:today, e(@location, nil),\n        units: :metric,\n        renderer: Forecastr.Renderer.JSON\n      )}\n      {#match {:ok,\n           %{\n             \"description\" => weather,\n             \"id\" => weather_id,\n             \"temp\" => temp,\n             \"name\" => weather_location\n           }}}\n         \n           \n           \n             {temp}° \n             {weather} \n           \n         \n      {#match _}\n    {/case}\n   \n{/if}\n\n```","title":"Adding Settings - Add a new widget","ref":"add-a-new-widget.html#adding-settings"},{"type":"extras","doc":"Although this weather widget is relatively basic, it significantly enhances the user experience by providing relevant metadata fetched from external services. This example demonstrates the potential for integrating additional information and functionality into widgets to create a more engaging and informative user interface.\nTo further improve this widget, developers can consider including more data points, such as:\n\n- Current moon position and phase\n- Daily amount of daylight hours\n- Sunrise and sunset times\n- Extended weather forecasts\n- Weather alerts and notifications\n\nBy incorporating these additional features, the widget can provide users with a more comprehensive overview of their location's weather and astronomical information, making it a valuable addition to their profile page.","title":"Next Steps - Add a new widget","ref":"add-a-new-widget.html#next-steps"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Bonfire Navigation Sidebar","title":"Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html"},{"type":"extras","doc":"The Bonfire framework includes the navigation on the left sidebar, which can include pages from various extensions. Different navigation menus can be defined based on the current page (e.g., Explore and Settings pages have distinct menus).","title":"Overview - Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html#overview"},{"type":"extras","doc":"1. Create new navigation menus\n2. Add pages to existing menus\n3. Override default navigation\n4. Use custom navigation components","title":"Key Concepts - Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html#key-concepts"},{"type":"extras","doc":"To create a new menu for your extension:\n\n1. Use the `declare_extension` macro in one of your extension views (typically the extension homepage).\n2. Configure your extension with options like name, icon, description, and navigation menu.\n\n```elixir\ndeclare_extension(\"Your Extension Name\",\n  icon: \"🎆\",\n  description: \"A short description to display in the extension settings\",\n  default_nav: [\n    ExtensionName.Path.YourPageLive,\n    ExtensionName.Path.AnotherPageLive,\n    # Add more pages as needed\n  ]\n)\n```\n\n3. For each page in `default_nav`, use the `declare_nav_link` macro to define link properties:\n\n```elixir\ndeclare_nav_link(l(\"Your Page\"),\n  page: \"your_page\",\n  href: \"/your_page\",\n  icon: \"ph:search\",\n  icon_active: \"ph:search-fill\"\n)\n```","title":"Creating a New Navigation Menu - Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html#creating-a-new-navigation-menu"},{"type":"extras","doc":"To use the default navigation menu instead of your extension's menu:\n\n1. In each view's `mount` function, set the `nav_items` property:\n\n```elixir\ndef mount(params, session, socket) do\n  {:ok,\n   socket\n   |> assign(\n      nav_items: Bonfire.Common.ExtensionModule.default_nav()\n    )\n  }\nend\n```","title":"Using the Default Navigation Menu - Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html#using-the-default-navigation-menu"},{"type":"extras","doc":"To override the default navigation for specific pages:\n\n1. Create a custom navigation menu component.\n2. Use the `declare_nav_component(\"sidebar description\")` macro on the custom menu.\n3. In each view's `mount` function, set the `nav_items` property:\n\n```elixir\ndef mount(params, session, socket) do\n  {:ok,\n   socket\n   |> assign(\n      nav_items: [ExtensionName.Path.YourPageLive.declared_nav()]\n    )\n  }\nend\n```","title":"Overriding Default Navigation with a Custom Menu - Bonfire Navigation Sidebar","ref":"add-a-page-to-the-sidebar.html#overriding-default-navigation-with-a-custom-menu"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Add a new extension settings\n\nBonfire extensions can define settings that will be available to the users of the extension. These settings can be used to configure the behavior of the extension.\n\nTODO","title":"Add a new extension settings","ref":"add-an-extension-settings.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Create a new extension\n    \nExtensions in Bonfire are powerful tools that allow you to extend the functionality and features of your application.\nThis guide is perfect for developers who are looking to contribute new features or capabilities to the Bonfire ecosystem.\nBy the end of this page, you should have a solid understanding of how to develop and integrate a new extension in Bonfire, leveraging its modular architecture.","title":"Create a new extension","ref":"create-a-new-extension.html"},{"type":"extras","doc":"1. To start building your own extension, you can utilise our custom mix generator task. Simply navigate to the Bonfire app root folder in your terminal and type:\n        \n```\njust mix bonfire.extension.new *your_extension_name*\n```\n\nThis command creates a new directory in `./extensions` named `*your_extension_name*`, complete with all the necessary files and scaffolding.\n\n2. Add your extension to `./config/current_flavour/deps.path` (on a new line, it should look similar to `your_extension_name = \"extensions/your_extension_name\"`) to enable it locally.\n\n3. Once your new extension is set up, you're ready to dive into coding. Consider these possible steps to enhance your extension:\n\n- Implement extension-specific fake functions for testing purposes.\n- Create extension-specific [database migrations](https://hexdocs.pm/ecto_sql/Ecto.Adapters.SQL.html#module-migrations).\n- Add any dependencies you need to deps.git and/or deps.hex.\n- If your extension includes new pages, you need to link them in the main router. \n\n> #### Info {: .info}\n> Bonfire's Phoenix router module is found in the `bonfire` extension. Refer to the [Routing](/docs/building/routing.md) page to learn how to add new routes.\n\n\n4. After coding your initial features, create an empty repository on your preferred Git platform. Then, commit and push your local changes to make your work accessible and open for collaboration:\n\n```\ngit add .\ngit commit -m \"light my fire\"\ngit branch -M main\ngit remote add origin [your-remote-repository-url]\ngit push -u origin main\n```\n\n5. When you're ready for other people upstream to use your extension, add it to `./config/deps.git` (including the branch name).\n\nAnd just like that, you've successfully created and prepared your first Bonfire extension and shared with the community 🔥","title":"Create your Bonfire extension - Create a new extension","ref":"create-a-new-extension.html#create-your-bonfire-extension"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Create a new page\n\nTODO","title":"Create a new page","ref":"create-a-new-page.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Make changes to an extension\n  \nThis tutorial guides you through the process of editing an existing Bonfire extension. We'll cover how to clone, enable, and contribute to an extension, ensuring you can test and implement your changes effectively.\nIdeal for developers looking to modify and enhance Bonfire's functionalities.\nBy the end, you'll be adept at including and working with extensions in the Bonfire development environment.\n\n      \nIn Bonfire, in order to edit an existing extension and test the changes you need to set up the extension in your development environment. The process is quite straightforward:","title":"Make changes to an extension","ref":"edit-an-existing-extension.html"},{"type":"extras","doc":"If you want to share your changes to the extension, you may want to first fork it on Github.\n\nUse `just dep-clone-local *[dep]* *[repo]*` to clone an extension from its Git repository. Replace  dep  with the extension name and  repo  with the full URL of your fork. The cloned extension will be cloned in `./extensions`:\n       \n```\njust dep-clone-local bonfire_social https://github.com/bonfire-networks/bonfire_social\n```","title":"Fork the extension - Make changes to an extension","ref":"edit-an-existing-extension.html#fork-the-extension"},{"type":"extras","doc":"After cloning, choose to use the local version by editing `./config/current_flavour/deps.path` (create the file if it doesn’t exist). \nThe format to follow is the following: `dep_name = \"dep_path\"`.\nTo disable a local extension, comment or delete its line in `./config/current_flavour/deps.path`.\nUse just dev to run the app with changes hot-reloading.\n\n```\n# ./config/current_flavour/deps.path\nbonfire_me = \"./extensions/bonfire_me\"\n# bonfire_boundaries = \"./extensions/bonfire_boundaries\" # disabled local copy\n```","title":"Enable the extension - Make changes to an extension","ref":"edit-an-existing-extension.html#enable-the-extension"},{"type":"extras","doc":"You can now make your edits to the `./extensions`, run the app with `just dev` and run tests with `just test-watch`.","title":"Make and test your changes - Make changes to an extension","ref":"edit-an-existing-extension.html#make-and-test-your-changes"},{"type":"extras","doc":"You can push your changes remotely, use Bonfire's helpers like `just contrib` if you need to commit files that belong to multiple extensions or `just update-dep *dep*` for a specific one (e.g.` just update-dep bonfire_me`).","title":"Push changes - Make changes to an extension","ref":"edit-an-existing-extension.html#push-changes"},{"type":"extras","doc":"You're now equipped to contribute to Bonfire extensions, enhancing the framework's capabilities. You can do so by opening a PR on Github from your forked extension. Your contributions are vital to the Bonfire community, and we encourage you to keep exploring and improving the project.","title":"Great works 🎉🎉🎉 - Make changes to an extension","ref":"edit-an-existing-extension.html#great-works"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# What is a Bonfire extension\n\nExtensions in Bonfire are collections of code that introduce new features and enhance the platform's functionality, or explore a different user experience for an existing feature.\n\nThey can range from adding entirely new pages, such as [bonfire_invite_links]() which lets admins create and share invites with usage limit and expiration date, to implementing specific components or widgets.\nAn example is [bonfire_editor_milkdown](), which integrates a markdown-first editor for publishing activities.\n\nExtensions are versatile, they can implement their own schema, database, logic, and components, or they can leverage existing fields, context functions, and UI components, or more commonly, a combination of both.","title":"What is a Bonfire extension","ref":"extensions-overview.html"},{"type":"extras","doc":"In order to make changes to extensions, you need to clone them locally. As you may imagine, we have a `just` command for that.\n\n```\njust dep-clone-local **[extension name]** **[extension url]**\n```\n\nThis command (eg. `just dep-clone-local bonfire_ui_social https://github.com/bonfire-app/bonfire_ui_social`) will create a local copy of the extension in `./extensions/bonfire_ui_social`.\n\nIf the extension is enabled locally, you will see an entry in `config/current_flavour/deps.path` with the path to the local extension: \n\n```\nbonfire_ui_social = \"extensions/bonfire_ui_social\"\n```\n\nIf you want to disable the extension, you can remove the entry from `config/current_flavour/deps.path`.\n\nWhen the extension is enabled, Bonfire will use the code in `extensions/` instead of the one in `deps/`.\n\nWe will dive more into the creation and the lifecycle of extensions in the next sections.","title":"Using extensions - What is a Bonfire extension","ref":"extensions-overview.html#using-extensions"},{"type":"extras","doc":"Given Bonfire modularity, you will likely find yourself combining functions from several extensions when using the framework.\nA significant portion of its codebase is included in extensions, each serving specific purposes.\nMoreover, extensions often utilise code from other extensions.\nFor instance, [bonfire_common](https://github.com/bonfire-networks/bonfire_common) and [bonfire_ui_common](https://github.com/bonfire-networks/bonfire_ui_common) provide a suite of helpers to ease a good amount of tasks.\n\nWhen using extensions functions, we need a way to ensure the app will not break if the extension is not enabled.\n\nBonfire provides a few built-in components that allows users to optionally inject components or functions from different extensions.\n\n`Bonfire.Common.Utils.maybe_apply`\n\n- Helpers for calling hypothetical functions in other modules. Returns the result of calling a function with the given arguments, or the result of fallback function if the primary function is not defined (by default just logging an error message).\n\n```elixir\nBonfire.Common.Utils.maybe_apply(Bonfire.Social.Graph, :maybe_applications, [],\n          fallback_return: []\n        )\n```\n\n`Bonfire.UI.Common.Modular.StatefulComponent`\n\n- A built-in component that allows users to optionally inject dynamic live components into a Surface template.\n  Based on `Surface.Components.Dynamic.LiveComponent` to which it adds the ability to check if a module is enabled and even to swap it out for another in settings.\n\n```elixir\n \n```\n\n`Bonfire.UI.Common.Modular.StatelessComponent`\n\n- A built-in component that allows users to optionally inject dynamic functional components into a Surface template.\n  Based on `Surface.Components.Dynamic.Component` to which it adds the ability to check if a module is enabled and even to swap it out for another in settings.\n\n```elixir\n \n```","title":"Extension helpers - What is a Bonfire extension","ref":"extensions-overview.html#extension-helpers"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Project structure\n\nTODO","title":"Project structure","ref":"project-structure.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Routing\n\nThe Bonfire routing system provides a modular and extensible way to define routes for different parts of your application. \nIt allows developers to include routes directly from their extensions based on their availability and configuration. \nThe routes are organized into pipelines and scopes to handle authentication and authorization requirements.\n\nThe Router module is declared in the [router.ex](https://github.com/bonfire-networks/bonfire/blob/main/lib/web/router.ex) file in the [bonfire](https://github.com/bonfire-networks/bonfire) extension.\n\nThe `Bonfire.Web.Router.Routes` module defines all the routes for active Bonfire extensions that will be included in the Bonfire app. It also includes routes for GraphQl and AcitvityPub specific endpoints.\n\n\nIn order to add a new route to Bonfire, you need to create a Routes module in your extension. It is usually named as `Project.ExtensionName.Web.Routes` eg. [Bonfire.UI.Social.Routes](https://github.com/bonfire-networks/bonfire_social/blob/main/lib/bonfire_social_web/routes.ex)\n\nThe Routes file follows the standard Phoenix/Liveview syntax and structure.","title":"Routing","ref":"routing.html"},{"type":"extras","doc":"To add a new routes to the Router, you need to add include it to the main Router. \n\n> #### Info {: .info}\n>\n> At the moment, you need a workaround to be able to enable the `bonfire` dependency locally: clone it in your `./extensions` folder and then add it to your` current_flavour/deps.path` file.\n\nOnce you have the `bonfire` dep enabled locally, include your new extension router with `use_if_enabled(Project.ExtensionName.Web.Routes)` in the [Bonfire.Web.Router.Routes](https://github.com/bonfire-networks/bonfire/blob/main/lib/web/router.ex) file.","title":"Add a new route - Routing","ref":"routing.html#add-a-new-route"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# What is a Bonfire flavour?","title":"What is a Bonfire flavour?","ref":"what-is-flavour.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Working with flavour\n\ntest","title":"Working with flavour","ref":"working-with-flavour.html"},{"type":"extras","doc":"GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc.  \n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n     \n    Copyright (C)     \n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see  .\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n .","title":"AGPL-3.0-only","ref":"agpl-3-0-only.html"},{"type":"extras","doc":"Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.","title":"CC0-1.0","ref":"cc0-1-0.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Bonfire Architecture","title":"Bonfire Architecture","ref":"architecture.html"},{"type":"extras","doc":"Bonfire is an unusual piece of software, developed in an unusual way. It originally started as a project to create a generic federation library/framework, while building an app for educators to share and collaborate on learning resources with their peers, and has been forked and evolved a lot since then. \n\nHacking on it is actually pretty fun. The codebase has a unique feeling to work with and we've relentlessly refactored to manage the ever-growing complexity that a distributed social networking toolkit implies. That said, it is not easy to understand without context, which is what this document is here to provide.","title":"Hacking - Bonfire Architecture","ref":"architecture.html#hacking"},{"type":"extras","doc":"Feature goals:\n\n- Flexibility for developers and users.\n- Extreme configurability and extensibility.\n- Integrated federation with the existing fediverse.\n\nOperational goals:\n\n- Easy to set up and run.\n- Light on resources for small deployments.\n- Scalable for large deployments.","title":"Design Decisions - Bonfire Architecture","ref":"architecture.html#design-decisions"},{"type":"extras","doc":"Our main implementation language is [Elixir](https://www.elixir-lang.org/), which is designed for building reliable systems. We have almost [our own dialect](./BONFIRE-FLAVOURED-ELIXIR.md).\n\nWe use the [Phoenix](https://www.phoenixframework.org/) web framework with [LiveView](https://hexdocs.pm/phoenix_live_view/) and [Surface](https://surface-ui.org/documentation) for UI components and views.\n\nSurface is a different syntax for LiveView that is designed to be more convenient and understandable to frontend developers, with extra compile time checks. Surface views and components are compiled into LiveView code (so once you hit runtime, Surface in effect doesn't exist any more).\n\nSome extensions use the [Absinthe](https://absinthe-graphql.org/) GraphQL library to expose an API.","title":"Stack - Bonfire Architecture","ref":"architecture.html#stack"},{"type":"extras","doc":"We like to think of bonfire as a comfortable way of developing software - there are a lot of conveniences built in once you know how they all work. The gotcha is that while you don't know them, it can be a bit overwhelming. Don't worry, we've got your back.","title":"The Bonfire Environment - Bonfire Architecture","ref":"architecture.html#the-bonfire-environment"},{"type":"extras","doc":"The code is broadly composed namespaces such as these, many of which are packaged as \"extensions\" which live in separate git repositories, which are included in the app by way of mix dependencies:\n\n- `Bonfire.*` - Core application logic (very little code).\n- `Bonfire.*.*` - Bonfire extensions (eg `Bonfire.Posts`) containing mostly context modules, APIs, and routes\n- `Bonfire.Data.*` - Extensions containing database schemas and migrations \n- `Bonfire.UI.*` - UI component extensions\n- `Bonfire.*.*.LiveHandler` - Backend logic to handle events in the frontend\n- `Bonfire.Editor.*` (pluggable text editors, eg. CKEditor for WYSIWYG markdown input)\n- `Bonfire.GraphQL.*` - Optional GraphQL API\n- `Bonfire.Federate.*` - Optional Federation hooks\n- `ActivityPub` - ActivityPub S2S models, logic and various helper modules \n- `ActivityPub.Web` - ActivityPub S2S REST endpoints, activity ingestion and push federation facilities \n- `ValueFlows.*` - economic extensions implementing the [ValueFlows vocabulary](https://www.valueflo.ws)\n\n\nContexts are were we put any core logic. A context often is circumscribed to providing logic for a particular object type (e. g. `Bonfire.Posts` implements `Bonfire.Data.Social.Post`). \n\nAll Bonfire objects use an ULID as their primary key. We use the `Needle` library (with extra logic in `Bonfire.Common.Needles`) to reference any object by its primary key without knowing what type it is beforehand. This is very useful as it allows for example following or liking many different types of objects (as opposed to say only a user or a post) and this approach allows us to store the context of the like/follow by only storing its primary key (see `Bonfire.Data.Social.Follow`) for an example.\n\nContext modules usually have `one/2`, `many/2`, and `many_paginated/1` functions for fetching objects, which in turn call a `query/2` function. These take a keyword list as filters (and an optional `opts` argument) allowing objects to be fetched by arbitrary criteria.\n\nExamples:\n\n```\nUsers.one(username: \"bob\") # Fetching by username\nPosts.many_paginated(by: \"01E9TQP93S8XFSV2ZATX1FQ528\") # List a page of posts by its author\nEconomicResources.many(deleted: true) # List any deleted resources\n```\n\nContext modules also have functions for creating, updating and deleting objects, as well as hooks for federating or indexing in the search engine.\n\nHere is an incomplete sample of some of current extensions and modules:\n\n- `Bonfire.Me.Accounts` (for managing and querying local user accounts)\n- `Bonfire.Me.Users` (for managing and querying both local and remote user identities and profiles)\n- `Bonfire.Boundaries` (for managing and querying circles, ACLs, permissions...)\n- `Bonfire.Social.FeedActivities`, `Bonfire.Social.Feeds` and `Bonfire.Social.Activities` (for managing and querying activities and feeds)\n- `Bonfire.Posts` and `Bonfire.Social.PostContents` (for managing and querying posts)\n- `Bonfire.Social.Threads` (for managing and querying threads and comments)\n- `Bonfire.Social.Flags` (for managing and querying flags)\n- `Bonfire.Social.Graph.Follows` (for managing and querying follows)\n- `Bonfire.Classify` (for managing and querying categories, topics, and the like)\n- `Bonfire.Tag` (for managing and querying tags and mentions)\n- `Bonfire.Geolocate` (for managing and querying locations and geographical coordinates)\n- `Bonfire.Quantify` (for managing and querying units and measures)\n\n#### Additional extensions, libraries, and modules\n\n- `Bonfire.Common` and `Bonfire.Common.Utils` (stuff that gets used everywhere)\n- `Bonfire.Application` (OTP application)\n- `Bonfire.Me.Characters` (a shared abstraction over users, organisations, categories, and other objects that need to have feeds and behave as an actor in ActivityPub land)\n- `Bonfire.Federate.ActivityPub` and `ActivityPub` (ActivityPub integration)\n- `Bonfire.Search` (local search indexing and search API, powered by Meili)\n- `Bonfire.Mailer`, `Bonfire.Me.Mails`, and `Bamboo` (for rendering and sending emails)\n- `Bonfire.Files`, `Waffle`, `TreeMagic` and `TwinkleStar` (for managing uploaded content)\n- `Bonfire.GraphQL` (GraphQL API abstractions)\n- `Queery` and `Bonfire.Repo.Query` (Helpers for making queries on the database)\n- `Bonfire.Repo` (Ecto repository)\n- `Exto` (to extend DB schemas in config, especially useful for adding associations)\n- `AbsintheClient` (for querying the API from within the server)","title":"Code Structure - Bonfire Architecture","ref":"architecture.html#code-structure"},{"type":"extras","doc":"- Bonfire app\n  - A [flavour](../README.md#flavours) running `Bonfire.Application` as supervisor\n    - Configs assembled from extensions at `flavour/$FLAVOUR/config`\n    - Phoenix at `Bonfire.Web.Endpoint`\n      - Routes assembled from extensions at `Bonfire.Web.Router` \n    - GraphQL schema assembled from extensions at `Bonfire.GraphQL.Schema`\n    - Database migrations assembled from extensions at `flavour/$FLAVOUR/repo/migrations`\n    - Data seeds assembled from extensions at `flavour/$FLAVOUR/repo/seeds`\n    - Extensions and libraries as listed in `flavour/$FLAVOUR/config/deps.*`\n      - Extensions defining schemas and migrations (usually `Bonfire.Data.*`)\n        - Schemas\n        - Migrations defined as functions in the schema modules in `lib/`\n        - Migration templates calling those functions in `priv/repo/migrations` which are then copied into an app flavour's migrations\n      - Extensions implementing features or groups of features (eg. `Bonfire.Me`)\n        - Config template which is then copied into an app flavour's config (eg `config/bonfire_me.exs`)\n        - Contexts (eg `Bonfire.Me.Users`)\n          - Sometimes LiveHandlers for handling frontend events in the backend (eg `Bonfire.Me.Users.LiveHandler`)\n        - Routes (eg `Bonfire.UI.Me.Routes`)\n          - Controllers and/or Views (eg `Bonfire.UI.Me.CreateUserController` and `Bonfire.UI.Me.CreateUserLive`)\n        - API (eg `Bonfire.Me.API.GraphQL`), refer to [GraphQL API documentation](./GRAPHQL.md)\n          - Schemas\n          - Resolvers\n        - Sometimes Plugs (eg `Bonfire.Web.Plugs.UserRequired` and `Bonfire.Web.LivePlugs.UserRequired`)\n      - Other extensions or libraries (eg `Needle` or `Bonfire.Common` which are used by most other extensions)","title":"General structure - Bonfire Architecture","ref":"architecture.html#general-structure"},{"type":"extras","doc":"It is said that naming is one of the four hard problems of computer science (along with cache management and off-by-one errors). We don't claim our scheme is the best, but we do strive for consistency.","title":"Naming - Bonfire Architecture","ref":"architecture.html#naming"},{"type":"extras","doc":"- Module names mostly begin with `Bonfire.` unless they belong to a more generic library (eg `Needle` or `ValueFlows`)\n- Everything within an extension begins with the context name and a `.` (eg `Bonfire.Social.Migrations`)\n- Database schemas should be named in the singular (eg `Bonfire.Data.Social.Post`)\n- Context modules are named in plural where possible (eg `Bonfire.Posts`)\n- Other modules within a context begins with the context name and a `.` (eg `Bonfire.Posts.LiveHandler`)\n- Modules use UpperCamelCase while functions use snake_case\n- Acronyms in module names should be all uppercase (eg `Bonfire.Social.APActivities`)","title":"Naming guidelines - Bonfire Architecture","ref":"architecture.html#naming-guidelines"},{"type":"extras","doc":"### `ActivityPub`\n\nThis namespace handles the ActivityPub logic and stores AP activities. It is largely adapted Pleroma code with some modifications, for example merging of the activity and object tables and new actor object abstraction.\n\n- `ActivityPub` contains the main API and is documented there. \n- `ActivityPub.Federator.Adapter` defines callback functions for the AP library.\n\nIt also contains some functionality that isn't part of the AP spec but is required for federation:\n- `ActivityPub.Safety.Keys` - Generating and handling RSA keys and signatures \n- `ActivityPub.Federator.WebFinger` - Implementation of the WebFinger protocol\n- `ActivityPub.Federator.HTTP` - Module for making HTTP requests (wrapper around tesla)\n- `ActivityPub.Instances` - Module for storing reachability information about remote instances\n\nAlso refer to [MRF documentation](./MRF.md) to learn how to rewrite or discard messages.\n\n### `ActivityPub.Web`\n\nThis namespace contains the ActivityPub Server-to-Server REST API, the activity ingestion pipeline (`ActivityPub.Federator.Transformer`) and the push federation facilities (`ActivityPub.Federator`, `ActivityPub.Federator.APPublisher` and others). The outgoing federation module is designed in a modular way allowing federating through different protocols in the future.","title":"Federation libraries - Bonfire Architecture","ref":"architecture.html#federation-libraries"},{"type":"extras","doc":"The callback functions defined in `ActivityPub.Federator.Adapter` are implemented in `Bonfire.Federate.ActivityPub.Adapter`. \n\nWhen implementing federation for a new object type it needs to be implemented for both directions: \nfor outgoing federation using the hooks in `Bonfire.Federate.ActivityPub.Outgoing` and for incoming federation using the hooks in `Bonfire.Federate.ActivityPub.Incoming`.","title":"ActivityPub integration with Bonfire's application logic - Bonfire Architecture","ref":"architecture.html#activitypub-integration-with-bonfire-s-application-logic"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Bonfire-flavoured Elixir\n\nBonfire has a few libraries that are widely used in the codebase and make writing Elixir feel a little bit different. To help you get less confused by this, here's a guide on what we can call \"bonfire-flavoured elixir\"!\n\nPlease note this guide assumes you already know [Elixir](https://elixir-lang.org/getting-started/introduction.html).\n\n## `Arrows`\n\nThe Elixir [|> (\"pipe\") operator](https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2) is one of the things that seems to get people excited about elixir. Probably in part because you then don't have to keep coming up with function names. Unfortunately it's kind of limiting. \nThe moment you need to pipe a parameter into a position that isn't the first one, it breaks down and you have to drop out of the pipeline format or write a secondary function to handle it.\n\nNot any more! By simply inserting `...` where you would like the value to be inserted, `Arrows` will override where it is placed. This allows you to keep on piping while accommodating that function with the annoying argument order. `Arrows` was inspired by [an existing library](https://hexdocs.pm/magritte/Magritte.html). Here is part of the test suite in lieu of examples:\n\n```elixir\ndefmodule ArrowsTest do\n  use ExUnit.Case\n  use Arrows\n\n  def double(x), do: x * 2\n  def double_fst(x, _), do: x * 2\n  def double_snd(_, x), do: x * 2\n  def add_snd_thd(_, x, y), do: x + y\n\n  test \"|>\" do\n    assert 4 == (2 |> double)\n    assert 4 == (2 |> double())\n    assert 4 == (2 |> double(...))\n    assert 8 == (2 |> double(double(...)))\n    assert 4 == (2 |> double_fst(1))\n    assert 4 == (2 |> double_fst(..., 1))\n    assert 8 == (2 |> double_fst(double(...), 1))\n    assert 4 == (2 |> double_snd(1, ...))\n    assert 8 == (2 |> double_snd(1, double(...)))\n    assert 3 == (2 |> add_snd_thd(1, ..., 1))\n    assert 4 == (2 |> add_snd_thd(1, ..., ...))\n    assert 6 == (2 |> add_snd_thd(1, ..., double(...)))\n    for x <- [:yes, 2, nil, false] do\n      assert {:ok, x} == (x |> {:ok, ...})\n    end\n  end\nend\n```\n\nA few little extra features you might notice here:\n* You can move the parameter into a subexpression, as in `2 |> double_fst(double(...), 1)` where double will be called before the parameter is passed to `double_fst`.\n* You can use `...` multiple times, substituting it in multiple places.\n* The right hand side need not even be a function call, you can use any expression with `...`.","title":"Bonfire-flavoured Elixir","ref":"bonfire-flavoured-elixir.html"},{"type":"extras","doc":"`Arrows` also provides an `ok-pipe` operator, `~>`, which only pipes into the next function if the result from the last one was considered a success. It's inspired by [OK](https://hexdocs.pm/ok/readme.html), but we have chosen to do things slightly differently so it better fits with our regular pipe.\n\ninput                    | result          |\n:----------------------- | :-------------- |\n`{:ok, x}`               | `fun.(x)`       |\n`{:error, e}`            | `{:error, e}`   |\n`nil`                    | `nil`           |\n`x when not is_nil(x)`   | `fun.(x)`       |\n\nIn the case of a function returning an ok/error tuple being on the left hand side, this is straightforward to determine. In the event of `{:ok, x}`, x will be passed into the right hand side to call. In the event of `{:error, x}`, the result will be `{:error, x}`.\n\nWe also deal with a lot of functions that indicate failure by returning nil. `~>` tries to 'do what I mean' for both of these so you can have one pipe operator to rule them all. If `nil` is a valid result, you must thus be sure to wrap it in an `ok` tuple when it occurs on the left hand side of `~>`.\n\n`|>` and `~>` compose in the way you'd expect; i.e. a `~>` receiving an error tuple or nil will stop executing the rest of the chain of (mixed) pipes.","title":"Ok-pipe - Bonfire-flavoured Elixir","ref":"bonfire-flavoured-elixir.html#ok-pipe"},{"type":"extras","doc":"`Untangle` provides replacements for the macros in Elixir's `Logger` module and the `IO.inspect` function to output code location information. The first argument will be `inspect`ed and the second (where provided) will be used as a label:\n\n```\niex(1)> import Untangle\nUntangle\niex(2)> debug(:no, \"the answer is\") # log at debug\n11:19:09.915 [debug] [iex:2] the answer is: :no\n:no\niex(3)> dump(%{a: :map}, \"it\") # inspect something on stdout\n[iex:3] it: %{a: :map}\n%{a: :map}\n```\n\nWhen used in a code file, the location information becomes slightly more useful, e.g.:\n\n```\n[lib/test_untangle.ex:15@Test.Untangle.example/2] Here's an empty list: []\n```\n\nYou may also notice from the iex output that it returns its first argument. This makes it ideal for\ninserting into a pipeline for debugging purposes:\n\n```elixir\ndo_something()\n|> debug(\"output of do_something/0\")\n```\n\nWhen you are done debugging something, the location of the debug statement is already in the output so you know where to remove it or comment it out! Bliss!\n\nYou will find the codebase uses this a lot, though the debugs are frequently commented out. Just uncomment the ones that would help you with a particular debugging task and you're off.","title":"Untangle - Bonfire-flavoured Elixir","ref":"bonfire-flavoured-elixir.html#untangle"},{"type":"extras","doc":"`Bonfire.Fail` is an `Exception` handler, which you can use to stop the show anywhere in the code, e.g:\n\n`id = uid(object) || raise(Bonfire.Fail, :not_found)` \n\nYou can use this special exception when you want to redirect the user to the login page rather than just show an error:\n`user = current_user(assigns) || raise(Bonfire.Fail.Auth, :needs_login)` \n\nAdvantages include:\n\n- standardised error messages (defaults are defined at https://github.com/bonfire-networks/bonfire_fail/blob/main/lib/runtime_config.ex#L16) which can be overridden in your app's config using `config :bonfire_fail, :common_errors`\n- friendly error messages are defined in one place, which means no duplicated localisation efforts\n- uses the elixir/OTP pattern of \"let it crash\"\n- returns the correct HTTP code when applicable\n- no need to wrap blocks in if/else or the like \n- for users of the LiveView frontend, this will make the corresponding friendly error message appear in a flash overlay (if using `Bonfire.UI.Common.LiveHandlers` and/or `Bonfire.UI.Common.undead/3`)","title":"Error handling - Bonfire-flavoured Elixir","ref":"bonfire-flavoured-elixir.html#error-handling"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Design Guidelines\n\nTODO","title":"Design Guidelines","ref":"design.html"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# Just commands\n\nWelcome to this guide on navigating the world of Bonfire development, is crafted especially for people taking their first steps in Bonfire or looking to refine their workflow.","title":"Just commands","ref":"just.html"},{"type":"extras","doc":"As you dive into developing your own extension or app with the Bonfire framework, you'll quickly encounter an array of dependencies and extensions to deal with. An extension that uses a function or a component from a different extension is not an exception, but rather a common pattern.\n\nThis setup means you might likely soon find yourself contributing to multiple extensions simultaneously. Navigating this landscape can be intimidating at first, but Bonfire provides tools to streamline the process.\n\nThey help you effortlessly synchronize the latest updates across different extensions or efficiently push your updates to all relevant repositories. Understanding these facilities is key to a smooth and productive development experience in the Bonfire ecosystem.\n      \nMost of these tools are driven by [just](https://github.com/casey/just#just) and their code can be seen in the [justfile](https://github.com/bonfire-networks/bonfire-app/blob/main/justfile) (which is quite similar to a `Makefile`). Below is a small selection of the most used commands.\n      \n      \n        \n`just`\n- Print a list of all possible `just` commands a short explanation for each. \n\n`just update`\n- Update the app and all extensions/forks, and run migrations. Use this command to ensure you're in sync with the most recent changes across your development environment. \n\n`just update-app`\n- This command updates the app along with Bonfire extensions located in `./deps`. It's ideal for updating the app while excluding the extensions currently under development located in `./extensions`.\n\n`just dep-clone *[dep]* *[repo]*`\n- Clone a git dependency and use the local version, eg: `just dep-clone-local bonfire_me https://github.com/bonfire-networks/bonfire_me`. Active extensions need to be added in `./config/deps.path` (see [the tutorial on how to fork an extension](/courses/how_to_fork_extension/)). To switch between local and remote dependencies, simply comment or uncomment the corresponding lines in this file.\n\n`just contrib`\n- Push all changes to the app and extensions in `./forks` and `./extensions`.\n\n`just contrib-release`\n- Push all changes to the app and extensions in `./forks`, increment the app version number, and push a new version/release\n\n`just test`\n- Run tests of all extensions, or only specific tests, eg: `just test extensions/bonfire_social` or `just test extensions/bonfire_social/test/social/boosts_test.exs`\n\n`just test-watch *[path]*`\n- Run stale tests, and wait for changes to any module code, and re-run affected tests. \n\n`just test-federation-in-extensions *[path]*`\n- Test federation integration in your extension.","title":"General Setup Related Commands - Just commands","ref":"just.html#general-setup-related-commands"},{"type":"extras","doc":"<!--\nSPDX-FileCopyrightText: 2025 Bonfire Networks  \n\nSPDX-License-Identifier: AGPL-3.0-only\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# LiveView optimizations\n\nFollowing are some tips to optimize LiveView performance.","title":"LiveView optimizations","ref":"liveview-optimizations.html"},{"type":"extras","doc":"1. Use assigns or components intead of function calls: function calls returns a string to the server and cannot be parsed to check what changed and what not\n2. Use CSS state/aria/data selector instead of functions or inline conditionals:\n  - ``` increment ```  in this case the server will receive all the css classes that returns with the my_class fn. So instead of using the function and inject dynamic code directly in the template, we can use data/aria/state selector (that will remain the only dynamic part ) and add code on the css file (which is passed only 1time on mount) like: ```button class=\"btn\" disabled={@disabled}>increment ``` and on the css file : `.btn {...} .btn[disabled] {...}`  or can use tailwind variants such ` ` <- this trick can save a lot especially since we're using tailwind!\n \n  - instead of: \n      ```\n       .... ` and in the css `.toast {...} .toast[data-kind=\"warning\"] {...} .toast[data-kind=\"error\"]{...}` or can use tailwind custom variants such ` ` or using tailwind `group` operator to style several elements based on a variable set in a single parent","title":"Minimize dynamic parts - LiveView optimizations","ref":"liveview-optimizations.html#minimize-dynamic-parts"},{"type":"extras","doc":"> For stateless components, if there's any change in an attr, it needs to be re-rendered, meaning while the static parts don't need to be resent, the dynamic parts will _even if they haven't changed_. \n\n1. Define separate assigns for computed/derived data: do not calculate computed information inline in the component, but rather create a new assign and calculate the assign separately and set in the socket assign\n- also make sure we don't re-load data unecessarily, eg. `Bonfire.Boundaries.LiveHandler.my_acls/1`\n   \n3. Avoid passing more info to stateless components (especially ones likely to change often, e.g in nav, activity preview or composer) than they actually use. This is usually fine for smaller scenarios, but when the component updates several time or lives in a for loop can become messy. example: \n     ` ` -> ` `","title":"Minimize re-rendering - LiveView optimizations","ref":"liveview-optimizations.html#minimize-re-rendering"},{"type":"extras","doc":"1. Limit the number of messages that update assigns\n2. Batch the assigns' updates (eg. for incoming pubsub messages). See also https://www.youtube.com/watch?v=bodV9Tk_kpQ for tips to optimise pubsub.\n- check `:erlang.statistics(:run_queue)` to see if VM schedulers are too busy when messages start to piled up, this can happen even when CPU’s utilization (and load average) stays consistently low.","title":"Minimize server/client communication (<-- this seems also crucial for bonfire) - LiveView optimizations","ref":"liveview-optimizations.html#minimize-server-client-communication-this-seems-also-crucial-for-bonfire"},{"type":"extras","doc":"# Bonfire.API.GraphQL","title":"Bonfire.API.GraphQL","ref":"Bonfire.API.Graphql.html"},{"type":"extras","doc":"Go to http://your-instance-url/api/ to start playing with the GraphQL API. The GraphiQL UI should autocomplete types, queries and mutations for you, and you can also explore the schema there.\n\nLet's start with a simple GraphQL thoeretical query:\n\n```graphql\nquery {\n  greetings(limit: 10) {\n    greeting\n    to {\n      name\n    }\n  }\n}\n```\n\nLet's break this apart:\n\n- `query {}` is how you retrieve information from GraphQL.\n- `greetings` is a `field` within the query.\n- `greetings` takes a `limit` argument, a positive integer.\n- `greetings` has two fields, `greeting` and `to`.\n- `to` has one `field`, `name`.\n\nThis query is asking for a list of (up to) 10 greetings and the people\nthey are for. Notice that the result of both `greetings` and `to` are\nmap/object structures with their own fields and that if the type has\nmultiple fields, we can select more than one field.\n\nHere is some possible data we could get returned\n\n```elixir\n%{greetings: [\n    %{greeting: \"hello\", to: %{ name: \"dear reader\"}}, # english\n    %{greeting: \"hallo\", to: %{ name: \"beste lezer\"}}, # dutch\n  ]}\n```\n\nWhere is the magic? Typically an object type will reside in its own\ntable in the database, so this query is actually querying two tables\nin one go. In fact, given a supporting schema, you can nest queries\narbitrarily and the backend will figure out how to run them.\n\nThe fact that you can represent arbitrarily complex queries puts quite\na lot of pressure on the backend to make it all efficient. This is\nstill a work in progress at this time.","title":"GraphQL Introduction - Bonfire.API.GraphQL","ref":"Bonfire.API.Graphql.html#graphql-introduction"},{"type":"extras","doc":"Every `field` is filled by a resolver. Let's take our existing query\nand define a schema for it in Absinthe's query DSL:\n\n```elixir\ndefmodule MyApp.Schema do\n  # the schema macro language\n  use Absinthe.Schema.Notation\n  # where we will actually resolve the fields\n  alias MyApp.Resolver\n\n  # Our user object is pretty simple, just a name\n  object :user do\n    field :name, non_null(:string)\n  end\n\n  # This one is slightly more complicated, we have that nested `to`\n  object :greeting do\n    # the easy one\n    field :greeting, non_null(:string)\n    # the hard one. `edge` is the term for when we cross an object boundary.\n    field :to, non_null(:user), do: resolve(&Resolver.to_edge/3)\n  end\n\n  # something to put our top level queries in, because they're just fields too!\n  object :queries do\n    field :greetings, non_null(list_of(non_null(:string))) do\n      arg :limit, :integer # optional\n      resolve &Resolver.greetings/2 # we need to manually process this one\n    end\n  end\n\nend\n```\n\nThere are a couple of interesting things about this:\n\n- Sprinklings of `not_null` to require that values be present (if you\n  don't return them, absinthe will get upset).\n- Only two fields have explicit resolvers. Anything else will default\n  to a map key lookup (which is more often than not what you want).\n- `greeting.to_edge` has a `/3` resolver and `queries.greetings` a\n  `/2` resolver.\n\nTo understand the last one (and partially the middle one), we must\nunderstand how resolution works and what a parent is. The best way of\ndoing that is probably to look at the resolver code:\n\n```elixir\ndefmodule MyApp.Resolver do\n\n  # For purposes of this, we will just fake the data out\n  defp greetings_data() do\n    [ %{greeting: \"hello\", to: %{ name: \"dear reader\"}}, # english\n      %{greeting: \"hallo\", to: %{ name: \"beste lezer\"}}, # dutch\n    ]\n  end\n\n  # the /2 resolver takes only arguments (which in this case is just limit)\n  # and an info (which we'll explain later)\n  def greetings(%{limit: limit}, _info) when is_integer(limit) and limit > 0 do\n    {:ok, Enum.take(greetings_data(), limit)} # absinthe expects an ok/error tuple\n  end\n  def greetings(_args, _info), do: {:ok, greetings_data()} # no limit\n\n  # the /3 resolver takes an additional parent argument in first position.\n  # `parent` here will be the `greeting` we are resolving `to` for.\n  def to_edge(parent, args, info), do: Map.get(parent, :to)\n\nend\n```\n\nThe keen-eyed amongst you may have noticed I said the default resolver\nis a map lookup and our `to_edge/3` is a map lookup too, so\ntechnically we didn't need to write it. But then you wouldn't have an\nexample of a `/3` resolver! In most of the app, these will be querying\nfrom the database, not looking up in a constant.\n\nSo for every field, a resolver function is run. It defaults to a map\nlookup, but you can override it with `resolve/1`. It may or may not\nhave arguments. And all absinthe resolvers return an ok/error tuple.","title":"Absinthe Introduction - Bonfire.API.GraphQL","ref":"Bonfire.API.Graphql.html#absinthe-introduction"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program. If not, see  .","title":"Copyright and License - Bonfire.API.GraphQL","ref":"Bonfire.API.Graphql.html#copyright-and-license"},{"type":"extras","doc":"# Email Delivery in Bonfire\n\nEmail delivery is a crucial component of many web applications, including your Bonfire instance. It's used for various purposes such as:\n\n- Sending signup confirmation emails\n- Delivering password reset links\n- Notifying users of new messages or activities\n- Sending alerts to administrators or moderators\n\nTo set up email delivery for your Bonfire instance, you'll need to choose an email delivery method and configure it properly. This guide will help you through that process.","title":"Email Delivery in Bonfire","ref":"Bonfire.Mailer.html"},{"type":"extras","doc":"1. **Choose Email Delivery Method and/or Provider**: You may choose to sign up with one of the email service providers listed in this guide. Each provider has its own pricing, features, and delivery rates.\n\n2. **Domain Configuration**: To ensure reliable email delivery and avoid spam filters, you should configure your [email-related DNS settings](https://www.cloudflare.com/en-gb/learning/email-security/dmarc-dkim-spf/) for your instance's domain name. This typically involves setting up:\n   - MX (Mail Exchanger) records\n   - SPF (Sender Policy Framework) records\n   - DKIM (DomainKeys Identified Mail) records\n   - DMARC (Domain-based Message Authentication, Reporting, and Conformance) records\n\nYour chosen email provider should provide instructions on how to set these up for your domain.\n\n3. **Environment Variables**: Bonfire uses environment variables for configuration. You'll need to set these variables in your deployment environment or in a `.env` file if you're running Bonfire locally or using Co-op Cloud.\n\nFor all email delivery methods, you'll need to set the following environment variables:\n\n- `MAIL_BACKEND` environment variable to choose your email delivery method or provider. \n- `MAIL_DOMAIN` or `HOSTNAME`: Your domain name\n- `MAIL_FROM`: The email address from which emails will be sent (this should match the domain name you set up with SPF/DKIM/DMARC, which will usually be your instance's domain)","title":"Before You Begin - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#before-you-begin"},{"type":"extras","doc":"","title":"Choosing an Email Delivery Method - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#choosing-an-email-delivery-method"},{"type":"extras","doc":"If no specific email configuration is set, Bonfire will attempt to deliver emails directly to the recipients' SMTP servers. Here's what you need to know about this default behaviour:\n\n- **What it means**: Your server will try to connect directly to the recipient's email server (e.g. a provider such as Gmail or an organisation's own mail server) to deliver the email.\n\n- **Pros**: It requires no additional configuration and can work for basic setups.\n\n- **Cons**: This method is often unreliable and prone to several issues:\n  1. **Spam Filters**: Emails sent this way are more likely to be marked as spam or rejected entirely.\n  2. **Deliverability**: Many recipient servers may flat-out reject IP addresses not properly set up for email sending.\n  3. **DNS Configuration**: Without proper DNS records (SPF, DKIM, DMARK, etc.), your emails are more likely to be treated as suspicious.\n  4. **IP Reputation**: If your server's IP address isn't established as a legitimate email sender, deliverability will suffer.\n\n- **Important**: While this default method can work for testing or in very small-scale scenarios, it is strongly recommended to configure a proper email delivery service for any production use of Bonfire. If you want to try this method anyway, make sure to configure [SPF, DKIM, DMARK, etc.](https://www.cloudflare.com/en-gb/learning/email-security/dmarc-dkim-spf/) for your instance domain name and IP address.","title":"1. Default Behaviour: Direct SMTP Delivery - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#1-default-behaviour-direct-smtp-delivery"},{"type":"extras","doc":"These providers offer comprehensive email delivery services, usually featuring analytics, bounce handling, high deliverability rates, etc.\n\n> Note: the information about free tiers and pricing are only meant to serve as a rough indication of the options available and may be outdated or inaccurate (we'd welcome PRs with any updates of course). Please check with each provider's website for more details.\n\n\n#### Brevo (formerly Sendinblue)\n- Website: [brevo.com](https://www.brevo.com/)\n- Free Tier: 300 emails per day, then $15+/month or pay-as-you-go ($59 per 10,000 emails)  \n```\nMAIL_BACKEND=brevo\nMAIL_KEY=your_brevo_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailjet\n- Website: [mailjet.com](https://www.mailjet.com/)\n- Free Tier: 200 emails per day, then $17+/month\n```\nMAIL_BACKEND=mailjet\nMAIL_KEY=your_mailjet_api_key\nMAIL_PRIVATE_KEY=your_mailjet_secret_key\nMAIL_FROM=email@instance.domain\n```\n\n#### SMTP2GO\n- Website: [smtp2go.com](https://www.smtp2go.com/)\n- Free Tier: 200 emails per day (up to 1,000 emails per month), then $10+/month\n```\nMAIL_BACKEND=SMTP2GO\nMAIL_KEY=your_smtp2go_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailtrap \n- Website: [mailtrap.io](https://mailtrap.io/)\n- Free Tier: 200 emails per day (up to 1,000 emails per month), then $15+/month\n```\nMAIL_BACKEND=mailtrap\nMAIL_KEY=your_mailtrap_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mailgun\n- Website: [www.mailgun.com](https://www.mailgun.com/)\n- Free Tier: 100 emails per day, then $15+/month\n```\nMAIL_BACKEND=mailgun\nMAIL_KEY=your_mailgun_api_key\nMAIL_BASE_URI=https://api.eu.mailgun.net/v3\nMAIL_FROM=email@instance.domain\n```\nNote: The `MAIL_BASE_URI` depends on your Mailgun registration region. The default is set to EU, adjust if necessary.\n\n#### Twilio SendGrid \n- Website: [sendgrid.com](https://sendgrid.com/)\n- Free Tier: 100 emails per day, then $20+/month\n```\nMAIL_BACKEND=sendgrid\nMAIL_KEY=your_sendgrid_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Postmark\n- Website: [postmarkapp.com](https://postmarkapp.com/)\n- Free Tier: 100 emails per month, then $15+/month\n```\nMAIL_BACKEND=postmark\nMAIL_KEY=your_postmark_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Zoho ZeptoMail\n- Website: [zoho.com](https://www.zoho.com/zeptomail/)\n- First 10,000 emails are free, then €2,50 per 10,000 emails\n```\nMAIL_BACKEND=zepto\nMAIL_KEY=your_zeptomail_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Scaleway\n- Website: [scaleway.com](https://www.scaleway.com/en/transactional-email-tem/)\n- No free tier, pay-as-you-go pricing (€2.50 per 10,000 emails)\n```\nMAIL_BACKEND=scaleway\nMAIL_KEY=your_scaleway_api_key\nMAIL_PROJECT_ID=your_scaleway_project_id\nMAIL_PRIVATE_KEY=your_scaleway_secret_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Gmail\n- Website: [gmail.com](https://developers.google.com/gmail/api)\n- Free Tier: 500 emails per day\n```\nMAIL_BACKEND=gmail\nMAIL_KEY=your_gmail_api_key \nMAIL_FROM=email@instance.domain\n# ^ OAuth2 access token with `gmail.compose` scope\n```\nNote: Using Gmail for sending application email is generally not recommended for production use.\n\n#### MailPace\n- Website: [mailpace.com](https://mailpace.com/)\n- No free tier, starts at £2.50 per month for up to 1,000 emails\n```\nMAIL_BACKEND=mailpace\nMAIL_KEY=your_mailpace_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Mandrill (Mailchimp Transactional)\n- Website: [mailchimp.com](https://mailchimp.com/features/transactional-email/)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=mandrill\nMAIL_KEY=your_mandrill_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Bird / SparkPost\n- Website: [bird.com](https://bird.com/api/email)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=sparkpost\nMAIL_KEY=your_sparkpost_api_key\nMAIL_BASE_URI=https://api.eu.sparkpost.com\nMAIL_FROM=email@instance.domain\n```\nNote: The `MAIL_BASE_URI` depends on your SparkPost registration region. The default is set to EU, adjust if necessary.\n\n#### Sendcloud (China)\n- Website: [sendcloud.net](https://www.sendcloud.net/)\n- Free Tier: 10 emails per day\n```\nMAIL_BACKEND=sendcloud\nMAIL_KEY=your_sendcloud_api_key\nMAIL_USER=your_sendcloud_api_user\nMAIL_FROM=email@instance.domain\n```\n\n#### SocketLabs\n- Website: [socketlabs.com](https://www.socketlabs.com/)\n- No free tier\n```\nMAIL_BACKEND=socketlabs\nMAIL_KEY=your_socketlabs_api_key\nMAIL_SERVER=your_socketlabs_server_id\nMAIL_PRIVATE_KEY=your_socketlabs_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Campaign Monitor\n- Website: [campaignmonitor.com](https://www.campaignmonitor.com/)\n- No free tier, pay-as-you-go pricing\n```\nMAIL_BACKEND=campaign_monitor\nMAIL_KEY=your_campaign_monitor_api_key\nMAIL_FROM=email@instance.domain\n```\n\n#### Amazon AWS SES\n- Website: [aws.amazon.com](https://aws.amazon.com/ses/)\n- Free Tier: 3,000 message / month (only for the first 12 months, and extra AWS charges may still apply)\n\nAmazon SES can be configured in two ways:\n\n1. Using existing AWS credentials (if already configured for S3 file storage, you can simplify configuration and use the same AWS credentials for both file storage and email delivery):\n```\nMAIL_BACKEND=aws\nMAIL_FROM=email@instance.domain\n```\nNote: This method will automatically use the credentials set by `UPLOADS_S3_ACCESS_KEY_ID` and `UPLOADS_S3_SECRET_ACCESS_KEY`. No additional configuration is needed if these are already set up for a Bonfire extension (such as `Bonfire.Files`) which uses S3 file storage.\n\n2. Using dedicated credentials, if you don't use AWS for S3 file storage or you want to use different AWS accounts for file storage and email delivery:\n```\nMAIL_BACKEND=aws\nMAIL_KEY=your_aws_access_key_id\nMAIL_PRIVATE_KEY=your_aws_secret_access_key\nMAIL_REGION=your_aws_region\nMAIL_FROM=email@instance.domain\n```\n\nNote: \n- If not specified, `MAIL_REGION` defaults to \"eu-west-1\".","title":"2. Managed Email Service Providers - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#2-managed-email-service-providers"},{"type":"extras","doc":"These methods involve sending emails directly or through your own mail server. They require more setup and maintenance but offer more control.\n\n#### Default: Direct SMTP Delivery\n- When no specific email configuration is set, Bonfire will attempt to deliver emails directly to the recipients' SMTP servers.\n- No additional configuration is needed as this is the default behaviour, but it's not recommended for production use due to deliverability issues ([see above](#module-default-behaviour-direct-smtp-delivery)).\n\n#### SMTP\nSMTP (Simple Mail Transfer Protocol) is the standard method for sending emails across the internet. It's like the postal service for digital messages, ensuring your emails reach their destination regardless of the systems involved. While many opt for using a dedicated email delivery provider (see above), if you already run your own email server or use a provider that's not listed above which provides you with SMTP credentials, you can configure Bonfire to use that:\n\n```\nMAIL_BACKEND=smtp\nMAIL_SERVER=your_smtp_server\nMAIL_PORT=587\nMAIL_USER=your_smtp_username\nMAIL_PASSWORD=your_smtp_password\nMAIL_FROM=email@instance.domain\n```\n\nNotes: \n- `MAIL_PORT` defaults to 587 if not specified.\n\n#### Sendmail\n- Built into many Unix-like operating systems\n```\nMAIL_BACKEND=sendmail\nMAIL_SERVER=/path/to/sendmail\n# MAIL_ARGS=\nMAIL_QMAIL=true_or_false\nMAIL_FROM=email@instance.domain\n```\n\nNotes: \n- `MAIL_SERVER` defaults to `/usr/bin/sendmail` if not specified.\n- `MAIL_ARGS` defaults to `-N delay,failure,success` if not specified.\n- While sendmail can send mail directly (similar to the default behaviour), it can be set up to hand off emails to a local or remote SMTP server for delivery.\n- Using sendmail usually provides more control and logging capabilities compared to the default direct SMTP delivery.\n\n#### Postal\n- Self-hosted email delivery platform\n- Website: [postalserver.io](https://docs.postalserver.io)\n```\nMAIL_BACKEND=postal\nMAIL_KEY=your_postal_api_key\nMAIL_BASE_URI=https://your_postal_server_api.uri/\nMAIL_FROM=email@instance.domain\n```","title":"3. Direct Email Sending Methods - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#3-direct-email-sending-methods"},{"type":"extras","doc":"Copyright (c) 2024 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Email Delivery in Bonfire","ref":"Bonfire.Mailer.html#copyright-and-license"},{"type":"extras","doc":"# Boundaries for Access Control\n\nBonfire's boundaries framework provides a flexible way to control user access to specific actions and data. It ensures that users can only see and do what they're authorized to.\n\nYou can create custom groups of contacts (circles) and grant them specific permissions to interact with you and your content. They can help you take control of your online presence and ensure that your data is shared only with the people you want.\n\n> Boundaries are limits that you set for yourself or others to define what you're comfortable with.\n> These limits can be physical, like curtains or doors; digital, like sharing settings on social media; in writing, like codes of conduct; emotional, like feeling comfortable to take time for self-care; or mental, like choosing what you pay attention to. In Bonfire, boundaries can help limit the type of interactions that others may have with you or things you post.\n> Boundaries are important because they help you protect yourself, maintain your autonomy, and communicate your needs and expectations clearly.","title":"Boundaries for Access Control","ref":"Bonfire.Boundaries.html"},{"type":"extras","doc":"| Term                                                  | Definition                                                                                           |\n| ----------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| **Subject** or **User**                               | An individual who interacts with the system.                                                         |\n| **[Circle](Bonfire.Boundaries.Circles.html)**         | A categorization method for users, allowing users to group other users (e.g., colleagues, friends).  |\n| **[Verb](Bonfire.Boundaries.Verbs.html)**             | An action that a user can perform (e.g., read, reply).                                               |\n| **Permission**                                        | A value indicating whether an action is allowed (`true`), denied (`false`), or `nil`.                |\n| **[Grant](Bonfire.Boundaries.Grants.html)**           | Links a user or circle with a verb and permission.                                                   |\n| **[ACL](Bonfire.Boundaries.Acls.html)**               | Access Control List, a collection of grants. Also called \"boundary\" or \"boundary preset\" in the app. |\n| **[Controlled](Bonfire.Boundaries.Controlleds.html)** | Links an object to one or more ACLs, to determine access based on the grants.                        |\n| **[Role](Bonfire.Boundaries.Roles.html)**             | A group of verbs linked to a permission.                                                             |","title":"Glossary - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#glossary"},{"type":"extras","doc":"Circles are a way of categorizing users. Each user can have their own set of circles to categorize other users. Circles allow a user to group work colleagues differently from friends for example, and to allow different interactions for users in each circle or limit content visibility on a per-item basis.","title":"Users and Circles - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#users-and-circles"},{"type":"extras","doc":"Verbs represent actions users can perform, such as reading a post or replying to a message. Each verb has a unique ID and are defined in configuration.","title":"Verbs - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#verbs"},{"type":"extras","doc":"A permission is a decision about whether the action may be performed or not. There are 3 possible values:\n\n- `true`: yes, the action is allowed\n- `false`: no, the action is explicitly denied (i.e. never permit)\n- `null`/`nil`: unknown, the action isn't explicitly allowed (defaults to not allowed)","title":"Permissions - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#permissions"},{"type":"extras","doc":"A `Grant` links a `subject` (user or circle) with a `Verb` and a permission. It defines the access rights for a specific user or circle in relation to a particular action.","title":"Grants - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#grants"},{"type":"extras","doc":"An `Acl` is a list of `Grant`s used to define access permissions for objects.\n\nBecause a user could be in more than one circle and each circle may have a different permission, when a user attempts an action on an object, the system combines all relevant grants to determine the final permission. This combination prioritizes permissions as follows: `false > true > nil`, resulting in:\n\n| input   | input   | result  |\n| :------ | :------ | :------ |\n| `nil`   | `nil`   | `nil`   |\n| `nil`   | `true`  | `true`  |\n| `nil`   | `false` | `false` |\n| `true`  | `nil`   | `true`  |\n| `true`  | `true`  | `true`  |\n| `true`  | `false` | `false` |\n| `false` | `nil`   | `false` |\n| `false` | `true`  | `false` |\n| `false` | `false` | `false` |\n\nIn simpler terms, a final permission is granted only if the combined result is `true`. Think of it as requiring an explicit \"yes\" for permission, while \"no\" always takes precedence. Notably, `nil` acts as a sort of \"weak no,\" it can be overridden by a `true` but not granting access on its own. This approach provides flexibility for implementing features like user blocking (`false` is crucial here).\n\nFor efficiency, `nil` is the assumed default and not stored in the database.","title":"ACLs - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#acls"},{"type":"extras","doc":"The `Controlled` [multimixin](./DATABASE.md#multimixins) link an object to one or more ACLs. This allows for applying multiple boundaries to the same object. In case of overlapping permissions, the system combines them following the logic described above.","title":"Controlled - Applying boundaries to an object - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#controlled-applying-boundaries-to-an-object"},{"type":"extras","doc":"Roles are groups of verbs associated with permissions. While not stored in the database, they are defined at the configuration level to enhance readability and user experience.","title":"Roles - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#roles"},{"type":"extras","doc":"Let's illustrate how boundaries work with a real-world example: planning a surprise party without the birthday girl finding out.","title":"Practical example: Surprise birthday party - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#practical-example-surprise-birthday-party"},{"type":"extras","doc":"```elixir\niex> import Bonfire.Me.Fake\niex> organizer = fake_user!()\niex> birthday_girl = fake_user!()\niex> friends = [fake_user!(), fake_user!()]\niex> family = [fake_user!(), fake_user!()]\n```","title":"1. Setting up users - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#1-setting-up-users"},{"type":"extras","doc":"Organize users into relevant circles (friends and family).\n\n```elixir\niex> alias Bonfire.Boundaries.Circles\niex> {:ok, friends_circle} = Circles.create(organizer, %{named: %{name: \"friends\"}})\niex> Circles.add_to_circles(friends, friends_circle)\niex> Circles.is_encircled_by?(List.first(friends), friends_circle)\ntrue\niex> {:ok, family_circle} = Circles.create(organizer, %{named: %{name: \"family\"}})\niex> Circles.add_to_circles(family, family_circle)\n```","title":"2. Define your Circles - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#2-define-your-circles"},{"type":"extras","doc":"This boundary will control access to the surprise party plans.\n\n```elixir\niex> alias Bonfire.Boundaries.Acls\niex> {:ok, boundary} = Acls.simple_create(organizer, \"Surprise party\")\n```","title":"3. Create the ACL (boundary preset) - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#3-create-the-acl-boundary-preset"},{"type":"extras","doc":"Allow friends to discover, read, and respond to party plans, while family members can also edit details and send invitations.\n\n```elixir\niex> alias Bonfire.Boundaries.Grants\niex> Grants.grant(friends_circle.id, boundary.id, [:see, :read, :reply], true, current_user: organizer)\niex> Grants.grant(family_circle.id, boundary.id, [:see, :read, :reply, :edit, :invite], true, current_user: organizer)\n```\n\nPrevent the birthday person from accessing any party information.\n\n```elixir\niex> Grants.grant(birthday_girl.id, boundary.id, [:see, :read], false, current_user: organizer)\n```","title":"4. Grant permissions - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#4-grant-permissions"},{"type":"extras","doc":"```elixir\niex> alias Bonfire.Posts\niex> {:ok, party_plan} = Posts.publish(\n        current_user: organizer,\n        boundary: boundary.id,\n        post_attrs: %{post_content: %{name: \"Surprise party!\"}})\n```","title":"5. Post about the party - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#5-post-about-the-party"},{"type":"extras","doc":"```elixir\niex> Boundaries.can?(List.first(friends).id, :read, party_plan.id)\ntrue\niex> Boundaries.can?(List.first(family).id, :invite, party_plan.id)\ntrue\niex> Boundaries.can?(birthday_girl.id, :see, party_plan.id)\nfalse\niex> Boundaries.load_pointer(party_plan.id, current_user: birthday_girl)\nnil\n```\n\nBy following these steps, the organizer can effectively manage access to ensure the birthday girl cannot see the party plans, while friends and family can.","title":"6. Double-check applied boundaries - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#6-double-check-applied-boundaries"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Boundaries for Access Control","ref":"Bonfire.Boundaries.html#copyright-and-license"},{"type":"extras","doc":"# Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto\n\n> One foreign key to rule them all and in the darkness, bind them. - Gandalf, paraphrased.\n\n[![hex.pm](https://img.shields.io/hexpm/v/needle)](https://hex.pm/packages/needle)\n[hexdocs](https://hexdocs.pm/needle)","title":"Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html"},{"type":"extras","doc":"Bonfire uses the excellent PostgreSQL database for most data storage. PostgreSQL allows us to make a wide range of queries and to make them relatively fast while upholding data integrity guarantees.\n\nPostgres is a relational schema-led database - it expects you to pre-define tables and the fields in each table (represented in tabular form, i.e. as a collection of tables with each table consisting of a set of rows and columns). Fields can contain data or a reference to a row in another table. \n\nThis usually means that a field containing a reference has to be pre-defined with a foreign key pointing to a specific field (typically a primary key, like an ID column) *in a specific table*. \n\nA simple example would be a blogging app, which might have a `post` table with `author` field that references the `user` table.\n\nA social network, by contrast, is actually a graph of objects. Objects need to be able to refer to other objects by their ID without knowing their type. \n\nA simple example would be likes, you might have a `likes` table with `liked_post_id` field that references the `post` table. But you don't just have posts that can be liked, but also videos, images, polls, etc, each with their own table, but probably do not want to have to add `liked_video_id`, `liked_image_id`, etc?\n\nWe needed the flexibility to have a foreign key that can reference any referenceable object. We call our system `Needle`.\n\nThis guide is a brief introduction to Needle. It assumes some foundational knowledge:\n\n* Basic understanding of how relational databases like Postgresql work, in particular:\n  * Tables being made up of fields.\n  * What a primary key is and why it's useful.\n  * Foreign keys and relationships between tables (1 to 1, 1 to Many, Many to 1, Many to Many).\n  * Views as virtual tables backed by a SQL query.\n\n* Basic understanding of Elixir (enough to follow the examples).\n* Basic working knowledge of the [Ecto](https://hexdocs.pm/ecto/Ecto.html) database library (schema and migration definitions)","title":"Intro - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#intro"},{"type":"extras","doc":"A means of foreign keying many tables in one field. Designed for highly interlinked data in highly dynamic schemata where tracking all the foreign keys is neither desired nor practical.\n\n> A universal foreign key is actually a hard problem. Many approaches are on offer with a variety of tradeoffs. If plugging into Bonfire's Needle-based core extensions isn't a requirement for you (i.e. you don't need to put things into feeds or use boundaries for access-control) should carefully consider a variety of approaches rather than just blindly adopting the one that fitted our project's needs the best!","title":"What is Needle? - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#what-is-needle"},{"type":"extras","doc":"All referenceable objects in the system have a unique ID (primary key) whose type is the `Needle.UID`. `UUIDv7` and [ULIDs](https://github.com/ulid/spec) are a lot like standard `UUID` in that you can generate unique ones independently of the database. It's also a little different, being made up of two parts:\n\n* The current timestamp, to millisecond precision.\n* Strong random padding for uniqueness.\n\nThis means that it naturally sorts by time to the millisecond (close enough for us), giving us a performance advantage compared to queries ordered by a separate creation datetime field (by contrast, UUIDv4 is randomly distributed).\n\nIf you've only worked with integer primary keys before, you are probably used to letting the database dispense an ID for you. With `ULID` (or `UUID`), IDs can be known *before* they are stored, greatly easing the process of storing a graph of data and allowing us to do more of the preparation work outside of a transaction for increased performance.\n\nIn PostgreSQL, we actually store `UUIDv7` and `ULID`s as `UUID` columns, thanks to both being the same size (and the lack of specific column types shipping with postgresql). You mostly will not notice this because it's handled for you, but there are a few places it can come up:\n\n* Ecto debug and error output may show either binary values or UUID-formatted values.\n* Hand-written SQL may need to convert table IDs to the `UUID` format before use.","title":"Identifying objects - the UID type - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#identifying-objects-the-uid-type"},{"type":"extras","doc":"The `Needle` system is mostly based around a single table represented by the `Needle.Pointer` schema with the following fields:\n\n* `id` (UID) - the database-wide unique id for the object, primary key.\n* `table_id` (UID) - identifies the type of the object, references `Needle.Table`.\n* `deleted_at` (timestamp, default: `null`) - when the object was deleted.\n\nEvery object that is stored in the system will have a record in this table. It may also have records in other tables (handy for storing more than 3 fields about the object!).\n\nA `Table` is a record of a table that may be linked to by a pointer. A `Pointer` is a pointer ID and a table ID.\nWith these two ingredients, we can construct a means of pointing to any table that has a `Table` entry.\n\nBut don't worry about `Needle.Table` for now, just know that every object type will have a record there so `Needle.Pointer.table_id` can reference it.","title":"It's just a table - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#it-s-just-a-table"},{"type":"extras","doc":"Aside from adding the dependency, you will also need to write add a migration to set up the database before you can start writing your regular migrations:\n\n```elixir\ndefmodule MyApp.Repo.Migrations.InitPointers do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def up(), do: inits(:up)\n  def down(), do: inits(:down)\n\n  defp inits(dir) do\n    init_pointers_ulid_extra(dir) # this one is optional but recommended\n    init_pointers(dir) # this one is not optional\n  end\nend\n```\n\n> Note: Pointers is already a default dependency of most Bonfire extensions, so you shouldn't need to add the migration if building a new extension.","title":"Installation - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#installation"},{"type":"extras","doc":"","title":"Declaring Object Types - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#declaring-object-types"},{"type":"extras","doc":"The first step to declaring a new type is picking a unique table ID in UID format. \n\nYou could just generate a random UID, but since these IDs are special, we tend to assign a synthetic UID that are readable as words so they stand out in debug output.\n\nFor example, the ID for the `Feed` table is: `1TFEEDS0NTHES0V1S0FM0RTA1S`, which can be read as \"It feeds on the souls of mortals\". Feel free to have a little fun coming up with them, it makes debug output a little more cheery! The rules are:\n\n* The alphabet is [Crockford's Base32](https://en.wikipedia.org/wiki/Base32#Crockford's_Base32).\n* They must be 26 characters in length.\n* The first character must be a digit in the range 0-7.\n\nTo help you with this, the `Needle.UID.synthesise!/1` method takes an alphanumeric binary and tries to return you it transliterated into a valid UID. Example usage:\n\n```\niex(1)> Needle.UID.synthesise!(\"itfeedsonthesouls\")\n\n11:20:28.299 [error] Too short, need 9 chars.\n:ok\niex(2)> Needle.UID.synthesise!(\"itfeedsonthesoulsofmortalsandothers\")\n\n11:20:31.819 [warn]  Too long, chopping off last 9 chars\n\"1TFEEDS0NTHES0V1S0FM0RTA1S\"\niex(3)> Needle.UID.synthesise!(\"itfeedsonthesoulsofmortals\")\n\"1TFEEDS0NTHES0V1S0FM0RTA1S\"\niex(4)> Needle.UID.synthesise!(\"gtfeedsonthesoulsofmortals\")\n\n11:21:03.268 [warn]  First character must be a digit in the range 0-7, replacing with 7\n\"7TFEEDS0NTHES0V1S0FM0RTA1S\"\n```","title":"Picking a table id - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#picking-a-table-id"},{"type":"extras","doc":"`Needle.Virtual` is the simplest and most common type of object. Here's a definition of block:\n\n```elixir\ndefmodule Bonfire.Data.Social.Block do\n\n  use Needle.Virtual,\n    otp_app: :bonfire_data_social,\n    table_id: \"310CK1NGSTVFFAV01DSSEE1NG1\",\n    source: \"bonfire_data_social_block\"\n\n  alias Bonfire.Data.Edges.Edge\n\n  virtual_schema do\n    has_one :edge, Edge, foreign_key: :id\n  end\nend\n```\n\nIt should look quite similar to a mixin definition, except that we `use` `Needle.Virtual` this time (passing an additional `table_id` argument) and we call the `virtual_schema` macro.\n\nThe primary limitation of a virtual is that you cannot put extra fields on it. This also means that `belongs_to` is not generally permitted because it results in adding a field, while `has_one` and `has_many` work just fine as they do not cause the creation of fields in the schema.\n\nThis is not usually a problem, as extra fields can be put into [mixins](mixins-storing-data-about-objects) or [multimixins](#multimixins) as appropriate.\n\nIn all other respects, they behave like Pointables. You can have changesets over them and select and insert as usual.\n\n> Under the hood, a virtual has a writable view (in the above example, called `bonfire_data_social_block`). It looks like a table with just an id, but it's populated with all the ids of blocks that have not been deleted. When the view is inserted into, a record is created in the `pointers` table for you transparently. When you delete from the view, the corresponding `pointers` entry is marked deleted for you.\n\n> Before introducing Virtuals, we noticed it was very common to create Pointables with no extra fields just so we could use the Needle system. Virtuals are alternative for this case that requires less typing and provides a reduced overhead vs pointable (as they save the cost of maintaining a primary key in that table and the associated disk space).","title":"Virtual pointables (\"virtuals\") - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#virtual-pointables-virtuals"},{"type":"extras","doc":"The other, lesser used, type of object is called the `Needle.Pointable`. The major difference is that unlike the simple case of virtuals, pointables are not backed by views, but by tables.\n\n> When a record is inserted into a pointable table, a copy is made in the `pointers` table for you transparently. When you delete from the table, the the corresponding `pointers` entry is marked deleted for you. In these ways, they behave very much like virtuals. By having a table, however, we are free to add new fields.\n\nPointables pay for this flexibility by being slightly more expensive than virtuals:\n\n* Records must be inserted into/deleted from two tables (the pointable's table and the `pointers` table).\n* The pointable table needs its own primary key index.\n\nThe choice of using a pointable instead of a virtual combined with one or more mixins is ultimately up to you.\n\nHere is a definition of a pointable type (indicating an ActivityPub activity whose type we don't recognise, stored as a JSON blob):\n\n```elixir\ndefmodule Bonfire.Data.Social.APActivity do\n\n  use Needle.Pointable,\n    otp_app: :bonfire_data_social,\n    table_id: \"30NF1REAPACTTAB1ENVMBER0NE\",\n    source: \"bonfire_data_social_apactivity\"\n\n  pointable_schema do\n    field :json, :map\n  end\nend\n```\n\n\n> As you can see, to declare a pointable schema, we start by using `Needle.Pointable`, providing the name of our otp application, the source table's name in the database and our chosen sentinel UID.\n\n> We then call `pointable_schema` and define any fields we wish to put directly in the table. For the most part, `pointable_schema` is like Ecto's `schema` macro, except you do not provide the table name and let it handle the primary key.\n\n> If for some reason you wished to turn ID autogeneration off, you could pass `autogenerate: false` to the options provided when using `Needle.Pointable`.","title":"Pointables - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#pointables"},{"type":"extras","doc":"","title":"Adding re-usable fields - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#adding-re-usable-fields"},{"type":"extras","doc":"Mixins are tables which contain extra information on behalf of objects. Each object can choose to\nrecord or not record information for each mixin. Sample mixins include:\n\n* user profile (containing a name, location and summary)\n* post content (containing the title, summary, and/or html body of a post or message)\n* created (containing the id of the object creator)\n\nIn this way, they are reusable across different object types. One mixin may (or may not) be used by any number of objects. This is mostly driven by the type of the object we are storing, but can also be driven by user input.\n\nMixins are just tables too! The only requirement is they have a `UID` primary key which references `Needle.Pointer`. The developer of the mixin is free to put whatever other fields they want in the table, so long as they have that primary-key-as-reference (which will be automatically added for you by the `mixin_schema` macro). \n\nHere is a sample mixin definition for a user profile:\n\n```elixir\ndefmodule Bonfire.Data.Social.Profile do\n\n  use Needle.Mixin,\n    otp_app: :bonfire_data_social,\n    source: \"bonfire_data_social_profile\"\n\n  mixin_schema do\n    field :name, :string\n    field :summary, :string\n    field :website, :string\n    field :location, :string\n  end\nend\n```\n\n> Mixin tables are not themselves pointable, so there is no need to specify a table id as when defining a pointable schema.\n\nAside from `use`ing `Needle.Mixin` instead of `Ecto.Schema` and calling `mixin_schema` instead of\n`schema`, pretty similar to a standard Ecto schema, right? \n\nThe arguments to `use Needle.Mixin` are:\n\n* `otp_app`: the OTP app name to use when loading dynamic configuration, e.g. the current extension or app (required)\n* `source`: the underlying table name to use in the database\n\nWe will cover dynamic configuration later. For now, you can use the OTP app that includes the module.","title":"Mixins - storing data about objects - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#mixins-storing-data-about-objects"},{"type":"extras","doc":"Multimixins are like mixins, except that where an object may have 0 or 1 of a particular mixins, an object may have any number of a particular multimixin.\n\nFor this to work, a multimixin must have a *compound primary key* which must contain an `id` column referencing `Needle.Pointer` and at least one other field which will collectively be unique.\n\nAn example multimixin is used for publishing an item to feeds:\n\n```elixir\ndefmodule Bonfire.Data.Social.FeedPublish do\n\n  use Needle.Mixin,\n    otp_app: :bonfire_data_social,\n    source: \"bonfire_data_social_feed_publish\"\n\n  alias Needle.Pointer\n\n  mixin_schema do\n    belongs_to :feed, Pointer, primary_key: true\n  end\nend\n```\n\nNotice that this looks very similar to defining a mixin. Indeed, the only difference is the `primary_key: true` in this line, which adds a second field to the compound primary key.\nThis results in ecto recording a compound primary key of `(id, feed_id)` for the schema (the id is added for you as with regular mixins).","title":"Multimixins - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#multimixins"},{"type":"extras","doc":"Migrations are typically included along with the schemas as public APIs you can call within your project's migrations.","title":"Writing Migrations - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#writing-migrations"},{"type":"extras","doc":"Most virtuals are incredibly simple to migrate for:\n\n```elixir\ndefmodule Bonfire.Data.Social.Post.Migration do\n\n  import Needle.Migration\n  alias Bonfire.Data.Social.Post\n\n  def migrate_post(), do: migrate_virtual(Post)\n\nend\n```\n\nIf you need to do more work, it can be a little trickier. Here's an example for `block`, which also creates a unique index on another table:\n\n```elixir\ndefmodule Bonfire.Data.Social.Block.Migration do\n\n  import Ecto.Migration\n  import Needle.Migration\n  import Bonfire.Data.Edges.Edge.Migration\n  alias Bonfire.Data.Social.Block\n\n  def migrate_block_view(), do: migrate_virtual(Block)\n\n  def migrate_block_unique_index(), do: migrate_type_unique_index(Block)\n\n  def migrate_block(dir \\\\ direction())\n\n  def migrate_block(:up) do\n    migrate_block_view()\n    migrate_block_unique_index()\n  end\n\n  def migrate_block(:down) do\n    migrate_block_unique_index()\n    migrate_block_view()\n  end\n\nend\n```\n\nNotice how we have to write our `up` and `down` versions separately to get the correct ordering of operations.","title":"Virtuals - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#virtuals"},{"type":"extras","doc":"Migration example for a `Pointable`:\n\n```elixir\ndefmodule Bonfire.Data.Social.APActivity.Migration do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n  alias Bonfire.Data.Social.APActivity\n\n  defp make_apactivity_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_pointable_table(Bonfire.Data.Social.APActivity) do\n        Ecto.Migration.add :json, :jsonb\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_apactivity_table, do: make_apactivity_table([])\n  defmacro create_apactivity_table([do: body]), do: make_apactivity_table(body)\n\n  def drop_apactivity_table(), do: drop_pointable_table(APActivity)\n\n  defp maa(:up), do: make_apactivity_table([])\n  defp maa(:down) do\n    quote do: Bonfire.Data.Social.APActivity.Migration.drop_apactivity_table()\n  end\n\n  defmacro migrate_apactivity() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(maa(:up)),\n        else: unquote(maa(:down))\n    end\n  end\n\nend\n```\n\nAs you can see, this `Pointable` migration a little trickier to define than a `Virtual` because we wanted to preserve the ability for the user to define extra fields in config. There are some questions about how useful this is in practice, so you could also go for a simpler option:\n\n```elixir\ndefmodule MyApp.Repo.Migrations.Greeting do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def up() do\n    create_pointable_table(:greeting, \"GREET1NGSFR0MD0CEXAMP1E000\") do\n      add :greeting, :text, null: false\n    end\n  end\n\n  def down() do\n    drop_pointable_table(:greeting, \"GREET1NGSFR0MD0CEXAMP1E000\")\n  end\nend\n```\n\n> As you can see, it's pretty similar to defining a regular migration, except you use `create_pointable_table` and\n`drop_pointable_table`. Notice that our sentinel UID makes an appearance again here. It's *very* important that these match what we declared in the schema.","title":"Pointables - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#pointables"},{"type":"extras","doc":"Mixins look much like pointables:\n\n```elixir\ndefmodule Bonfire.Data.Social.Profile.Migration do\n\n  import Needle.Migration\n  alias Bonfire.Data.Social.Profile\n\n  # create_profile_table/{0,1}\n\n  defp make_profile_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_mixin_table(Bonfire.Data.Social.Profile) do\n        Ecto.Migration.add :name, :text\n        Ecto.Migration.add :summary, :text\n        Ecto.Migration.add :website, :text\n        Ecto.Migration.add :location, :text\n        Ecto.Migration.add :icon_id, strong_pointer(Bonfire.Files.Media)\n        Ecto.Migration.add :image_id, strong_pointer(Bonfire.Files.Media)\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_profile_table(), do: make_profile_table([])\n  defmacro create_profile_table([do: {_, _, body}]), do: make_profile_table(body)\n\n  # drop_profile_table/0\n\n  def drop_profile_table(), do: drop_mixin_table(Profile)\n\n  # migrate_profile/{0,1}\n\n  defp mp(:up), do: make_profile_table([])\n\n  defp mp(:down) do\n    quote do\n      Bonfire.Data.Social.Profile.Migration.drop_profile_table()\n    end\n  end\n\n  defmacro migrate_profile() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(mp(:up)),\n        else: unquote(mp(:down))\n    end\n  end\n\nend\n```","title":"Mixins - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#mixins"},{"type":"extras","doc":"Similar to mixins:\n\n```elixir\ndefmodule Bonfire.Data.Social.FeedPublish.Migration do\n\n  import Ecto.Migration\n  import Needle.Migration\n  alias Bonfire.Data.Social.FeedPublish\n\n  @feed_publish_table FeedPublish.__schema__(:source)\n\n  # create_feed_publish_table/{0,1}\n\n  defp make_feed_publish_table(exprs) do\n    quote do\n      require Needle.Migration\n      Needle.Migration.create_mixin_table(Bonfire.Data.Social.FeedPublish) do\n        Ecto.Migration.add :feed_id,\n          Needle.Migration.strong_pointer(), primary_key: true\n        unquote_splicing(exprs)\n      end\n    end\n  end\n\n  defmacro create_feed_publish_table(), do: make_feed_publish_table([])\n  defmacro create_feed_publish_table([do: {_, _, body}]), do: make_feed_publish_table(body)\n\n  def drop_feed_publish_table(), do: drop_pointable_table(FeedPublish)\n\n  def migrate_feed_publish_feed_index(dir \\\\ direction(), opts \\\\ [])\n  def migrate_feed_publish_feed_index(:up, opts),\n    do: create_if_not_exists(index(@feed_publish_table, [:feed_id], opts))\n  def migrate_feed_publish_feed_index(:down, opts),\n    do: drop_if_exists(index(@feed_publish_table, [:feed_id], opts))\n\n  defp mf(:up) do\n    quote do\n      Bonfire.Data.Social.FeedPublish.Migration.create_feed_publish_table()\n      Bonfire.Data.Social.FeedPublish.Migration.migrate_feed_publish_feed_index()\n    end\n  end\n\n  defp mf(:down) do\n    quote do\n      Bonfire.Data.Social.FeedPublish.Migration.migrate_feed_publish_feed_index()\n      Bonfire.Data.Social.FeedPublish.Migration.drop_feed_publish_table()\n    end\n  end\n\n  defmacro migrate_feed_publish() do\n    quote do\n      if Ecto.Migration.direction() == :up,\n        do: unquote(mf(:up)),\n        else: unquote(mf(:down))\n    end\n  end\n\n  defmacro migrate_feed_publish(dir), do: mf(dir)\n\nend\n```","title":"Multimixins - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#multimixins"},{"type":"extras","doc":"Take a look at a few of the migrations in our data libraries. Between them, they cover most\nscenarios by now:\n\n* [bonfire_data_social](https://github.com/bonfire-networks/bonfire_data_social/)\n* [bonfire_data_access_control](https://github.com/bonfire-networks/bonfire_data_access_control/)\n* [bonfire_data_identity](https://github.com/bonfire-networks/bonfire_data_identity/)\n* [bonfire_data_edges](https://github.com/bonfire-networks/bonfire_data_edges/) (feat. bonus triggers)\n\nIf you want to know exactly what's happening, you may want to read the code for\n[Needle.Migration](https://github.com/bonfire-networks/needle/blob/main/lib/migration.ex).","title":"More examples - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#more-examples"},{"type":"extras","doc":"Every pointable or mixin schema is overrideable with configuration\nduring compilation (this is why using them requires an `:otp_app` to\nbe specified). For example, we could override `Needle.Table` (which\nis a pointable table) thus:\n\n```elixir\nconfig :needle, Needle.Table, source: \"my_pointers_table\"\n```\n\nThe `table_id` is also configurable, but we don't recommend you change it.\n\nIn addition, all pointable and mixin schemas permit extension with [Exto](https://github.com/bonfire-networks/exto). See the `Exto`'s docs for more information about how to extend schemas via configuration. You will probably at the very least want to insert some `has_one` for mixins off your pointables.","title":"Configuration and overrides - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#configuration-and-overrides"},{"type":"extras","doc":"Ecto does not know anything about our scheme, so unless we specifically want something to reference one of the pointed tables, we typically `belongs_to` with `Needle.Pointer`. The table in which we do this does not itself need to necessarily be a `Pointable`.\n\n```elixir\ndefmodule MyApp.Foo do\n\n  use Ecto.Schema\n\n  # regular ecto table, not pointable!\n  schema \"hello\" do\n    belongs_to :pointer, Needle.Pointer # who knows what it points to?\n  end\nend\n```\n\nYou may choose to reference a specific schema rather than Pointer if it\nwill only point to a single table. If you do this, you must ensure\nthat the referenced record exists in that table in the normal\nway. There may be some performance benefit, we didn't benchmark it.\n\nThe migration is slightly more complex, we have to decide what type of\na pointer it is. Needle come in three categories:\n\n* A strong pointer is not nullable and is deleted when the object it\n  points to is deleted.\n* A weak pointer is nullable and is nilified when the object it points\n  to is deleted.\n* An unbreakable pointer will raise when you attempt to delete the\n  object it points to.\n\n| Type        | Nullable? | On Delete   |\n|-------------|-----------|-------------|\n| Strong      | No        | Cascade     |\n| Weak        | Yes       | Set Null    |\n| Unbreakable | No        | Raise       |\n\nIn this case we will use a strong pointer, because we want it to be\ndeleted if the pointed object is deleted.\n\n```elixir\ndefmodule MyApp.Repo.Migrations.Hello do\n  @moduledoc false\n  use Ecto.Migration\n  import Needle.Migration\n\n  def change() do\n    create_if_not_exists table(:hello) do\n      add :pointer, strong_pointer(), null: false\n      add :greeting, :text, null: false\n    end\n  end\nend\n```\n\nIf you are pointing to a specific table instead of pointer,\n`strong_pointer/1` allows you to pass the name of that module\n(`strong_pointer/0` calls this with `Needle.Pointer`).","title":"Referencing Pointables - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#referencing-pointables"},{"type":"extras","doc":"It is common that even though you have a universal foreign key, you\nwill want to issue different queries based upon the type that is being\npointed to. For this reason, it is up to you to decide how to perform\nan onward query.\n\n`Needle.Pointers.schema/1` turns a `Pointer` into an Ecto schema module name\nyou can switch against. `Needle.Pointers.plan` breaks down a list of Needle\ninto a map of ids keyed by schema module. It is handy to define some\nfunctions in your (non-library) application that can load any type of\npointer in given contexts.","title":"Dereferencing Pointables - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#dereferencing-pointables"},{"type":"extras","doc":"","title":"Inserting data - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#inserting-data"},{"type":"extras","doc":"The practical result of needle is that it pushes a certain amount of\nvalidation and consistency logic back into elixir land. It is\ntherefore your elixir code's responsibility to ensure that data is\ninserted into the appropriate mixin tables when inserting a pointable\nobject and to manage deletions as appropriate.\n\nWhen assembling queries with mixin tables, pay careful attention to\nthe type of join you are performing. An inner join is explicitly\nasking not to be shown objects that do not have a record for that\nmixin. You quite possibly wanted to left join.","title":"Elixir-based logic - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#elixir-based-logic"},{"type":"extras","doc":"Since `Pointer` has a table, you can use its `table_id` field to\nfilter by pointed type. `Needle.Tables.id!/1` (or `ids!/1` for a\nlist) can be used to obtain the IDs for a table or tables.","title":"Querying Needle - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#querying-needle"},{"type":"extras","doc":"All solutions to the universal primary key problem have tradeofs. Here\nare what we see as the deficiencies in our approach:\n\n1. It forces a UUIDv7 or ULID on you. This is great for us, but not\n   everyone. They both expose a timestamp with millisecond precision. \n   If the time of creation of a resource is sensitive information for\n   your purposes, they may not going to be suitable for you.\n2. Ecto has no knowledge of the specialty of `Pointer`,\n   e.g. `Repo.preload` does not work and you need to specify a join\n   condition to join through a pointer. Use our functions or add extra\n   associations with exto configuration.\n3. Dereferencing a list of needle requires a select query per table\n   type that occurs in the input set.\n4. Reliance on user attention. You have to follow the instructions\n   correctly to make the system work at all.\n5. There is likely some performance impact from postgres not\n   understanding the relationships between the various tables\n   properly. It's hard to gauge and we haven't even tried.\n\nThese are not likely to change. If you're going to pick\nthis library, do so in the full knowledge of the tradeoffs it makes.\n\nAlternatives include (I'm sure you can think of others):\n\n* Storing the table name in a second column alongside every foreign key.\n* A compound datatype of id and table name.\n* Byte/String manipulation tricks.\n* Evil SQL hacks based upon compile time configuration.\n\nWhile we have our gripes with this approach, once you've gotten the\nhang of using it, it works out pretty well for most purposes and it's\none of the simpler options to work with.","title":"Tradeoffs - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#tradeoffs"},{"type":"extras","doc":"Copyright (c) 2020 needle Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Needles and Pointers: Universal foreign keys, virtual schemas, and shared data fields for Ecto","ref":"Needle.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.Assort\n\nVarious assorted database schemas for:\n- Ranked linked items\n- TODO: move schemas from bonfire_classify and bonfire_tag here?","title":"Bonfire.Data.Assort","ref":"Bonfire.Data.Assort.html"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n    \n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Data.Assort","ref":"Bonfire.Data.Assort.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.AccessControl\n\nSee `Bonfire.Boundaries` for docs: https://github.com/bonfire-networks/bonfire_boundaries","title":"Bonfire.Data.AccessControl","ref":"Bonfire.Data.AccessControl.html"},{"type":"extras","doc":"Copyright (c) 2020 James Laver, `bonfire_data_access_control` Contributors\n\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Data.AccessControl","ref":"Bonfire.Data.AccessControl.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.ActivityPub\n\n<!-- [hex](https://hex.pm/bonfire_data_activity_pub) [hexdocs](https://hexdocs.pm/bonfire_data_activity_pub) -->\n\nActor schema.","title":"Bonfire.Data.ActivityPub","ref":"Bonfire.Data.ActivityPub.html"},{"type":"extras","doc":"Copyright (c) 2020 James Laver, bonfire_data_activity_pub Contributors\n    \n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Data.ActivityPub","ref":"Bonfire.Data.ActivityPub.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.Identity\n\nSchemas for accounts, users, etc.","title":"Bonfire.Data.Identity","ref":"Bonfire.Data.Identity.html"},{"type":"extras","doc":"Copyright (c) 2020 James Laver, bonfire_data_identity Contributors\n    \n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Data.Identity","ref":"Bonfire.Data.Identity.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.Social\n\n<!-- [hex](https://hex.pm/bonfire_data_social) [hexdocs](https://hexdocs.pm/bonfire_data_social) -->\n\nSchemas for social activities, posts, feeds, etc","title":"Bonfire.Data.Social","ref":"Bonfire.Data.Social.html"},{"type":"extras","doc":"Copyright (c) 2020 James Laver, bonfire_data_social Contributors\n    \n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.","title":"Copyright and License - Bonfire.Data.Social","ref":"Bonfire.Data.Social.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Data.Edges","title":"Bonfire.Data.Edges","ref":"Bonfire.Data.Edges.html"},{"type":"extras","doc":"# Bonfire.UI.Messages\n![](https://i.imgur.com/XoQvDCW.png)\n\n`Bonfire.UI.Messages` is an extension that includes some User Interfaces (routes, pages and components) for messaging in Bonfire.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Messages.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Messages","ref":"Bonfire.UI.Messages.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Messages","ref":"Bonfire.UI.Messages.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_messages/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_messages/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_messages/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Messages","ref":"Bonfire.UI.Messages.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Messages","ref":"Bonfire.UI.Messages.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Messages","ref":"Bonfire.UI.Messages.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Reactions\n![](https://i.imgur.com/XoQvDCW.png)\n\n`Bonfire.UI.Reactions` is an extension that includes some User Interfaces (routes, pages and components) for liking, boosting, pinning, bookmarking, etc, in Bonfire.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Reactions.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Reactions","ref":"Bonfire.UI.Reactions.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Reactions","ref":"Bonfire.UI.Reactions.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_reactions/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_reactions/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_reactions/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Reactions","ref":"Bonfire.UI.Reactions.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Reactions","ref":"Bonfire.UI.Reactions.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Reactions","ref":"Bonfire.UI.Reactions.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Common\n\nA library of common utils and helpers used across Bonfire extensions\n\n- Many common functions for web UIs \n- Common and generic re-usable components\n- Etc","title":"Bonfire.UI.Common","ref":"Bonfire.UI.Common.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.UI.Common","ref":"Bonfire.UI.Common.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Common","ref":"Bonfire.UI.Common.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Boundaries\n\nA template for creating custom extensions for [Bonfire](https://bonfire.cafe/)","title":"Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html"},{"type":"extras","doc":"- Clone the repository on your `/extensions` folder\n```\ncd extensions\ngit clone https://github.com/bonfire-networks/bonfire_ui_boundaries.git {your-extension-name-here}\ncd {your-extension-name-here} \n```\n- Rename all the modules names to match your extension name:\n    - Find & replace Bonfire.UI.Boundaries -> Bonfire.YourExtensionName \n    - Find & replace bonfire_ui_boundaries -> bonfire_your_extension_name\n- Rename the `bonfire_ui_boundaries.exs` config file to match your extension name `bonfire_your_extension_name.exs`\n- Add paths to the router if you need it. If you add paths you will need to include the route module on [bonfire-app router module](https://github.com/bonfire-networks/bonfire-app/blob/main/lib/web/router.ex#L51) \n- Add extension specific Fake functions\n- Add extension specific migrations\n- Add extension deps to deps.git and/or deps.hex \n- Delete the bonfire extension template git history and initiate a new .git \n    ```\n    rm -rf .git\n    git init    \n    ```\n- Create your empty extension repository on your preferred platform\n- Push your local changes\n    ```\n      git add .\n      git commit -m \"first commit\"\n      git branch -M main\n      git remote add origin {your-remote-repository}\n      git push -u origin main\n    ```\n- Add the extension on your bonfire deps.path to include it in your local development\n- Add `use_if_enabled(Bonfire.UI.Boundaries.Routes)` in your app's `Router` module\n- Add the extension on deps.git also (specifying the branch name) to allow others that do not have it in their fork to use it\n- Write a meaningful readme\n- TADA 🔥!","title":"How to use it - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#how-to-use-it"},{"type":"extras","doc":"> **Warning**\n> The following pattern is likely to change in the coming period.\n\nEach extension can specify it's own navbar in a quite flexible way, leveraging on 2 macro: `declare_extension` and `declare_nav_link`.\n\n\n- On your extension homepage call the `declare_extension` macro, specifying the extension name, its icon (that will be mostly used to list the extension with the other active ones) and the default_nav.\n\n```\ndeclare_extension(\n      \"ExtensionTemplate\",\n      icon: \"bi:app\",\n      default_nav: [\n        Bonfire.UI.Boundaries.HomeLive,\n        Bonfire.UI.Boundaries.AboutLive\n      ])\n```\n\n- The views you will include in the `default_nav` section, will be the ones that will be shown on the navigation sidebar. \n\n- The last step is to call `declare_nav_link` on each of those view/components already specified in declare_extension. \n\n```\ndeclare_nav_link(l(\"About\"),\n    page: \"About\",\n    href: \"/bonfire_ui_boundaries/about\",\n    icon: \"typcn:info-large\"\n  )\n```","title":"Add your navigation - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#add-your-navigation"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Boundaries","ref":"Bonfire.UI.Boundaries.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Me\n![](https://i.imgur.com/XoQvDCW.png)\n\n[Bonfire.UI.Me](http://bonfirenetworks.org/extensions/ui_social.html) is an extension that includes the main User Interfaces (routes, pages and components) for functionality around accounts, users, profiles, authentication, etc.\n\nThis extension is meant to be used by other extensions like [Bonfire.Me](https://github.com/bonfire-networks/bonfire_me), which provide logic for the UI to work with.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Me.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Me","ref":"Bonfire.UI.Me.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_me/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Me","ref":"Bonfire.UI.Me.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Social\n![](https://i.imgur.com/XoQvDCW.png)\n\n[Bonfire.UI.Social](http://bonfirenetworks.org/extensions/ui_social.html) is an extension that includes the main User Interfaces (routes, pages and components) required to have a fully working federated social network app.\n\nThis extension is meant to be used by other extensions like [Bonfire.Social](https://github.com/bonfire-networks/bonfire_social), which provides logic for the UI to work with/\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Social.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Social","ref":"Bonfire.UI.Social.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Social","ref":"Bonfire.UI.Social.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_social/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_social/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_social/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Social","ref":"Bonfire.UI.Social.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Social","ref":"Bonfire.UI.Social.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Social","ref":"Bonfire.UI.Social.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Social.Graph\n![](https://i.imgur.com/XoQvDCW.png)\n\n`Bonfire.UI.Social.Graph` is an extension that includes some User Interfaces (routes, pages and components) for following and otherwise managing one's network in Bonfire.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Social.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Social.Graph","ref":"Bonfire.UI.SocialGraph.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Social.Graph","ref":"Bonfire.UI.SocialGraph.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_social_graph/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_social_graph/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_social_graph/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Social.Graph","ref":"Bonfire.UI.SocialGraph.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Social.Graph","ref":"Bonfire.UI.SocialGraph.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Social.Graph","ref":"Bonfire.UI.SocialGraph.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Posts\n![](https://i.imgur.com/XoQvDCW.png)\n\n`Bonfire.UI.Posts` is an extension that includes some User Interfaces (routes, pages and components) for writing and reading posts in Bonfire.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Posts.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Posts","ref":"Bonfire.UI.Posts.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Posts","ref":"Bonfire.UI.Posts.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_posts/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_posts/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_posts/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Posts","ref":"Bonfire.UI.Posts.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Posts","ref":"Bonfire.UI.Posts.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Posts","ref":"Bonfire.UI.Posts.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.UI.Moderation\n![](https://i.imgur.com/XoQvDCW.png)\n\n`Bonfire.UI.Moderation` is an extension that includes some User Interfaces (routes, pages and components) for flagging content and moderation in Bonfire.\n\nYou can customise it by forking, but we recommend creating an extension which uses this one as a dependency, and defines your custom components, views, and/or routes (you can then comment `Bonfire.UI.Social.Routes` from your top-level Router to use your custom routes and views instead).","title":"Bonfire.UI.Moderation","ref":"Bonfire.UI.Moderation.html"},{"type":"extras","doc":"So far, Bonfire UI extensions are built with the PETALS stack (note that is not a requirement), which means:\n\n- [Phoenix](https://www.phoenixframework.org/)\n- [Elixir](https://elixir-lang.org/)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Alpine.js](https://alpinejs.dev/)\n- [LiveView](https://github.com/phoenixframework/phoenix_live_view#readme)\n- [Surface](https://surface-ui.org/)\n\nSurface is a server-side rendering component library (built on top of Phoenix and LiveView) that inherits a lot of design patterns from popular JS framework like Vue.js and React, while being almost JavaScript-free compared to common SPAs.","title":"Stack - Bonfire.UI.Moderation","ref":"Bonfire.UI.Moderation.html#stack"},{"type":"extras","doc":"The relevant folders are:\n- [Components](https://github.com/bonfire-networks/bonfire_ui_moderation/tree/main/lib/components): Surface stateless and stateful components.\n- [Views](https://github.com/bonfire-networks/bonfire_ui_moderation/tree/main/lib/views): The main pages that are rendered when navigating to a specific route\n- [Test](https://github.com/bonfire-networks/bonfire_ui_moderation/tree/main/test): All the unit tests for the specific module.","title":"Scaffolding - Bonfire.UI.Moderation","ref":"Bonfire.UI.Moderation.html#scaffolding"},{"type":"extras","doc":"- [A blog post that introduces the concept of themeable bonfire apps](https://bonfirenetworks.org/posts/let_thousand_bonfires_bloom/)","title":"Other resources - Bonfire.UI.Moderation","ref":"Bonfire.UI.Moderation.html#other-resources"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.UI.Moderation","ref":"Bonfire.UI.Moderation.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Common\n\nA library of common utils and helpers used across Bonfire extensions.\n\nAn extension for [Bonfire](https://bonfire.cafe/) that contains:\n\n- Many common functions in `Bonfire.Common.Utils`\n- Path and URL generators in `Bonfire.Common.URIs`\n- Date and time helpers in `Bonfire.Common.DatesTimes`\n- Etc","title":"Bonfire.Common","ref":"Bonfire.Common.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Common","ref":"Bonfire.Common.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Common","ref":"Bonfire.Common.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Epics\n\nEpics are a extensible way of structuring tasks.\n\nThis library is designed to provide a structured way to define and execute complex workflows in Elixir applications. It introduces the concept of \"Epics\" and \"Acts\" to organize and run sequences of operations.","title":"Bonfire.Epics","ref":"Bonfire.Epics.html"},{"type":"extras","doc":"- `Bonfire.Epics.Epic`: An Epic represents a complete workflow or process. It's a container that holds a sequence of Acts to be executed, along with state information, errors, and assigned values.\n- `Bonfire.Epics.Act`: An Act is an individual step or operation within an Epic. Each Act is typically a module that implements a specific task or functionality.\n- Execution Flow & Parallel Execution: Epics are executed by running their Acts in sequence. The library provides mechanisms to define, modify, and run these sequences. The library supports running multiple Acts in parallel for improved performance in certain scenarios.\n- Shared State: An Epic can maintain state throughout its execution using the 'assigns' map, allowing data to be passed between Acts.\n- Configurable: Epics can be defined in configuration, including at runtime, making it easy to set up and modify workflows without changing code.\n- Database Transactions: See the `Bonfire.Ecto` library for helpers to queue changeset operations within Acts and then run them all together in a single transaction: https://github.com/bonfire-networks/bonfire_ecto\n- Error Handling: The library includes built-in error handling, allowing errors to be captured and associated with specific Acts within an Epic.\n\nThis library is particularly useful for applications that need to manage complex, multi-step tasks with error handling and state management. It provides a flexible and extensible way to define, configure, and execute these processes, making it easier to maintain and modify complex workflows.","title":"Key components and concepts: - Bonfire.Epics","ref":"Bonfire.Epics.html#key-components-and-concepts"},{"type":"extras","doc":"1. Each Act is implemented as a module with a `run/2` function that performs a specific task.\n2. Users define an Epic, either in code or configuration, as sequences of Acts.\n3. When the Epic is run, it executes each Act in sequence (or with some Acts optionally running in parallel), maintaining state and handling errors along the way. Acts can update the Epic's state, adding errors, and assigning values that can be used by subsequent Acts.\n4. After all Acts are executed, the final state of the Epic is returned, including any errors or assigned values.","title":"How it works - Bonfire.Epics","ref":"Bonfire.Epics.html#how-it-works"},{"type":"extras","doc":"Write a module with a `run/2` function that takes an Epic and an Act, performs a specific task, and returns an Epic.\n\n```elixir\ndefmodule Bonfire.Label.Acts.LabelObject do\n  @moduledoc \"\"\"\n  Takes an object and label and returns a changeset for labeling that object. \n  Implements `Bonfire.Epics.Act`.\n\n  Epic Options:\n    * `:current_user` - user that will create the page, required.\n\n  Act Options:\n    * `:as` - key to where we find the label(s) to add, and then assign changeset to, default: `:label`.\n    * `:object` (configurable) - id to use for the thing to label\n    * `:attrs` - epic options key to find the attributes at, default: `:attrs`.\n  \"\"\"\n\n  use Arrows\n  import Bonfire.Epics\n\n  @doc false\n  def run(epic, act) do\n    current_user = Bonfire.Common.Utils.current_user(epic.assigns[:options])\n\n    cond do\n      epic.errors != [] ->\n        maybe_debug(\n          epic,\n          act,\n          length(epic.errors),\n          \"Skipping due to epic errors\"\n        )\n\n        epic\n\n      not (is_struct(current_user) or is_binary(current_user)) ->\n        maybe_debug(\n          epic,\n          act,\n          current_user,\n          \"Skipping due to missing current_user\"\n        )\n\n        epic\n\n      true ->\n        as = Keyword.get(act.options, :as) || Keyword.get(act.options, :on, :label)\n        object_key = Keyword.get(act.options, :object, :object)\n\n        label = Keyword.get(epic.assigns[:options], as, [])\n        object = Keyword.get(epic.assigns[:options], object_key, nil)\n\n        Bonfire.Label.Labelling.label_object(label, object,\n          return: :changeset,\n          current_user: current_user\n        )\n        |> Map.put(:action, :insert)\n        |> Bonfire.Epics.Epic.assign(epic, as, ...)\n        |> Bonfire.Ecto.Acts.Work.add(:label)\n    end\n  end\nend\n```","title":"1. How to write an Act - Bonfire.Epics","ref":"Bonfire.Epics.html#1-how-to-write-an-act"},{"type":"extras","doc":"","title":"2. How to define an Epic - Bonfire.Epics","ref":"Bonfire.Epics.html#2-how-to-define-an-epic"},{"type":"extras","doc":"```elixir\n     @page_act_opts [on: :page, attrs: :page_attrs]\n\n     config :bonfire_pages, Bonfire.Pages,\n      epics: [\n        create: [\n          # Create a changeset for insertion\n          {Bonfire.Pages.Acts.Page.Create, @page_act_opts},\n          # with a sanitised body and tags extracted,\n          {Bonfire.Social.Acts.PostContents, @page_act_opts},\n          # a caretaker,\n          {Bonfire.Me.Acts.Caretaker, @page_act_opts},\n          # and a creator,\n          {Bonfire.Me.Acts.Creator, @page_act_opts},\n          # and possibly fetch contents of URLs,\n          {Bonfire.Files.Acts.URLPreviews, @page_act_opts},\n          # possibly with uploaded files,\n          {Bonfire.Files.Acts.AttachMedia, @page_act_opts},\n          # with extracted tags fully hooked up,\n          {Bonfire.Tag.Acts.Tag, @page_act_opts},\n          # and the appropriate boundaries established,\n          {Bonfire.Boundaries.Acts.SetBoundaries, @page_act_opts},\n\n          # Now we open a Postgres transaction and actually do the insertions in DB\n          Bonfire.Ecto.Acts.Begin,\n          # Run our inserts\n          Bonfire.Ecto.Acts.Work,\n          Bonfire.Ecto.Acts.Commit,\n\n          # Enqueue for indexing by meilisearch\n          {Bonfire.Search.Acts.Queue, @page_act_opts}\n        ]\n      ]\n```","title":"Simple Epic where each Act executes sequentially - Bonfire.Epics","ref":"Bonfire.Epics.html#simple-epic-where-each-act-executes-sequentially"},{"type":"extras","doc":"```elixir\n    config :bonfire_posts, Bonfire.Posts,\n      epics: [\n        publish: [\n          # Create a changeset for insertion\n          Bonfire.Posts.Acts.Posts.Publish,\n          # These next 3 Acts are run in parallel\n          [\n            # with a sanitised body and tags extracted,\n            {Bonfire.Social.Acts.PostContents, on: :post},\n\n            # assign a caretaker,\n            {Bonfire.Me.Acts.Caretaker, on: :post},\n\n            # record the creator,\n            {Bonfire.Me.Acts.Creator, on: :post}\n          ],\n          # These next 4 Acts are run in parallel (they run after the previous 3 because they depend on the outputs of those Acts)\n          [\n            # possibly fetch contents of URLs,\n            {Bonfire.Files.Acts.URLPreviews, on: :post},\n\n            # possibly occurring in a thread,\n            {Bonfire.Social.Acts.Threaded, on: :post},\n\n            # with extracted tags/mentions fully hooked up,\n            {Bonfire.Tag.Acts.Tag, on: :post},\n\n            # maybe set as sensitive,\n            {Bonfire.Social.Acts.Sensitivity, on: :post}\n          ],\n          # These next 3 Acts are run in parallel (they run after the previous 4 because they depend on the outputs of those Acts)\n          [\n            # possibly with uploaded/linked media (optionally depends on URLPreviews),\n            {Bonfire.Files.Acts.AttachMedia, on: :post},\n\n            # with appropriate boundaries established (depends on Threaded),\n            {Bonfire.Boundaries.Acts.SetBoundaries, on: :post},\n\n            # summarised by an activity (possibly appearing in feeds),\n            {Bonfire.Social.Acts.Activity, on: :post}\n          ],\n\n          # Now we open a Postgres transaction and actually do the insertions in DB\n          Bonfire.Ecto.Acts.Begin,\n          # Run our inserts\n          Bonfire.Ecto.Acts.Work,\n          Bonfire.Ecto.Acts.Commit,\n\n          # Preload data & Publish live feed updates via (in-memory) PubSub\n          {Bonfire.Social.Acts.LivePush, on: :post},\n\n          # These steps are run in parallel\n          [\n            # Enqueue for indexing by meilisearch\n            {Bonfire.Search.Acts.Queue, on: :post},\n\n            # Prepare JSON for federation and add to queue (oban).\n            {Bonfire.Social.Acts.Federate, on: :post}\n          ],\n\n          # Once the activity/object exists (depends on federation being done)\n          {Bonfire.Tags.Acts.AutoBoost, on: :post}\n        ]\n      ]\n```","title":"Advanced Epic, where some Acts execute in parallel - Bonfire.Epics","ref":"Bonfire.Epics.html#advanced-epic-where-some-acts-execute-in-parallel"},{"type":"extras","doc":"```elixir\nBonfire.Epics.run_epic(Bonfire.Posts, :publish, on: :post)\n```","title":"3. How to run an Epic - Bonfire.Epics","ref":"Bonfire.Epics.html#3-how-to-run-an-epic"},{"type":"extras","doc":"Copyright (c) 2022 Bonfire Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Bonfire.Epics","ref":"Bonfire.Epics.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Ecto\n\n`Bonfire.Ecto` contains `Ecto` transactional support as acts for `Bonfire.Epics`","title":"Bonfire.Ecto","ref":"Bonfire.Ecto.html"},{"type":"extras","doc":"`Bonfire.Ecto` is designed to facilitate complex Ecto transaction handling within an Elixir application that uses `Bonfire.Epics` to execute a sequence of operations (or `Acts`). These modules provide a structured way to manage database transactions as a series of acts and managing them within an `Epic`, offering flexibility and control over database interactions, ensuring that transactions are executed efficiently.","title":"Introduction - Bonfire.Ecto","ref":"Bonfire.Ecto.html#introduction"},{"type":"extras","doc":"1. `Bonfire.Ecto.Acts.Begin`\n    - Responsible for initiating a transaction if certain conditions are met. It ensures that the transaction is only started when it is sensible to do so, based on the current state of the `Epic`.\n\n2. `Bonfire.Ecto.Acts.Work`\n    - Handles queued database operations within a transaction. Operations are queued using the `Bonfire.Ecto.Acts.Work.add/2` function and executed if there are no errors in the `Epic` or changesets.\n\n3. `Bonfire.Ecto.Acts.Commit`\n    - A placeholder marker used by `Bonfire.Ecto.Acts.Begin` to identify when to commit the transaction.","title":"Modules Overview - Bonfire.Ecto","ref":"Bonfire.Ecto.html#modules-overview"},{"type":"extras","doc":"#### 1. Initial Setup\n\nEnsure that you have `Ecto` and `Bonfire.Epics` installed and configured in your application, and then install this linrary.\n\n#### 2. Using `Bonfire.Ecto.Acts.Begin`\n\nRefer to `Bonfire.Epics` docs to define some `Act`s and `Epic`s: https://github.com/bonfire-networks/bonfire_epics\n\n#### 3. Queue database operation(s) in an Act \n\nQueue operations by calling the `Bonfire.Ecto.Acts.Work.add/2` function, providing the epic and a key representing the changeset to be processed.\n\n```elixir\nepic = Bonfire.Ecto.Acts.Work.add(epic, :some_changeset)\n```\n\n#### 3. Add the three `Bonfire.Ecto` Acts to your Epic\n```\n    # First come the Acts that prepare the changeset and call `Bonfire.Ecto.Acts.Work.add/2` to queue it\n\n    # Open a Postgres transaction and actually do the insertions in DB\n    Bonfire.Ecto.Acts.Begin,\n\n    # Run our inserts\n    Bonfire.Ecto.Acts.Work,\n    Bonfire.Ecto.Acts.Commit,\n\n    # Then can come some Acts that process the result of the transaction \n```","title":"Usage - Bonfire.Ecto","ref":"Bonfire.Ecto.html#usage"},{"type":"extras","doc":"# Bonfire.Messages \n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- DM\n- Group messaging","title":"Bonfire.Messages","ref":"Bonfire.Messages.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Messages","ref":"Bonfire.Messages.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Messages","ref":"Bonfire.Messages.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Poll\n\nAn extensions for asking questions, collecting options, and conducting ranked voting on [Bonfire](https://bonfire.cafe/)","title":"Bonfire.Poll","ref":"Bonfire.Poll.html"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Poll","ref":"Bonfire.Poll.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Label\n\nBonfire.Label is a powerful and flexible extension designed to enhance content moderation and improve online safety. Inspired by the design principles outlined by Prosocial Design (specifically the [Label Misleading Content & Add Links to Reliable Related Content](https://www.prosocialdesign.org/library/label-misleading-content-add-links-to-reliable-related-content) pattern), this library enables the addition of custom labels and descriptions to user-generated posts. \n\nThis feature aids in identifying and marking potentially misleading, harmful, or unsafe content, while also providing users with links to reliable and related information.","title":"Bonfire.Label","ref":"Bonfire.Label.html"},{"type":"extras","doc":"- **Custom Labeling**: Easily add custom labels to posts, categorizing them based on content, reliability, and safety.\n- **Dynamic Descriptions**: Append descriptions to posts to provide context, warnings, or additional information.\n- **Link to Reliable Sources**: Option to include up to 3 links to authoritative sources for further reading or fact-checking.\n- **Configurable Settings**: Tailor the permission system to fit the specific governance of your platform.\n- **User-friendly Interface**: Intuitive tools for moderators and administrators to manage labels and descriptions.","title":"Features - Bonfire.Label","ref":"Bonfire.Label.html#features"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Label","ref":"Bonfire.Label.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Classify\n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Defining categories/topics\n- Defining relationships (parent or related) between categories to create taxonomies\n\nUse Bonfire.Tag if you want to tag/classify posts or other objects with these categories/topics.","title":"Bonfire.Classify","ref":"Bonfire.Classify.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Classify","ref":"Bonfire.Classify.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, Haha Academy, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program. If not, see  .","title":"Copyright and License - Bonfire.Classify","ref":"Bonfire.Classify.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Search\n\nAn extension for [Bonfire](https://bonfire.cafe/) to handle:\n\n- Search indexing\n- Ultra-fast search\n- LiveView search UI\n\nYou can implement adapters for your prefered search backend. Currently adapters are included for:\n- Database\n- [Meili Search](https://www.meilisearch.com/)","title":"Bonfire.Search","ref":"Bonfire.Search.html"},{"type":"extras","doc":"This extension is meant to be used inside of a Bonfire app, so please refer to the main repo at: https://github.com/bonfire-networks/bonfire-app","title":"Development & Deployment Documentation - Bonfire.Search","ref":"Bonfire.Search.html#development-deployment-documentation"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Search","ref":"Bonfire.Search.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Invite.Links\n\nAn extension for [Bonfire](https://bonfire.cafe/) to generate invite links","title":"Bonfire.Invite.Links","ref":"Bonfire.InviteLinks.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Invite.Links","ref":"Bonfire.InviteLinks.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Invite.Links","ref":"Bonfire.InviteLinks.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.OpenID\n\nAn extension to enable:\n- authenticating on Bonfire using an external identity using OpenID Connect\n- using your Bonfire identity to authenticate in other apps with OpenID Connect 1.0 or OAuth 2.0","title":"Bonfire.OpenID","ref":"Bonfire.OpenId.html"},{"type":"extras","doc":"Powered by these libraries: \n- https://hex.pm/packages/boruta (MIT license)\n- https://hex.pm/packages/openid_connect (MIT license)\n\nExtension copyright (c) 2022 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.OpenID","ref":"Bonfire.OpenId.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Federate.ActivityPub\n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Extensible/configurable tools for translating Bonfire data to/from ActivityStreams\n- Bonfire Adapter for the [ActivityPub federation library ](https://github.com/bonfire-networks/activity_pub)","title":"Bonfire.Federate.ActivityPub","ref":"Bonfire.FederateActivitypub.html"},{"type":"extras","doc":"There are unit tests both in this repo, and in the activity_pub lib, but they can't cover every possible federation case, so manual testing with e.g. `curl -H \"Accept: application/activity+json\" -v \"http://localhost:4001/pub/actors/my_username\" | jq '.'` and by trying out federation flows between instances of Bonfire and other ActivityPub implementation is a must.","title":"Testing - Bonfire.Federate.ActivityPub","ref":"Bonfire.FederateActivitypub.html#testing"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Federate.ActivityPub","ref":"Bonfire.FederateActivitypub.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Federate.ActivityPub","ref":"Bonfire.FederateActivitypub.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Editor.Milkdown\n\nBonfire composer based on the [Milkdown](https://milkdown.dev/) markdown editor","title":"Bonfire.Editor.Milkdown","ref":"Bonfire.Editor.Milkdown.html"},{"type":"extras","doc":"- [x] Add emojis using gemoji convention\n- [x] Show emojis suggestions when typing : followed by 2 chars\n- [x] Show mentions suggestions when typing @ followed by 2 chars\n- [x] Show formatting suggestions when typing /\n- [x] Insert emojis from the suggestions list\n- [x] Insert mentions from the suggestions list\n- [ ] Insert formatting from the suggestions list\n- [x] Add placeholder when missing text\n- [ ] Upload images by dragging them in the editor","title":"ROADMAP - Bonfire.Editor.Milkdown","ref":"Bonfire.Editor.Milkdown.html#roadmap"},{"type":"extras","doc":"Copyright (c) 2023 Bonfire, Milkdown, ProseMirror and Remark Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Editor.Milkdown","ref":"Bonfire.Editor.Milkdown.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Me\n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Account creation\n- Email verification\n- Authentication\n- User/Profile creation\n- User/Profile switching\n- User Profile\n- Settings","title":"Bonfire.Me","ref":"Bonfire.Me.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Me","ref":"Bonfire.Me.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, VoxPublica, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Me","ref":"Bonfire.Me.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Social \n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Feeds / Timelines\n- Activities\n- Threads\n- Boosting\n- Liking\n- Flagging\n- etc","title":"Bonfire.Social","ref":"Bonfire.Social.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Social","ref":"Bonfire.Social.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Social","ref":"Bonfire.Social.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Social.Graph \n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Following\n- Follow Requests\n- Social graph analysis","title":"Bonfire.Social.Graph","ref":"Bonfire.SocialGraph.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Social.Graph","ref":"Bonfire.SocialGraph.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2023 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Social.Graph","ref":"Bonfire.SocialGraph.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Posts \n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles:\n\n- Creating and reading posts","title":"Bonfire.Posts","ref":"Bonfire.Posts.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Posts","ref":"Bonfire.Posts.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Posts","ref":"Bonfire.Posts.html#copyright-and-license"},{"type":"extras","doc":"# Bonfire.Tag\n\nAn extension for [Bonfire](https://bonfire.cafe/) that handles tagging posts or other things:\n- @ mentions \n- #hashtags\n- others (e.g. with a Category from Bonfire.Classify or a location from Bonfire.Geolocate)","title":"Bonfire.Tag","ref":"Bonfire.Tag.html"},{"type":"extras","doc":"","title":"Handy commands - Bonfire.Tag","ref":"Bonfire.Tag.html#handy-commands"},{"type":"extras","doc":"Copyright (c) 2020 Bonfire, Haha Academy, and CommonsPub Contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see  .","title":"Copyright and License - Bonfire.Tag","ref":"Bonfire.Tag.html#copyright-and-license"},{"type":"extras","doc":"# ActivityPub\n\nActivityPub Library for elixir.\n\n**WORK IN PROGRESS, TESTING FEDERATION WITH DIFFERENT IMPLEMENTATIONS IS UNDERWAY**","title":"ActivityPub","ref":"ActivityPub.html"},{"type":"extras","doc":"1. Add this library to your dependencies in `mix.exs`\n\n```\ndefp deps do\n  [...]\n  {:activity_pub, git: \"https://github.com/bonfire-networks/activity_pub.git\", branch: \"stable\"} # branch can \"stable\", or \"develop\" for the bleeding edge\nend\n```\n\n2. Create an adapter module. To start, one created at\n   `lib/my_app/adapter.ex` might look like\n\n```elixir\ndefmodule MyApp.Adapter do\n  @moduledoc \"\"\"\n  Adapter functions delegated from the `ActivityPub` Library\n  \"\"\"\n\n  @behaviour ActivityPub.Federator.Adapter\nend\n```\n\nNote that, due to the defined `@behavior`, Elixir will warn you that\nthe required functions\n\n  * `base_url/0`\n  * `get_actor_by_id/1`\n  * `get_actor_by_username/1`\n  * `get_follower_local_ids/1`\n  * `get_following_local_ids/1`\n  * `get_redirect_url/1`\n  * `handle_activity/1`\n  * `maybe_create_remote_actor/1`\n  * `maybe_publish_object/2`\n  * `update_local_actor/2`\n  * `update_remote_actor/1`\n\nhave not yet been implemented though you will be able to start your\napp. Defining these allows `ActivityPub` to handle ActivityPub HTTP\nand database calls and operations. An example of an implemented\nadaptor can be found\n[here](https://github.com/bonfire-networks/bonfire_federate_activitypub/tree/main/lib/adapter\n\"Link to file hosted on GitHub\").\n\nThen set it in config\n\n```\nconfig :activity_pub, :adapter, MyApp.Adapter\n```\n\n3. Set your application repo in config\n\n```\nconfig :activity_pub, :repo, MyApp.Repo\n```\n\n4. Create a new ecto migration and call `ActivityPub.Migration.up/0` from it\n\n5. Inject AP routes to your router by adding `use ActivityPub.Web.Router` to your app's router module\n\n6. Copy the default AP config to your app's confix.exs\n\n```\nconfig :activity_pub, :mrf_simple,\n  media_removal: [],\n  media_nsfw: [],\n  report_removal: [],\n  accept: [],\n  avatar_removal: [],\n  banner_removal: []\n\nconfig :activity_pub, :instance,\n  hostname: \"example.com\",\n  federation_publisher_modules: [ActivityPub.Federator.APPublisher],\n  federation_reachability_timeout_days: 7,\n  federating: true,\n  rewrite_policy: []\n\nconfig :activity_pub, :http,\n  proxy_url: nil,\n  user_agent: \"Your app name\",\n  send_user_agent: true,\n  adapter: [\n    ssl_options: [\n      # Workaround for remote server certificate chain issues\n      partial_chain: &:hackney_connect.partial_chain/1,\n      # We don't support TLS v1.3 yet\n      versions: [:tlsv1, :\"tlsv1.1\", :\"tlsv1.2\"]\n    ]\n  ]\n  ```\n\n7. Change the hostname value in the instance config block to your instance's hostname \n\n8. If you don't already have Oban set up, follow the [Oban installation intructions](https://hexdocs.pm/oban/installation.html#content) and add the AP queues:\n\n```\nconfig :my_app, Oban, queues: [federator_incoming: 50, federator_outgoing: 50, remote_fetcher: 20]\n```\n\nNow you should be able to compile and run your app and move over to integration.","title":"Installation - ActivityPub","ref":"ActivityPub.html#installation"},{"type":"extras","doc":"# Needle.UID\n\n[![hex.pm](https://img.shields.io/hexpm/v/needle_uid)](https://hex.pm/packages/needle_uid)\n[hexdocs](https://hexdocs.pm/needle_uid)\n\nHybrid prefixed UUIDv7 and ULID data type for Ecto (using [pride](https://github.com/bonfire-networks/pride) and [needle_ulid](https://github.com/bonfire-networks/needle_ulid))","title":"Needle.UID","ref":"Needle.Uid.html"},{"type":"extras","doc":"```elixir\n{:needle_uid, git: \"https://github.com/bonfire-networks/needle_uid\", branch: \"main\"}\n```","title":"Installation - Needle.UID","ref":"Needle.Uid.html#installation"},{"type":"extras","doc":"Copyright (c) 2024 Bonfire contributors\n\nLicensed under the terms of the MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright and License - Needle.UID","ref":"Needle.Uid.html#copyright-and-license"},{"type":"extras","doc":"# Needle.ULID\n\n[![hex.pm](https://img.shields.io/hexpm/v/needle_ulid)](https://hex.pm/packages/needle_ulid)\n[hexdocs](https://hexdocs.pm/needle_ulid)\n\nA ULID datatype and some postgres support for ULID operations (`min` and `max` functions and aggregates)\n\nOriginally forked from\n[ecto-ulid](https://github.com/TheRealReal/ecto-ulid) but the internals have been replaced with a dependency on [ex_ulid](https://github.com/omgnetwork/ex_ulid)","title":"Needle.ULID","ref":"Needle.Ulid.html"},{"type":"extras","doc":"```elixir\n{:needle_ulid, git: \"https://github.com/bonfire-networks/needle_ulid\", branch: \"main\"}\n```","title":"Installation - Needle.ULID","ref":"Needle.Ulid.html#installation"},{"type":"extras","doc":"Copyright (c) 2021 Bonfire contributors.\nCopyright (c) 2018 The RealReal, Inc.\nCopyright (c) 2020 needle_ulid contributors.\n\nLicensed under the terms of the MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright and License - Needle.ULID","ref":"Needle.Ulid.html#copyright-and-license"},{"type":"extras","doc":"# EctoSparkles\n\nSome helpers to sparkle on top of [Ecto](https://hexdocs.pm/ecto/Ecto.html) \n\n- [`EctoSparkles.proload/3`](#proload-documentation) and `EctoSparkles.join_preload/2` to join and preload associations with less verbosity\n- [`EctoSparkles.reusable_join/5`](#reusable_join-documentation) to avoid duplicating joins \n- `EctoSparkles.Migrator` to run migrations, rollbacks, etc in a release and `EctoSparkles.AutoMigrator` to automatically run them at startup.\n- `EctoSparkles.DataMigration`: a behaviour implemented for data migrations (generally backfills).\n- `EctoSparkles.Log` to log slow or possible N+1 queries with telemetry (showing stacktraces)\n- `EctoSparkles.Changesets.Errors` to generate readable errors for changesets\n\nNOTE: you need to put something like `config :ecto_sparkles, :otp_app, :your_otp_app_name` in your app's config.\n\n\n## `proload` documentation\n\nA macro which tells Ecto to perform a join and preload of associations.\n\nBy default, Ecto preloads associations using a separate query for each association, which can degrade performance.\n\nYou can make it run faster by using a combination of join/preload, but that requires a bit of boilerplate (see examples below).","title":"EctoSparkles","ref":"EctoSparkles.html"},{"type":"extras","doc":"```\n  query\n  |> join(:left, [o, activity: activity], assoc(:object), as: :object)\n  |> preload([l, activity: activity, object: object], activity: {activity, [object: object]})\n```\n\nEcto requires calling three different functions for this operation: `Query.join/4`, `Query.assoc/3` and `Query.preload/2`. \n\nHere's another example:\n\n```\n  Invoice\n  |> join(:left, [i], assoc(i, :customer), as: :customer)\n  |> join(:left, [i], assoc(i, :lines), as: :lines)\n  |> preload([lines: v, customers: c], lines: v, customer: c)\n```","title":"Examples using standard Ecto - EctoSparkles","ref":"EctoSparkles.html#examples-using-standard-ecto"},{"type":"extras","doc":"With `proload`, you can accomplish this with just one line of code:\n\n```\nproload(query, activity: [:object])\n```\n\nAnd for the other example:\n```\nproload(Invoice, [:customer, :lines])\n```\n\nAs a bonus, it automatically makes use of `reusable_join` so calling it multiple times with the same association has no ill effects.","title":"Example using proload - EctoSparkles","ref":"EctoSparkles.html#example-using-proload"},{"type":"extras","doc":"`join_preload` is `proload`'s sister macro with a slightly different syntax:\n\n```\n  join_preload(query, [:activity, :object])\n```\n\nand:\n```\n  Invoice\n  |> join_preload(:customer)\n  |> join_preload(:lines)\n```\n\n\n## `reusable_join` documentation\n\nA macro similar to `Ecto.Query.join/{4,5}`, but can be called multiple times \nwith the same alias.\n\nNote that only the first join operation is performed, the subsequent ones that use the same alias\nare just ignored. Also note that because of this behaviour, its mandatory to specify an alias when\nusing this function.\n\nThis is helpful when you need to perform a join while building queries one filter at a time,\nbecause the same filter could be used multiple times or you could have multiple filters that\nrequire the same join, which poses a problem with how the `filter/3` callback work, as you\nneed to return a dynamic with the filtering, which means that the join must have an alias,\nand by default Ecto raises an error when you add multiple joins with the same alias.\n\nTo solve this, it is recommended to use this macro instead of the default `Ecto.Query.join/{4,5}`,\nin which case there will be only one join in the query that can be reused by multiple filters.","title":"Example using join_preload - EctoSparkles","ref":"EctoSparkles.html#example-using-join_preload"},{"type":"extras","doc":"```elixir\nquery\n|> reusable_join(:left, [t1], t2 in \"other_table\", on: t1.id == t2.id, as: :other_a)\n|> reusable_join(:left, [t1], t2 in \"other_table\", on: t1.id == t2.id, as: :other_b)\n```","title":"Creating reusable joins - EctoSparkles","ref":"EctoSparkles.html#creating-reusable-joins"},{"type":"extras","doc":"- Copyright (c) 2021 Bonfire developers\n- Copyright (c) 2020 Up Learn\n- Copyright (c) 2019 Joshua Nussbaum \n\n- `join_preload` was originally forked from [Ecto.Preloader](https://github.com/joshnuss/ecto_preloader), licensed under WTFPL)\n- `reusable_join` was originally forked from [QueryElf](https://gitlab.com/up-learn-uk/query-elf), licensed under Apache License Version 2.0\n- original code licensed under Apache License Version 2.0","title":"Copyright - EctoSparkles","ref":"EctoSparkles.html#copyright"},{"type":"extras","doc":"# Entrepôt\n\nMinimal, composable file upload, storage, and streamed data migrations for Elixir apps, flexibly and with minimal dependencies.\n\n[![hex package](https://img.shields.io/hexpm/v/entrepot.svg)](https://hex.pm/packages/entrepot)\n[![CI status](https://github.com/bonfire-networks/entrepot/workflows/CI/badge.svg)](https://github.com/bonfire-networks/entrepot/actions)\n\n:warning: Although it's been used in production for over a year without issue, Entrepôt is experimental and still in active development. Accepting file uploads introduces specific security vulnerabilities. Use at your own risk.","title":"Entrepôt","ref":"Entrepot.html"},{"type":"extras","doc":"Entrepôt intentionally strips file storage logic down to its most composable parts and lets you decide how you want to use them. These components are: [storage](#storage), [upload](#upload), [locator](#locator), and optionally, [uploader](#uploader), which provides a more ergonomic API for the other 3.\n\nIt is intentionally agnostic about versions, transformation, validations, etc. Most of the convenience offered by other libraries around these features comes at the cost of locking in dependence on specific tools and hiding complexity. Entrepôt puts a premium on simplicity and explicitness.\n\nSo what does it do? Here's a theoretical example of a use case with an Ecto 1  schema, which stores the file retrieved from a URL, along with some additional metadata:\n\n```\n  def create_attachment(upload, user) do\n    Multi.new()\n    |> Multi.run(:upload, fn _, _ ->\n      YourStorage.put(upload, prefix: :crypto.hash(:md5, [user.id, url]) |> Base.encode16())\n    end)\n    |> Multi.insert(:attachment, fn %{upload: file_id} ->\n      %Attachment{file_data: Locator.new!(id: file_id, storage: YourStorage, metadata: %{type: \"document\"})\n    end)\n    |> Repo.transaction()\n  end\n```\n\nThen to access the file:\n\n```\n%Attachment{file_data: file} = attachment\n\n{:ok, contents} = Disk.read(file.id)\n```\n\n 1  *See [integrations](#integrations) for streamlined use with Ecto.*","title":"Concepts - Entrepôt","ref":"Entrepot.html#concepts"},{"type":"extras","doc":"A \"storage\" is a [behaviour](https://elixirschool.com/en/lessons/advanced/behaviours/) that implements the following \"file-like\" callbacks:\n\n* read\n* put\n* delete\n\nImplementing your own storage is as easy as creating a module that quacks this way. Each callback should accept an optional list of options as the last arg. Which options are supported is up to the module that implements the callbacks.","title":"Storage - Entrepôt","ref":"Entrepot.html#storage"},{"type":"extras","doc":"Upload is a [protocol](https://elixir-lang.org/getting-started/protocols.html) consisting of the following two functions:\n\n* contents\n* name\n\nA storage uses this interface to figure how to extract the file data from a given struct and how to identify it. See `Entrepot.Locator` for an example of how this protocol can be implemented.","title":"Upload - Entrepôt","ref":"Entrepot.html#upload"},{"type":"extras","doc":"Locators are the mediators between storages and uploads. They represent where an uploaded file was stored so it can be retrieved. They contain a unique id, the name of the storage to which the file was uploaded, and a map of user defined metadata.\n\nLocator also implements the upload protocol, which means moving a file from one storage to another is straightforward, and very useful for \"promoting\" a file from temporary (e.g. Disk) to permanent (e.g. S3) storage 2 :\n\n```\nold_file_data = %Locator{id: \"/path/to/file.jpg\", storage: Disk, metadata: %{}}\n{:ok, new_id} = S3.put(old_file_data)`\n```\n\nNote: always remember to take care of cleaning up the old file as Entrepot *never* automatically removes files:\n\n`Disk.delete(old_file_data.id)`","title":"Locator - Entrepôt","ref":"Entrepot.html#locator"},{"type":"extras","doc":"This helper was added in order to support DRYing up storage access. In most apps, there are certain types of assets that will be uploaded and handled in a similar, if not the same way, if only when it comes to where they are stored. You can `use` the uploader to codify the handling for specific types of assets.\n\n```\ndefmodule AvatarUploader do\n  use Entrepot.Uploader, storages: [cache: Disk, store: S3]\n\n  def build_options(upload, :cache, opts) do\n    Keyword.put(opts, :prefix, \"cache/#{Date.utc_today()}\")\n  end\n\n  def build_options(upload, :store, opts) do\n    opts\n    |> Keyword.put(:prefix, \"users/#{opts[:user_id]}/avatar\")\n    |> Keyword.drop([:user_id])\n  end\n\n  def build_metadata(upload, :store, _), do: [uploaded_at: DateTime.utc_now()]\nend\n```\n\nThen you can get the files where they need to be without constructing all the options everywhere they might be uploaded: `AvatarUploader.store(upload, :store, user_id: 1)`\n\nNote: as this example demonstrates, the function can receive arbitrary data and use it to customize how it builds the storage options before they are passed on.","title":"Uploader - Entrepôt","ref":"Entrepot.html#uploader"},{"type":"extras","doc":"Entrepôt's module design is intended to make it easy to implement your own custom utilities for handling files in the way you need. However, anticipating the most common use cases, that is facilitated with the following optional modules and add-on library.\n\nThere are several implementations some common file storages (including S3/Digital Ocean) and uploads (including `Plug.Upload`).","title":"Built-in Integrations - Entrepôt","ref":"Entrepot.html#built-in-integrations"},{"type":"extras","doc":"Entrepôt ships with the following storage implementations:\n\n- [Disk](#Disk)\n- [S3](#S3)\n- [RAM](#RAM)","title":"Storages - Entrepôt","ref":"Entrepot.html#storages"},{"type":"extras","doc":"This saves uploaded files to a local disk. It is useful for caching uploads while you validate other data, and/or perform some file processing.\n\n#### configuration\n\n- To set the root directory where files will be stored: `Application.put_env(:entrepot, Entrepot.Storages.Disk, root_dir: \"tmp\")`\n\n#### options\n\n- `prefix`: This should be a valid system path that will be appended to the root. If it does not exist, Disk will create it.\n- `force`: If this option is set to a truthy value, Disk will overwrite any existing file at the derived path. Use with caution!\n\n#### notes\n\nSince it is possible for files with the same name to be uploaded multiple times, Disk needs some additional info to uniquely identify the file. Disk _does not_ overwrite files with the same name by default. To ensure an upload can be stored, the combination of the `Upload.name` and `prefix` should be unique.","title":"Disk - Entrepôt","ref":"Entrepot.html#disk"},{"type":"extras","doc":"This storage uploads files to [AWS's S3](https://aws.amazon.com/s3/) service. It also works with [Digital Ocean Spaces](https://www.digitalocean.com/products/spaces/).\n\n#### configuration\n\n- To set the bucket where files will be stored: `Application.put_env(:entrepot, Entrepot.Storages.S3, bucket: \"whatever\")`\n\n#### options\n\n- prefix: A string to prepend to the upload's key\n- s3_options: Keyword list of option that will passed directly to ex_aws_s3\n\n#### dependencies\n\nSome of the implementations might require further dependencies (currently only [S3](#s3)-compatible storage) that you will also need to add to your project's deps\n```\n{:ex_aws, \"~> 2.0\"}\n{:ex_aws_s3, \"~> 2.0\"}\n```","title":"S3 - Entrepôt","ref":"Entrepot.html#s3"},{"type":"extras","doc":"Uses Elixir's [StringIO](https://hexdocs.pm/elixir/StringIO.html) module to store file contents in memory. Since the \"files\" are essentially just strings, they will not be persisted and will error if they are read back from a database, for example. However, operations are correspondingly very fast and thus suitable for tests or other temporary file operations.","title":"RAM - Entrepôt","ref":"Entrepot.html#ram"},{"type":"extras","doc":"There are implementation of the `Entrepot.Upload` protocol for the following modules:\n\n- [URI](#URI)\n- [Plug.Upload](#plugupload)","title":"uploads - Entrepôt","ref":"Entrepot.html#uploads"},{"type":"extras","doc":"This is useful for transferring files already hosted elsewhere, for example in cloud storage not controlled by your application, or a [TUS server](https://tus.io/).\n\nYou can use it to allow users to post a url string in lieu of downloading and reuploading a file. A Phoenix controller action implementing this feature might look like this:\n\n```\ndef attach(conn, %{\"attachment\" => %{\"url\" => url}}) when url != \"\" do\n  URI.parse(url)\n  |> Disk.put(upload)\n\n  # ...redirect, etc\nend\n```\n\n#### notes\n\nThis implementation imposes a hard timeout limit of 15 seconds to download the file from the remote location.","title":"URI - Entrepôt","ref":"Entrepot.html#uri"},{"type":"extras","doc":"This supports multi-part form submissions handled by [Plug](https://hexdocs.pm/plug/Plug.Upload.html#content).\n\n## [EntrepôtEcto](https://github.com/bonfire-networks/entrepot_ecto)\n\nThere is an external library (because it needs Ecto as a dependency) which provides `Entrepot.Ecto.Type` for Ecto schema fields to easily handle persisting Locator data in your repository.\n\n---\n\nNote: Entrepôt was originally forked from [Capsule](https://github.com/elixir-capsule)","title":"Plug.Upload - Entrepôt","ref":"Entrepot.html#plug-upload"},{"type":"extras","doc":"# EntrepôtEcto\n\nEcto integration for [Entrepôt](https://github.com/bonfire-networks/entrepot)\n\n[![hex package](https://img.shields.io/hexpm/v/entrepot_ecto.svg)](https://hex.pm/packages/entrepot_ecto)\n[![CI status](https://github.com/bonfire-networks/entrepot_ecto/workflows/CI/badge.svg)](https://github.com/bonfire-networks/capsulei_ecto/actions)\n\nThis package adds the following two features to support the use of Entrepôt with Ecto:\n\n1. Custom Type\n2. Changeset helper\n\n## `Entrepot.Ecto.Type`\n\nIn your Ecto schema specify your file field with the following type to get serialization of uploads (`Entrepot.Locator`) to maps:\n\n```\ndefmodule Attachment\n  use Ecto.Schema\n\n  schema \"attachments\" do\n    field :file_data, Entrepot.Ecto.Type\n  end\nend\n```\n\n## `Entrepot.Ecto.upload`\n\nCast params to uploaded data with `Entrepot.Ecto.upload`. In the style of Ecto.Multi, it accepts either an anonymous function or a module and function name, both with arity(2). The first argument passed will be a 2 element tuple representing the key/param pair and the second value will be the changeset.\n\nIt is expected to return either a success tuple with the `Locator` struct or the changeset. In the latter case the changeset will simply be passed on down the pipe.\n\nEven if you want to extract some metadata and apply a validation after you store the file, then the anonymous function may be all you need:\n\n  ```\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(%{\"file_data\" => some_upload}, [:file_data], fn {_field, upload}, changeset ->\n      case Entrepot.Storages.Disk.put(upload) do\n        {:ok, id} -> Entrepot.Locator.new!(id: id, storage: Entrepot.Storages.Disk)\n        error_tuple -> add_error(changeset, \"upload just...failed\")\n      end\n  end)\n  |> validate_attachment\n\n  ```\n\nHowever, if you want to do more complicated things with the upload before storing it (such as resizing, encrypting, etc) then creating a module is probably the way to go.\n\n  ```\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(%{\"file_data\" => some_upload}, [:file_data], MyApp.Attacher, :attach)\n  ```\n---","title":"EntrepôtEcto","ref":"EntrepotEcto.html"},{"type":"extras","doc":"Since the file is written to disk as part of the changeset, you will probably want to do some cleanup depending on the error status. On success you may want to move the file from a temporary location to permanent storage (especially if the latter is in the cloud and costs a network request). On failure you may want to delete the file (unless you are handling that with some sort of periodic task).\n\nOne good option is to wrap your Repo operation in another function to handle both as asynchronous Tasks so they don't block the parent process:\n\n  ```\n  def create_attachment(user, attrs) do\n  %Attachment{}\n  |> Ecto.Changeset.change()\n  |> Entrepot.Ecto.upload(attrs, [:file_data], MyApp.Attacher, :attach)\n  |> Repo.insert()\n  |> case do\n    {:ok, attachment} = success_tuple ->\n      Task.Supervisor.start_child(\n        YourApp.Supervisor,\n        fn -> Attachment.promote_upload(attachment) end\n      )\n\n      success_tuple\n\n    {:error, %{changes: %{file_data: file_data}}} = error_tuple ->\n      Task.Supervisor.start_child(\n        YourApp.Supervisor,\n        fn -> Disk.delete(file_data.id) end\n      )\n\n      error_tuple\n  end\n  ```\n\nIn this example, `Attachment.promote_upload(attachment)` would handle moving the file and updating the file data in the db. It uses `Multi` to ensure all operations succeed or fail together:\n\n  ```\n  def promote_upload(attachment) do\n    Multi.new()\n    |> Multi.run(:copy_file, fn _, _ ->\n      NetworkStorage.put(attachment.file_data.id)\n    end)\n    |> Multi.update(:updated_schema, fn %{move_file: new_data} ->\n      Attachment.changeset(attachment, %{file_data: new_data })\n    end)\n    |> Multi.run(:delete_old_file, fn _, _ ->\n      Disk.delete(attachment.file_data.id)\n    end)\n    |> Repo.transaction()\n  end\n  ```","title":"Upload cleanup - EntrepôtEcto","ref":"EntrepotEcto.html#upload-cleanup"},{"type":"extras","doc":"Since Locators are serialized as plain maps, it is easy to stub out file operations in fixtures/factories by inserting data directly into the db without going through a changeset:\n\n  ```\n  %Attachment{\n    file_data: %{\n      id: \"fake.jpg\",\n      metadata: %{name: \"fake\"}, size: 100\n    }\n  }\n  |> Repo.insert!()\n  ```\n\nIf you want to run tests on the actual file operations, you will need to make sure the id points to an actual file location that the configured storage understands.\n\nYou can configure your test environment to use the RAM storage:\n\n  ```\n  {:ok, id} = Entrepot.Storages.RAM.put(some_upload)\n\n  Repo.insert!(%Attachment{file_data: %{id: id, storage: Entrepot.Storages.RAM}})\n  ```\n\nOr, for maximum performance, you can a simple struct that implements the `Upload` protocol:\n\n  ```\n  defmodule Entrepot.MockUpload do\n    defstruct content: \"Hi, I'm a file\", name: \"hi\"\n\n    defimpl Entrepot.Upload do\n      def contents(mock), do: {:ok, mock.content}\n\n      def name(mock), do: mock.name\n    end\n  end\n  ```\n\n---\nNote: Entrepôt was originally forked from [Capsule](https://github.com/elixir-capsule)","title":"Testing - EntrepôtEcto","ref":"EntrepotEcto.html#testing"},{"type":"extras","doc":"# Paginator\n\n[![Build status](https://github.com/duffelhq/paginator/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/duffelhq/paginator/actions?query=branch%3Amain)\n[![Inline docs](http://inch-ci.org/github/duffelhq/paginator.svg)](http://inch-ci.org/github/duffelhq/paginator)\n\n`Paginator` implements [cursor-based pagination](http://use-the-index-luke.com/no-offset) for Elixir [Ecto](https://github.com/elixir-ecto/ecto).\n\n[Documentation](https://hexdocs.pm/paginator)","title":"Paginator","ref":"Paginator.html"},{"type":"extras","doc":"There are several ways to implement pagination in a project and they all have pros and cons depending on your situation.","title":"Why? - Paginator","ref":"Paginator.html#why"},{"type":"extras","doc":"This is the easiest method to use and implement: you just have to set `LIMIT` and `OFFSET` on your queries and the\ndatabase will return records based on this two parameters. Unfortunately, it has two major drawbacks:\n\n* Inconsistent results: if the dataset changes while you are querying, the results in the page will shift and your user\nmight end seeing records they have already seen and missing new ones.\n\n* Inefficiency: `OFFSET N` instructs the database to skip the first N results of a query. However, the database must still\nfetch these rows from disk and order them before it can returns the ones requested. If the dataset you are querying is\nlarge this will result in significant slowdowns.","title":"Limit-offset - Paginator","ref":"Paginator.html#limit-offset"},{"type":"extras","doc":"This method relies on opaque cursor to figure out where to start selecting records. It is more performant than\n`LIMIT-OFFSET` because it can filter records without traversing all of them.\n\nIt's also consistent, any insertions/deletions before the current page will leave results unaffected.\n\nIt has some limitations though: for instance you can't jump directly to a specific page. This may\nnot be an issue for an API or if you use infinite scrolling on your website.","title":"Cursor-based (a.k.a keyset pagination) - Paginator","ref":"Paginator.html#cursor-based-a-k-a-keyset-pagination"},{"type":"extras","doc":"* http://use-the-index-luke.com/no-offset\n* http://use-the-index-luke.com/sql/partial-results/fetch-next-page\n* https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/\n* https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines","title":"Learn more - Paginator","ref":"Paginator.html#learn-more"},{"type":"extras","doc":"```elixir\ndefmodule MyApp.Repo do\n  use Ecto.Repo,\n    otp_app: :my_app,\n    adapter: Ecto.Adapters.Postgres\n\n  use Paginator\nend\n\nquery = from(p in Post, order_by: [asc: p.inserted_at, asc: p.id])\n\npage = MyApp.Repo.paginate(query, cursor_fields: [:inserted_at, :id], limit: 50)\n\n# `page.edges` contains all the entries for this page.\n# `page.page_info` contains the meta-data associated with this page (cursors, limit, total count)\n```","title":"Getting started - Paginator","ref":"Paginator.html#getting-started"},{"type":"extras","doc":"Add `paginator` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [{:paginator, \"~> 1.0.4\"}]\nend\n```","title":"Install - Paginator","ref":"Paginator.html#install"},{"type":"extras","doc":"1. Add `Paginator` to your repo.\n\n    ```elixir\n    defmodule MyApp.Repo do\n      use Ecto.Repo,\n        otp_app: :my_app,\n        adapter: Ecto.Adapters.Postgres\n\n      use Paginator\n    end\n    ```\n\n2. Use the `paginate` function to paginate your queries.\n\n    ```elixir\n    query = from(p in Post, order_by: [asc: p.inserted_at, asc: p.id])\n\n    # return the first 50 posts\n    %{edges: edges, page_info: page_info} = Repo.paginate(query, cursor_fields: [:inserted_at, :id], limit: 50)\n\n    # assign the `after` cursor to a variable\n    cursor_after = page_info.end_cursor\n\n    # return the next 50 posts\n    %{edges: edges, page_info: page_info} = Repo.paginate(query, after: cursor_after, cursor_fields: [{:inserted_at, :asc}, {:id, :asc}], limit: 50)\n\n    # assign the `before` cursor to a variable\n    cursor_before = page_info.start_cursor\n\n    # return the previous 50 posts (if no post was created in between it should be the same list as in our first call to `paginate`)\n    %{edges: edges, page_info: page_info} = Repo.paginate(query, before: cursor_before, cursor_fields: [:inserted_at, :id], limit: 50)\n\n    # return total count\n    # NOTE: this will issue a separate `SELECT COUNT(*) FROM table` query to the database.\n    %{edges: edges, page_info: page_info} = Repo.paginate(query, include_total_count: true, cursor_fields: [:inserted_at, :id], limit: 50)\n\n    IO.puts \"total count: #{page_info.total_count}\"\n    ```","title":"Usage - Paginator","ref":"Paginator.html#usage"},{"type":"extras","doc":"`Repo.paginate/4` will throw an ArgumentError should it detect an executable term in the cursor parameters passed to it (`before`, `after`).\nThis is done to protect you from potential side-effects of malicious user input, see [paginator_test.exs](https://github.com/duffelhq/paginator/blob/master/test/paginator_test.exs#L820).","title":"Security Considerations - Paginator","ref":"Paginator.html#security-considerations"},{"type":"extras","doc":"If you want to reap all the benefits of this method it is better that you create indexes on the columns you are using as\ncursor fields.","title":"Indexes - Paginator","ref":"Paginator.html#indexes"},{"type":"extras","doc":"```elixir\n# If your cursor fields are: [:inserted_at, :id]\n# Add the following in a migration\n\ncreate index(\"posts\", [:inserted_at, :id])\n```","title":"Example - Paginator","ref":"Paginator.html#example"},{"type":"extras","doc":"* This method requires a deterministic sort order. If the columns you are currently using for sorting don't match that\ndefinition, just add any unique column and extend your index accordingly.\n* You need to add order_by clauses yourself before passing your query to `paginate/2`. In the future we might do that\nfor you automatically based on the fields specified in `:cursor_fields`.\n* There is an outstanding issue where Postgrex fails to properly builds the query if it includes custom PostgreSQL types.\n* This library has only be tested with PostgreSQL.","title":"Caveats - Paginator","ref":"Paginator.html#caveats"},{"type":"extras","doc":"Documentation is written into the library, you will find it in the source code, accessible from `iex` and of course, it\nall gets published to [hexdocs](http://hexdocs.pm/paginator).","title":"Documentation - Paginator","ref":"Paginator.html#documentation"},{"type":"extras","doc":"","title":"Contributing - Paginator","ref":"Paginator.html#contributing"},{"type":"extras","doc":"Clone the repo and fetch its dependencies:\n\n```\n$ git clone https://github.com/duffelhq/paginator.git\n$ cd paginator\n$ mix deps.get\n$ mix test\n```","title":"Running tests - Paginator","ref":"Paginator.html#running-tests"},{"type":"extras","doc":"```\n$ mix docs\n```","title":"Building docs - Paginator","ref":"Paginator.html#building-docs"},{"type":"extras","doc":"See [LICENSE](https://github.com/duffelhq/paginator/blob/master/LICENSE.txt)","title":"LICENSE - Paginator","ref":"Paginator.html#license"},{"type":"extras","doc":"# Voodoo\n\n`Voodoo` is a drop-in replacement for the old-style Phoenix path helpers (before `Phoenix.VerifiedRoutes` was introduced) which is more convenient to use.","title":"Voodoo","ref":"Voodoo.html"},{"type":"extras","doc":"# Untangle\n\nLogging/inspecting data, and timing functions, with code location information.","title":"Untangle","ref":"Untangle.html"},{"type":"extras","doc":"`Untangle` provides alternatives for `IO.inspect` and the macros in Elixir's `Logger` to output code location information. It also provides a polyfill for `dbg` which was introduce in Elixir 1.14\n\n![screenshot](priv/screenshot.png \"Screenshot showing sample logs (shown when running the library tests)\")\n\nThe first argument is `inspect`ed and the second argument (if provided) is used as a label:\n\n```\n> import Untangle\nUntangle\n> debug(:no, \"the answer is\") # log at debug\n11:19:09.915 [debug] [iex:2] the answer is: :no\n:no\n> dump(%{a: :map}, \"it\") # inspect something on stdout\n[iex:3] it: %{a: :map}\n%{a: :map}\n```\n\nWhen used in a code file, the location information becomes more useful, e.g.:\n\n```\n[lib/test_untangle.ex:15@Test.Untangle.example/2] Here's an empty list: []\n```\n\nYou may also notice from the iex output that it returns its first argument. This makes it ideal for inserting into a pipeline for debugging purposes:\n\n```elixir\ndo_something()\n|> debug(\"output of do_something/0\")\n```\n\nWhen you are done debugging something, the location of the debug statement is already in the output so you know where to remove it, comment it out, or simply change `warn` or `info` for `debug` if you only need it during development :-)","title":"Logging/inspecting - Untangle","ref":"Untangle.html#logging-inspecting"},{"type":"extras","doc":"You can decorate functions to measure and log their execution time:\n\n```\nuse Untangle\n\n@decorate time()\ndef fun(), do: :stuff\n```\n\nwill output something like `[info] Time to run MyModule.fun/0: 1 ms`","title":"Timing functions - Untangle","ref":"Untangle.html#timing-functions"},{"type":"extras","doc":"If [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `untangle` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:untangle, \"~> 0.3\"}\n  ]\nend\n```\n\n# Configure as default `dbg/2` handler","title":"Installation - Untangle","ref":"Untangle.html#installation"},{"type":"extras","doc":"`config :elixir, :dbg_callback, {Untangle, :custom_dbg, []}`\n\n# Docs\n\nThe docs can be found at [https://hexdocs.pm/untangle](https://hexdocs.pm/untangle).","title":"In config/config.exs - Untangle","ref":"Untangle.html#in-config-config-exs"},{"type":"extras","doc":"Copyright (c) 2022 Bonfire contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Untangle","ref":"Untangle.html#copyright-and-license"},{"type":"extras","doc":"# Arrows\n\nA handful of (mostly) arrow macros with superpowers.","title":"Arrows","ref":"Arrows.html"},{"type":"extras","doc":"The package can be installed by adding `arrows` to your list of dependencies in `mix.exs`: \n\n```elixir\ndef deps do\n  [\n    {:arrows, \"~> 0.2.0\"}\n  ]\nend\n```\n\nOr via git:\n```elixir\ndef deps do\n  [\n    {:arrows, git: \"https://github.com/bonfire-networks/arrows\", branch: \"main\"}\n  ]\nend\n```","title":"Installation - Arrows","ref":"Arrows.html#installation"},{"type":"extras","doc":"The Elixir [|> (\"pipe\") operator](https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2) is one of the things that seems to get people excited about elixir. Probably in part because you then don't have to keep coming up with function names. Unfortunately it's kind of limiting. \nThe moment you need to pipe a parameter into a position that isn't the first one, it breaks down and you have to drop out of the pipeline format or write a secondary function to handle it.\n\nNot any more! By simply inserting `...` where you would like the value to be inserted, `Arrows` will override where it is placed. This allows you to keep on piping while accommodating that function with the annoying argument order. `Arrows` was inspired by [an existing library](https://hexdocs.pm/magritte/Magritte.html). \n\nHere is part of the test suite in lieu of examples:\n\n```elixir\ndefmodule ArrowsTest do\n  use ExUnit.Case\n  use Arrows\n\n  def double(x), do: x * 2\n  def double_fst(x, _), do: x * 2\n  def double_snd(_, x), do: x * 2\n  def add_snd_thd(_, x, y), do: x + y\n\n  test \"|>\" do\n    assert 4 == (2 |> double)\n    assert 4 == (2 |> double())\n    assert 4 == (2 |> double(...))\n    assert 8 == (2 |> double(double(...)))\n    assert 4 == (2 |> double_fst(1))\n    assert 4 == (2 |> double_fst(..., 1))\n    assert 8 == (2 |> double_fst(double(...), 1))\n    assert 4 == (2 |> double_snd(1, ...))\n    assert 8 == (2 |> double_snd(1, double(...)))\n    assert 3 == (2 |> add_snd_thd(1, ..., 1))\n    assert 4 == (2 |> add_snd_thd(1, ..., ...))\n    assert 6 == (2 |> add_snd_thd(1, ..., double(...)))\n    for x <- [:yes, 2, nil, false] do\n      assert {:ok, x} == (x |> {:ok, ...})\n    end\n  end\nend\n```\n\nA few little extra features you might notice here:\n* You can move the parameter into a subexpression, as in `2 |> double_fst(double(...), 1)` where\n  double will be called before the parameter is passed to `double_fst`.\n* You can use `...` multiple times, substituting it in multiple places.\n* The right hand side need not even be a function call, you can use any expression with `...`.","title":"Documentation - Arrows","ref":"Arrows.html#documentation"},{"type":"extras","doc":"`Arrows` also provides an `ok-pipe` operator, `~>`, which only pipes into the next function if the result from the last one was considered a success. It's inspired by [OK](https://hexdocs.pm/ok/readme.html), but we have chosen to do things slightly differently so it better fits with our regular pipe.\n\ninput                    | result          |\n:----------------------- | :-------------- |\n`{:ok, x}`               | `fun.(x)`       |\n`{:error, e}`            | `{:error, e}`   |\n`nil`                    | `nil`           |\n`x when not is_nil(x)`   | `fun.(x)`       |\n\nIn the case of a function returning an ok/error tuple being on the left hand side, this is straightforward to determine. In the event of `{:ok, x}`, x will be passed into the right hand side to call. In the event of `{:error, x}`, the result will be `{:error, x}`.\n\nWe also deal with a lot of functions that indicate failure by returning nil. `~>` tries to 'do what I mean' for both of these so you can have one pipe operator to rule them all. If `nil` is a valid result, you must thus be sure to wrap it in an `ok` tuple when it occurs on the left hand side of `~>`.\n\n`|>` and `~>` compose in the way you'd expect; i.e. a `~>` receiving an error tuple or nil will stop executing the rest of the chain of (mixed) pipes.\n\n\nDocumentation can be found at [https://hexdocs.pm/arrows](https://hexdocs.pm/arrows).","title":"Ok-pipe - Arrows","ref":"Arrows.html#ok-pipe"},{"type":"extras","doc":"# Exto\n\n[![hex.pm](https://img.shields.io/hexpm/v/exto)](https://hex.pm/packages/exto)\n[hexdocs](https://hexdocs.pm/exto)\n\n`Exto` provides configuration-driven Ecto schema extensibility","title":"Exto","ref":"Exto.html"},{"type":"extras","doc":"","title":"Usage - Exto","ref":"Exto.html#usage"},{"type":"extras","doc":"```elixir\ndefmodule My.Schema do\n  use Ecto.Schema\n  import Exto, only: [flex_schema: 1]\n\n  schema \"my_table\" do\n    field :name, :string # just normal schema things\n    flex_schema(:my_app) # boom! give me the stuff\n  end\nend\n```\n\nOr if you want the `Access` protocol to be auto-implemented on the struct (because [the reasoning](https://hexdocs.pm/elixir/Access.html#module-maps-and-structs) for not having it on structs doesn't apply as much when using Exto), you can pull in the `Accessible` library by simply using `use Exto` instead of `import Exto`.","title":"Example Schema - Exto","ref":"Exto.html#example-schema"},{"type":"extras","doc":"```elixir\nconfig :my_app, My.Schema,\n  belongs_to: [\n    foo: Foo,                   # belongs_to :foo, Foo\n    bar: {Bar, type: :integer}, # belongs_to :bar, Bar, type: :integer\n  ],\n  field: [\n    foo: :string,                # field :foo, :string\n    bar: {:integer, default: 4}, # field :foo, :integer, default: 4\n  ],\n  has_one: [\n    foo: Foo,                             # has_one :foo, Foo\n    bar: {Bar, foreign_key: :the_bar_id}, # has_one :bar, Bar, foreign_key: :the_bar_id\n  ]\n  has_many: [\n    foo: Foo,                             # has_many :foo, Foo\n    bar: {Bar, foreign_key: :the_bar_id}, # has_many :bar, Bar, foreign_key: :the_bar_id\n  ]\n  many_to_many: [\n    foo: Foo,                         # many_to_many :foo, Foo\n    bar: {Bar, join_through: FooBar}, # many_to_many :bar, Bar, :join_through: FooBar\n  ]\n```\n\nThis example won't work very well because it is redefining `foo` and `bar` 5 times, but you get the point.\n\nReading of configuration is done during compile time. The relations will be baked in during compilation, thus:\n\n* Do not expect this to work in runtime config.\n* You will need to rebuild all dependencies which use this macro when you change their configuration.","title":"Example configuration - Exto","ref":"Exto.html#example-configuration"},{"type":"extras","doc":"Copyright (c) 2020 Exto Contributors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","title":"Copyright and License - Exto","ref":"Exto.html#copyright-and-license"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.35.1"}}