name: Maybe release
on:
  push:
  # workflow_run: # uncomment to run after tests have run
  #   workflows: ["Maybe test"]
  #   types:
  #     - completed
  #   branches:
  #     - main

jobs:
  check_version_changed:
    uses: ./.github/workflows/check_version_changed.yaml

  docker:
    needs: check_version_changed
    if: ${{ needs.check_version_changed.outputs.version_changed == 'true' }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        flavour: ["social", "open_science", "federated_archives"] # "ember" , "cooperation"]
        platforms: ["linux/amd64", "linux/arm64"] # , "linux/arm/v7"
        include:
          - platforms: "linux/amd64"
            arch: "amd64"
          - platforms: "linux/arm64"
            arch: "aarch64"
          # - platforms: "linux/arm/v7"
          #   arch: "arm32v7"
    name: ${{ matrix.flavour }} - Docker on ${{ matrix.platforms }} 
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      FLAVOUR: ${{ matrix.flavour }}
      DOCKER_REPO: bonfire
      WITH_AI: "0"
      WITH_LV_NATIVE: "0"
      WITH_IMAGE_VIX: "0"
      WITH_API_GRAPHQL: "1"
      # ^ TEMP workaround for evision_nif crash on app start
      MIX_ENV: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2 # needed for action-detect-and-tag-new-version
      - name: Detect version
        id: version
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          create-tag: false
          version-command: |
            grep -m 1 'version:' mix.exs | cut -d '"' -f2
      - name: Cancel any already running releases workflows
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          workflow_id: ${{ github.workflow }}
          ignore_sha: true
      # - 
      #   name: Get branch names
      #   id: branch-name
      #   uses: tj-actions/branch-names@v4
      - name: Load .tool-versions to env
        run: |
          ls -la && chmod +x tool-versions-to-env.sh
          # Run the script to extract versions and save to output
          ./tool-versions-to-env.sh 2 
      - name: Set computed env vars
        run: |
          # Strip any -otp suffix from ELIXIR_VERSION
          if [[ "$ELIXIR_VERSION" == *-otp-* ]]; then
            ELIXIR_VERSION="${ELIXIR_VERSION%%-otp-*}"
            echo "ELIXIR_VERSION=$ELIXIR_VERSION" >> $GITHUB_ENV
          fi

          if [ "${{ matrix.arch }}" = "arm32v7" ]; then
            ERLANG_VERSION_MAJOR="${ERLANG_VERSION%%.*}" # e.g. 27 from 27.3.4
            export ELIXIR_DOCKER_IMAGE="arm32v7/elixir:${ELIXIR_VERSION}-otp-${ERLANG_VERSION_MAJOR}-alpine"
            export RUSTLER_BUILD_ALL="true"
          else
            export ELIXIR_DOCKER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-alpine-${ALPINE_VERSION}"
          fi
          echo "ELIXIR_DOCKER_IMAGE=$ELIXIR_DOCKER_IMAGE" >> $GITHUB_ENV
          echo "RUSTLER_BUILD_ALL=$RUSTLER_BUILD_ALL" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Install tools 
        run: sudo apt-get update -y && sudo apt-get install -y cargo && cargo install just && echo "/github/home/.cargo/bin" >> $GITHUB_PATH 
      - 
        name: Configure Git authentication for GitHub
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
      # - 
      #   name: Prepare env
      #   run: just config 
      - 
        name: Flavour setup 
        run: just _clone_flavour_apps && just _config_flavour ${{ env.FLAVOUR }} && just _flavour_install ${{ env.FLAVOUR }} --yes && just flavour_make_symlinks ${{ env.FLAVOUR }} && just _rel-prepare 
      -
        name: Build 
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.release
          platforms: ${{ matrix.platforms }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true #false
          build-args: |
            FLAVOUR=${{ env.FLAVOUR }}
            WITH_AI=${{ env.WITH_AI }}
            WITH_LV_NATIVE=${{ env.WITH_LV_NATIVE }}
            WITH_IMAGE_VIX=${{ env.WITH_IMAGE_VIX }}
            WITH_API_GRAPHQL=${{ env.WITH_API_GRAPHQL }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
            ELIXIR_DOCKER_IMAGE=${{ env.ELIXIR_DOCKER_IMAGE }}
            RUSTLER_BUILD_ALL=${{ env.RUSTLER_BUILD_ALL }}
      # - name: Push to docker
      #   # if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }} # comment/uncomment this line to only push release to docker when tests pass
      #   id: docker_push
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: Dockerfile.release
      #     platforms: ${{ matrix.platforms }}
      #     cache-from: type=gha
      #     push: true
      #     build-args: |
      #       FLAVOUR=${{ env.FLAVOUR }}
      #       WITH_AI=${{ env.WITH_AI }}
      #       WITH_LV_NATIVE=${{ env.WITH_LV_NATIVE }}
      #       WITH_IMAGE_VIX=${{ env.WITH_IMAGE_VIX }}
      #       ALPINE_VERSION=${{ env.ALPINE_VERSION }}
      #       ELIXIR_DOCKER_IMAGE=${{ env.ELIXIR_DOCKER_IMAGE }}
      #       RUSTLER_BUILD_ALL=${{ env.RUSTLER_BUILD_ALL }}
          tags: |
            bonfirenetworks/${{ env.DOCKER_REPO }}:latest-${{ env.FLAVOUR }}-${{ matrix.arch }}
            bonfirenetworks/${{ env.DOCKER_REPO }}:${{steps.version.outputs.current-version}}-${{ env.FLAVOUR }}-${{ matrix.arch }}
          #  ghcr.io/bonfire-networks/bonfire-app:latest-${{ env.FLAVOUR }}-${{ matrix.arch }}
          #  ghcr.io/bonfire-networks/bonfire-app:${{steps.version.outputs.current-version}}-${{ env.FLAVOUR }}-${{ matrix.arch }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker_multi_arch_image:
    name: Create and push multi-arch manifest for ${{ matrix.flavour }}
    needs: docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour: ["social", "open_science", "federated_archives"] # NOTE: should match the list of flavours in the docker job above
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push manifest
        run: | # NOTE: the list of platforms in the for loop must match the `arch` names corresponding to the `platforms` matrix enabled in the docker job above 
          set -e
          images=""
          for platform in amd64 aarch64 arm32v7; do
            image=bonfirenetworks/bonfire:latest-${{ matrix.flavour }}-$(echo $platform | sed 's#/#-#g')
            if docker buildx imagetools inspect $image > /dev/null 2>&1; then
              images="$images $image"
            else
              echo "Skipping missing image: $image"
            fi
          done
          if [ -n "$images" ]; then
            docker buildx imagetools create -t bonfirenetworks/bonfire:latest-${{ matrix.flavour }} $images
          else
            echo "No images found for manifest, skipping."
          fi

  elixir_release_amd64: 
    needs: check_version_changed
    if: ${{ needs.check_version_changed.outputs.version_changed == 'true' }}
    name: ${{ matrix.flavour }} - OTP on amd64 bullseye # i.e. what's required by Yunohost
    strategy:
      matrix:
        flavour: ["social"] # "open_science", "federated_archives", "ember", "community", "cooperation"
    runs-on: ubuntu-latest
    container: debian:bullseye
    # container: debian:bullseye-slim
    env:
      FLAVOUR: ${{ matrix.flavour }}
      WITH_DOCKER: no
      MIX_ENV: prod
      TERM: linux
      WITH_AI: "0"
      WITH_LV_NATIVE: "0"
      AUTO_YES: "true"
    steps:
      - name: Cancel any already running releases workflows
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          workflow_id: ${{ github.workflow }}
          ignore_sha: true
      - name: Install git # needed for checkout with fetch-depth
        run: apt-get update -q -y && apt-get install -q -y git
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2 # needed for action-detect-and-tag-new-version
      - name: Detect version
        id: version
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          create-tag: true
          version-command: |
            grep -m 1 'version:' mix.exs | cut -d '"' -f2
      - name: Trust my repo
        run: export GIT_CEILING_DIRECTORIES=/__w && git config --global --add safe.directory $(realpath .) # see https://github.com/actions/checkout/issues/760
      - name: Add path
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - 
        name: Install system deps & tools
        run: |
          chmod +x deps-debian-build.sh && ./deps-debian-build.sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/mise/shims" >> $GITHUB_PATH
      - 
        name: Check tools
        run: |
          echo $PATH
          whoami
          which erl
          elixir -v
          just --version
          yarn -v
          mix -v
      - 
        name: Install mix tools
        run: |
          mix local.hex --force
          mix local.rebar --force
      - 
        name: Configure Git authentication for GitHub
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
      -
        name: Initialize Bonfire configuration
        run: |
          just config
      -
        name: Clone and setup flavour apps
        run: |
          just build
          just _clone_flavour_apps
          just flavour_make_symlinks ${{ env.FLAVOUR }}
          just deps-fetch --only prod
      -
        name: Verify flavour setup
        run: |
          echo "Checking if deps.js.sh exists..."
          ls -la ./config/current_flavour/deps.js.sh || echo "WARNING: deps.js.sh not found, js dependencies may not be installed correctly"
          echo "Current flavour contents:"
          ls -la ./config/current_flavour/ || echo "current_flavour directory not found"
      -
        name: Patch install scripts to respect AUTO_YES
        run: |
          find . -name "install.sh" -type f -exec sed -i 's/^AUTO_YES=false$/AUTO_YES=${AUTO_YES:-false}/' {} \;
      -
        name: Complete flavour installation
        run: |
          just _deps-post-get
          just _flavour_install ${{ env.FLAVOUR }}
      -
        name: Build app
        uses: gacts/run-and-post-run@v1
        with:
          run: |
            just rel-build
            cd _build/prod/rel && tar -czvf bonfire-${{ env.FLAVOUR }}-amd64-debian-bullseye.tar.gz bonfire
          post: |
            ls .
            # ls -la data/config/current_flavour/assets/
            # ls -la data/config/current_flavour/assets/hooks/
      - name: Release to github
        if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }} # comment/uncomment this line to only push release to docker when tests pass
        uses: softprops/action-gh-release@v2
        with:
          files: _build/prod/rel/bonfire-*.tar.gz
          name: Unstable - ${{ steps.version.outputs.tag }}
          tag_name: ${{ steps.version.outputs.tag }}
      # - name: Publish release 
      #   uses: mayel/actions/bin/ghr@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     RELEASE_PATH: _build/prod/rel
      #     CI: true

  # elixir_release_extra_architectures:
  #   # The host should always be linux
  #   runs-on: ubuntu-latest
  #   name: ${{ matrix.flavour }} - OTP on ${{ matrix.arch }} ${{ matrix.distro }} 
  #   # Run steps on a matrix of several arch/distro combinations
  #   strategy:
  #     matrix:
  #       flavour: ["ember"] # , "cooperation"]
  #       arch: ["aarch64"] # "armv7"] # NOTE: run-on-arch-action does not support amd64
  #       distro: ["bullseye"] 
  #       include:
  #         - arch: aarch64
  #           family: debian
  #           distro: bullseye
  #           # base_image: hexpm/elixir:1.17.0-erlang-27.0-debian-bullseye-20240408 # use bare debian so we build with same versions as in Yunohost recipe
  #         # - arch: armv7
  #         #   family: debian
  #         #   distro: bullseye
  #         #  # base_image: elixir:1.14-slim
  #         # - arch: aarch64
  #         #   distro: alpine_latest
  #         # - arch: none 
  #         #   distro: none
  #         #   base_image: debian:bullseye-slim # Error: run-on-arch: If arch and distro are not specified, base_image is required
  #         #   family: debian
  #         #   arch_alt: amd64
  #         #   distro_alt: bullseye
  #   env:
  #     FLAVOUR: ${{ matrix.flavour }}
  #     WITH_DOCKER: no
  #     MIX_ENV: prod
  #     TERM: linux
  #   steps:
  #     - 
  #       name: Checkout
  #       uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 2 # needed for action-detect-and-tag-new-version
  #     - 
  #       name: Detect version
  #       id: version
  #       uses: salsify/action-detect-and-tag-new-version@v2
  #       with:
  #         create-tag: false # tag already created in other job
  #         version-command: |
  #           grep -m 1 'version:' mix.exs | cut -d '"' -f2
  #     - 
  #       if: steps.version.outputs.current-version == steps.version.outputs.previous-version
  #       name: Cancel workflow if the version has not changed
  #       uses: andymckay/cancel-action@0.2
  #     - uses: uraimo/run-on-arch-action@v2.7.2
  #       name: Build artifact
  #       id: build
  #       with:
  #         arch: ${{ matrix.arch }}
  #         distro: ${{ matrix.distro }}

  #         # Not required, but speeds up builds
  #         githubToken: ${{ github.token }}

  #         # Create an artifacts directory
  #         setup: |
  #           echo "Setup!..."
  #           mkdir -p "${PWD}/artifacts"
  #           # cp .tool-versions "${PWD}/artifacts/"

  #         # Mount the artifacts directory as /artifacts in the container
  #         dockerRunArgs: |
  #           --volume "${PWD}/artifacts:/artifacts"

  #         # Pass some environment variables to the container
  #         env: | # YAML, but pipe character is necessary
  #           artifact_name: bonfire-${{ env.FLAVOUR }}-${{ matrix.arch || matrix.arch_alt }}-${{ matrix.family }}-${{ matrix.distro || matrix.distro_alt }}.tar.gz

  #         # The shell to run commands with in the container
  #         shell: /bin/bash

  #         # Install some dependencies in the container. This speeds up builds if
  #         # you are also using githubToken. Any dependencies installed here will
  #         # be part of the container image that gets cached, so subsequent
  #         # builds don't have to re-install them. The image layer is cached
  #         # publicly in your project's package repository, so it is vital that
  #         # no secrets are present in the container state or logs.
  #         install: |
  #           echo "Install!..."
  #           export TERM=${{ env.TERM }}
  #           case "${{ matrix.distro }}" in
  #             ubuntu*|jessie|stretch|buster|bullseye)
  #               # chmod +x deps-debian-build.sh && ./deps-debian-build.sh
  #               # TODO ^ how to use the script here? (checked out files not available in install step)
  #               ;;
  #             alpine*)
  #               # chmod +x deps-alpine-build.sh && ./deps-alpine-build.sh
  #               ;;
  #           esac
           
            
  #         # Produce a binary artifact and place it in the mounted volume
  #         run: |
  #           echo "Run!..."
  #           case "${{ matrix.distro }}" in
  #             ubuntu*|jessie|stretch|buster|bullseye)
  #               chmod +x deps-debian-build.sh && ./deps-debian-build.sh
  #               # TODO ^ do in install step instead
  #               ;;
  #             alpine*)
  #               chmod +x deps-alpine-build.sh && ./deps-alpine-build.sh
  #               ;;
  #           esac
  #           # . "/opt/asdf/asdf.sh"
  #           just config
  #           just mix "deps.get --only prod"
  #           just rel-build
  #           cd _build/prod/rel && tar -czvf /artifacts/${artifact_name} bonfire
  #           echo "Produced artifact at /artifacts/${artifact_name}"

  #     - name: List the artifacts
  #       # Items placed in /artifacts in the container will be in
  #       # ${PWD}/artifacts on the host.
  #       run: |
  #         ls -al "${PWD}/artifacts"
  #     - name: Release to github
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: "${PWD}/artifacts/*"
  #         name: Unstable - ${{ steps.version.outputs.tag }}
  #         tag_name: ${{ steps.version.outputs.tag }}
